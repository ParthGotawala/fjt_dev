(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5136:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2021 *********************************** */
                /* **************************** Add Script Version -> 11-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5137,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5137:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2021 *********************************** */
                "ALTER TABLE `component`  \n" +
                "ADD COLUMN `mfgType` VARCHAR(5) NOT NULL;  \n" +
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5138,'2.00','V1',' User Story 35114: Add mfgType field in part master table and check transaction level testing - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5138:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2021 *********************************** */
                "UPDATE component c inner join mfgcodemst mfg on mfg.id = c.mfgcodeID  \n" +
                "SET c.mfgType = mfg.mfgType;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  \n" +
                "				  limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        custAssyPN  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  \n" +
                "				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsAttribute  then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "			toPart.`pitch` = fromPart.pitch,  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "			toPart.`length` = fromPart.length,  \n" +
                "			toPart.`width` = fromPart.width,  \n" +
                "			toPart.`heightText` = fromPart.heightText,  \n" +
                "			toPart.`height` = fromPart.height,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsSettings then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "			toPart.`eau` = fromPart.eau,  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "		IF pIsAdditionalAttibute then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "			from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                "			toPart.`voltage` = fromPart.voltage,  \n" +
                "			toPart.`value` = fromPart.value,  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                "			toPart.`weight` = fromPart.weight,  \n" +
                "			toPart.`feature` = fromPart.feature,  \n" +
                "			toPart.`color` = fromPart.color,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsPackagingDetail then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                "			toPart.`minimum` = fromPart.minimum,  \n" +
                "			toPart.`mult` = fromPart.mult,  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "			toPart.`uom` = fromPart.uom,  \n" +
                "			toPart.`uomText` = fromPart.uomText,  \n" +
                "			toPart.`unit` = fromPart.unit,  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		if pIsStandards then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				-- commit;  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5139,'2.00','V1',' User Story 35114: Add mfgType field in part master table and check transaction level testing - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5139:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyListByFieldName`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyListByFieldName`(  \n" +
                "	IN psearchString VARCHAR(1000),  \n" +
                "	IN pfield VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    	select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',com.productionPN) as mfgPN, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',com.productionPN) as PIDCode  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "		where (com.PIDCode like concat('%',psearchString,'%') OR com.mfgPN like concat('%',psearchString,'%'))and com.isDeleted = 0 and com.category = 3;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5140,'2.00','V1','User Story 35892: Demo improvement point suggested by jaybhai [30-08-2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5140:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyListByFieldName`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyListByFieldName`(  \n" +
                "	IN psearchString VARCHAR(1000),  \n" +
                "	IN pfield VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    	select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',com.productionPN) as mfgPN, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',com.productionPN) as PIDCode  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "		where (com.PIDCode like concat('%',psearchString,'%') OR com.mfgPN like concat('%',psearchString,'%') OR com.productionPN like concat('%',psearchString,'%'))and com.isDeleted = 0 and com.category = 3;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5141,'2.00','V1','User Story 35892: Demo improvement point suggested by jaybhai [30-08-2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5141:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWarehouseID INT;  \n" +
                "    DECLARE vParentWHID INT;  \n" +
                "  \n" +
                "    SELECT 	b.warehouseID, 	w.parentWHID  \n" +
                "		INTO vWarehouseID,	vParentWHID  \n" +
                "    FROM binmst b  \n" +
                "    JOIN warehousemst w ON b.warehouseID = w.id AND w.isDeleted = 0  \n" +
                "    AND b.id = NEW.binID;  \n" +
                "  \n" +
                "	IF (NEW.fromWarehouse IS NULL OR NEW.fromDepartment IS NULL) THEN  \n" +
                "		SET NEW.fromWarehouse = vWarehouseID ,  \n" +
                "			NEW.fromDepartment = vParentWHID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5142,'2.00','V1','Bug 36111: [Main Branch] From Warehouse is showing NULL data in UMID - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5142:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWarehouseID INT;  \n" +
                "   DECLARE vParentWHID INT;  \n" +
                "  \n" +
                "	IF (NEW.fromWarehouse IS NULL OR NEW.fromDepartment IS NULL) THEN  \n" +
                "    SELECT 	b.warehouseID, 	w.parentWHID  \n" +
                "		INTO vWarehouseID,	vParentWHID  \n" +
                "    FROM binmst b  \n" +
                "    JOIN warehousemst w ON b.warehouseID = w.id AND w.isDeleted = 0  \n" +
                "    AND b.id = NEW.fromBin;  \n" +
                "  \n" +
                "		SET NEW.fromWarehouse = vWarehouseID ,  \n" +
                "			NEW.fromDepartment = vParentWHID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5143,'2.00','V1','Review changes given by DV for Bug #36111 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5143:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL)THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL )THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL)THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL)THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5144,'2.00','V1','Bug 36111: [Main Branch] From Warehouse is showing NULL data in UMID - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5144:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN != \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                "	AND rl.duplicateCPNStep = 1);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						IF(currMFGPNID > 0 ) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MFR PN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5145,'2.00','V1',' Bug 36159: Receive error on add CPN part from BOM - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5145:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2021 *********************************** */
                "update page_detail  \n" +
                "   set pageName = 'Supplier RMA & RMA Packing Slip',  \n" +
                "		menuName = 'Supplier RMA & RMA Packing Slip',  \n" +
                "		displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
                " where pageName = 'Supplier RMA';  \n" +
                "update page_detail  \n" +
                "   set pageName = 'RMA & RMA Packing Slip',  \n" +
                "		menuName = 'RMA & RMA Packing Slip',  \n" +
                "		displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
                " where pageName = 'Invoice Supplier RMA';  \n" +
                "update page_detail  \n" +
                "   set pageName = 'Manage Supplier RMA & RMA Packing Slip',  \n" +
                "		menuName = 'Add Supplier RMA & RMA Packing Slip',  \n" +
                "        displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
                "where pageName = 'Manage Supplier RMA';  \n" +
                /* **************************** Add Script Version -> 17-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5146,'2.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5146:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                "drop function if exists `fun_getPackingSlipDetailStatusByKey`;  \n" +
                "CREATE FUNCTION `fun_getPackingSlipDetailStatusByKey`(  \n" +
                "	pKey VARCHAR(2)  \n" +
                ") RETURNS varchar(100) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_status VARCHAR(100);  \n" +
                "	IF pKey='P' THEN  \n" +
                "		SET v_status='Pending';  \n" +
                "	ELSEIF pKey='A' THEN  \n" +
                "		SET v_status='Accepted';  \n" +
                "	ELSEIF pKey='R' THEN  \n" +
                "		SET v_status='Rejected';  \n" +
                "	ELSEIF pKey='AD' THEN  \n" +
                "		SET v_status='Accepted with Deviation';  \n" +
                "	ELSE  \n" +
                "		SET v_status=NULL;  \n" +
                "	END IF;  \n" +
                "	RETURN v_status;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5147,'2.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5147:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pPackingslipWithRejectedLines tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.totalDetailLine itemReceived,  \n" +
                "							psm.totalRejectLine totalRejectedLine,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')  \",  \n" +
                "			case when pPackingslipWithRejectedLines = true then  \n" +
                "					\" and exists (select 1 from packing_slip_material_receive_det d where d.refPackingSlipMaterialRecID = p.id and d.receivedStatus = 'R') \"  \n" +
                "				else ' ' end,  \n" +
                "			\"	) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierRMAList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "	IN pMfrPnId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
                "		IF (pSearchType = 'contains') THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		ELSE  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
                "		SELECT	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		p.id,  \n" +
                "						p.systemId,  \n" +
                "						p.receiptType,  \n" +
                "						p.packingSlipModeStatus rmaModeStatus,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) rmaModeStatusValue,  \n" +
                "						p.`status`,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.status = 'D' THEN 'Draft'  \n" +
                "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
                "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
                "								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
                "								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "								WHEN p.status = 'P' THEN 'Paid'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) statusValue,  \n" +
                "						p.mfgCodeID,  \n" +
                "						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "						p.poNumber rmaNumber,  \n" +
                "						p.poDate rmaDate,  \n" +
                "						p.packingSlipNumber,  \n" +
                "						p.packingSlipDate,  \n" +
                "						p.receiptDate shippedDate,  \n" +
                "						IFNULL(g.cnt,0) rmaDocCount,  \n" +
                "						psm.totalDetailLine itemReturn,  \n" +
                "						ps.id refCreditMemoId,  \n" +
                "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
                "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
                "						ps.creditMemoDate refCreditMemoDate,  \n" +
                "						p.remark,  \n" +
                "						p.internalRemark,  \n" +
                "						p.shippingMethodId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
                "						p.carrierId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
                "						p.carrierAccountNumber,  \n" +
                "						p.shippingInsurance,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
                "								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) shippingInsuranceValue,  \n" +
                "						p.rmaShippingAddress,  \n" +
                "						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                        p.lockStatus,  \n" +
                "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when p.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatusValue,  \n" +
                "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "				FROM 		packing_slip_material_receive p  \n" +
                "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
                "							FROM 		packing_slip_material_receive_det psm  \n" +
                "							WHERE 		isDeleted = 0  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
                "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
                "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
                "			) AS a  \n" +
                "		WHERE \", v_advanceFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5148,'2.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5148:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_component`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds  \n" +
                "					select GROUP_CONCAT(id) id  \n" +
                "					  from component  \n" +
                "					 where systemGenerated = false  \n" +
                "                       and id in (',IDs,')  \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');  \n" +
                "		PREPARE stmt FROM @sqlIds;  \n" +
                "        EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "	SELECT id INTO IDs  \n" +
                "    FROM tempComponentIds;  \n" +
                "    SET @deletedByUser = deletedBy;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;  \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as  \n" +
                "				select sum(cnt) cnt, msg, min(componentID) componentID  \n" +
                "                from (  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)  \n" +
                "					UNION ALL  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)  \n" +
                "					UNION ALL  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') or refSupplierPartId IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(partID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(supplierPartID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND supplierPartID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg, min(mfgPartID) componentID FROM purchase_order_det WHERE deletedAt IS NULL AND (mfgPartID IN(',IDs,') OR supplierPartID IN(',IDs,')) LIMIT 1)  \n" +
                "					union all  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "					union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"P\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"I\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"C\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                ) q group by msg');  \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "        EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "        IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- MISC DATA  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "  \n" +
                "				-- start delete packaging alias  \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					UPDATE component c  \n" +
                "					   SET packaginggroupID = NULL,  \n" +
                "							updatedBy = @deletedByUser,  \n" +
                "							updateByRoleId = pRoleID,  \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					 WHERE isdeleted = FALSE  \n" +
                "					   AND EXISTS (SELECT c1.componentID  \n" +
                "							 FROM component_packagingalias c1  \n" +
                "								WHERE c1.isdeleted = FALSE  \n" +
                "                                  AND c1.componentID = c.id  \n" +
                "								  AND c1.aliasgroupID IN  \n" +
                "										(SELECT c2.aliasgroupID  \n" +
                "										   FROM component_packagingalias c2  \n" +
                "										  WHERE c2.isdeleted = FALSE  \n" +
                "										  GROUP BY c2.aliasgroupID  \n" +
                "										 HAVING COUNT(1)=1));  \n" +
                "  \n" +
                "				UPDATE component_packagingalias a  \n" +
                "                JOIN (SELECT c2.aliasgroupID  \n" +
                "							FROM component_packagingalias c2  \n" +
                "							WHERE c2.isdeleted = FALSE  \n" +
                "							GROUP BY c2.aliasgroupID  \n" +
                "							HAVING COUNT(1)=1) b  \n" +
                "				   SET a.isDeleted = 1,  \n" +
                "						a.deletedBy = @deletedByUser,  \n" +
                "						a.deleteByRoleId = pRoleID,  \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE a.isdeleted = FALSE  \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;  \n" +
                "				-- end delete packaging alias  \n" +
                "  \n" +
                "                -- start delete RoHS alias  \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				UPDATE component c  \n" +
                "				 SET rohsgroupID = NULL,  \n" +
                "					updatedBy = @deletedByUser,  \n" +
                "					updateByRoleId = pRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE isdeleted = FALSE  \n" +
                "					  AND EXISTS (  \n" +
                "						SELECT c1.componentID  \n" +
                "						 FROM component_rohsalternatepn c1  \n" +
                "						WHERE c1.isdeleted = FALSE  \n" +
                "                         AND c1.componentID = c.id  \n" +
                "						  AND c1.aliasgroupID IN  \n" +
                "								(SELECT c2.aliasgroupID  \n" +
                "								   FROM component_rohsalternatepn c2  \n" +
                "									WHERE c2.isdeleted = FALSE  \n" +
                "									GROUP BY c2.aliasgroupID  \n" +
                "									HAVING COUNT(1)=1));  \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a  \n" +
                "                JOIN (SELECT c2.aliasgroupID  \n" +
                "							   FROM component_rohsalternatepn c2  \n" +
                "								WHERE c2.isdeleted = FALSE  \n" +
                "								GROUP BY c2.aliasgroupID  \n" +
                "								HAVING COUNT(1)=1) b  \n" +
                "					SET a.isDeleted = 1,  \n" +
                "						a.deletedBy = @deletedByUser,  \n" +
                "						a.deleteByRoleId = pRoleID,  \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE a.isdeleted = FALSE  \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;  \n" +
                "                -- start delete RoHS alias  \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_functionaltestingequipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "                -- Document Data  \n" +
                "                SET @SQl1 = CONCAT('update genericfiles set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and entityID =',entityID,' and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update generic_folder set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and entityID =',entityID,' and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "                -- Customer LOA Data  \n" +
                "                SET @SQl1 = CONCAT('update component_customer_loa set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update genericfiles set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where  gencFileOwnerType = ''component_customer_loa'' and refTransID in (select Id from component_customer_loa where componentID IN(',IDs,')) and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Comments  \n" +
                "                SET @SQl1 = CONCAT('update componenet_inspection_requirement_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update assembly_revision_comments set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Disapproved Supplier  \n" +
                "				SET @SQl1 = CONCAT('update component_approved_supplier_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "                -- Sales Price Matrix  \n" +
                "				SET @SQl1 = CONCAT('update component_price_break_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where mfgPNID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Part Images  \n" +
                "				SET @SQl1 = CONCAT('update component_images set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Part Datasheet  \n" +
                "				SET @SQl1 = CONCAT('update component_datasheets set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Operational Attributes  \n" +
                "				SET @SQl1 = CONCAT('update component_dynamic_attribute_mapping_part set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where mfgPNID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				-- Acceptable Shipping Countries  \n" +
                "				SET @SQl1 = CONCAT('update component_acceptable_shipping_countries set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType  \n" +
                "				   FROM tempComponent t1  \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                    LEFT JOIN component co ON co.id = t1.componentID  \n" +
                "					JOIN mfgcodemst mf ON mf.id = co.mfgcodeid  \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "					ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempComponent;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5149,'2.00','V1',' User Story 32156: Add new feature - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5149:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateKitAllocationAssyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailID INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "	IN pMrpQty INT,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pActionStatus VARCHAR(50),  \n" +
                "	IN pRoleID INT,  \n" +
                "    IN pIsOnlyQtyChange TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_assyDataCount INT;  \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);  \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "	SELECT 	ps.prPerPartID,  \n" +
                "			c.liveInternalVersion,  \n" +
                "			c.liveVersion,  \n" +
                "			max(ps.level) level  \n" +
                "	FROM 		part_sub_assy_relationship ps  \n" +
                "	JOIN		component c ON c.id = ps.prPerPartID  \n" +
                "	WHERE 		ps.PartID = pPartID  \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "	AND 		ps.isDeleted = 0  \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "	SELECT 	COUNT(1)  \n" +
                "	INTO 	v_assyDataCount  \n" +
                "	FROM 	tempSubAmmseblyData  \n" +
                "	WHERE 	prPerPartID = pPartID;  \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted  \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail  \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "				AND isAssembly = 1  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,  \n" +
                "				pKitQty AS kitQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  \n" +
                "				pMrpQty AS mrpQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,  \n" +
                "				pUserID AS updatedBy,  \n" +
                "				pUserID AS createdBy,  \n" +
                "				pRoleID AS createByRoleId,  \n" +
                "				pRoleID AS updateByRoleId  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS  \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id,  \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,  \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,  \n" +
                "				uomID, 		partID,		numOfPosition, 		description,  \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep,  \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,  \n" +
                "				isNotRequiredKitAllocation,  \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,  \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,  \n" +
                "                customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep,  duplicateCPNStep,  \n" +
                "				requireMountingTypeStep, requireFunctionalTypeStep, refDesigCount, isObsoleteLine,  \n" +
                "				customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount,  \n" +
                "				requireMountingTypeError, requireFunctionalTypeError, dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep,  \n" +
                "				customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "		FROM 		rfq_lineitems rl  \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */  \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "										WHERE temp.prPerPartid = partid)  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS  \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id,  \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,  \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,  \n" +
                "			description,		RoHSStatusID,  \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,  \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,  \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep,  \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,  \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,  \n" +
                "			deleteByRoleId,mfgVerificationStep, mfgDistMappingStep, mfgCodeStep, distVerificationStep, distCodeStep,  \n" +
                "			getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep, mfgPNStep, distPNStep,  \n" +
                "			badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep, duplicateMPNInSameLineStep,  \n" +
                "			pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep, functionalTestingRequiredStep,  \n" +
                "			mismatchValueStep, mismatchPackageStep, mismatchToleranceStep, mismatchTempratureStep, mismatchPowerStep,  \n" +
                "			programingRequiredStep, mismatchColorStep, isCustomerUnAppoval, customerUnAppovalBy,  \n" +
                "			customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep,  \n" +
                "			tbdPartStep, exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep,  \n" +
                "			suggestedGoodPartStep, suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep,  \n" +
                "			mismatchCustomPartStep, suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "		FROM 	rfq_lineitems_alternatepart rla  \n" +
                "		WHERE 	EXISTS  ( SELECT 1 FROM rfq_LineItems rl  \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "															WHERE temp.prPerPartid = partid)  \n" +
                "									AND rl.id =  rla.rfqLineItemsID  \n" +
                "    AND rl.isdeleted = 0)  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */  \n" +
                "		IF (pActionStatus = 'DELETE')  \n" +
                "        THEN  \n" +
                "			/* Delete from kit_allocation_assy_detail */  \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "			SET 	kasd.updatedBy = pUserID,  \n" +
                "				kasd.isDeleted = 1,  \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kasd.deletedBy = pUserId,  \n" +
                "				kasd.updateByRoleId = pRoleID,  \n" +
                "				kasd.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */  \n" +
                "			UPDATE 	kit_allocation_lineitems kal  \n" +
                "			SET 	kal.updatedBy = pUserID,  \n" +
                "				kal.isDeleted = 1,  \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kal.deletedBy = pUserId,  \n" +
                "				kal.updateByRoleId = pRoleID,  \n" +
                "				kal.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */  \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "			SET 	kala.updatedBy = pUserID,  \n" +
                "				kala.isDeleted = 1,  \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kala.deletedBy = pUserId,  \n" +
                "				kala.updateByRoleId = pRoleID,  \n" +
                "				kala.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "			UPDATE 	kit_allocation ka  \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "				ka.returnUnit = ka.allocatedUnit,  \n" +
                "				ka.returnUOM = ka.allocatedUOM,  \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "				ka.updatedBy = pUserID,  \n" +
                "				ka.updateByRoleId = pRoleID,  \n" +
                "				ka.`status` = 'D',  \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND ka.`status` = 'A';  \n" +
                "  \n" +
                "			-- Delete release plan detail  \n" +
                "			UPDATE 	salesorder_plan_detailsmst  \n" +
                "			SET 	isDeleted = 1,  \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				deletedBy = pUserId  \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */  \n" +
                "		IF (pActionStatus != 'DELETE') THEN  \n" +
                "			IF (pActionStatus = 'UPDATE')  \n" +
                "            THEN  \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "				SET 	kasd.updatedBy = pUserID,  \n" +
                "					kasd.isDeleted = 1,  \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kasd.deletedBy = pUserId,  \n" +
                "					kasd.updateByRoleId = pRoleID,  \n" +
                "					kasd.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems kal  \n" +
                "				SET 	kal.updatedBy = pUserID,  \n" +
                "					kal.isDeleted = 1,  \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kal.deletedBy = pUserId,  \n" +
                "					kal.updateByRoleId = pRoleID,  \n" +
                "					kal.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "				SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)  \n" +
                "				IF(pIsOnlyQtyChange = 0) THEN  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "						ka.updatedBy = pUserID,  \n" +
                "						ka.updateByRoleId = pRoleID,  \n" +
                "						ka.`status` = 'D',  \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND ka.`status` = 'A';  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "            THEN  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "                THEN  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */  \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "					SET 	kasd.updatedBy = pUserID,  \n" +
                "							kasd.isDeleted = 1,  \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "							kasd.deletedBy = pUserId,  \n" +
                "							kasd.updateByRoleId = pRoleID,  \n" +
                "							kasd.deleteByRoleId = pRoleID  \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND NOT EXISTS (SELECT 	1  \n" +
                "													FROM 	tempResultForUpdate r  \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID  \n" +
                "															AND r.prPerPartID = kasd.partId)  \n" +
                "								AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal  \n" +
                "					SET 	kal.updatedBy = pUserID,  \n" +
                "						kal.isDeleted = 1,  \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kal.deletedBy = pUserId,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "						kal.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kal.partID = pPartID  \n" +
                "							AND NOT EXISTS ( 	SELECT 	1  \n" +
                "								FROM 	tempResultForLineItem r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID  \n" +
                "										AND r.partID = kal.partID  \n" +
                "										AND r.id = kal.refRfqLineitem  	)  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kala.partID = pPartID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "												FROM 	tempResultForLineItemAlternatePart r  \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "														AND r.partID = kala.partID  \n" +
                "														AND r.mfgPNID = kala.mfgPNID  \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )  \n" +
                "						AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */  \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/  \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd  \n" +
                "				SET 	ka.partId = tsd.prPerPartID,  \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,  \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,  \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,  \n" +
                "					ka.kitQty = tsd.kitQty,  \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,  \n" +
                "					ka.mrpQty = tsd.mrpQty,  \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,  \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,  \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,  \n" +
                "					ka.updatedBy = tsd.updatedBy,  \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId  \n" +
                "				WHERE	ka.id IS NOT NULL  \n" +
                "						AND ka.partId = tsd.prPerPartID  \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND ka.isDeleted = 0;  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                " THEN  \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt  \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,  \n" +
                "						kal.refRfqLineitem = tlt.id,  \n" +
                "						kal.lineID = tlt.lineID,  \n" +
                "						kal.qpa = tlt.qpa,  \n" +
                "						kal.dnpQty = tlt.dnpQty,  \n" +
                "						kal.isInstall = tlt.isInstall,  \n" +
                "						kal.isPurchase = tlt.isPurchase,  \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,  \n" +
                "						kal.custPN = tlt.custPN,  \n" +
                "						kal.custPNID = tlt.custPNID,  \n" +
                "						kal.uomID = tlt.uomID,  \n" +
                "						kal.partID = tlt.partID,  \n" +
                "						kal.numOfPosition = tlt.numOfPosition,  \n" +
                "						kal.description = tlt.description,  \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,  \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,  \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,  \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,  \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,  \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,  \n" +
                "						kal.updatedBy = pUserID,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "                        kal.refDesig = tlt.refDesig,  \n" +
                "                        kal.customerRev = tlt.customerRev,  \n" +
                "                        kal.customerDescription = tlt.customerDescription,  \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,  \n" +
                "                        kal.programingStatus = tlt.programingStatus,  \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,  \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,  \n" +
                "                        kal.numOfRows = tlt.numOfRows,  \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc,  \n" +
                "                        kal.qpaDesignatorStep = tlt.qpaDesignatorStep,  \n" +
                "						kal.mergeLines = tlt.mergeLines,  \n" +
                "						kal.lineMergeStep = tlt.lineMergeStep,  \n" +
                "						kal.duplicateCPNStep = tlt.duplicateCPNStep,  \n" +
                "						kal.requireMountingTypeStep = tlt.requireMountingTypeStep,  \n" +
                "						kal.requireFunctionalTypeStep = tlt.requireFunctionalTypeStep,  \n" +
                "						kal.refDesigCount = tlt.refDesigCount,  \n" +
                "						kal.isObsoleteLine = tlt.isObsoleteLine,  \n" +
                "						kal.customerApprovalForQPAREFDESStep = tlt.customerApprovalForQPAREFDESStep,  \n" +
                "						kal.customerApprovalForBuyStep = tlt.customerApprovalForBuyStep,  \n" +
                "						kal.customerApprovalForPopulateStep = tlt.customerApprovalForPopulateStep,  \n" +
                "						kal.customerApprovalCPNBy = tlt.customerApprovalCPNBy,  \n" +
                "						kal.customerApprovalCPNDate = tlt.customerApprovalCPNDate,  \n" +
                "						kal.dnpDesigCount = tlt.dnpDesigCount,  \n" +
                "						kal.requireMountingTypeError = tlt.requireMountingTypeError,  \n" +
                "						kal.requireFunctionalTypeError = tlt.requireFunctionalTypeError,  \n" +
                "						kal.dnpQPARefDesStep = tlt.dnpQPARefDesStep,  \n" +
                "						kal.customerApprovalForDNPQPAREFDESStep = tlt.customerApprovalForDNPQPAREFDESStep,  \n" +
                "						kal.customerApprovalForDNPBuyStep = tlt.customerApprovalForDNPBuyStep,  \n" +
                "						kal.isSupplierToBuy = tlt.isSupplierToBuy  \n" +
                "					WHERE	kal.id IS NOT NULL  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  \n" +
                "										AND kala.id IS NOT NULL  \n" +
                "							)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia  \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,  \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,  \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,  \n" +
                "						kala.distributor = tlia.distributor,  \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,  \n" +
                "						kala.distPN = tlia.distPN,  \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,  \n" +
                "						kala.mfgCode = tlia.mfgCode,  \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,  \n" +
                "						kala.mfgPN = tlia.mfgPN,  \n" +
                "						kala.mfgPNID = tlia.mfgPNID,  \n" +
                "						kala.description = tlia.description,  \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,  \n" +
                "						kala.parttypeID = tlia.parttypeID,  \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,  \n" +
                "						kala.partcategoryID = tlia.partcategoryID,  \n" +
                "						kala.partID = tlia.partID,  \n" +
                "						kala.customerApproval = tlia.customerApproval,  \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,  \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,  \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,  \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,  \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,  \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,  \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,  \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,  \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,  \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,  \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "						kala.updatedBy = pUserID,  \n" +
                "						kala.updateByRoleId=pRoleID,  \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId,  \n" +
                "                        kala.mfgVerificationStep = tlia.mfgVerificationStep,  \n" +
                "						kala.mfgDistMappingStep = tlia.mfgDistMappingStep,  \n" +
                "						kala.mfgCodeStep = tlia.mfgCodeStep,  \n" +
                "						kala.distVerificationStep = tlia.distVerificationStep,  \n" +
                "						kala.distCodeStep = tlia.distCodeStep,  \n" +
                "						kala.getMFGPNStep = tlia.getMFGPNStep,  \n" +
                "						kala.obsoletePartStep = tlia.obsoletePartStep,  \n" +
                "						kala.mfgGoodPartMappingStep = tlia.mfgGoodPartMappingStep,  \n" +
                "						kala.mfgPNStep = tlia.mfgPNStep,  \n" +
                "						kala.distPNStep = tlia.distPNStep,  \n" +
                "						kala.badMfgPN = tlia.badMfgPN,  \n" +
                "						kala.distGoodPartMappingStep = tlia.distGoodPartMappingStep,  \n" +
                "						kala.nonRohsStep = tlia.nonRohsStep,  \n" +
                "						kala.epoxyStep = tlia.epoxyStep,  \n" +
                "						kala.invalidConnectorTypeStep = tlia.invalidConnectorTypeStep,  \n" +
                "						kala.duplicateMPNInSameLineStep = tlia.duplicateMPNInSameLineStep,  \n" +
                "						kala.pickupPadRequiredStep = tlia.pickupPadRequiredStep,  \n" +
                "						kala.matingPartRquiredStep = tlia.matingPartRquiredStep,  \n" +
                "						kala.driverToolsRequiredStep = tlia.driverToolsRequiredStep,  \n" +
                "						kala.functionalTestingRequiredStep = tlia.functionalTestingRequiredStep,  \n" +
                "						kala.mismatchValueStep = tlia.mismatchValueStep,  \n" +
                "						kala.mismatchPackageStep = tlia.mismatchPackageStep,  \n" +
                "						kala.mismatchToleranceStep = tlia.mismatchToleranceStep,  \n" +
                "						kala.mismatchTempratureStep = tlia.mismatchTempratureStep,  \n" +
                "						kala.mismatchPowerStep = tlia.mismatchPowerStep,  \n" +
                "						kala.programingRequiredStep = tlia.programingRequiredStep,  \n" +
                "						kala.mismatchColorStep = tlia.mismatchColorStep,  \n" +
                "						kala.isCustomerUnAppoval = tlia.isCustomerUnAppoval,  \n" +
                "						kala.customerUnAppovalBy = tlia.customerUnAppovalBy,  \n" +
                "						kala.customerUnAppovalDate = tlia.customerUnAppovalDate,  \n" +
                "						kala.mismatchNumberOfRowsStep = tlia.mismatchNumberOfRowsStep,  \n" +
                "						kala.partPinIsLessthenBOMPinStep = tlia.partPinIsLessthenBOMPinStep,  \n" +
                "						kala.tbdPartStep = tlia.tbdPartStep,  \n" +
                "						kala.exportControlledStep = tlia.exportControlledStep,  \n" +
                "						kala.isUnlockApprovedPart = tlia.isUnlockApprovedPart,  \n" +
                "						kala.unknownPartStep = tlia.unknownPartStep,  \n" +
                "						kala.defaultInvalidMFRStep = tlia.defaultInvalidMFRStep,  \n" +
                "						kala.suggestedGoodPartStep = tlia.suggestedGoodPartStep,  \n" +
                "						kala.suggestedGoodDistPartStep = tlia.suggestedGoodDistPartStep,  \n" +
                "						kala.mismatchRequiredProgrammingStep = tlia.mismatchRequiredProgrammingStep,  \n" +
                "						kala.mappingPartProgramStep = tlia.mappingPartProgramStep,  \n" +
                "						kala.mismatchCustomPartStep = tlia.mismatchCustomPartStep,  \n" +
                "						kala.suggestedByApplicationMsg = tlia.suggestedByApplicationMsg,  \n" +
                "						kala.suggestedByApplicationStep = tlia.suggestedByApplicationStep,  \n" +
                "						kala.mismatchProgrammingStatusStep = tlia.mismatchProgrammingStatusStep  \n" +
                "					WHERE	kala.id IS NOT NULL  \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID  \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID  \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/*SELECT * from tempResultForUpdate;  \n" +
                "			 SELECT 	ts.prPerPartID,		ts.salesOrderDetailID,		ts.perAssyBuildQty, 		ts.totalAssyBuildQty,  \n" +
                "				ts.kitQty,			ts.totalAssyMrpQty,		ts.mrpQty,			ts.liveInternalVersion,  \n" +
                "				ts.liveVersion,		ts.bomAssyLevel,		ts.updatedBy, 			ts.createdBy,  \n" +
                "				ts.createByRoleId, 		ts.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate ts  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = ts.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = ts.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL; */  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */  \n" +
                "			INSERT INTO kit_allocation_assy_detail (  \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,  \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,  \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,  \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId  \n" +
                "			)  \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,  \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,  \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,  \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate tsd  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */  \n" +
                "			INSERT INTO kit_allocation_lineitems (  \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,  \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,  \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,  \n" +
                "				numOfPosition,  		description,     		restrictCPNUseWithPermissionStep,  \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,  \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,  \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep, duplicateCPNStep, requireMountingTypeStep, requireFunctionalTypeStep,  \n" +
                "				refDesigCount, isObsoleteLine, customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount, requireMountingTypeError, requireFunctionalTypeError,  \n" +
                "				dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep, customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "			)  \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa,  \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,  \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID,  \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep,  \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,  \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,  \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,  \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc,  \n" +
                "                tlt.qpaDesignatorStep, 	tlt.mergeLines, 	tlt.lineMergeStep, 		tlt.duplicateCPNStep, 		tlt.requireMountingTypeStep,  \n" +
                "                tlt.requireFunctionalTypeStep, 	tlt.refDesigCount, 		tlt.isObsoleteLine, 	tlt.customerApprovalForQPAREFDESStep,  \n" +
                "                tlt.customerApprovalForBuyStep, 	tlt.customerApprovalForPopulateStep, 	tlt.customerApprovalCPNBy,  \n" +
                "                tlt.customerApprovalCPNDate, 	tlt.dnpDesigCount, 		tlt.requireMountingTypeError, 	tlt.requireFunctionalTypeError,  \n" +
                "				tlt.dnpQPARefDesStep, 		tlt.customerApprovalForDNPQPAREFDESStep, 		tlt.customerApprovalForDNPBuyStep, 	tlt.isSupplierToBuy  \n" +
                "			FROM 	tempResultForLineItem tlt  \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.partID = tlt.partID  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.isDeleted = 0  \n" +
                "			WHERE 	kal.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */  \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (  \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,  \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,  \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,  \n" +
                "				description,    		RoHSStatusID,  \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,  \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,  \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,  \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,  \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,  \n" +
                "				updatedBy,    createByRoleId,    	updateByRoleId,   mfgVerificationStep, 	mfgDistMappingStep,  \n" +
                "				mfgCodeStep, distVerificationStep, distCodeStep, getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep,  \n" +
                "				mfgPNStep, distPNStep, badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep,  \n" +
                "				duplicateMPNInSameLineStep, pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep,  \n" +
                "				functionalTestingRequiredStep, mismatchValueStep, mismatchPackageStep, mismatchToleranceStep,  \n" +
                "				mismatchTempratureStep, mismatchPowerStep, programingRequiredStep, mismatchColorStep, isCustomerUnAppoval,  \n" +
                "				customerUnAppovalBy, customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep, tbdPartStep,  \n" +
                "				exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep, suggestedGoodPartStep,  \n" +
                "				suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep, mismatchCustomPartStep,  \n" +
                "				suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "			)  \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,  \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID,  \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID,  \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,  \n" +
                "                tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID,  \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,  \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep,  \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep,  \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,  \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				pUserID, pUserID,    pRoleID,     pRoleID, tlia.mfgVerificationStep, 	tlia.mfgDistMappingStep,  \n" +
                "				tlia.mfgCodeStep, tlia.distVerificationStep, tlia.distCodeStep, tlia.getMFGPNStep, tlia.obsoletePartStep, tlia.mfgGoodPartMappingStep,  \n" +
                "				tlia.mfgPNStep, tlia.distPNStep, tlia.badMfgPN, tlia.distGoodPartMappingStep, tlia.nonRohsStep, tlia.epoxyStep, tlia.invalidConnectorTypeStep,  \n" +
                "				tlia.duplicateMPNInSameLineStep, tlia.pickupPadRequiredStep, tlia.matingPartRquiredStep, tlia.driverToolsRequiredStep,  \n" +
                "				tlia.functionalTestingRequiredStep, tlia.mismatchValueStep, tlia.mismatchPackageStep, tlia.mismatchToleranceStep,  \n" +
                "				tlia.mismatchTempratureStep, tlia.mismatchPowerStep, tlia.programingRequiredStep, tlia.mismatchColorStep, tlia.isCustomerUnAppoval,  \n" +
                "				tlia.customerUnAppovalBy, tlia.customerUnAppovalDate, tlia.mismatchNumberOfRowsStep, tlia.partPinIsLessthenBOMPinStep, tlia.tbdPartStep,  \n" +
                "				tlia.exportControlledStep, tlia.isUnlockApprovedPart, tlia.unknownPartStep, tlia.defaultInvalidMFRStep, tlia.suggestedGoodPartStep,  \n" +
                "				tlia.suggestedGoodDistPartStep, tlia.mismatchRequiredProgrammingStep, tlia.mappingPartProgramStep, tlia.mismatchCustomPartStep,  \n" +
                "				tlia.suggestedByApplicationMsg, tlia.suggestedByApplicationStep, tlia.mismatchProgrammingStatusStep  \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia  \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "							AND tlia.partID = kala.partID  \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem  \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID  \n" +
                "							AND kala.isDeleted = 0  \n" +
                "			WHERE 	kala.id IS NULL;  \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5150,'2.00','V1','Bug 36052: [Main Branch] Getting Multiple tabs for same Assembly should not be there in kit allocation - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5150:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "						SELECT 	salesOrderDetID,  \n" +
                "							(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "							MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_release_plan_detail  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "    SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentCPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCPNAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT * FROM (  \n" +
                "				SELECT 		`com`.`id`,  \n" +
                "						CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "						`com`.`mfgPN` orgMfgPN,  \n" +
                "						`com`.`PIDCode`,  \n" +
                "						`com`.`isGoodPart`,  \n" +
                "						`mfgCodemst`.`id` AS `mfgcodeID`,  \n" +
                "						`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "						`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "                        `mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "						`com`.`restrictUsePermanently`,  \n" +
                "						`com`.`restrictUSEwithpermission`,  \n" +
                "						`com`.`restrictPackagingUsePermanently`,  \n" +
                "						`com`.`restrictPackagingUseWithpermission`  \n" +
                "				FROM 		`component` AS `com`  \n" +
                "				INNER JOIN 	`mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND `mfgCodemst`.`deletedAt` IS NULL  \n" +
                "				WHERE 		`com`.`deletedAt` IS NULL  \n" +
                "							AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`)  \n" +
                "							AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
                "							AND `com`.`isCPN` = TRUE  \n" +
                "		) AS a  \n" +
                "	WHERE 	(  \n" +
                "			(pSearch IS NULL AND 1=1)  \n" +
                "			OR (  \n" +
                "				pSearch IS NOT NULL AND (  \n" +
                "					mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "						OR EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = `a` .`id`  \n" +
                "										AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "							)  \n" +
                "				)  \n" +
                "			)  \n" +
                "	)  \n" +
                "	ORDER BY mfgPN;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			salesOrderDetailID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* If component id is found */  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5151,'2.00','V1','Bug 36139: [Main Branch] UMID Creation issues for CPN and Without CPN - Need to discuss with DV for few issues - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5151:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore  \n" +
                "		FROM	(  \n" +
                "			SELECT 		sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					p.actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.mismatchItem,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0, FALSE)) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-08-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseIndication`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseIndication`(  \n" +
                "	pReleaseDayDiffwithCurrentDate INT,  \n" +
                "    pShortagePer INT,  \n" +
                "    pIsKitPlanningRequire TINYINT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Indication LONGTEXT;  \n" +
                "		DECLARE v_ShortageIndication INT;  \n" +
                "  \n" +
                "		IF(pShortagePer <> 100 AND pShortagePer <> 0 AND pShortagePer <= 30 )THEN  \n" +
                "				SET v_ShortageIndication = 1;  \n" +
                "			ELSE  \n" +
                "				SET v_ShortageIndication = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF pReleaseDayDiffwithCurrentDate <= 0 AND v_ShortageIndication = 1 THEN  \n" +
                "			 SET v_Indication= CONCAT((pReleaseDayDiffwithCurrentDate * -1),' day(s) passed due and shortage is less then 30%. <br/>');  \n" +
                "		ELSEIF pReleaseDayDiffwithCurrentDate >= 7 AND v_ShortageIndication = 1 THEN  \n" +
                "			SET v_Indication = CONCAT(pReleaseDayDiffwithCurrentDate,' day(s) are left to release next plan and shortage is less then 30%. <br/>');  \n" +
                "		ELSEIF pReleaseDayDiffwithCurrentDate <= 0 THEN  \n" +
                "			 SET v_Indication = CONCAT((pReleaseDayDiffwithCurrentDate * -1),' day(s) passed due. <br/>');  \n" +
                "		ELSEIF pReleaseDayDiffwithCurrentDate > 0 THEN  \n" +
                "			SET v_Indication = CONCAT(pReleaseDayDiffwithCurrentDate,' day(s) are left to release next plan. <br/>');  \n" +
                "		ELSEIF v_ShortageIndication = 1 THEN  \n" +
                "			SET v_Indication= 'Shortage is less then 30%. <br/>';  \n" +
                "		ELSE  \n" +
                "			SET v_Indication= NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsKitPlanningRequire = 1 THEN  \n" +
                "			SET v_Indication = CONCAT(IFNULL(v_Indication,''),'Kit Planning is required. <br/>');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	RETURN v_Indication;  \n" +
                "END;  \n" +
					/* **************************** New Script -> 19-08-2021  ********************************** */"DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				`vuss`.`Status` AS completedStatus,  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5152,'2.00','V1','User Story 36032: Kit List page: Set background color based on days left or passed release date - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5152:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  INT ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "		cd.subStatus,  \n" +
                "		cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) createdAt,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "         (select group_concat(trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumber,  \n" +
                "         (select COUNT(trackNumber) from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           (select count(1) from customer_packingslip_det packingdtl where packingdtl.refCustPackingSlipID = cd.id and  packingdtl.isDeleted = 0) packingSlipCnt  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	SET pWhereClause=CONCAT(pWhereClause, ' and FIND_IN_SET(packingSlipStatusValue,''', pfilterStatus ,''')');  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , '))');  \n" +
                "    END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5153,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5153:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "alter table user_configuration add defaultCustInvoiceListTabID int;  \n" +
                "  \n" +
                "alter table user_configuration add defaultCustCreditNoteListTabID int;  \n" +
                "  \n" +
                "alter table user_configuration add defaultCustPackingSlipListTabID int;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5154,'2.00','V1','Add Default tab column in  user_configuration - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5154:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "select pageID INTO @parentPageID from page_detail where pageName = 'Customer Credit Memo List';  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `createByRoleId`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Customer Credit Memo Summary', '0', '0', 'app.transaction.customercreditnote.summary', '/summarylist', 'Credit Memo', @parentPageID, '0', 'icons-customer-credit-memo', '1', '1', '0', '0', 'Customer Credit Memo', '1', '1', '0', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `createByRoleId`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES ('Customer Credit Memo Detail', '0', '0', 'app.transaction.customercreditnote.detail', '/detaillist', 'Credit Memo', @parentPageID, '0', 'icons-customer-credit-memo', '1', '1', '0', '0', 'Customer Credit Memo', '0', '1', '0', '0');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Credit Memo Summary');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Credit Memo Detail');  \n" +
                "  \n" +
                "select pageID INTO @parentPageID from page_detail where pageName = 'Customer Invoices';  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `isActive`, `createdBy`, `updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `updateByRoleId`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Customer Invoices Summary', '0', 'app.transaction.customerinvoice.summary', '/summarylist', 'Customer Invoice Summary', @parentPageID, '0', '1', '1', '1', '0', '0', 'Customer Invoice Summary', '1', '1', '0', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdBy`, `updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `createByRoleId`, `updateByRoleId`, `isPopup`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Customer Invoices Detail', '0', 'app.transaction.customerinvoice.detail', '/detaillist', 'Customer Invoice Detail', @parentPageID, '14.27', null, 'icon-customer0invoice-new', '1', '1', '1', '0', '1', 'Customer Invoice Detail', '1', '1', '1', '0', '0');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Invoices Summary');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Invoices Detail');  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5155,'2.00','V1','Add New Summary-Detail tab route in page_detail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5155:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getLineOtherChargesByPackignSlipDetId;  \n" +
                "CREATE PROCEDURE `Sproc_getLineOtherChargesByPackignSlipDetId`(  \n" +
                "	IN pCustPackingSlipDetId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "			SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName  \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpOther.refCustomerPackingSlipDetId = pCustPackingSlipDetId  \n" +
                "                 AND cpOther.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5156,'2.00','V1','Sproc_getLineOtherChargesByPackignSlipDetId  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5156:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "    IN pMarkedForRefund TINYINT  \n" +
                "    -- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         m.paymentTermsID custPaymentTermsId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,  \n" +
                "         gc.termsDays custTermsDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "    END IF;  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5157,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5157:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetailsPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
                "    IN pMarkedForRefund TINYINT,  \n" +
                "    IN pWithCommissionLine TINYINT,  \n" +
                "    IN pWithOtherChargesLine TINYINT,  \n" +
                "    IN pZeroAmountLineFilter TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,  \n" +
                "        cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "        cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cpd.shippingNotes , cpd.internalComment,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status, cp.subStatus,  \n" +
                "         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cpd.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
                "         m.paymentTermsID custPaymentTermsId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,  \n" +
                "         gc.termsDays custTermsDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,  \n" +
                "         cpd.id detID,  \n" +
                "         cpd.partId,  \n" +
                "         co.mfgpn,  \n" +
                "         cpd.assyDescription ,  \n" +
                "         co.PIDCode,  \n" +
                "         co.RoHSStatusID,  \n" +
                "         co.mfgcodeID,  \n" +
                "         co.nickname,  \n" +
                "         cpd.lineID,  \n" +
                "         cpd.reflineID,  \n" +
                "         cpd.custPOLineID,  \n" +
                "         cpd.shipQty,  \n" +
                "         cpd.unitPrice,  \n" +
                "         cpd.componentStockType,  \n" +
                "         cpd.extendedPrice,  \n" +
                "         othercharges AS lineOtherCharges,  \n" +
                "         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "		 cpd.quoteNumber,  \n" +
                "		 cpd.quoteFrom,  \n" +
                "         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
                "			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
                "              else null end) qtyTurnTimeID,  \n" +
                "		 cpd.assyQtyTurnTimeText,  \n" +
                "		 cpd.refRFQGroupID,  \n" +
                "         rohs.rohsIcon,  \n" +
                "         rohs.name rohsName,  \n" +
                "         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
                "         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
                "         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
                "         cp.totalAmount,  \n" +
                "         cp.refCustInvoiceID,  \n" +
                "         co.partType,  \n" +
                "         co.isCustom, co.custAssyPN customPartNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "        JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
                "        LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
                "        LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
                "	END IF;  \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWithCommissionLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pWithOtherChargesLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
                "    END IF;  \n" +
                "   IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5158,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetailsPerLine  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5158:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "select pageID INTO @parentPageID from page_detail where pageName = 'Customer Packing Slip';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES ('Customer Invoice Packing Slip Summary', '0', '0', 'app.transaction.customerpackingslipinvoice.summary', '/summarylist', 'Packing Slip', @parentPageID, '0', '14.020', 'icons-customer-ps', '1', '1', '0', '1', 'Customer Packing Slip', '0', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES ('Customer Invoice Packing Slip Detail', '0', '0', 'app.transaction.customerpackingslipinvoice.detail', '/detaillist', 'Packing Slip', @parentPageID, '0', '14.03', 'icons-customer-ps', '1', '1', '0', '1', 'Customer Packing Slip', '0', '0', '0');  \n" +
                "  \n" +
                "select pageID INTO @parentPageID from page_detail where pageName = 'Customer Invoice Packing Slip';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`,  `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Customer Packing Slip Summary', '0', '0', 'app.transaction.customerpacking.summary', '/summarylist', 'Packing Slip', @parentPageID, '0', '13.09', 'icons-customer-ps', '1', '1', '0', '1', 'Customer Packing Slip', '0', '0', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Customer Packing Slip Detail', '0', '0', 'app.transaction.customerpacking.detail', '/detaillist', 'Packing Slip', @parentPageID, '0', '13.09', 'icons-customer-ps', '1', '1', '0', '1', 'Customer Packing Slip', '0', '0', '0', '0');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Packing Slip Summary');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Packing Slip Detail');  \n" +
                "UPDATE `page_detail` SET `iconClass` = 'icons-customer-invoice-new' WHERE pageName = 'Customer Invoices Summary';  \n" +
                "UPDATE `page_detail` SET `iconClass` = 'icons-customer-invoice-new' WHERE pageName = 'Customer Invoices Detail';  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5159,'2.00','V1','Add Route for Customer Packing Slip   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5159:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "call Sproc_giveRightToChildPage('Customer Invoice Packing Slip Summary');  \n" +
                "  \n" +
                "call Sproc_giveRightToChildPage('Customer Invoice Packing Slip Detail');  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5160,'2.00','V1','Add Route for Customer Packing Slip   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5160:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS  Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  INT ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	SET pWhereClause=CONCAT(pWhereClause, ' and FIND_IN_SET(packingSlipStatusValue,''', pfilterStatus ,''')');  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId= ',pmfgPartID);  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5161,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5161:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyListByFieldName`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyListByFieldName`(  \n" +
                "	IN psearchString VARCHAR(1000),  \n" +
                "	IN pfield VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    	select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',ifnull(com.productionPN,'')) as mfgPN,  \n" +
                "			concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',ifnull(com.productionPN,'')) as PIDCode  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "		where (com.PIDCode like concat('%',psearchString,'%') OR com.mfgPN like concat('%',psearchString,'%') OR com.productionPN like concat('%',psearchString,'%'))and com.isDeleted = 0 and com.category = 3;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5162,'2.00','V1','User Story 35892: Demo improvement point suggested by jaybhai [30-08-2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5162:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT,  \n" +
                "    pKitAllocationId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = IFNULL(pKitAllocationId, k.id)  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "									GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "					) as k  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plans`;  \n" +
                "CREATE VIEW `vu_kit_plans` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`poQty` AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail`;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`a`.`actualKitReleaseDate`) AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        FUNC_MISMATCHITEMFORKIT(`a`.`salesOrderDetID`,  \n" +
                "                IFNULL(`a`.`subAssyID`, `a`.`refAssyId`),  \n" +
                "                'M',  \n" +
                "                NULL,  \n" +
                "                NULL) AS `mismatchItem`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        FUN_GETWORKORDERSTATUSIDBYWOID(`a`.`woID`) AS `woStatusID`,  \n" +
                "        FUN_GETWORKORDERSUBSTATUSIDBYWOID(`a`.`woID`) AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`a`.`kitReturnDate`) AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        `vu_kit_plans` `a`;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT 	salesOrderDetID,  \n" +
                "									(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "									MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_kit_plans  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "	SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(  \n" +
                "	IN pTransferType VARCHAR(100),  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pToWHID INT,  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "	IN pUIDID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pKitSalesOrderDetID INT,  \n" +
                "	IN pKitAssyID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToParentWH INT,  \n" +
                "	IN pParentWHType VARCHAR(10),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "	IN pAdjustCount DECIMAL(18,8),  \n" +
                "	IN pAdjustUnit DECIMAL(18,8),  \n" +
                "	IN pKitReturnDetail json,  \n" +
                "	IN pTransferStockType VARCHAR(50),  \n" +
                "	IN pTransType VARCHAR(100),  \n" +
                "	IN pActionPerformed VARCHAR(100),  \n" +
                "	IN pWOTransID INT,  \n" +
                "	IN pIsKitSelected TINYINT(1),  \n" +
                "	IN pNotes VARCHAR(16383),  \n" +
                "	IN pUserInputDetail json,  \n" +
                "    IN punallocatedXferHistoryData JSON,  \n" +
                "    IN pCountApprovalHistoryData JSON  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTotalAllocatedUnits DECIMAL(18,8);  \n" +
                "	DECLARE vConsumedQtyDiff DECIMAL(18,8);  \n" +
                "	DECLARE vKitID INT;  \n" +
                "	DECLARE vRrefEqpID INT;  \n" +
                "	DECLARE vKitAllocatedUnit DECIMAL(18,8);  \n" +
                "	DECLARE vUmidUOM INT;  \n" +
                "	DECLARE vPrevPkgUnit DECIMAL(18,8);  \n" +
                "	DECLARE vPrevPkgQty DECIMAL(18,8);  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "		-- select * from temp111;  \n" +
                "		SET @vWhareClause = \" 1 = 1 \", 		@vFromBinID = 0,  \n" +
                "			@vFromWHID = 0, 		@vToWHID = 0,  \n" +
                "			@vFromWHBinCount = 0, 		@vToWHBinCount = 0,  \n" +
                "			@vFromWHUIDCount = 0,		@vToWHUIDCount  = 0,  \n" +
                "			@vFromBinUIDCount = 0, 		@vToBinUIDCount = 0,  \n" +
                "			@vFromBinPIDCount = 0, 		@vToBinPIDCount = 0,  \n" +
                "			@vFromKitBinCount = 0;  \n" +
                "  \n" +
                "		#Insert current kit allocated id into table  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "		#Get UMID detail of selected kit for transfer kit  \n" +
                "		IF(pTransferType = \"Kit Transfer\" OR pTransferType = \"Department Transfer\") THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS transferKitDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS transferKitDetail  \n" +
                "			SELECT 		k.refUIDId, csd.binID, b.warehouseID  \n" +
                "			FROM 		kit_allocation k  \n" +
                "			INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "			INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "			INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "			INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID  \n" +
                "			WHERE 		k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "						AND	k.assyID = pKitAssyID  \n" +
                "						AND 	k.status = 'A'  \n" +
                "						AND	csd.isDeleted = 0  \n" +
                "						AND     (  \n" +
                "								CASE  \n" +
                "									WHEN pParentWHType IS NOT NULL THEN  \n" +
                "										pw.parentWHType = pParentWHType  \n" +
                "									ELSE  \n" +
                "										w.parentWHID = IFNULL(pFromParentWH, w.parentWHID)  \n" +
                "								END  \n" +
                "							);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		#Set where clause based on transfer type to retrive data of material to be transfer  \n" +
                "		#UMID to Bin  \n" +
                "		IF(pUIDID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);  \n" +
                "		#Bin to BiN/Warehouse  \n" +
                "		ELSEIF(pFromBinID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);  \n" +
                "		#Warehouse to Warehouse  \n" +
                "		ELSEIF(pFromWHID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst WHERE isdeleted = 0 AND isActive = 1 AND  WarehouseID = \", pFromWHID,\")\");  \n" +
                "		#Department to Department  \n" +
                "		ELSEIF(pTransferType = \"Department Transfer\" AND pToParentWH IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND id IN (SELECT refUIDId FROM  transferKitDetail)\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentSIDStockIDs;  \n" +
                "		SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSIDStockIDs AS  \n" +
                "										SELECT 	csd.id  \n" +
                "										FROM 	component_sid_stock   csd  \n" +
                "										WHERE   csd.isdeleted = 0 AND \", @vWhareClause );  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		#transfer material from warehouse to department  \n" +
                "		IF(pFromWHID IS NOT NULL AND pToParentWH IS NOT NULL) THEN  \n" +
                "			SET @vFromWHID = pFromWHID;  \n" +
                "			UPDATE 	warehousemst w  \n" +
                "			SET 	w.parentWHID = pToParentWH, w.updatedBy = pCreatedBy, w.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	w.id = pFromWHID;  \n" +
                "		ELSEIF(IFNULL(pFromWHID, pFromBinID) IS NOT NULL AND pToWHID IS NOT NULL) THEN   -- transfer material from warehouse/bin to warehouse  \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = pFromBinID AND isDeleted = 0));  \n" +
                "			SET @vToWHID = pToWHID;  \n" +
                "			IF(pFromWHID IS NOT NULL) THEN  \n" +
                "				UPDATE 	binmst b  \n" +
                "				SET 	b.WarehouseID = pToWHID,  \n" +
                "					b.updatedBy = pCreatedBy,  \n" +
                "					b.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	b.WarehouseID = pFromWHID AND b.isDeleted = 0;  \n" +
                "			ELSEIF (pFromBinID IS NOT NULL) THEN  \n" +
                "				UPDATE 	binmst b  \n" +
                "				SET	b.WarehouseID = pToWHID,  \n" +
                "					b.updatedBy = pCreatedBy,  \n" +
                "					b.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	b.ID = pFromBinID AND b.isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			UPDATE warehousemst SET slotCount =(SELECT COUNT(1)  FROM binmst WHERE WarehouseID=pFromWHID AND isActive = 1 AND deletedAt IS NULL) WHERE ID = pFromWHID;  \n" +
                "			UPDATE warehousemst SET slotCount =(SELECT COUNT(1)  FROM binmst WHERE WarehouseID=pToWHID AND isActive = 1  AND deletedAt IS NULL) WHERE ID = pToWHID;  \n" +
                "		ELSEIF(pFromBinID  IS NOT NULL AND pToBinID IS NOT NULL) THEN -- transfer material from bin to bin  \n" +
                "			SET @vFromBinID = pFromBinID;  \n" +
                "			IF(pTransferType = \"Stock Transfer\" OR pTransferType = \"Stock Transfer To Other Department\") THEN  \n" +
                "				UPDATE 	component_sid_stock css  \n" +
                "				SET 	css.binID = pToBinID,  \n" +
                "					css.updatedBy = pCreatedBy,  \n" +
                "					css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	css.binID = pFromBinID AND css.isDeleted = 0;  \n" +
                "			ELSEIF(pTransferType = \"Kit Transfer\" OR pTransferType = \"Department Transfer\") THEN  \n" +
                "				UPDATE 	component_sid_stock css  \n" +
                "				SET 	css.binID = pToBinID,  \n" +
                "					css.updatedBy = pCreatedBy,  \n" +
                "					css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				-- WHERE 	css.id IN (SELECT k.refUIDId FROM transferKitDetail k WHERE k.binID = pFromBinID)  \n" +
                "				WHERE 	css.binID IN (SELECT k.binID FROM transferKitDetail k WHERE k.binID = pFromBinID)  \n" +
                "						AND 	css.isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "		ELSEIF(pUIDID  IS NOT NULL AND pToBinID IS NOT NULL) THEN  \n" +
                "			SELECT 		css.binid,	w.refEqpID, 	uom,		pkgUnit,	pkgQty  \n" +
                "			INTO 		@vFromBinID, 	vRrefEqpID, 	vUmidUOM,  	vPrevPkgUnit, 	vPrevPkgQty  \n" +
                "			FROM 		component_sid_stock css  \n" +
                "			INNER JOIN 	binmst b ON b.id = css.binID  \n" +
                "			INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "			WHERE 		css.id = pUIDID;  \n" +
                "  \n" +
                "			UPDATE 	component_sid_stock css  \n" +
                "			SET 	css.binID = pToBinID, css.updatedBy = pCreatedBy, css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	css.id = pUIDID AND css.isDeleted = 0;  \n" +
                "  \n" +
                "			#Update workorder_trans_umid_details If From Location is Equipment  \n" +
                "			IF (vRrefEqpID IS NOT NULL AND vRrefEqpID > 0) THEN  \n" +
                "				UPDATE 	workorder_trans_umid_details  \n" +
                "				SET 	reelStatus = 'C',  \n" +
                "					changedBy = pCreatedBy,  \n" +
                "					changedOn = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	refsidid = pUIDID AND reelStatus = 'P' AND transactionType=\"F\";  \n" +
                "			END IF;  \n" +
                "		ELSEIF(pTransferType = \"Department Transfer\" AND pToParentWH IS NOT NULL) THEN  \n" +
                "			UPDATE 	warehousemst  \n" +
                "			SET 	parentWHID = pToParentWH, updatedBy = pCreatedBy, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	id IN (SELECT warehouseID FROM transferKitDetail) AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "			UPDATE 	component_sid_stock  \n" +
                "			SET 	pkgUnit = pPkgUnit,  \n" +
                "					pkgQty = pPkgCount,  \n" +
                "					isinStk = CASE WHEN pPkgCount = 0 THEN 0 ELSE 1 END,  \n" +
                "                    updatedBy = pCreatedBy,  \n" +
                "                    updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	id = pUIDID;  \n" +
                "  \n" +
                "			#Insert selected kit records in temp table to return UMID  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempKitDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM	JSON_TABLE(  \n" +
                "						pKitReturnDetail,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "						id INT PATH \"$.id\",  \n" +
                "						consumeQty DECIMAL(18,8) PATH \"$.consumeQty\",  \n" +
                "						consumeUnit DECIMAL(18,8) PATH \"$.consumeUnit\",  \n" +
                "						returnQty DECIMAL(18,8) PATH \"$.returnQty\",  \n" +
                "						returnUnit DECIMAL(18,8) PATH \"$.returnUnit\",  \n" +
                "                        scrapExpiredQty DECIMAL(18,8) PATH \"$.scrapExpiredQty\",  \n" +
                "						scrapExpiredUnit DECIMAL(18,8) PATH \"$.scrapExpiredUnit\",  \n" +
                "						umidUOM INT PATH \"$.umidUOM\"  \n" +
                "				)  \n" +
                "			) AS kit;  \n" +
                "  \n" +
                "			IF(pKitReturnDetail IS NOT NULL) THEN  \n" +
                "				#Update selected kit status to 'Return' and update consumed and return qty  \n" +
                "				UPDATE 	kit_allocation k, tempKitDetail tk  \n" +
                "				SET 	k.consumeQty = tk.consumeQty,  \n" +
                "					k.consumeUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.consumeUnit),  \n" +
                "					k.consumeUOM = k.allocatedUOM,  \n" +
                "					k.returnQty = tk.returnQty,  \n" +
                "					k.returnUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.returnUnit),  \n" +
                "					k.returnUOM = k.allocatedUOM,  \n" +
                "					k.scrapExpiredQty = tk.scrapExpiredQty,  \n" +
                "					k.scrapExpiredUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.scrapExpiredUnit),  \n" +
                "					k.scrapExpiredUOM = k.allocatedUOM,  \n" +
                "					k.status = 'R',  \n" +
                "					k.remark = 'Auto Return from Count Material.',  \n" +
                "					k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "					k.updatedBy = pCreatedBy,  \n" +
                "					k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	k.id = tk.id;  \n" +
                "                INSERT INTO tempKitID (tempKitId) SELECT tkd.id FROM tempKitDetail tkd;  \n" +
                "			END IF;  \n" +
                "		    #If there is other kit in which that UMID is shared then remove allocation if remaining qty is less than allocted qty  \n" +
                "			IF(pTransferStockType IS NOT NULL) THEN  \n" +
                "  \n" +
                "                #Insert other kit detail in temp table  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "				CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "				SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "						rp.promiseShipDate,  \n" +
                "                        fun_convertUOM(k.allocatedUOM, vUmidUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "				FROM 	kit_allocation k  \n" +
                "				LEFT JOIN (  \n" +
                "							SELECT 	salesOrderDetID,  \n" +
                "								(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "								MIN(poDueDate) promiseShipDate  \n" +
                "						FROM 	vu_kit_plans  \n" +
                "						GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "					) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "				WHERE 	k.status = 'A'  \n" +
                "				AND		k.refuidid = pUIDID  \n" +
                "				AND 	NOT EXISTS (SELECT 1 FROM tempKitDetail tk WHERE tk.id = k.id)  \n" +
                "				ORDER BY rp.promiseShipDate DESC;  \n" +
                "				SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO vTotalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "                #Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "				IF(vTotalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						-- IF(pKitReturnDetail IS NOT NULL) THEN  \n" +
                "						-- 	SELECT 	(IFNULL(SUM(k.consumeUnit),0) - IFNULL(SUM(k.allocatedUnit), 0))  \n" +
                "						-- 	into 	vConsumedQtyDiff  \n" +
                "						-- 	FROM	kit_allocation k  \n" +
                "						-- 	where 	exists (select 1 from tempKitDetail tk where tk.id = k.id);  \n" +
                "						-- ELSE  \n" +
                "							SET vConsumedQtyDiff = vTotalAllocatedUnits - pPkgUnit;  \n" +
                "                        -- END IF;  \n" +
                "					WHILE vConsumedQtyDiff > 0 DO  \n" +
                "						IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "  \n" +
                "							SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "							INTO 	vKitID,	vKitAllocatedUnit  \n" +
                "							FROM 	tempOtherSharedKit tk  \n" +
                "							WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "							IF(vKitID IS NOT NULL) THEN  \n" +
                "								UPDATE tempOtherSharedKit tk  \n" +
                "								SET 	tk.status = 'D'  \n" +
                "								WHERE 	tk.id = vKitID;  \n" +
                "								UPDATE 	kit_allocation k  \n" +
                "								SET 	k.status = 'D',  \n" +
                "									k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "									k.returnQty = pPkgCount,  \n" +
                "									k.returnUnit = pPkgUnit,  \n" +
                "									k.returnUOM = vUmidUOM,  \n" +
                "									k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "									k.updatedBy = pCreatedBy,  \n" +
                "									k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "								WHERE 	k.id = vKitID;  \n" +
                "  \n" +
                "                                INSERT INTO tempKitID (tempKitId) VALUES (vKitID);  \n" +
                "  \n" +
                "                                SET vConsumedQtyDiff = vConsumedQtyDiff - vKitAllocatedUnit;  \n" +
                "							ELSE  \n" +
                "								SET vConsumedQtyDiff = 0;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							SET vConsumedQtyDiff = 0;  \n" +
                "						END IF;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempStockDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS  \n" +
                "		SELECT 	csd.id,			csd.uid,			csd.refcompid,  \n" +
                "				csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "				csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "				csd.pkgUnit,	csd.uom,			csd.createdAt  \n" +
                "		FROM 	component_sid_stock   csd  \n" +
                "		JOIN 	binmst b ON csd.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE   csd.isdeleted = 0  \n" +
                "		AND 	csd.id IN (SELECT t.id FROM tempComponentSIDStockIDs t);  \n" +
                "	IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "			#Insert selected count approval records in temp table to return count approval Data  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM JSON_TABLE(  \n" +
                "					pCountApprovalHistoryData,  \n" +
                "                \"$[*]\" COLUMNS(  \n" +
                "                        approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "						approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "						deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "						approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "						isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "				)  \n" +
                "			) AS countApproval;  \n" +
                "  \n" +
                "			SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "					INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "			FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "	END IF;  \n" +
                "				-- Insert log in UMID history page  \n" +
                "				INSERT INTO component_sid_stock_history  \n" +
                "					(  \n" +
                "						transType, 			actionPerformed, 	refUIDId, 	uid, 			refcompid,  \n" +
                "						binID, 				warehouseID, 		deptWHID, 	orgQty, 		orgUnit,  \n" +
                "						currentQty, 		currentUnit, 		uom,  \n" +
                "						scrappedQty, 		scrappedUnit,  \n" +
                "						consumedQty,		consumedUnit,		adjustQty,	adjustUnit,  \n" +
                "						refTrans, 			refTransID, 		reason,  \n" +
                "						refSalesOrderDetID,	assyID,  \n" +
                "						woTransID,			userInputDetail,	isDeleted, 	createdBy, 		createdAt,  \n" +
                "						updatedBy, 			updatedAt,				approvedDate,			approvalReason,  \n" +
                "                        approvedBy,			deallocatedKitDesc, 	approvedByRoleId,		isApproved  \n" +
                "					)  \n" +
                "				SELECT  \n" +
                "						pTransType,			pActionPerformed,	id,			uid,			refcompid,  \n" +
                "						binID,				warehouseID,		deptWHID,	orgQty,			orgPkgUnit,  \n" +
                "						pkgQty,				pkgUnit,			uom,  \n" +
                "						(CASE WHEN pTransferStockType IN ('Scrapped Material', 'Expired Material') THEN (IFNULL(vPrevPkgQty,0) - IFNULL(pPkgCount,0)) ELSE NULL END),	-- scrappedQty  \n" +
                "						(CASE WHEN pTransferStockType IN ('Scrapped Material', 'Expired Material') THEN (IFNULL(vPrevPkgUnit,0) - IFNULL(pPkgUnit,0)) ELSE NULL END), -- scrappedUnit  \n" +
                "						(CASE WHEN (pPkgCount IS NOT NULL AND (pTransferStockType NOT IN ('Scrapped Material', 'Expired Material', 'Adjust Material'))) THEN (IFNULL(vPrevPkgQty,0) - IFNULL(pPkgCount,0)) ELSE NULL END), -- consumedQty  \n" +
                "						(CASE WHEN (pPkgUnit IS NOT NULL AND (pTransferStockType NOT IN ('Scrapped Material', 'Expired Material', 'Adjust Material'))) THEN (IFNULL(vPrevPkgUnit,0) - IFNULL(pPkgUnit,0)) ELSE NULL END), -- consumedUnit  \n" +
                "						pAdjustCount,		pAdjustUnit,  \n" +
                "						NULL,				NULL,				pNotes,		NULL,				NULL,  \n" +
                "						pWOTransID,   		pUserInputDetail,	0,			pCreatedBy,		fun_DatetimetoUTCDateTime(),  \n" +
                "						pCreatedBy,			fun_DatetimetoUTCDateTime(),	v_approvedDate,  \n" +
                "                        v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,		 v_isApproved  \n" +
                "				FROM tempStockDetail;  \n" +
                "  \n" +
                "        /* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "        SET v_newUIDId = LAST_INSERT_ID();  \n" +
                "		UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDId WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "  \n" +
                "		IF((pTransferType = \"Stock Transfer\"  OR pTransferType = \"Stock Transfer To Other Department\") AND (IFNULL(pFromBinID, pUIDID) IS NOT NULL AND pToBinID IS NOT NULL)) THEN  \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = @vFromBinID AND isDeleted = 0));  \n" +
                "			SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = pToBinID AND isDeleted = 0));  \n" +
                "  \n" +
                "			SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID AND c.isdeleted = 0;  \n" +
                "			SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID  AND c.isdeleted = 0;  \n" +
                "  \n" +
                "            SELECT COUNT(1) refcompid INTO @vFromBinPIDCount FROM (SELECT  DISTINCT c.refcompid FROM component_sid_stock c WHERE c.binid = @vFromBinID AND c.isdeleted = 0 GROUP BY refcompid) AS a;  \n" +
                "			SELECT COUNT(1) refcompid INTO @vToBinPIDCount FROM (SELECT  DISTINCT c.refcompid FROM component_sid_stock c WHERE c.binid = pToBinID  AND c.isdeleted = 0 GROUP BY refcompid) AS a;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(@vFromWHID != 0) THEN  \n" +
                "			SELECT COUNT(1) uidCount INTO @vFromWHUIDCount FROM component_sid_stock c, binmst b  \n" +
                "			WHERE b.id = c.binid AND b.warehouseID = @vFromWHID  AND c.isdeleted = 0  \n" +
                "			AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b  \n" +
                "			WHERE b.warehouseID = @vFromWHID AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(@vFromWHID != 0) THEN  \n" +
                "			SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b  \n" +
                "			WHERE b.id = c.binid AND b.warehouseID =  @vToWHID  AND c.isdeleted = 0  \n" +
                "			AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b  \n" +
                "			WHERE b.warehouseID =  @vToWHID  AND b.isdeleted = 0 AND  b.isActive = 1 ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "			#Insert selected xfer records in temp table to return Unallocated UMID Xfer History data  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempunallocatedXferHistoryDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempunallocatedXferHistoryDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM JSON_TABLE(  \n" +
                "					punallocatedXferHistoryData,  \n" +
                "                \"$[*]\" COLUMNS(  \n" +
                "                        reason TEXT PATH \"$.reason\",  \n" +
                "						transferFrom VARCHAR(100) PATH \"$.transferFrom\",  \n" +
                "						transferTo VARCHAR(100) PATH \"$.transferTo\",  \n" +
                "						createdBy VARCHAR(255) PATH \"$.createdBy\",  \n" +
                "						updatedBy VARCHAR(255) PATH \"$.updatedBy\",  \n" +
                "						updateByRoleId INT PATH \"$.updateByRoleId\",  \n" +
                "						createByRoleId INT PATH \"$.createByRoleId\",  \n" +
                "						transactionType VARCHAR(255) PATH \"$.transactionType\",  \n" +
                "						category VARCHAR(100) PATH \"$.category\"  \n" +
                "				)  \n" +
                "			) AS xfer;  \n" +
                "  \n" +
                "            IF (punallocatedXferHistoryData IS NOT NULL) THEN  \n" +
                "  \n" +
                "				INSERT INTO unallocted_umid_transfer_history (reason, transferFrom, transferTo, createdBy, updatedBy, updateByRoleId, createByRoleId, transactionType, category)  \n" +
                "				SELECT  xh.reason, xh.transferFrom, xh.transferTo, xh.createdBy, xh.updatedBy, xh.updateByRoleId, xh.createByRoleId, xh.transactionType, xh.category  \n" +
                "					FROM tempunallocatedXferHistoryDetail xh;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "		SELECT 	pTransferType transferType, 				pFromWHID fromWHID, 			pToWHID toWHID,  \n" +
                "				pFromBinID fromBinID, 						pToBinID toBinID, 				pUIDID uidID,  \n" +
                "				@vFromWHBinCount fromWHBinCount,			@vToWHBinCount toWHBinCount,  \n" +
                "				@vFromWHUIDCount fromWHUIDCount,			@vToWHUIDCount toWHUIDCount,  \n" +
                "				@vFromBinUIDCount fromBinUIDCount,			@vToBinUIDCount toBinUIDCount,  \n" +
                "				@vFromBinPIDCount fromBinPIDCount,			@vToBinPIDCount toBinPIDCount,  \n" +
                "				pKitSalesOrderDetID refSalesOrderDetID,		pKitAssyID assyID,				pToParentWH toParentWH,  \n" +
                "				@vFromKitBinCount fromKitBinCount;  \n" +
                "	COMMIT;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalKitPlannAndReleasedCount` ;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getKitAllocationPercentageForReleasedPlan` ;  \n" +
				/* **************************** New Script -> 20-08-2021  ********************************** */                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5163,'2.00','V1','Task 36240: Tunnig of SP for Count material performance - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5163:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-08-2021 *********************************** */
                "drop function if exists `fun_getDueDateEOM`;  \n" +
                "CREATE FUNCTION `fun_getDueDateEOM`(  \n" +
                "	  pDate DATE,  \n" +
                "      pTermsDays int,  \n" +
                "      ptermsID INT  \n" +
                ") RETURNS date  \n" +
                "BEGIN  \n" +
                "	DECLARE vIsEOM tinyint;  \n" +
                "    DECLARE vDate DATE;  \n" +
                "    DECLARE vDueDate DATE;  \n" +
                "    /*getting EOM flag from master*/  \n" +
                "	SELECT gc.isEOM INTO vIsEOM  \n" +
                "      FROM genericcategory gc  \n" +
                "	 WHERE gc.gencCategoryID = ptermsID  \n" +
                "       AND gc.categoryType = 'Payment Terms'  \n" +
                "       AND gc.isDeleted = 0;  \n" +
                "  \n" +
                "	if vIsEOM = true then  \n" +
                "		/*setting last date of month in case if EOM*/  \n" +
                "		SET vDueDate = LAST_DAY(pDate);  \n" +
                "	else  \n" +
                "		SET vDate = pDate;  \n" +
                "		SET vDueDate = DATE_ADD(vDate, INTERVAL IFNULL(pTermsDays,0) DAY);  \n" +
                "    end if;  \n" +
                "  \n" +
                "	RETURN vDueDate;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					p.invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5164,'2.00','V1','User Story 35371: [Main Branch] Supplier Invoice, CM, DM: Improvement Related to Refund Transaction and in Advance filter - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5164:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetComponentList;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType \";  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AI_Component_History`;  \n" +
                /* **************************** Add Script Version -> 23-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5165,'2.00','V1',' User Story 35139: Need to change the sequence of showing the Used Transaction Details popup - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5165:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-08-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	SET vStatus=IFNULL(vStatus,'C');  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end) WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5166,'2.00','V1','Purchase order auto complete while duplicate single line completed po - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5166:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-08-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 23-08-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "	select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF (NEW.isDeleted = TRUE)THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType=(NULL),poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND  \n" +
                "		PORLINE_OTY <= vTotalQty) THEN  \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "		ELSE  \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "    IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-08-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5167,'2.00','V1','Purchase order auto complete while duplicate single line completed po - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5167:
            allDbChangesArray.push(
            /* **************************** New Script -> 11-08-2021 *********************************** */
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(30),  \n" +
            "	IN pMfgCodeIds LONGTEXT,  \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearch TINYINT,  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pInvoiceIds LONGTEXT,  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE,  \n" +
            "    IN pMarkedForRefundStatus LONGTEXT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "    DECLARE vCurrentDate DATE;  \n" +
            "    DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
            "			SELECT 		p.id,  \n" +
            "					p.systemId,  \n" +
            "					p.poNumber,  \n" +
            "                    p.poDate,  \n" +
            "                    p.refPurchaseOrderID poId,  \n" +
            "					p.mfgCodeID,  \n" +
            "					p.supplierSONumber,  \n" +
            "                    p.soDate,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
            "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
            "					p.packingSlipDate,  \n" +
            "					p.invoiceNumber,  \n" +
            "                    p.lockStatus invoiceLockStatus,  \n" +
            "					p.invoiceDate,  \n" +
            "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,  \n" +
            "                    p.lockStatus creditMemoLockStatus,  \n" +
            "					p.creditMemoDate,  \n" +
            "					p.debitMemoNumber,  \n" +
            "                    p.refSupplierCreditMemoNumber,  \n" +
            "                    p.lockStatus debitMemoLockStatus,  \n" +
            "					p.debitMemoDate,  \n" +
            "					p.receiptDate,  \n" +
            "					p.description,  \n" +
            "					p.billToAddress,  \n" +
            "					p.shipToAddress,  \n" +
            "					p.poVersion,  \n" +
            "					p.isDeleted,  \n" +
            "					p.receiptType,  \n" +
            "					p.`status`,  \n" +
            "					p.applyDate,  \n" +
            "					p.refParentCreditDebitInvoiceno,  \n" +
            "					p.refPackingSlipNumberForInvoice,  \n" +
            "					p.invoiceTotalDue,  \n" +
            "					p.isTariffInvoice,  \n" +
            "					p.creditMemoType,  \n" +
            "                    (  \n" +
            "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
            "								'Invoice Credit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MC' THEN  \n" +
            "								'MISC Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'RC' THEN  \n" +
            "								'RMA Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'ID' THEN  \n" +
            "								'Invoice Debit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MD' THEN  \n" +
            "								'MISC Debit Memo'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
            "								'Invoice'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
            "								'MISC Invoice'  \n" +
            "						END  \n" +
            "					) subTypeValue,  \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                    m.mfgName supplierName,  \n" +
            "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
            "					m.mfgCode supplierCodeName,  \n" +
            "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
            "					pg.packingSlipDocCount,  \n" +
            "					pd.itemReceived,  \n" +
            "					pd.otherChargesItemReceived,  \n" +
            "					pd.itemDisapproved,  \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
            "					ps.status parentInvoiceStatus,  \n" +
            "					ps.invoiceNumber refInvoiceNumber,  \n" +
            "                    ps.lockStatus refInvoiceLockStatus,  \n" +
            "					ps.creditMemoType parentCreditMemoType,  \n" +
            "					pd.totalExtendedAmount,  \n" +
            "                    pd.totalDiscount,  \n" +
            "					pe.totalCreditAmount,  \n" +
            "					pe.totalDebitAmount,  \n" +
            "					(  \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
            "					) amountToPay,  \n" +
            "                    pd.totalExtendedReceivedPrice,  \n" +
            "					pd.packingDetailNote,  \n" +
            "					pd.approveLineCount,  \n" +
            "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
            "											p.debitMemoDate  \n" +
            "										WHEN p.receiptType = 'C' THEN  \n" +
            "											p.creditMemoDate  \n" +
            "										ELSE p.invoiceDate  \n" +
            "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
            "					g.gencCategoryName paymentTermName,  \n" +
            " 					m.paymentTermsID paymentTermsID,  \n" +
            "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
            "                    p.paymentTermsID invPaymentTermsID,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
            "					psm.packingSlipModeStatus,  \n" +
            "                    psPay.paymentDate,  \n" +
            "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
            "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
            "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
            "					p.invoiceRequireManagementApproval,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
            "								'Yes'  \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
            "								'No'  \n" +
            "						END  \n" +
            "					) invoiceRequireManagementApprovalValue,  \n" +
            "					p.invoiceApprovalStatus,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
            "								'Approved'  \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
            "								'Pending'  \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
            "								'N/A'  \n" +
            "						END  \n" +
            "					) invoiceApprovalStatusValue,  \n" +
            "					p.invoiceApprovedBy,  \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
            "					p.invoiceApprovalDate,  \n" +
            "					p.invoiceApprovalComment,  \n" +
            "					p.internalRemark,  \n" +
            "                    p.remark,  \n" +
            "					p.lockStatus,  \n" +
            "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "						when p.lockStatus = 'LC' then 'Locked'  \n" +
            "						else null end  \n" +
            "					) lockStatusValue,  \n" +
            "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
            "                    case when p.receiptType = 'I' then  \n" +
            "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
            "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
            "					h1.refType as haltRefType,  \n" +
            "                    h1.status as haltStatus,  \n" +
            "                    (CASE WHEN h1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltStatusText,  \n" +
            "                    (CASE  \n" +
            "							WHEN h1.status = 'H' THEN  \n" +
            "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReason,  \n" +
            "                    psh1.refType as haltRefTypeRefInv,  \n" +
            "                    psh1.status as haltStatusRefInv,  \n" +
            "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInvText,  \n" +
            "                    (CASE  \n" +
            "							WHEN psh1.status = 'H' THEN  \n" +
            "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInv,  \n" +
            "                    p.markedForRefund,  \n" +
            "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
            "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
            "										'Waiting for Refund'  \n" +
            "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
            "										'Partially Refunded'  \n" +
            "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
            "										'Fully Refunded'  \n" +
            "								else '' end  \n" +
            "						end  \n" +
            "					) markedForRefundValue,  \n" +
            "                    p.markedForRefundAmt  \n" +
            "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
            "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
            "							gFiles.gencFileOwnerType,  \n" +
            "							gFiles.refTransID,  \n" +
            "							gFiles.entityID  \n" +
            "						FROM genericfiles gFiles  \n" +
            "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
            "						and gFiles.entityID in (-13,-15,-16)  \n" +
            "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
            "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
            "																		WHEN p.receiptType = 'D' THEN -16  \n" +
            "																		ELSE -13  \n" +
            "																	END)  \n" +
            "				and psDoc.refTransID = p.id  \n" +
            "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
            "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where h2.refTransId = h1.refTransId  \n" +
            " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
            "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
            "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
            "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where psh1.refTransId = h2.refTransId  \n" +
            " 											  and h2.refType = 'SINV'  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
            "            left join (  \n" +
            "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
            "				FROM 	vu_genericfilescount g  \n" +
            "				WHERE 	g.entityID = -14  \n" +
            "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
            "            ) pg on pg.refTransID = psm.id  \n" +
            "			left join (  \n" +
            "							select 	a.refPackingSlipMaterialRecID,  \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
            "								sum(a.itemReceived) itemReceived,  \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
            "								sum(a.itemDisapproved) itemDisapproved,  \n" +
            "								sum(a.approveLineCount) approveLineCount,  \n" +
            "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
            "                                sum(discount) totalDiscount,  \n" +
            "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
            "							from 	(  \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
            "										psm.packingSlipSerialNumber,  \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
            "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
            "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
            "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
            "										extendedPrice,  \n" +
            "                                        discount,  \n" +
            "										extendedReceivedPrice  \n" +
            "									FROM 	packing_slip_material_receive_det psm  \n" +
            "									WHERE 	psm.isDeleted = 0  \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
            "								) a  \n" +
            "							group by a.refPackingSlipMaterialRecID  \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
            "				left join (select b.refPackingslipInvoiceID,  \n" +
            "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
            "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
            "							  from packingslip_invoice_payment a  \n" +
            "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "							 where a.refPaymentMode IN ('P','RR')  \n" +
            "							   and a.isPaymentVoided = 0  \n" +
            "							   and b.isDeleted = 0  \n" +
            "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
            "				left join (  \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
            "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
            "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
            "							from 		packing_slip_material_receive ps  \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
            "                            left join (select b.refPackingslipInvoiceID,  \n" +
            "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "										 where a.refPaymentMode IN ('P','RR')  \n" +
            "										   and b.isPaymentVoided = 0  \n" +
            "										   and b.isDeleted = 0  \n" +
            "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
            "								  where ps.receiptType in ('C','D')  \n" +
            "									and ps.isDeleted = 0  \n" +
            "									and pd.isDeleted = 0  \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
            "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
            "				and exists (select 1  \n" +
            "							  from packingslip_invoice_payment pm  \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
            "							 where pm.isPaymentVoided = 0  \n" +
            "							   and pm.refPaymentMode = 'P'  \n" +
            "							   and pd.refPackingslipInvoiceID = p.id  \n" +
            "							   and pm.isDeleted = 0  \n" +
            "                               and pd.isDeleted = 0  \n" +
            "							   and pm.paymentNumber \",  \n" +
            "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
            "                               ,\") \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
            "		IF pIsExactSearch = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
            "				SELECT 1  \n" +
            "				  FROM packing_slip_material_receive_det x  \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "    EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "				round(c.paidAmount,2) totalPaidAmount,  \n" +
            "                round(c.refundAmount,2) totalRefundAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
            "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 11-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5168,'2.00','V1','Task 36283: Add Paid Date in supplier invoice list page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5168:
            allDbChangesArray.push(
            /* **************************** New Script -> 25-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
            "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
            "	IN pCustPaymentDetList JSON,  \n" +
            "	IN pCustCMDetList JSON,  \n" +
            "	IN pMfgcodeID INT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "	IN pPaymentDate DATE,  \n" +
            "	IN pPaymentAmount DECIMAL(18,8),  \n" +
            "	IN pPaymentType INT,  \n" +
            "	IN pAccountReference VARCHAR(50),  \n" +
            "	IN pBankAccountMasID INT,  \n" +
            "	IN pBankAccountNo VARCHAR(50),  \n" +
            "	IN pBankName VARCHAR(255),  \n" +
            "	IN pRemark VARCHAR(1000),  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTotSelectedPayOfCust INT,  \n" +
            "	IN pTotSelectedCMOfCust INT,  \n" +
            "	IN pSystemID VARCHAR(20),  \n" +
            "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
            "	IN pUserID INT,  \n" +
            "	IN pUserRoleID INT,  \n" +
            "	IN pRefGencTransModeID INT,  \n" +
            "	IN pOffsetAmount DECIMAL(18,8),  \n" +
            "	IN pBillToName VARCHAR(100) ,  \n" +
            "	IN pBillToAddress VARCHAR(255),  \n" +
            "	IN pIsMarkAsPaid TINYINT  \n" +
            "  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE insertedRefundMstID INT;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	IF(pTotSelectedPayOfCust > 0 AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
            "  \n" +
            "		/* get/map all Customer payment Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustPaymentDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustPaymentDetList_JT ;  \n" +
            "  \n" +
            "		/* get all customer payment > against total payment list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
            "			SELECT psip.id AS paymentMstID,  \n" +
            "				psip.paymentAmount,  \n" +
            "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
            "			FROM packingslip_invoice_payment psip  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected payment not found from db  \n" +
            "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "			SELECT tucipl.*  \n" +
            "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
            "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
            "			WHERE (  \n" +
            "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "  \n" +
            "	ELSEIF (pTotSelectedCMOfCust > 0  \n" +
            "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
            "             /* get/map all Customer CM Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustCMDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustCMDetList_JT ;  \n" +
            "	 -- select * from temp_UI_CustCMDetList;  \n" +
            "  \n" +
            "	/* get all customer Refund > against total CM list > available in data base */  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
            "			SELECT cps.id AS custCreditMemoMstID,  \n" +
            "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
            "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
            "				WHERE refCustCreditMemoID = cps.id  \n" +
            "				AND refPaymentMode = 'CA'  \n" +
            "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
            "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0  \n" +
            "                    ) totalRefundIssuedAmount  \n" +
            "		FROM customer_packingslip AS cps  \n" +
            "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "		AND cps.isDeleted = 0 ;  \n" +
            "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected CM not found from db  \n" +
            "			> original Agreed Refund Amount Of Refund mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "			SELECT tucml.*  \n" +
            "			FROM temp_UI_CustCMDetList tucml  \n" +
            "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
            "			WHERE (  \n" +
            "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* set up default temp table if not created */  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
            "					) THEN  \n" +
            "  \n" +
            "  \n" +
            "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
            "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
            "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
            "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
            "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
            "			`isMarkAsPaid` , `status` , `subStatus` ,  \n" +
            "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
            "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
            "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
            "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
            "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
            "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
            "			pBillToName, pBillToAddress , pBillToAddress , pBillToName ,  \n" +
            "			pIsMarkAsPaid , 1 , 1 ,  \n" +
            "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
            "  \n" +
            "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
            "  \n" +
            "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
            "			/* add selected refund payment details data */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
            "					`comment` ,  \n" +
            "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
            "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
            "				COMMENT ,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
            "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			/* update refund payment status details */  \n" +
            "			UPDATE packingslip_invoice_payment psip  \n" +
            "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "			SET psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "						END) ,  \n" +
            "				updatedBy = pUserID,  \n" +
            "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
            "			AND psip.isPaymentVoided = 0  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
            "			/* add selected refund credit memo details data */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
            "					`comment` ,  \n" +
            "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
            "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
            "				COMMENT ,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
            "			UPDATE customer_packingslip cps  \n" +
            "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
            "					FROM packingslip_invoice_payment  \n" +
            "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
            "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
            "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
            "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
            "  \n" +
            "						   ELSE cps.paymentStatus END  \n" +
            "						) ,  \n" +
            "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "						END) ,  \n" +
            "				cps.updatedBy = pUserID,  \n" +
            "				cps.updateByRoleId = pUserRoleID ,  \n" +
            "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[0] - store procedure status */  \n" +
            "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
            "		SELECT 0 AS 'spStatus' ;  \n" +
            "	ELSE  \n" +
            "		SELECT 1 AS 'spStatus' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[1] - get all mis match amount records or deleted payment */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
            "  \n" +
            "	/* Resp[2] - get all mis match amount records or deleted CM */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "  \n" +
            "	/* Resp[3] - newly inserted refund master id for Refund Transaction  */  \n" +
            "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
            "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
            "	IN pCustPaymentDetList JSON,  \n" +
            "	IN pCustCMDetList JSON,  \n" +
            "	IN pCustRefundMstID INT,  \n" +
            "	IN pMfgcodeID INT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "	IN pPaymentDate DATE,  \n" +
            "	IN pPaymentAmount DECIMAL(18,8),  \n" +
            "	IN pPaymentType INT,  \n" +
            "	IN pAccountReference VARCHAR(50),  \n" +
            "	IN pBankAccountMasID INT,  \n" +
            "	IN pBankAccountNo VARCHAR(50),  \n" +
            "	IN pBankName VARCHAR(255),  \n" +
            "	IN pRemark VARCHAR(1000),  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTotSelectedPayOfCust INT,  \n" +
            "	IN pTotSelectedCMOfCust INT,  \n" +
            "	IN pDeleteCustPaymentDetList JSON,  \n" +
            "	IN pDeleteCustCMDetList JSON,  \n" +
            "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
            "	IN pUserID INT,  \n" +
            "	IN pUserRoleID INT,  \n" +
            "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
            "	IN pBillToName VARCHAR(100) ,  \n" +
            "	IN pBillToAddress VARCHAR(255) ,  \n" +
            "	IN pIsMarkAsPaid TINYINT,  \n" +
            "	IN pSubStatus INT,  \n" +
            "	IN pStatus INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
            "	IF(pTotSelectedPayOfCust > 0  \n" +
            "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
            "		/* get/map all Customer Payment Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustPaymentDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustPaymentDetList_JT ;  \n" +
            "		-- select * from temp_UI_CustPaymentDetList;  \n" +
            "  \n" +
            "		/* get all customer refund > against total payment list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
            "			SELECT psip.id AS paymentMstID,  \n" +
            "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				psipd.id AS paymentDetMstID,  \n" +
            "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
            "			FROM packingslip_invoice_payment psip  \n" +
            "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
            "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "			AND psip.isDeleted = 0  \n" +
            "			AND psip.isPaymentVoided = 0 ;  \n" +
            "  \n" +
            "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
            "  \n" +
            "            /* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
            "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
            "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "			SELECT tucipl.*  \n" +
            "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
            "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
            "			WHERE (  \n" +
            "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "  \n" +
            "  \n" +
            "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
            "				SELECT 	*  \n" +
            "				FROM 	JSON_TABLE(  \n" +
            "					pDeleteCustPaymentDetList,  \n" +
            "						\"$[*]\" COLUMNS(  \n" +
            "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
            "						)  \n" +
            "				) AS DeleteCustPaymentDetList_JT ;  \n" +
            "  \n" +
            "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
            "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
            "					SELECT id FROM packingslip_invoice_payment_det  \n" +
            "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
            "  \n" +
            "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
            "  \n" +
            "  \n" +
            "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
            "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
            "  \n" +
            "			/* start - create/update/delete payment refund process */  \n" +
            "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
            "				/* delete those which are unselected(from UI) payment det */  \n" +
            "				UPDATE packingslip_invoice_payment_det  \n" +
            "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
            "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "				AND isPaymentVoided = 0  \n" +
            "				AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
            "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
            "  \n" +
            "				/* update refund payment status details which are deleted (unselected from UI) */  \n" +
            "				UPDATE packingslip_invoice_payment psip  \n" +
            "					JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "				SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
            "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "								END)  \n" +
            "							ELSE 'NA' END),  \n" +
            "					updatedBy = pUserID,  \n" +
            "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
            "				AND psip.isPaymentVoided = 0  \n" +
            "				AND psip.isDeleted = 0 ;  \n" +
            "  			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			/* update all payment det amount whose amount is changed from UI */  \n" +
            "			UPDATE packingslip_invoice_payment_det pipd  \n" +
            "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
            "					FROM temp_UI_CustPaymentDetList  \n" +
            "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
            "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
            "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
            "				pipd.comment = tucipdl.comment ,  \n" +
            "				pipd.updatedBy = pUserID,  \n" +
            "				pipd.updateByRoleId = pUserRoleID ,  \n" +
            "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
            "			AND pipd.isPaymentVoided = 0  \n" +
            "			AND pipd.isDeleted = 0  \n" +
            "			;  \n" +
            "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
            "  \n" +
            "			/* insert newly selected payment det */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
            "				`comment` ,  \n" +
            "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
            "				COMMENT ,  \n" +
            "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustPaymentDetList  \n" +
            "			WHERE paymentDetMstID IS NULL  \n" +
            "			;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
            "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			/* update refund payment status details which are newly created/updated */  \n" +
            "			UPDATE packingslip_invoice_payment psip  \n" +
            "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
            "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "							END)  \n" +
            "						ELSE 'NA' END) ,  \n" +
            "				updatedBy = pUserID,  \n" +
            "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
            "			AND psip.isPaymentVoided = 0  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	/* customer credit memo refund cases */  \n" +
            "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
            "  \n" +
            "	        /* get/map all Customer CM Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustCMDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustCMDetList_JT ;  \n" +
            "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all customer Refund > against total CM list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
            "				SELECT cps.id AS custCreditMemoMstID,  \n" +
            "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) totalRefundIssuedAmount  \n" +
            "			FROM customer_packingslip AS cps  \n" +
            "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0 ;  \n" +
            "  \n" +
            "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected CM not found from db  \n" +
            "			> original Agreed Refund Amount Of Refund mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "			SELECT tucml.*  \n" +
            "			FROM temp_UI_CustCMDetList tucml  \n" +
            "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
            "			WHERE (  \n" +
            "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "  \n" +
            "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
            "				SELECT 	*  \n" +
            "				FROM 	JSON_TABLE(  \n" +
            "					pDeleteCustCMDetList,  \n" +
            "						\"$[*]\" COLUMNS(  \n" +
            "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
            "						)  \n" +
            "				) AS DeleteCustCMtDetList_JT ;  \n" +
            "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
            "  \n" +
            "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
            "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
            "					SELECT id FROM packingslip_invoice_payment_det  \n" +
            "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
            "  \n" +
            "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
            "  \n" +
            "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
            "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
            "				/* delete those which are unselected(from UI) CM det */  \n" +
            "				UPDATE packingslip_invoice_payment_det  \n" +
            "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
            "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "				AND isPaymentVoided = 0  \n" +
            "				AND isDeleted = 0 ;  \n" +
            "				-- select 'deleted refund for CM list' ;  \n" +
            "  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
            "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
            "				UPDATE customer_packingslip cps  \n" +
            "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
            "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "									END)  \n" +
            "							ELSE 'NA' END),  \n" +
            "					cps.updatedBy = pUserID,  \n" +
            "					cps.updateByRoleId = pUserRoleID ,  \n" +
            "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
            "				AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			/* update all CM det amount whose amount is changed from UI */  \n" +
            "			UPDATE packingslip_invoice_payment_det pipd  \n" +
            "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
            "					FROM temp_UI_CustCMDetList  \n" +
            "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
            "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
            "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
            "				pipd.comment = tucipdl.comment ,  \n" +
            "				pipd.updatedBy = pUserID,  \n" +
            "				pipd.updateByRoleId = pUserRoleID ,  \n" +
            "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
            "			AND pipd.isPaymentVoided = 0  \n" +
            "			AND pipd.isDeleted = 0  \n" +
            "			;  \n" +
            "  \n" +
            "			/* insert newly selected CM det */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
            "				`comment` ,  \n" +
            "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
            "				COMMENT ,  \n" +
            "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustCMDetList  \n" +
            "			WHERE paymentDetMstID IS NULL  \n" +
            "			;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			/* update customer credit memo - payment status and refund status   */  \n" +
            "			UPDATE customer_packingslip cps  \n" +
            "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
            "					FROM packingslip_invoice_payment  \n" +
            "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
            "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
            "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
            "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
            "  \n" +
            "						   ELSE cps.paymentStatus END  \n" +
            "						) ,  \n" +
            "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
            "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "								END)  \n" +
            "						      ELSE 'NA' END),  \n" +
            "				cps.updatedBy = pUserID,  \n" +
            "				cps.updateByRoleId = pUserRoleID ,  \n" +
            "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "		/* update payment master details */  \n" +
            "		UPDATE packingslip_invoice_payment  \n" +
            "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
            "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
            "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
            "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
            "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
            "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
            "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
            "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
            "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
            "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
            "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "		WHERE id = pCustRefundMstID  \n" +
            "		AND isPaymentVoided = 0  \n" +
            "		AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	/* set up default temp table if not created */  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
            "  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "  \n" +
            "	/* Resp[0] - store procedure status */  \n" +
            "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
            "		) THEN  \n" +
            "		SELECT 0 AS 'spStatus' ;  \n" +
            "	ELSE  \n" +
            "		SELECT 1 AS 'spStatus' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
            "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
            "  \n" +
            "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
            "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
            "  \n" +
            "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
            "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
            "  \n" +
            "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
            "  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(  \n" +
            "	IN pCustRefundMstID INT ,  \n" +
            "	IN pRefPaymentMode VARCHAR(5)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "		DECLARE v_TimeZone VARCHAR(50);  \n" +
            "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "		SELECT 	psip.id,  \n" +
            "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
            "			psip.paymentType,  gc.gencCategoryName AS paymentMethodName,  \n" +
            "			psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
            "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
            "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  \n" +
            "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided = 0 THEN  '' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,  \n" +
            "			psip.status , psip.subStatus , psip.isMarkAsPaid ,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
            "				ELSE '' END) AS refundSubStatusText,  \n" +
            "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
            "			psip.billToName, psip.billToAddress,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
            "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,  \n" +
            "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdbyInitial  \n" +
            "  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "			JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		WHERE id = pCustRefundMstID  \n" +
            "		AND refPaymentMode = pRefPaymentMode  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "		;  \n" +
            "	END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustSuppRefundListByPaymentNum` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustSuppRefundListByPaymentNum`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPaymentNumber VARCHAR(100),  \n" +
            "	IN pCustRefundMstID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_refundMstIDWhrClause VARCHAR(50);  \n" +
            "  \n" +
            "	SET v_refundMstIDWhrClause = '';  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "  \n" +
            "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pCustRefundMstID IS NULL AND pCustRefundMstID != '') THEN  \n" +
            "  		SET v_refundMstIDWhrClause = CONCAT(\" AND psip.id = \", pRefundMstID );  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	SET @Sproc_GetCustSuppRefundListByPaymentNum = CONCAT(\"  \n" +
            "		SELECT  psip.id,  \n" +
            "			psip.mfgcodeID ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS customerCodeName,  \n" +
            "			psip.bankName,  \n" +
            "			psip.bankAccountNo,  \n" +
            "			psip.paymentType,  \n" +
            "			psip.bankAccountMasID,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate AS refundDate,  \n" +
            "			psip.paymentAmount,  \n" +
            "			psip.accountReference,  \n" +
            "			psip.remark,  \n" +
            "			psip.paymentNumber,  \n" +
            "			gc.gencCategoryName AS paymentMethod,  \n" +
            "			gc.systemGenerated AS systemGeneratedPaymentMethod,  \n" +
            "			psip.refGencTransModeID , gtmm.modeName,  \n" +
            "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
            "			psip.refPaymentMode ,  \n" +
            "			(CASE WHEN psip.refPaymentMode = 'CR' THEN 'Customer Refund'  \n" +
            "				WHEN psip.refPaymentMode = 'P' THEN 'Supplier Payment' ELSE ''  \n" +
            "				END) AS entityNameInApplied,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
            "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		     LEFT JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
            "		WHERE psip.paymentNumber = '\", pPaymentNumber ,\"'  \n" +
            "		\",v_refundMstIDWhrClause,\"  \n" +
            "		AND psip.refPaymentMode IN ('CR','P')  \n" +
            "		AND psip.isPaymentVoided = 0  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "  \n" +
            "            \");  \n" +
            "  \n" +
            "      --  select @Sproc_GetCustSuppRefundListByPaymentNum;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	 -- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pCustomerIDs VARCHAR(16383),  \n" +
            "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
            "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
            "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
            "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
            "	IN pExactPaymentNumberSearch TINYINT,  \n" +
            "	IN pPaymentNumber VARCHAR(1000),  \n" +
            "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
            "	IN pAmount VARCHAR(50),  \n" +
            "	IN pExactRefundAmountSearch TINYINT,  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "	IN pFromCMPaymentDate DATE,  \n" +
            "	IN pToCMPaymentDate DATE,  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTransModeType INT,  \n" +
            "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
            "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
            "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
            "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
            "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "        SET v_CMDateCon = '';  \n" +
            "        SET v_PaymentDateCon = '';  \n" +
            "        SET v_CMPaymentDateWhereClause = '';  \n" +
            "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
            "  \n" +
            "  \n" +
            "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pAmount IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
            "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
            "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
            "  \n" +
            "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
            "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
            "			AND  \n" +
            "			(  \n" +
            "				EXISTS(  \n" +
            "					SELECT  1  \n" +
            "					FROM packingslip_invoice_payment_det pipddt  \n" +
            "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
            "					WHERE pipddt.refPayementid = psip.id  \n" +
            "					',v_PaymentDateCon,'  \n" +
            "					AND pipddt.isDeleted=0  \n" +
            "				 )  \n" +
            "				 OR  \n" +
            "				 EXISTS(  \n" +
            "					SELECT  1  \n" +
            "					FROM packingslip_invoice_payment_det pipddt  \n" +
            "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
            "					WHERE pipddt.refPayementid = psip.id  \n" +
            "					',v_CMDateCon,'  \n" +
            "					AND pipddt.isDeleted=0  \n" +
            "				 )  \n" +
            "			)  \n" +
            "  \n" +
            "		');  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
            "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
            "		SELECT  psip.id,  \n" +
            "			psip.mfgcodeID ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
            "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
            "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
            "									ELSE NULL END) AS voidedAt,  \n" +
            "			psip.bankName,  \n" +
            "			psip.bankAccountNo,  \n" +
            "			psip.paymentType,  \n" +
            "			psip.bankAccountMasID,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate AS refundDate,  \n" +
            "			psip.paymentAmount,  \n" +
            "			psip.accountReference,  \n" +
            "			psip.remark,  \n" +
            "			psip.paymentNumber,  \n" +
            "			gc.gencCategoryName paymentMethod,  \n" +
            "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
            "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
            "				ELSE NULL END) AS paymentCMList ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
            "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
            "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
            "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
            "			psip.offsetAmount ,  \n" +
            "			psip.refGencTransModeID , gtmm.modeName,  \n" +
            "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
            "			psip.status , psip.subStatus ,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
            "				ELSE '' END) AS refundSubStatusText,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
            "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
            "			psip.isMarkAsPaid,  \n" +
            "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
            "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
            "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
            "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList  \n" +
            "					FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
            "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  \n" +
            "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
            "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
            "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList  \n" +
            "					 FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
            "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  \n" +
            "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
            "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		WHERE psip.refPaymentMode = 'CR'  \n" +
            "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
            "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "  \n" +
            "            \");  \n" +
            "  \n" +
            "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	 -- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceCustRefundReport` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
            "	IN pPaymentID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "		/* Refund master details */  \n" +
            "		SELECT pip.id, pip.accountReference,  \n" +
            "			pip.paymentDate, pip.paymentNumber,  \n" +
            "			pip.paymentAmount,  \n" +
            "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
            "			pip.payToName ,   pip.payToAddress,  \n" +
            "			 pip.billToName AS customerName,  \n" +
            "			 pip.billToAddress AS customerAddress,  \n" +
            "			ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
            "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
            "			g.gencCategoryName AS paymentType ,  \n" +
            "			pip.remark  \n" +
            "		FROM packingslip_invoice_payment pip  \n" +
            "			LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
            "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
            "		WHERE pip.id = pPaymentID  \n" +
            "		AND pip.refPaymentMode = 'CR'  \n" +
            "		AND pip.isDeleted = 0  ;  \n" +
            "  \n" +
            "  \n" +
            "		/* get refunded payment or refunded credit memo details */  \n" +
            "		SELECT  \n" +
            "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
            "				ELSE NULL END) AS paymentCMNumber ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
            "				ELSE NULL END) AS paymentCMDate ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
            "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
            "				ELSE NULL END) AS commentForPaymentCM  \n" +
            "  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
            "					FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
            "					WHERE psipd.refPayementid = pPaymentID  \n" +
            "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
            "					 ) payRefundDetTemp  \n" +
            "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
            "					 FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
            "					WHERE psipd.refPayementid = pPaymentID  \n" +
            "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
            "					) cmRefundDetTemp  \n" +
            "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		WHERE psip.id = pPaymentID  \n" +
            "		AND psip.refPaymentMode = 'CR'  \n" +
            "		AND psip.isDeleted = 0  ;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		/* Default set company (isCompany = 1) address details  */  \n" +
            "		SELECT CONCAT(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
            "			cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
            "			cu.email AS companyEmail,cu.primaryContactName AS companyContactName,  \n" +
            "			(SELECT `name` FROM company_info WHERE isDeleted = 0) companyName  \n" +
            "		FROM customer_addresses cua  \n" +
            "			JOIN mfgcodemst cu ON cu.id = cua.customerId AND cu.isDeleted = 0  \n" +
            "			JOIN countrymst c ON c.countryID = cua.countryID AND c.isDeleted = 0  \n" +
            "		WHERE cua.addressType = 'B'  \n" +
            "		AND cu.isCompany = 1  \n" +
            "		AND cua.isDefault = 1  \n" +
            "		AND cua.isDeleted = 0;  \n" +
            "  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
            "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
            "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
            "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
            "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,  \n" +
            "					NEW.paymentNumber,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
            "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),  \n" +
            "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
            "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
            "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
            "		  FROM genericcategory  \n" +
            "		 WHERE gencCategoryID = OLD.paymentType  \n" +
            "		 LIMIT 1;  \n" +
            "  \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
            "		  FROM genericcategory  \n" +
            "		 WHERE gencCategoryID = NEW.paymentType  \n" +
            "		 LIMIT 1;  \n" +
            "  \n" +
            "         INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Payment Method\",								vOldval,  \n" +
            "					vNewval,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 		(vTableName,									NEW.id,  \n" +
            "					\"Account Reference\",								OLD.accountReference,  \n" +
            "					NEW.accountReference,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
            "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
            "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,									NEW.id,  \n" +
            "					\"Bank Name\",								OLD.bankName,  \n" +
            "					NEW.bankName,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Comments\",									OLD.remark,  \n" +
            "					NEW.remark,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),  \n" +
            "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "			 VALUES 	(vTableName,									NEW.id,  \n" +
            "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
            "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
            "		IF NEW.isDeleted = TRUE THEN  \n" +
            "			SET vNewval = 'Deleted';  \n" +
            "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
            "			SET vNewval = 'Restored';  \n" +
            "		ELSE  \n" +
            "			SET vNewval = 'Unknown action on delete';  \n" +
            "        END IF;  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "                    Colname,									Oldval,  \n" +
            "                    Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,								NEW.id,  \n" +
            "                    vNewval,									NULL,  \n" +
            "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
            "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
            "				END;  \n" +
            "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
            "				END;  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
            "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
            "						ELSE \"Payment Status\" END), 						vOldval,  \n" +
            "					vNewval,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "  \n" +
            "  \n" +
            "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "							(tableName,									refPaymentID,  \n" +
            "							Colname,									Oldval,  \n" +
            "							Newval,										createdAt,  \n" +
            "							createdBy,									createByRoleId,  \n" +
            "							updatedAt,									updatedBy,  \n" +
            "							updateByRoleId)  \n" +
            "				  VALUES 	(vTableName,										NEW.id,  \n" +
            "							\"Voided Date\",							'',  \n" +
            "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,  \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "  \n" +
            "  \n" +
            "			  INSERT INTO supplier_invoice_payment_history  \n" +
            "							(tableName,									refPaymentID,  \n" +
            "							Colname,									Oldval,  \n" +
            "							Newval,										createdAt,  \n" +
            "							createdBy,									createByRoleId,  \n" +
            "							updatedAt,									updatedBy,  \n" +
            "							updateByRoleId)  \n" +
            "				  VALUES 	(vTableName,										NEW.id,  \n" +
            "							\"Voided By\",									'',  \n" +
            "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,  \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "		  END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
            "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
            "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
            "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
            "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
            "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
            "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
            "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Locked Date\",									'',  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Locked By\",									'',  \n" +
            "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
            "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
            "				FROM mfgcodemst  \n" +
            "				WHERE id =OLD.mfgcodeID  \n" +
            "				ORDER BY id DESC LIMIT 1;  \n" +
            "			END IF;  \n" +
            "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
            "				FROM mfgcodemst  \n" +
            "				WHERE id =NEW.mfgcodeID  \n" +
            "				ORDER BY id DESC LIMIT 1;  \n" +
            "			END IF;  \n" +
            "			  INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Supplier\",									vOldval,  \n" +
            "						vNewval,												OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Pay To name\",									OLD.payToName,  \n" +
            "						NEW.payToName,									OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Pay To Address\",									OLD.payToAddress,  \n" +
            "						NEW.payToAddress,								OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Bill To Name\",									OLD.billToName,  \n" +
            "						NEW.billToName,									OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Bill To Address\",								OLD.billToAddress,  \n" +
            "						NEW.billToAddress,								OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "  \n" +
            "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,						refPaymentID,  \n" +
            "						Colname,						Oldval,  \n" +
            "						Newval,							createdAt,  \n" +
            "						createdBy,						createByRoleId,  \n" +
            "						updatedAt,						updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,							NEW.id,  \n" +
            "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
            "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
            "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "    END IF;  \n" +
            "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
            "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
            "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
            "						ELSE '' END),								OLD.offsetAmount,  \n" +
            "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "        END IF;  \n" +
            "  \n" +
            "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,								NEW.id,  \n" +
            "					\"COA\",  \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
            "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
            "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
            "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "        END IF;  \n" +
            "    END IF;  \n" +
            "END;  \n" +             
            /* **************************** Add Script Version -> 25-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5169,'2.00','V1',' customer refund sps #36035 merge from main to dev - KS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5169:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDeleteUIDValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDeleteUIDValidation`(  \n" +
                "	IN pIDs LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipId INT;  \n" +
                "    DECLARE v_BinId INT;  \n" +
                "    DECLARE v_PartId INT;  \n" +
                "    DECLARE v_PackagingId INT;  \n" +
                "    DECLARE v_Count INT;  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "  \n" +
                "     /* To handle Response */  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail  \n" +
                "    (  \n" +
                "		partId INT,  \n" +
                "        packaging INT,  \n" +
                "        packingSlipId INT,  \n" +
                "        binId INT,  \n" +
                "		uidData LONGTEXT,  \n" +
                "		pidCode VARCHAR(255),  \n" +
                "        packingSlipNumber VARCHAR(255),  \n" +
                "        binName VARCHAR(255),  \n" +
                "        packagingName VARCHAR(255),  \n" +
                "        uidCount INT,  \n" +
                "        receivedStatus VARCHAR(5),  \n" +
                "        receivedStatusValue VARCHAR(50),  \n" +
                "        supplierID INT,  \n" +
                "        supplierName VARCHAR(255)  \n" +
                "	);  \n" +
                "  \n" +
                "    /* create temp table to check internal umid criteria for errorcode 1 & 2 */  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "    CREATE TEMPORARY TABLE tempUIDDet AS  \n" +
                "		SELECT 	css.id,				css.uid,				css.refcompid,  \n" +
                "				css.packaging,		a.packingSlipId,		css.fromBin,  \n" +
                "                c.PIDCode,			a.packingSlipNumber,    a.receivedStatus,  \n" +
                "                a.supplierID, 		a.packingSlipModeStatus,  \n" +
                "                fun_getPackingSlipDetailStatusByKey(a.receivedStatus) receivedStatusValue,  \n" +
                "                fun_getBinNameByID(css.fromBin) binName,  \n" +
                "                fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
                "				fun_getMfgCodeAndNameByID(a.supplierID) supplierName  \n" +
                "		FROM  \n" +
                "			component_sid_stock css  \n" +
                "				INNER JOIN	component c ON css.refcompid = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN  \n" +
                "					(SELECT  \n" +
                "						cspd.refComponentSidStockID, ps.id packingSlipId, 		ps.packingSlipNumber,  \n" +
                "                        psd.receivedStatus,			 ps.packingSlipModeStatus,  \n" +
                "                        ps.mfgCodeID supplierID  \n" +
                "					FROM  \n" +
                "						component_sid_stock_packing_detail cspd  \n" +
                "					INNER JOIN packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id  \n" +
                "						AND psd.isDeleted = 0  \n" +
                "					INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  \n" +
                "						AND ps.isDeleted = 0  \n" +
                "					GROUP BY cspd.refComponentSidStockID , ps.id, ps.packingSlipNumber) a  \n" +
                "				ON a.refComponentSidStockID = IFNULL(css.parentUIDId, css.id)  \n" +
                "		WHERE FIND_IN_SET(css.id ,pIDs) AND css.fromBin > 0;  \n" +
                "  \n" +
                "	/* check draft mode data exists for selected umid(s) */  \n" +
                "	SELECT COUNT(1) INTO v_Count  \n" +
                "		FROM  \n" +
                "			(SELECT COUNT(1) FROM tempUIDDet WHERE packingSlipModeStatus = 'D' AND fromBin > 0  \n" +
                "						GROUP BY packaging, packingSlipId, fromBin, refcompid, receivedStatus)  as psDraftCount;  \n" +
                "  \n" +
                "	IF(v_Count > 0) THEN  \n" +
                "		/* Set Reponse data for ErrorCode 1 */  \n" +
                "		SET v_ErrorCode = 1;  \n" +
                "		INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
                "				SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid), tu.receivedStatus, tu.receivedStatusValue, tu.supplierID, tu.supplierName  \n" +
                "                FROM tempUIDDet tu WHERE tu.packingSlipModeStatus = 'D' GROUP BY tu.refcompid, tu.packaging, tu.packingSlipId, tu.fromBin, tu.receivedStatus;  \n" +
                "	ELSE  \n" +
                "		SET v_Count = 0;  \n" +
                "		/* check same packingslip, packaging, partid, binid & receivedStatus having data exists for selected umid(s) */  \n" +
                "		SELECT COUNT(1) INTO v_Count  \n" +
                "			FROM  \n" +
                "				(SELECT COUNT(1) FROM tempUIDDet WHERE fromBin > 0 GROUP BY packaging, packingSlipId, fromBin, refcompid, receivedStatus) as psCount;  \n" +
                "  \n" +
                "		IF(v_Count > 1) THEN  \n" +
                "			/* Set Reponse data for ErrorCode 2 */  \n" +
                "			SET v_ErrorCode = 2;  \n" +
                "			INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
                "					SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid), tu.receivedStatus, tu.receivedStatusValue, tu.supplierID, tu.supplierName  \n" +
                "					FROM tempUIDDet tu GROUP BY tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, tu.receivedStatus;  \n" +
                "		ELSE  \n" +
                "			SET v_Count = 0;  \n" +
                "			/* set value for bin, packing slip, packaging and partid */  \n" +
                "			SELECT 	t.packaging, t.packingSlipId, t.fromBin, t.refcompid, t.receivedStatus  \n" +
                "					INTO v_PackagingId, v_PackingSlipId, v_BinId, v_PartId, v_ReceivedStatus  \n" +
                "				FROM tempUIDDet t GROUP BY t.packaging, t.packingSlipId, t.fromBin, t.refcompid, t.receivedStatus;  \n" +
                "  \n" +
                "			/* check any pending umid exits for same bin, packing slip, packaging and partid */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;  \n" +
                "			CREATE TEMPORARY TABLE tempPendingUIDDet AS  \n" +
                "			SELECT	vucp.BinID,		vucp.PartId,	vucp.packingSlipID,		vucp.packagingID,  \n" +
                "					vucp.receivedStatus,			c.PIDCode,				ps.packingSlipNumber,  \n" +
                "					fun_getBinNameByID(vucp.BinID) binName, 				ps.mfgCodeID supplierID,  \n" +
                "					fun_getPackagingNameByID(vucp.packagingID) packagingName,  \n" +
                "					fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "					fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierName  \n" +
                "					FROM  \n" +
                "						vu_umid_creation_pending vucp  \n" +
                "							INNER JOIN	component c ON vucp.PartId = c.id AND c.partType != 4	AND c.isdeleted = 0  \n" +
                "							INNER JOIN	packing_slip_material_receive ps ON ps.id = vucp.packingSlipID	AND ps.isdeleted = 0  \n" +
                "						WHERE	vucp.BalanceQty > 0  \n" +
                "								AND vucp.packagingID = v_PackagingId  \n" +
                "								AND vucp.BinID = v_BinId  \n" +
                "								AND vucp.PartId = v_PartId  \n" +
                "								AND vucp.packingSlipID <> v_PackingSlipId  \n" +
                "								AND vucp.receivedStatus = v_ReceivedStatus;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_Count  \n" +
                "				 FROM tempPendingUIDDet GROUP BY packagingID, packingSlipID, BinID, PartId, receivedStatus;  \n" +
                "  \n" +
                "			IF(v_Count > 0) THEN  \n" +
                "				SET v_ErrorCode = 3;  \n" +
                "				INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
                "					SELECT tp.PartId, tp.packagingID, tp.packingSlipID, tp.BinID, NULL, tp.PIDCode, tp.packingSlipNumber, tp.binName, tp.packagingName, NULL, tp.receivedStatus, tp.receivedStatusValue, tp.supplierID, tp.supplierName  \n" +
                "					FROM tempPendingUIDDet tp  \n" +
                "					GROUP BY tp.packagingID, tp.packingSlipID, tp.BinID, tp.PartId, tp.receivedStatus;  \n" +
                "			ELSE  \n" +
                "				SET v_ErrorCode = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SELECT v_ErrorCode AS errorCode;  \n" +
                "    IF(v_ErrorCode <> 0) THEN  \n" +
                "		SELECT * FROM tempValidationDetail;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT,  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        ps.packingSlipModeStatus,  \n" +
                "                        IF(ps.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	#select @temp_Sproc_RetrieveNonUMIDStockList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_umid_creation_pending`;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`packingSlipID` AS `packingSlipID`,  \n" +
                "        `a`.`packingSlipDetID` AS `packingSlipDetID`,  \n" +
                "        `a`.`packagingID` AS `packagingID`,  \n" +
                "        `a`.`BinID` AS `BinID`,  \n" +
                "        `a`.`warehouseID` AS `warehouseID`,  \n" +
                "        `a`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `a`.`partId` AS `PartId`,  \n" +
                "        `a`.`nickname` AS `nickname`,  \n" +
                "        SUM(`a`.`InQty`) AS `InQty`,  \n" +
                "        SUM(`a`.`OutQty`) AS `UMIDCreatedQty`,  \n" +
                "        SUM(`a`.`returnQty`) AS `returnQty`,  \n" +
                "        ((SUM(IFNULL(`a`.`InQty`, 0)) - SUM(IFNULL(`a`.`OutQty`, 0))) - SUM(IFNULL(`a`.`returnQty`, 0))) AS `BalanceQty`,  \n" +
                "        `a`.`receivedStatus` AS `receivedStatus`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packagingID` AS `packagingID`,  \n" +
                "                `psd`.`binID` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psd`.`partID` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                `psd`.`receivedQty` AS `InQty`,  \n" +
                "                0 AS `OutQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            `packing_slip_material_receive_det` `psd`  \n" +
                "        WHERE  \n" +
                "            (EXISTS( SELECT  \n" +
                "                    1  \n" +
                "                FROM  \n" +
                "                    `packing_slip_material_receive` `p`  \n" +
                "                WHERE  \n" +
                "                    ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)  \n" +
                "                        AND (`p`.`receiptType` = 'P')  \n" +
                "                        AND (`p`.`isDeleted` = 0)))  \n" +
                "                AND (`psd`.`binID` IS NOT NULL)  \n" +
                "                AND (`psd`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `csd`.`packaging` AS `packagingID`,  \n" +
                "                `csd`.`fromBin` AS `BinID`,  \n" +
                "                `csd`.`fromWarehouse` AS `warehouseID`,  \n" +
                "                `csd`.`fromDepartment` AS `parentWarehouseID`,  \n" +
                "                `csd`.`refcompid` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                `csd`.`orgQty` AS `OutQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            ((`component_sid_stock` `csd`  \n" +
                "        JOIN `component_sid_stock_packing_detail` `csp` ON ((`csd`.`id` = `csp`.`refComponentSidStockID`)))  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`csp`.`refPackingSlipDetailID` = `psd`.`id`)))  \n" +
                "        WHERE  \n" +
                "            ((`csd`.`isDeleted` = 0)  \n" +
                "                AND (`csd`.`deletedAt` IS NULL)  \n" +
                "                AND (`csp`.`isDeleted` = 0)  \n" +
                "                AND (`csp`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psds`.`refPackingSlipId` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psds`.`packagingId` AS `packagingID`,  \n" +
                "                `psds`.`binId` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psds`.`partId` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                0 AS `OutQty`,  \n" +
                "                `psds`.`qty` AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            ((`packing_slip_material_receive_det_stock` `psds`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`psd`.`id` = `psds`.`refPackingSlipDetId`)))  \n" +
                "        JOIN `warehousemst` `w` ON (((`w`.`ID` = `psd`.`warehouseID`)  \n" +
                "            AND (`psd`.`refPackingSlipMaterialRecID` = `psds`.`refPackingSlipId`)  \n" +
                "            AND (`psd`.`packagingID` = `psds`.`packagingId`)  \n" +
                "            AND (`psd`.`binID` = `psds`.`binId`)  \n" +
                "            AND (`psd`.`partID` = `psds`.`partId`))))  \n" +
                "        WHERE  \n" +
                "            ((`psds`.`type` = 'PU')  \n" +
                "                AND (`psds`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`isDeleted` = 0))) `a`  \n" +
                "    GROUP BY `a`.`packingSlipID` , `a`.`packagingID` , `a`.`BinID` , `a`.`partId` , `a`.`receivedStatus`;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
                "	IN pPackagingID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pUIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipId INT;  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "  \n" +
                "	SELECT  \n" +
                "             p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus  \n" +
                "		INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus  \n" +
                "        FROM  \n" +
                "            component_sid_stock c  \n" +
                "			JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "            JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
                "            JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
                "  \n" +
                "    SELECT  \n" +
                "		packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
                "        fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
                "        fun_getBinNameByID(BinID) binName,  \n" +
                "        fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
                "        fun_getPackagingNameByID(packagingID) packaging,  \n" +
                "        fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
                "	FROM  \n" +
                "		vu_umid_creation_pending vu  \n" +
                "	WHERE  \n" +
                "		EXISTS(SELECT  \n" +
                "            1  \n" +
                "			FROM  \n" +
                "            component_sid_stock t WHERE  \n" +
                "				t.fromBin = vu.BinID  \n" +
                "                AND t.refcompid = vu.PartId  \n" +
                "                AND t.packaging = vu.packagingID  \n" +
                "                AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
                "  \n" +
                "    SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(255),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(255),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_WhareClause VARCHAR(255);  \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);  \n" +
                "	DECLARE v_AssyId INT;  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "								  	(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID, vu.receivedStatus  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging,css.stockInventoryType, css.woNumber  \n" +
                "				FROM 	component_sid_stock css  \n" +
                "			WHERE 	css.id = pId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "		FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "	AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = FALSE  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	EXISTS (SELECT 1 FROM tempUMIDDetail t WHERE t.fromBin = vu.BinID AND t.refcompid = vu.PartId AND t.packaging = vu.packagingID);  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = FALSE  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = TRUE  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "  \n" +
                "						SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							vBalanceQty AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5170,'2.00','V1','User Story 36069 & 35941  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5170:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021 *********************************** */
            "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPackingSlipID INT,  \n" +
            "    IN pInvoiceLineId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_ParentPackingSlipId INT;  \n" +
            "	DECLARE v_InvoiceSlipId INT;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
            "  \n" +
            "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
            "	SELECT 	*,  \n" +
            "		(  \n" +
            "			CASE  \n" +
            "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
            "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
            "				ELSE NULL  \n" +
            "			END  \n" +
            "		) AS receivedStatusValue,  \n" +
            "        (  \n" +
            "			CASE  \n" +
            "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
            "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
            "				ELSE False  \n" +
            "			END  \n" +
            "		) AS isPendingUMIDDisable  \n" +
            "	FROM 	(  \n" +
            "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
            "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
            "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
            "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
            "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
            "				p.invoicePrice, 				p.disputedPrice,  \n" +
            "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
            "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
            "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
            "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
            "				p.discount,  \n" +
            "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
            "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
            "				p.refCreditDebitInvoiceNo,  \n" +
            "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
            "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
            "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
            "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
            "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
            "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
            "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
            "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
            "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
            "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
            "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
            "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
            "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
            "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
            "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
            "							p.receivedStatus  \n" +
            "						ELSE  \n" +
            "							(SELECT receivedStatus  \n" +
            "							FROM 	packing_slip_material_receive_det  \n" +
            "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
            "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "									AND isDeleted = 0 LIMIT 1)  \n" +
            "					END  \n" +
            "				) receivedStatus,  \n" +
            "				p.remark,  \n" +
            "				p.internalRemark,  \n" +
            "				p.comment,  \n" +
            "				p.internalRef,  \n" +
            "				p.purchaseInspectionComment,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
            "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
            "						ELSE  \n" +
            "							(SELECT COUNT(1)  \n" +
            "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
            "							WHERE EXISTS (  \n" +
            "									SELECT 	1  \n" +
            "									FROM 	packing_slip_material_receive_det pslip  \n" +
            "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
            "											AND 	pslip.id = psmp.lineId  \n" +
            "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "											AND	pslip.isDeleted = 0)  \n" +
            "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
            "					END  \n" +
            "				) AS purchaseRequirementCount,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
            "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
            "						ELSE  \n" +
            "							(SELECT COUNT(1)  \n" +
            "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
            "							WHERE 	EXISTS (  \n" +
            "									SELECT 	1  \n" +
            "									FROM 	packing_slip_material_receive_det psmr  \n" +
            "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
            "										AND	psmr.id = psm.lineId  \n" +
            "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "										AND 	psmr.isDeleted = 0  \n" +
            "									)  \n" +
            "								AND psm.inspectionStatus = 'R'  \n" +
            "								AND psm.isDeleted = 0  \n" +
            "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
            "					END  \n" +
            "				) AS rejectedPurchaseRequirementCount,  \n" +
            "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
            "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
            "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
            "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
            "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
            "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
            "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
            "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
            "				ps.refInvoiceIdForMemo,  \n" +
            "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
            "				ps.refInvoiceNumberForMemo,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
            "						ELSE  \n" +
            "							(SELECT `status`  \n" +
            "							FROM 	packing_slip_material_receive_det  \n" +
            "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
            "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "									AND isDeleted = 0)  \n" +
            "					END  \n" +
            "				) invoiceStatus,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
            "						ELSE  \n" +
            "							(SELECT refCreditDebitInvoiceNo  \n" +
            "							FROM 	packing_slip_material_receive_det  \n" +
            "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
            "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "									AND isDeleted = 0)  \n" +
            "					END  \n" +
            "				) invoiceLineHasMemo,  \n" +
            "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
            "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
            "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
            "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
            "					AND pd.partId = p.partID) commentCount,  \n" +
            "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
            "				p.refPackingSlipIdForRma,  \n" +
            "				p.refPackingSlipDetIdForRMA,  \n" +
            "				p.refInvoiceIdForRma,  \n" +
            "				p.refPackingSlipForRma,  \n" +
            "				p.refInvoiceForRma,  \n" +
            "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
            "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
            "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
            "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
            "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
            "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
            "                ps.packingSlipModeStatus,  \n" +
            "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
            "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty  \n" +
            "		FROM		packing_slip_material_receive_det p  \n" +
            "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
            "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
            "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
            "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
            "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
            "		LEFT JOIN	(  \n" +
            "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
            "					FROM 	packing_slip_material_receive_det ps  \n" +
            "					WHERE 	ps.isDeleted = 0  \n" +
            "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
            "		LEFT JOIN 	(  \n" +
            "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
            "					FROM 	packing_slip_material_receive_det det  \n" +
            "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
            "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
            "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
            "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
            "		AND 		p.isDeleted = 0  \n" +
            "	) a;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
            "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
            "	FROM		packing_slip_material_receive_det psm  \n" +
            "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
            "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
            "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
            "	AND			ps.receiptType = 'P'  \n" +
            "	AND			psm.isDeleted = 0  \n" +
            "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
            "  \n" +
            "	-- Set received qty detail  \n" +
            "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
            "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
            "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
            "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
            "											invoiceTotalDue As invoiceTotalDue,  \n" +
            "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
            "										 where b.refPackingslipInvoiceID = c.id  \n" +
            "                                           and a.refPaymentMode = 'P'  \n" +
            "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
            "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
            "	PREPARE query3 FROM @SQLStatement3;  \n" +
            "	EXECUTE query3;  \n" +
            "	DEALLOCATE PREPARE query3;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 26-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5171,'2.00','V1','User Story 35996: Restrict to create RMA of packing slip if it is in Draft Mode - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5171:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5172,'2.00','V1','Bug 36313: QA testing Bugs for User Story 36032: Kit List page: Set background color based on days left or passed release date - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5172:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021 *********************************** */
                "CALL sproc_Utility_UpdateIconInPageDetail('Configuration','t-icons-system');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Home Menu Category','t-icons-home-menu-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Home Menu Category','t-icons-home-menu-category add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Entity','t-icons-data-tracking-entity');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('User','t-icons-user');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO','t-icons-eco-ecn');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category','t-icons-eco-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category Attributes','t-icons-eco-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer','t-icons-customer');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier','t-icons-supplier');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Employee','t-icons-personnel');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Certificate Standard','t-icons-standard-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Standards','t-icons-standard');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Standards Class','t-icons-standard-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Department','t-icons-department');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Employee Title','t-icons-title');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample Groups','t-icons-equipment-group');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample Ownerships','t-icons-equipment-owner');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Standard Type','t-icons-standard-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample Types','t-icons-equipment-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Operation Type','t-icons-operation-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Location Type','t-icons-location');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipments, Workstations & Samples','t-icons-equipment');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Standard Message','t-icons-predefined-chat-message');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defects','t-icons-inspection-defect');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defect Category','t-icons-defect-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Initial Stock List','t-icons-initial-stock');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Page','t-icons-pages');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Operation','t-icons-operation-engineering');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Operations','t-icons-operation');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Master Template','t-icons-operation-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Order','t-icons-production-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Task List','t-icons-task-list');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Role','t-icons-role');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Page Rights','t-icons-page-rights');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Role','t-icons-role add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Certificate standard','t-icons-standard add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Standard Message','t-icons-predefined-chat-message add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Operation','t-icons-operation add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Widget','t-icons-widget');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Reports','t-icons-report-form');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('MIS Report','t-icons-mis-report');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Shipping Type','t-icons-shipping-method');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Transaction','t-icons-sales-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Terms','t-icons-payment-term');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Parts List','t-icons-part-master');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('BOM','t-icons-bom');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ','t-icons-rfq');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Custom Forms','t-icons-custom-form');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manufacturer','t-icons-manufacturer');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Setting','t-icons-rfq-settings');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Job Type','t-icons-job-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Rfq Type','t-icons-rfq-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Reason','t-icons-response-reasons');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Unit Conversion','t-icons-unit-conversion');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Receiving Material','t-icons-umid-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Receiving Material','t-icons-umid-list');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Assemblies','t-icons-part-master-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Request For Shipment','t-icons-shipment-request');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Request For Shipment','t-icons-shipment-request add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('In House Assembly Stock','t-icons-assembly-stock');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Transaction wise Work Order Data Fields','t-icons-wo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage RFQ','t-icons-rfq add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Additional Requirement','t-icons-rfq-requirement');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Mounting Type','t-icons-mounting-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Who Acquired Who','t-icons-merger-acquisitions');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('BOM Quote','t-icons-bom-quote');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Settings','t-icons-data-key');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Bill Of Material Reasons','t-icons-bom-reasons');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Reason','t-icons-rfq-reasons');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Chart Raw Data Category','t-icons-data-source');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Dynamic Message','t-icons-configurable-message');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Part Type','t-icons-functional-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Keyword','t-icons-key-word');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Help Blog','t-icons-help-blog');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Equipment, Workstation & Sample Group','t-icons-equipment-group add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Equipment, Workstation & Sample Type','t-icons-equipment-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Equipment, Workstation & Sample Ownership','t-icons-equipment-owner add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Standard Type Generic Category','t-icons-standard-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Employee Title Generic Category','t-icons-title add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Operation Type Generic Category','t-icons-operation-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Location Type Generic Category','t-icons-location add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Shipping Type Generic Category','t-icons-shipping-method add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Terms Generic Category','t-icons-payment-term add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Quote Attributes','t-icons-rfq-quote');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Part Status','t-icons-part-status');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Cost Category','t-icons-cost-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Part','t-icons-supplier-part');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manufacturer Part','t-icons-part-master');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Country','t-icons-country');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Connector Type','t-icons-connector-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Developer','t-icons-developer');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Communication','t-icons-communication');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Personnel','t-icons-personnel-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('CustomerMenu','t-icons-customer-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample','t-icons-equipment-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Miscellaneous','t-icons-misc');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Sales OrderMenu','t-icons-so-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Receiving','t-icons-receiving-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Ordermenu','t-icons-wo-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Material Management','t-icons-material-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Assembly Types','t-icons-assembly-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Warehouse-Bin','t-icons-warehouse-bin-rack');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Warehouse','t-icons-warehouse');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Bin','t-icons-bin');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Parts Detail','t-icons-part-master add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Xfer Bulk Material','t-icons-transfer-bulk5');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Component Logical Group','t-icons-mounting-group');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Error Code','t-icons-bom-error');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions','t-icons-quote-term');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Categories','t-icons-quote-term-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Attributes','t-icons-quote-term-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Part Attributes','t-icons-part-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Material Receipt','t-icons-packing-slip');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Packing Slip','t-icons-packing-slip add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Financial Management','t-icons-financial-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Invoices','t-icons-supplier-invoice');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Invoices','t-icons-supplier-invoice add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Reserve Stock Request','t-icons-reserve-stock');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Packaging Type','t-icons-packaging-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('UMID Pending Parts','t-icons-umid-pending');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Narrative Master Templates','t-icons-narrative-master-templates');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Order Narrative History','t-icons-narrative-history');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Alias Part Validations','t-icons-part-validation');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Part Price Break Details','t-icons-part-price-break');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Purchase Management','t-icons-purchase-management');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Kit List','t-icons-kit-list-2');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Report','t-icons-report-list');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('PO Status Report','t-icons-customer-po-report');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Document Types','t-icons-document-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Document Type','t-icons-document-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Error Logs','t-icons-error-log');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Type','t-icons-eco-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage ECO/DFM Type','t-icons-eco-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Charges Type','t-icons-charge-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Charges Type','t-icons-charge-type add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Labor Cost Template','t-icons-labor-cost');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Labor Cost Template','t-icons-labor-cost add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Invoice Packing Slip','t-icons-packing-slip');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Credit Memo','t-icons-supplier-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Debit Memo','t-icons-supplier-debit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Credit Invoices','t-icons-supplier-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Debit Invoices','t-icons-supplier-debit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Package/Case(Shape) Type','t-icons-package-case-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Part Operational Attributes','t-icons-part-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Kit Management','t-icons-kit-management-1');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Print Format','t-icons-label-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Label Templates','t-icons-label-template add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Notification Category','t-icons-notification-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Notification Category','t-icons-notification-category add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Employee Detail','t-icons-personnel add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Equipment, Workstation & Sample Detail','t-icons-equipment add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Inovaxe Request Response History','t-icons-inovax-history');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Rack','t-icons-rack');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Detail','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Bill To Address','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Shipping Address','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Contacts','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer MISC','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Personnel Mapping','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer CPN (Component)','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Part LOA','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer E-Mail Report Setting','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Detail','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Billing Address','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Shipping Address','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Contacts','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier MISC','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Pending WO Creation List','t-icons-wo-pending');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Request For Shipment - Detail','t-icons-shipment-request add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Department Detail','t-icons-department add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Operation Details','t-icons-operation add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Unallocated UMID Xfer History','t-icons-transfer-history');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Dynamic Reports','t-icons-dynamic-report');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Inventory','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Quote Attributes','t-icons-supplier-quote');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Requirements & Comments Template','t-icons-requirement-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Quote List','t-icons-supplier-quote');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Add Supplier Quote','t-icons-supplier-quote add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Calibration Details','t-icons-calibration');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Packing Slip','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Packing Slip','t-icons-customer-ps add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Packing Slip MISC','t-icons-customer-ps add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Add Calibration Detail','t-icons-calibration add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Attributes Template','t-icons-supplier-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('FOB','t-icons-fob');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Stock Adjustment','t-icons-stock-adjustment');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Add Stock Adjustment','t-icons-stock-adjustment add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Company Profile','t-icons-company-profile');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoices','t-icons-customer-invoice');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Invoice','t-icons-customer-invoice add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Email Template','t-icons-email-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Agreement Template','t-icons-agreement-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Release Notes','t-icons-release-note');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Packaging Management','t-icons-box-serial');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Xfer Material','t-icons-transfer-material');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Count Material','t-icons-count111');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Xfer Bin','t-icons-xfer-bin');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Payment Methods','t-icons-payment-method');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Payable Payment Methods','t-icons-payment-method add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Bank Account','t-icons-bank-account');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Payment History','t-icons-supplier-payment');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Camera List','t-icons-camera-list');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Attributes (NRE, OH, Markup, etc.)','t-icons-quote-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer RMA Shipping Address','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier RMA Shipping Address','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Manufacturer RMA Shipping Address','t-icons-manufacturer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier RMA & RMA Packing Slip','t-icons-supplier-rma');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier RMA & RMA Packing Slip','t-icons-supplier-rma add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Documents','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Picture Station','t-icons-picture-station');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RMA & RMA Packing Slip','t-icons-supplier-rma');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Payment','t-icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Payment','t-icons-customer-pmt add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Payment Documents','t-icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Credit Memo List','t-icons-customer-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Credite Memo Detail','t-icons-customer-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Credit Memo Documents','t-icons-customer-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Credit Memo MISC','t-icons-customer-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Credit Memo','t-icons-customer-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoice Packing Slip','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Report Category','t-icons-report-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Report Category Type Generic Category','t-icons-report-category add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Requirements & Comments Category','t-icons-requirement-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Requirements & Comments Type Generic Catego','t-icons-requirement-category add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Accounting','t-icons-accounting');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Chart of Accounts','t-icons-coa');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Account Type','t-icons-account-type');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Accounting','t-icons-supplier-accounting');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Accounting','t-icons-customer-accounting');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Payment Type Category','t-icons-payment-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Payment Type Category Generic Category','t-icons-payment-category add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Parts Detail','t-icons-supplier-part add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Payable Payment Methods','t-icons-payment-method');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Manufacturer Documents','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Comment','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Payment Summary','t-icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Payment Details','t-icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Peripheral','t-icons-peripheral');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Logistics','t-icons-logistics');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('SupplierMenu','t-icons-supplier-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Applied Credit Memo','t-icons-apply-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer Credit Memo to Invoice Manage Main','t-icons-apply-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer CM to Invoice','t-icons-apply-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer CM to Invoice Documents','t-icons-apply-credit-memo add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Applied Credit Memo Summary','t-icons-apply-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Applied Credit Memo Details','t-icons-apply-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Split UMID','t-icons-split-umid');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Supplier Call Limits','t-icons-supplier-limit');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer History','t-icons-customer add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier History','t-icons-supplier add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Write Offs','t-icons-customer-write-off');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Applied Write Off Summary','t-icons-customer-write-off');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Applied Write Off Details','t-icons-customer-write-off');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer WOFF to Invoice Manage Main','t-icons-customer-write-off');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer Write Off to Invoice','t-icons-customer-write-off add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Apply Customer Write Off to Invoice Documents','t-icons-customer-write-off add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Refund','t-icons-supplier-refund');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Refund','t-icons-supplier-refund add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Refund Detail','t-icons-supplier-refund add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Supplier Refund Document','t-icons-supplier-refund add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('CPN Parts','t-icons-cpn');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Refund','t-icons-customer-refund');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Refund Details','t-icons-customer-refund');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Refund Summary','t-icons-customer-refund');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Refund','t-icons-customer-refund add-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Customer Refund Documents','t-icons-customer-refund');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Credit Memo Summary','t-icons-customer-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Credit Memo Detail','t-icons-customer-credit-memo');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoices Summary','t-icons-customer-invoice');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoices Detail','t-icons-customer-invoice');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoice Packing Slip Summary','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Invoice Packing Slip Detail','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Packing Slip Summary','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Packing Slip Detail','t-icons-customer-ps');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Data entry change audit log list','t-icons-wo-change-history change-icon');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Order Manual Entry List','icons-manualy-added-activity-history');  \n" +
            /* **************************** Add Script Version -> 26-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5173,'2.00','V1',' Bug 36330: tooltip not showing, Task 36248: Update header icons - Ritul '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5173:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "    IN pMarkedForRefund TINYINT  \n" +
                "    -- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         m.paymentTermsID custPaymentTermsId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,  \n" +
                "         gc.termsDays custTermsDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "    END IF;  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +  
            /* **************************** Add Script Version -> 26-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5174,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5174:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetailsPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
                "    IN pMarkedForRefund TINYINT,  \n" +
                "    IN pWithCommissionLine TINYINT,  \n" +
                "    IN pWithOtherChargesLine TINYINT,  \n" +
                "    IN pZeroAmountLineFilter TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,  \n" +
                "        cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "        cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cpd.shippingNotes , cpd.internalComment,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status, cp.subStatus,  \n" +
                "         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cpd.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
                "         m.paymentTermsID custPaymentTermsId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,  \n" +
                "         gc.termsDays custTermsDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,  \n" +
                "         cpd.id detID,  \n" +
                "         cpd.partId,  \n" +
                "         co.mfgpn,  \n" +
                "         cpd.assyDescription ,  \n" +
                "         co.PIDCode,  \n" +
                "         co.RoHSStatusID,  \n" +
                "         co.mfgcodeID,  \n" +
                "         co.nickname,  \n" +
                "         cpd.lineID,  \n" +
                "         cpd.reflineID,  \n" +
                "         cpd.custPOLineID,  \n" +
                "         cpd.shipQty,  \n" +
                "         cpd.unitPrice,  \n" +
                "         cpd.componentStockType,  \n" +
                "         cpd.extendedPrice,  \n" +
                "         othercharges AS lineOtherCharges,  \n" +
                "         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "		 cpd.quoteNumber,  \n" +
                "		 cpd.quoteFrom,  \n" +
                "         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
                "			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
                "              else null end) qtyTurnTimeID,  \n" +
                "		 cpd.assyQtyTurnTimeText,  \n" +
                "		 cpd.refRFQGroupID,  \n" +
                "         rohs.rohsIcon,  \n" +
                "         rohs.name rohsName,  \n" +
                "         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
                "         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
                "         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
                "         cp.totalAmount,  \n" +
                "         cp.refCustInvoiceID,  \n" +
                "         co.partType,  \n" +
                "         co.isCustom, co.custAssyPN customPartNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "        JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
                "        LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
                "        LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cpd.partId in (', pPartId , ')');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
                "	END IF;  \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWithCommissionLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pWithOtherChargesLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
                "    END IF;  \n" +
                "   IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +	
            /* **************************** Add Script Version -> 26-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5175,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetailsPerLine  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5175:
        allDbChangesArray.push(
        /* **************************** New Script -> 26-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pfilterStatus VARCHAR(1000),  \n" +
            "	IN pmfgCodelist VARCHAR(16000),  \n" +
            "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
            "	IN ppsSearchType VARCHAR(5),  \n" +
            "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
            "	IN pstatusIds VARCHAR(50),  \n" +
            "	IN pfromDate DATE,  \n" +
            "	IN ptoDate DATE  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
            "		SELECT cd.id,  \n" +
            "				cd.packingSlipNumber,  \n" +
            "		       cd.packingslipDate,  \n" +
            "		       cd.poNumber,  \n" +
            "		       cd.soNumber,  \n" +
            "		       cd.soDate,  \n" +
            "		       cd.poDate,  \n" +
            "               cd.poRevision,  \n" +
            "		       cd.customerID,  \n" +
            "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
            "			cd.systemID,  \n" +
            "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
            "			cd.packingslipcomment,  \n" +
            "			cd.refCustInvoiceID,  \n" +
            "			cd.headerComment,  \n" +
            "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
            "		cd.subStatus,  \n" +
            "		cd.sorevision,  \n" +
            "            cd.termsID,  \n" +
            "            cd.shippingmethodid,  \n" +
            "            invoice.invoiceNumber,  \n" +
            "            invoice.id as invoiceID,  \n" +
            "            invoice.subStatus as invoiceSubstatus,  \n" +
            "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
            "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
            "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
            "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
            "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
            "            cd.refSalesOrderID,  \n" +
            "cd.id AS customerslipId,  \n" +
            "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
            "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
            "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
            "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
            "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
            "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
            "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
            "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
            "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
            "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) createdAt,  \n" +
            "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) updatedAt,  \n" +
            "		 cd.isLocked,  \n" +
            "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
            "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
            "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
            "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
            "         (select group_concat(trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumber,  \n" +
            "         (select COUNT(trackNumber) from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
            "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
            "						else '' end) materialStatus,  \n" +
            "                        cd.revision ,  \n" +
            "           (select count(1) from customer_packingslip_det packingdtl where packingdtl.refCustPackingSlipID = cd.id and  packingdtl.isDeleted = 0) packingSlipCnt  \n" +
            "		FROM customer_packingslip cd  \n" +
            "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
            "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
            "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
            "	\");  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
            "	 if (pfilterStatus = 0) then  \n" +
            "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
            "    else  \n" +
            "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
            "    end if;  \n" +
            "  END IF;  \n" +
            "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
            "  END IF;  \n" +
            "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
            "  END IF;  \n" +
            "  \n" +
            "   IF pmfgPartID IS NOT NULL THEN  \n" +
            "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
            "    END IF;  \n" +
            "  \n" +
            "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
            "    IF(ppsSearchType='E')THEN  \n" +
            "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
            "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
            "   ELSE  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
            "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
            "  END IF;  \n" +
            "  END IF;  \n" +
            "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
            "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
            "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
            "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
            "  END IF;  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	 /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query1 FROM @SQLStatement2;  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 26-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5176,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5176:
        allDbChangesArray.push(
        /* **************************** New Script -> 26-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pfilterStatus VARCHAR(1000),  \n" +
            "	IN pmfgCodelist VARCHAR(16000),  \n" +
            "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
            "	IN ppsSearchType VARCHAR(5),  \n" +
            "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
            "	IN pstatusIds VARCHAR(50),  \n" +
            "	IN pfromDate DATE,  \n" +
            "	IN ptoDate DATE  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
            "		SELECT cd.id,  \n" +
            "				cd.packingSlipNumber,  \n" +
            "		       cd.packingslipDate,  \n" +
            "		       cd.poNumber,  \n" +
            "		       cd.soNumber,  \n" +
            "		       cd.soDate,  \n" +
            "		       cd.poDate,  \n" +
            "               cd.poRevision,  \n" +
            "		       ss.releaseNumber,  \n" +
            "		       ss.qty as releaseLineQty,  \n" +
            "		       cd.customerID,  \n" +
            "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
            "			cd.systemID,  \n" +
            "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
            "			cd.packingslipcomment,  \n" +
            "			cd.refCustInvoiceID,  \n" +
            "			cpd.internalComment,  \n" +
            "			cd.headerComment,  \n" +
            "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
            "			cd.subStatus,  \n" +
            "			cd.sorevision,  \n" +
            "            cpd.partId,  \n" +
            "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
            "            `cpd`.assyDescription,  \n" +
            "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
            "            c.mfgPN as assyName ,  \n" +
            "            c.PIDCode as assyId,  \n" +
            "            c.mfgCodeID,  \n" +
            "            cd.termsID,  \n" +
            "            cd.shippingmethodid,  \n" +
            "            invoice.invoiceNumber,  \n" +
            "            invoice.id as invoiceID,  \n" +
            "            invoice.subStatus as invoiceSubstatus,  \n" +
            "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
            "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
            "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
            "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
            "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
            "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
            "            cd.refSalesOrderID,  \n" +
            "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
            "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
            "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
            "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
            "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
            "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
            "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,  \n" +
            "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,  \n" +
            "		 cd.isLocked,  \n" +
            "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
            "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
            "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
            "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
            "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
            "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
            "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
            "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
            "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
            "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
            "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
            "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
            "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
            "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
            "						else '' end) materialStatus,  \n" +
            "        cd.revision,  \n" +
            "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
            "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
            "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
            "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty  \n" +
            "		FROM customer_packingslip cd  \n" +
            "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
            "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
            "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
            "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
            "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
            "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
            "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
            "	\");  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
            "    if (pfilterStatus = 0) then  \n" +
            "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
            "    else  \n" +
            "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
            "    end if;  \n" +
            "  END IF;  \n" +
            "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
            "  END IF;  \n" +
            "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
            "  END IF;  \n" +
            "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
            "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
            "  END IF;  \n" +
            "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
            "    IF(ppsSearchType='E')THEN  \n" +
            "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
            "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
            "   ELSE  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
            "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
            "  END IF;  \n" +
            "  END IF;  \n" +
            "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
            "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
            "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
            "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
            "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
            "  END IF;  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	 /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query1 FROM @SQLStatement2;  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 26-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5177,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5177:
        allDbChangesArray.push(
        /* **************************** New Script -> 26-08-2021 *********************************** */

            "DROP PROCEDURE IF EXISTS Sproc_GetComponentByMFGPN_PIDAliasSearch;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentByMFGPN_PIDAliasSearch`(  \n" +
            "IN pSearch VARCHAR(500),  \n" +
            "IN pMfgType VARCHAR(50)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  SELECT * FROM  \n" +
            " (  \n" +
            "	 SELECT `com`.`id`,  \n" +
            "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`, ' | ', `com`.`PIDCode`) mfgPN,  \n" +
            "		`com`.`mfgPN` orgMfgPN,  \n" +
            "		`com`.`packaginggroupID`,  \n" +
            "		`com`.`PIDCode`,  \n" +
            "		`com`.`isGoodPart`,  \n" +
            "		`com`.`RoHSStatusID`,  \n" +
            "		`com`.`rohsgroupID`,  \n" +
            "		`com`.`mfgcodeID`,  \n" +
            "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
            "		`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
            "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
            "		`com`.`category`,  \n" +
            "        `com`.`mfgPNDescription`,  \n" +
            "		`com`.`partStatus`,  \n" +
            "		`com`.`uom`,  \n" +
            "		`com`.`uomClassID`,  \n" +
            "		`com`.`unit`,  \n" +
            "		u.abbreviation AS uomName,  \n" +
            "		u.unitName AS  unitName,  \n" +
            "		r.rohsIcon,  \n" +
            "		r.name AS `rohsName`,  \n" +
            "		`com`.`isCPN`,  \n" +
            "		`com`.`isCustom`,  \n" +
            "		`com`.`partType`,  \n" +
            "		`com`.`rfqOnly`  \n" +
            "	FROM `component` AS `com`  \n" +
            "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND `mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)  \n" +
            "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
            "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0  \n" +
            "	WHERE `com`.`isdeleted` =0  \n" +
            "    ) AS a  \n" +
            "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
            "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR PIDCode LIKE CONCAT('%', pSearch , '%') #OR productionPN LIKE CONCAT('%', pSearch , '%')  \n" +
            "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
            ")  \n" +
            "ORDER BY mfgPN;  \n" +
            "END;  \n" +	
        /* **************************** Add Script Version -> 26-08-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5178,'2.00','V1','Sproc_GetComponentByMFGPN_PIDAliasSearch  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;       
        case 5178:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyStock;  \n" +
            "CREATE PROCEDURE `Sproc_GetAssemblyStock`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "    IN pWhereClause VARCHAR(16383),  \n" +
            "    IN pStockType VARCHAR(50)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" Select ass.id ,ass.openingdate,  \n" +
            "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
            "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
            "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.woID, ass.serialNo,  \n" +
            "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
            "			ass.parentWarehouse,  \n" +
            "			ass.systemGeneratedsss,ass.typestock,  \n" +
            "			ass.dateCode, ifnull(ass.dateCodeFormat, wo.dateCodeFormat) dateCodeFormat,  \n" +
            "			ass.updatedby,ass.createdby,  \n" +
            "			ass.createdbyRole, ass.updatedbyRole,  \n" +
            "			ass.createdAt, ass.updatedAt,  \n" +
            "			ass.qtyBox,  \n" +
            "            ifnull(ass.poQty, SUM(`wsd`.`poQty`)) AS `totalPOQty`,  \n" +
            "			ifnull(ass.poNumber, GROUP_CONCAT(`so`.`poNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `poNumber`,  \n" +
            "			ifnull(ass.soNumber, GROUP_CONCAT(`so`.`salesOrderNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `salesOrderNumber`  \n" +
            "			from (SELECT s.id, s.openingdate,  \n" +
            "				c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,  \n" +
            "				c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,  \n" +
            "				ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,  \n" +
            "				s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,  \n" +
            "				fun_getDepartmentNameByBinID(s.binID) parentWarehouse,  \n" +
            "				(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,  \n" +
            "				fun_getStockType(s.type) typestock,  \n" +
            "				s.dateCode,s.dateCodeFormat,  \n" +
            "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
            "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
            "				fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
            "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
            "				  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox,  \n" +
            "				   s.poQty,s.poNumber,s.soNumber,  \n" +
            "				  s.type,s.woID  \n" +
            "			FROM assemblystock s  \n" +
            "			JOIN component c ON c.id = s.partID AND c.category = 3  \n" +
            "			LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
            "			WHERE s.isdeleted = 0  \n" +
            "		) ass  \n" +
            "        LEFT JOIN workorder_salesorder_details wsd ON wsd.woID = ass.woID and wsd.partID = ass.partID and wsd.isDeleted = 0  \n" +
            "        LEFT JOIN workorder wo ON wo.woID = ass.woID and wo.isDeleted = 0  \n" +
            "        LEFT JOIN salesorderdet sod ON sod.id = wsd.salesOrderDetailID and wsd.partID = sod.partID and sod.isDeleted = 0  \n" +
            "        LEFT JOIN salesordermst so ON so.id = sod.refSalesOrderID and so.isDeleted = 0  \n" +
            "        where FIND_IN_SET(ass.type,'\",pStockType,\"')  \n" +
            "        group by ass.id ,ass.openingdate,  \n" +
            "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
            "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
            "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.serialNo,  \n" +
            "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
            "			ass.parentWarehouse,  \n" +
            "			ass.systemGeneratedsss,ass.typestock,  \n" +
            "			ass.dateCode,ass.dateCodeFormat,  \n" +
            "			ass.updatedby,ass.createdby,  \n" +
            "			ass.createdbyRole, ass.updatedbyRole,  \n" +
            "			ass.createdAt, ass.updatedAt,  \n" +
            "			ass.qtyBox\");  \n" +
            "  \n" +
            "		IF (pOrderBy IS NOT NULL) THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1';  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
            "		ELSE  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c  \n" +
            "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query1 FROM @SQLStatement2;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "END;  \n" +	
            /* **************************** Add Script Version -> 26-08-2021  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5179,'2.00','V1','Sproc_GetAssemblyStock - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5179:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5180,'2.00','V1','Bug 36350: [Hot Fix - Main Branch] Duplicate UMID showing in kit while CPN added in CPN and MPN cell at Bill of material - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5180:
                allDbChangesArray.push(
                /* **************************** New Script -> 26-08-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Update Part Name MPN and PID', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsAttribute  then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "			toPart.`pitch` = fromPart.pitch,  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "			toPart.`length` = fromPart.length,  \n" +
                "			toPart.`width` = fromPart.width,  \n" +
                "			toPart.`heightText` = fromPart.heightText,  \n" +
                "			toPart.`height` = fromPart.height,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsSettings then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "			toPart.`eau` = fromPart.eau,  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "		IF pIsAdditionalAttibute then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "			from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                "			toPart.`voltage` = fromPart.voltage,  \n" +
                "			toPart.`value` = fromPart.value,  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                "			toPart.`weight` = fromPart.weight,  \n" +
                "			toPart.`feature` = fromPart.feature,  \n" +
                "			toPart.`color` = fromPart.color,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsPackagingDetail then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                "			toPart.`minimum` = fromPart.minimum,  \n" +
                "			toPart.`mult` = fromPart.mult,  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "			toPart.`uom` = fromPart.uom,  \n" +
                "			toPart.`uomText` = fromPart.uomText,  \n" +
                "			toPart.`unit` = fromPart.unit,  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		if pIsStandards then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				-- commit;  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +


                "DROP procedure IF EXISTS `Sproc_GetAssemblyListWithOutSOCreate`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyListWithOutSOCreate`(  \n" +
                "	IN psearchString VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE vMfgCodeFormat INT;  \n" +
                "  SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    	select com.id, com.mfgCodeID, concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',ifnull(com.productionPN,'')) as formatterMfgPN,  \n" +
                "			fun_GetFormattedMfgCode(mfg.mfgcode,com.mfgPN, vMfgCodeFormat) as formatMFGPN,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgcode,mfg.mfgName, vMfgCodeFormat) as fullMfgName,  \n" +
                "            mfg.mfgCode,  \n" +
                "            mfg.mfgName,  \n" +
                "            com.mfgcodeID,  \n" +
                "            com.PIDCode as PIDCodeSufix,  \n" +
                "			-- concat('(',mfg.mfgCode,') ',com.mfgPN,' | ',com.PIDCode,' | ',ifnull(com.productionPN,'')) as PIDCode,  \n" +
                "            com.epicorType,  \n" +
                "            com.partType,  \n" +
                "            com.isCustom,  \n" +
                "            com.isCPN,  \n" +
                "            com.custAssyPN,  \n" +
                "            com.rev,  \n" +
                "            com.assyCode,  \n" +
                "            com.nickName,  \n" +
                "            com.mfgPN,  \n" +
                "            com.PIDCode,  \n" +
                "            rc.categoryName,  \n" +
                "			com.category,  \n" +
                "            rt.name as assyTypeName,  \n" +
                "            com.assemblyType  \n" +
                "		from component com  \n" +
                "		join mfgcodemst mfg on mfg.id = com.mfgcodeID  \n" +
                "        join rfq_partcategory rc on rc.id = com.category  \n" +
                "        join rfq_assy_typemst rt on rt.id = com.assemblyType  \n" +
                "		where  \n" +
                "        (com.PIDCode like concat('%',psearchString,'%') OR com.mfgPN like concat('%',psearchString,'%') OR com.productionPN like concat('%',psearchString,'%'))and com.isDeleted = 0 and com.category = 3  \n" +
                "         and NOT EXISTS (select 1 from salesorderdet where partID = com.id and isDeleted = 0)  \n" +
                "        ;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5181,'2.00','V1',' User Story 30347: Allow to modified Assembly PID till Sales Order not created - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 5181:
            allDbChangesArray.push(
            /* **************************** New Script -> 27-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(  \n" +
            "	IN pCustomerID INT,  \n" +
            "	IN pPayementID INT,  \n" +
            "	IN pInvoiceTransType VARCHAR(5),  \n" +
            "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT ,  \n" +
            "	IN pIsExcludeZeroValueInv TINYINT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE v_isPaymentVoided TINYINT ;  \n" +
            "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
            "	DECLARE vTimeZone VARCHAR(50);  \n" +
            "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
            "	DECLARE v_paymentTermsID INT;  \n" +
            "	DECLARE v_custTermsDays INT;  \n" +
            "	SET v_custTermsDays = NULL;  \n" +
            "  \n" +
            "	SET v_isPaymentVoided = 0;  \n" +
            "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
            "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
            "  \n" +
            "	/* below fun_ApplyCommonDateFormatByParaValue not working with date as it consider date 00:00:00 so date is less than 1  \n" +
            "		so below that CONVERT_TZ manual code added */  \n" +
            "	-- SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
            "	SELECT CAST(CONVERT_TZ(UTC_TIMESTAMP() ,'UTC',vTimeZone) AS DATE) INTO currDateWithAppliedTimeZone ;  \n" +
            "	-- select currDateWithAppliedTimeZone	;  \n" +
            "  \n" +
            "	SELECT paymentTermsID INTO v_paymentTermsID  \n" +
            "	FROM mfgcodemst  \n" +
            "	WHERE id = pCustomerID  \n" +
            "	AND isDeleted = 0 ;  \n" +
            "  \n" +
            "	IF v_paymentTermsID IS NOT NULL THEN  \n" +
            "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays  \n" +
            "		FROM `genericcategory`  \n" +
            "		WHERE `gencCategoryID` = v_paymentTermsID  \n" +
            "		AND categoryType = 'Payment Terms'  \n" +
            "		AND isDeleted = 0 ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF(pPayementID IS NULL OR pPayementID = '') THEN  \n" +
            "  \n" +
            "		/* add new customer payment case */  \n" +
            "		SELECT *  \n" +
            "		FROM (  \n" +
            "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
            "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
            "				cps.status, cps.isZeroValue ,  \n" +
            "				cps.termsDays ,  \n" +
            "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
            "					WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
            "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
            "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
            "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
            "				0 AS invPaidAmtFromCurrPaymentDet,  \n" +
            "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
            "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
            "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
            "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
            "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
            "				NULL AS appliedDate  \n" +
            "			FROM customer_packingslip cps  \n" +
            "			WHERE cps.customerID = pCustomerID  \n" +
            "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
            "			AND cps.isDeleted = 0  \n" +
            "		) tempInv  \n" +
            "		WHERE (  \n" +
            "			(  \n" +
            "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
            "					/* get all peding to pay inv with 0 amount */  \n" +
            "			)  \n" +
            "			OR  \n" +
            "			(  \n" +
            "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
            "						 /* get all peding to pay inv */  \n" +
            "			)  \n" +
            "		   )  \n" +
            "  \n" +
            "		;  \n" +
            "  \n" +
            "	ELSE  \n" +
            "		/* update customer payment case */  \n" +
            "  \n" +
            "		SELECT isPaymentVoided INTO v_isPaymentVoided  \n" +
            "		FROM packingslip_invoice_payment  \n" +
            "		WHERE id = pPayementID  \n" +
            "		AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "		IF(v_isPaymentVoided = 0) THEN  \n" +
            "  \n" +
            "  \n" +
            "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN  \n" +
            "			/* get already paid invoices + get pending to pay invoices */  \n" +
            "  \n" +
            "				/* get already paid invoices  */  \n" +
            "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
            "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
            "					cps.status,  cps.isZeroValue ,  \n" +
            "					cps.termsDays ,  \n" +
            "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
            "						WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
            "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
            "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
            "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
            "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
            "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
            "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
            "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
            "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
            "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
            "					pipd.appliedDate  \n" +
            "				FROM customer_packingslip cps  \n" +
            "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
            "								 AND pipd.refPayementid = pPayementID  \n" +
            "								 AND pipd.isPaymentVoided = 0  \n" +
            "								 AND pipd.isDeleted = 0  \n" +
            "				WHERE cps.customerID = pCustomerID  \n" +
            "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
            "				AND cps.isDeleted = 0  \n" +
            "  \n" +
            "				UNION  \n" +
            "  \n" +
            "				/* get pending to pay invoices  */  \n" +
            "				SELECT *  \n" +
            "				FROM (  \n" +
            "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
            "					cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
            "						cps.status, cps.isZeroValue ,  \n" +
            "						cps.termsDays ,  \n" +
            "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
            "							WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
            "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
            "							ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
            "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
            "						0 AS invPaidAmtFromCurrPaymentDet,  \n" +
            "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
            "							WHERE refCustPackingslipInvoiceID = cps.id  \n" +
            "							AND isPaymentVoided = 0  \n" +
            "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet,  \n" +
            "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "							AND pip.refCustCreditMemoID IS NOT NULL  \n" +
            "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
            "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "							AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
            "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
            "						NULL AS appliedDate  \n" +
            "					FROM customer_packingslip cps  \n" +
            "					WHERE cps.customerID = pCustomerID  \n" +
            "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "					AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
            "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det  \n" +
            "								WHERE refPayementid = pPayementID  \n" +
            "								AND isPaymentVoided = 0  \n" +
            "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)  \n" +
            "					AND cps.isDeleted = 0  \n" +
            "  \n" +
            "				) tempInv  \n" +
            "				WHERE  \n" +
            "				 (  \n" +
            "					(  \n" +
            "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
            "							/* get all peding to pay inv with 0 amount */  \n" +
            "					)  \n" +
            "					OR  \n" +
            "					(  \n" +
            "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
            "								 /* get all peding to pay inv */  \n" +
            "					)  \n" +
            "				   )  \n" +
            "				;  \n" +
            "  \n" +
            "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN  \n" +
            "  \n" +
            "				/* get already paid invoices  */  \n" +
            "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
            "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
            "					cps.status,  cps.isZeroValue ,  \n" +
            "					cps.termsDays ,  \n" +
            "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
            "						WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
            "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
            "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
            "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
            "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
            "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
            "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
            "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
            "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
            "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
            "					pipd.appliedDate  \n" +
            "				FROM customer_packingslip cps  \n" +
            "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
            "								 AND pipd.refPayementid = pPayementID  \n" +
            "								 AND pipd.isPaymentVoided = 0  \n" +
            "								 AND pipd.isDeleted = 0  \n" +
            "				WHERE cps.customerID = pCustomerID  \n" +
            "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
            "				AND cps.isDeleted = 0  \n" +
            "				;  \n" +
            "  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		ELSEIF(v_isPaymentVoided = 1) THEN  \n" +
            "  \n" +
            "			/* get already paid invoices only */  \n" +
            "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,  \n" +
            "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
            "				cps.status, cps.isZeroValue ,  \n" +
            "				cps.termsDays ,  \n" +
            "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
            "					WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
            "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
            "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
            "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,  \n" +
            "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
            "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
            "				   --  + IFNULL(pipd.paymentAmount,0)  \n" +
            "				    ) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
            "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
            "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
            "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
            "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
            "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
            "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
            "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
            "				pipd.appliedDate  \n" +
            "			FROM customer_packingslip cps  \n" +
            "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
            "							 AND pipd.refPayementid = pPayementID  \n" +
            "							 AND pipd.isDeleted = 0  \n" +
            "			WHERE cps.customerID = pCustomerID  \n" +
            "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
            "			AND cps.isDeleted = 0  \n" +
            "			;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	/* get customer Past Due Balance >> check from current date till pending */  \n" +
            "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount  \n" +
            "	FROM (  \n" +
            "		SELECT customerID,  \n" +
            "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,  \n" +
            "				DATE_ADD(invoiceDate, INTERVAL IFNULL(termsDays,0) DAY) paymentDueDate  \n" +
            "  \n" +
            "		FROM customer_packingslip  \n" +
            "		WHERE customerID = pCustomerID  \n" +
            "		AND transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
            "		AND subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
            "		AND isDeleted = 0  \n" +
            "	    ) a  \n" +
            "	GROUP BY a.customerID ;  \n" +
            "  \n" +
            "	/* get customer current Terms Days from master */  \n" +
            "	SELECT v_custTermsDays AS custCurrentTermsDays;  \n" +
            "  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 27-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pFilterStatus LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pPoNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearchPO TINYINT,  \n" +
            "	IN pMfgCodeIds LONGTEXT ,  \n" +
            "	IN pPaymentTermsIds LONGTEXT ,  \n" +
            "	IN pPartId VARCHAR(5000) ,  \n" +
            "	IN pTransType VARCHAR(5) ,  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
            "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
            "	IN pZeroAmountFilter TINYINT,  \n" +
            "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
            "	IN pMarkedForRefund TINYINT  \n" +
            "	-- IN pChequeNumber  VARCHAR(50)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE vTimeZone VARCHAR(50);  \n" +
            "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
            "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
            "	DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
            "	SET v_appliedCMPDJoin = '';  \n" +
            "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "	IF pTransType = 'C' THEN  \n" +
            "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
            "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
            "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
            "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
            "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
            "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
            "	ELSE  \n" +
            "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
            "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
            "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
            "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
            "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
            "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
            "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
            "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
            "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
            "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
            "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
            "        cp.soNumber,cp.soDate,  \n" +
            "		cp.sorevision,  \n" +
            "        cp.refSalesOrderID,  \n" +
            "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
            "        cp.refCustInvoiceID,  \n" +
            "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
            "		 cp.status,  \n" +
            "         cp.subStatus,  \n" +
            "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
            "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
            "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
            "			ELSE '' END) AS creditAppliedStatus ,  \n" +
            "		  cp.paymentStatus,  \n" +
            "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
            "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
            "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
            "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
            "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
            "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
            "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
            "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
            "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
            "		 m.mfgcode as customerCode,  \n" +
            "         cp.customerID,  \n" +
            "         cp.createdBy as createdById,  \n" +
            "		\",v_receivedAmtSF,\"  \n" +
            "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
            "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
            "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
            "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
            "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
            "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
            "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
            "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
            "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
            "         cp.termsDays termDays,  \n" +
            "         cp.freeOnBoardName,  \n" +
            "         cp.isLocked,  \n" +
            "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
            "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
            "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
            "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
            "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
            "         packingSlip.id packingSlipId,  \n" +
            "         (select group_concat(paymentNumber)  \n" +
            "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
            "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
            "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
            "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
            "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
            "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
            "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
            "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
            "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
            "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
            "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
            "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate  \n" +
            "  \n" +
            "	 FROM customer_packingslip cp  \n" +
            "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
            "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
            "		\" , v_appliedCMPDJoin ,\"  \n" +
            "	WHERE  cp.isDeleted=0  \n" +
            "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		IF pTransType = 'I' THEN  \n" +
            "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
            "		END IF;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pPartId IS NOT NULL THEN  \n" +
            "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
            "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
            "	# END IF;  \n" +
            "  \n" +
            "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
            "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
            "		IF pIsExactSearchPO = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
            "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
            "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
            "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
            "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
            "	IF pFromDate IS NOT NULL THEN  \n" +
            "		IF pTransType = 'I' THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pToDate IS NOT NULL THEN  \n" +
            "		IF pTransType = 'I' THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
            "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
            "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
            "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- filter zero amount invoice  \n" +
            "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
            "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pMarkedForRefund = 1 THEN  \n" +
            "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	 /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "		 round((c.totalAmount),2) totalAmount,  \n" +
            "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
            "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)  \n" +
            "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
            "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
            "						else '' end) materialStatus from ( \",  \n" +
            "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "  \n" +
            "	-- select @SQLStatement2	;  \n" +
            "  \n" +
            "	PREPARE query1 FROM @SQLStatement2;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 27-08-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,  \n" +
                "		temp_aged_details.custCurrTermDays,  \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
                "		SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  `cpt`.`termsDays`                   AS `custCurrTermDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "                  FROM  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.termsDays			      AS `termsDays`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "					0                                    AS `totalUnappliedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "                       FROM `customer_packingslip` `a`  \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "						LEFT JOIN 	(  \n" +
                "									SELECT  \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "									FROM `packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "						LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundCustCreditMemoID  \n" +
                "									) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "                -- AND a.paymentStatus <> 'RE'  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "	UNION  \n" +
                "      SELECT  \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "			NULL									AS `termsDays`,  \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
                "			0                                     					AS `invoiceCount`,  \n" +
                "			0                                     					AS `unInvoiceCount`,  \n" +
                "			0                                     					AS `dratftCreditMemoCount`,  \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "			0  									AS `totalRecievedAmount`,  \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "			0                                     					AS `totalInvoicedAmount`,  \n" +
                "			0                                     					AS `totalDraftAmount`  \n" +
                "			FROM (`packingslip_invoice_payment` `a`  \n" +
                "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "				LEFT JOIN (  \n" +
                "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID  \n" +
                "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "			AND (`a`.`isPaymentVoided` = 0)  \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount`  \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "                ) AS  cid  \n" +
                "                     INNER JOIN `vu_customer_payment_terms` `cpt` ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
                "                  GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cid`.`termsDays` , `cpt`.`termsDays`,  \n" +
                "			(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "                ) AS temp_aged_details  \n" +
                "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.custCurrTermDays  \n" +
                "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 27-08-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5182,'2.00','V1',' Terms Days and Due Date Changes SPS - KS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5182:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetBOMPartAndPackagingAliasByAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMPartAndPackagingAliasByAssembly`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_BOMAssyIds VARCHAR(10000);  \n" +
                "		SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailId;  \n" +
                "  \n" +
                "		SELECT 		*  \n" +
                "		FROM 		(  \n" +
                "			SELECT 		rml.rfqLineItemsID, 		cp.componentID AS mfgPNID, 		fun_getMFGPNByID(cp.componentID) AS mfgPN, 		rml.partID, rml.mfgPNID AS cpnID,  \n" +
                "					fun_getAssyPIDCodeByID(cp.componentID) AS PIDCode, 			rml.restrictUseInBOMStep, 				rml.restrictUseInBOMWithPermissionStep,  \n" +
                "					rml.restrictUseInBOMExcludingAliasStep, 				rml.restrictUseInBOMExcludingAliasWithPermissionStep, 	rl.restrictCPNUseInBOMStep,  \n" +
                "					fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,        c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description, 							rml.customerApproval,  \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rml.id AS lineitemAlternatePartId, 					rml.partID AS assyId,    				rml.mismatchMountingTypeStep,  \n" +
                "					rml.uomMismatchedStep, 		rml.mismatchFunctionalCategoryStep, rml.approvedMountingType  \n" +
                "			FROM 		component_packagingalias cp  \n" +
                "			LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "			LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid = c.id  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "			WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "			UNION  \n" +
                "			SELECT 		rla.rfqLineItemsID, 		rla.mfgPNID, 				rla.mfgPN, 						rla.partID,     rla.mfgPNID AS cpnID,  \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,  \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,      c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,  \n" +
                "					rla.customerApproval, 		rl.customerApprovalCPN, 		TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 	fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rla.id AS lineitemAlternatePartId,  rla.partID AS assyId,  \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep ,rla.approvedMountingType  \n" +
                "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID  \n" +
                "			WHERE 	 	FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "			UNION  \n" +
                "			SELECT 		rla.rfqLineItemsID, 		custPNID AS mfgPNID, 			custPN AS mfgPN, 					rla.partID,  	rla.mfgPNID AS cpnID,  \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,  \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,           c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description, 							rla.customerApproval,  \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rla.id AS lineitemAlternatePartId, 					rla.partID AS assyId,  \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep, rla.approvedMountingType  \n" +
                "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID  \n" +
                "			WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND custPNID IS NOT NULL AND rla.isDeleted = 0  \n" +
                "			GROUP BY 	custPNID, rla.partID  \n" +
                "		) a GROUP BY a.bomLineItemId, a.assyId, a.mfgPN;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5183,'2.00','V1','Bug 36350: [Hot Fix - Main Branch] Duplicate UMID showing in kit while CPN added in CPN and MPN cell at Bill of material - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5183:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* left join filter */  \n" +
                "	IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	deletedAt IS NULL  \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		   id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN,  \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5184,'2.00','V1','User Story 36353: UMID List > Non COFC filter and 4 type of Export functionality - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5184:
             allDbChangesArray.push(
             /* **************************** New Script -> 01-09-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
                "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "	SET v_PayRefundTblJoin = '';  \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,  \n" +
                "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"  \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		invPayDetTemp.totDetLevelSelectedInvCount ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount ,  \n" +
                "					COUNT(1) AS totDetLevelSelectedInvCount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "			\", v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,  \n" +
                "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"  \n" +
                "             AND psip.isDeleted = 0 \"  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,  \n" +
                "	IN pToInvoiceDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pRefPaymentMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
                "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
                "			');  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id AS paymentMstID ,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		psip.refPaymentMode ,  \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		psipd.appliedDate ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
                "            AND psip.isPaymentVoided = 0  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
                "		SET @Sproc_RetrieveCustomerInvoicePayment= CONCAT(@Sproc_RetrieveCustomerInvoicePayment, ' AND psipd.refPayementid = ',pRefPaymentMstID,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_CMPaymentDateWhereClause = '';  \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
                "			AND  \n" +
                "			(  \n" +
                "				EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_PaymentDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_CMDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totDetLevelSelectedCMCount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.totDetLevelSelectedPaymentCount  \n" +
                "				ELSE NULL END) AS totDetLevelSelectedPaymentCMCount ,  \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
                "			psip.offsetAmount ,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.status , psip.subStatus ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
                "			psip.isMarkAsPaid,  \n" +
                "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
                "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedPaymentCount  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedCMCount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerAllRefundDetailLst` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerAllRefundDetailLst`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT ,  \n" +
                "	IN pRefPaymentMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "        -- DECLARE v_PaymentNumberWhereClause VARCHAR(5000);  \n" +
                "        -- DECLARE v_CMNumberWhereClause VARCHAR(5000);  \n" +
                "		DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "        DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "        DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "        DECLARE v_paymentDateWhereClause VARCHAR(1000);  \n" +
                "        DECLARE v_CMDateWhereClause VARCHAR(1000);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "        -- SET v_PaymentNumberWhereClause = '';  \n" +
                "        -- SET v_CMNumberWhereClause = '';  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_paymentDateWhereClause = '';  \n" +
                "        SET v_CMDateWhereClause = '';  \n" +
                "  \n" +
                "        IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMNumber = \"', pPaymentCMNumber ,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "	ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "	ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "             (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totalAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.payPaymentAmout  \n" +
                "				ELSE NULL END) AS paymentCMAmount ,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "                 (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.id  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.id  \n" +
                "				ELSE NULL END) AS paymentCMMstID ,  \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS paymentAmountForPaymentCM ,  \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM ,  \n" +
                "		(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			 psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentAmount As payPaymentAmout,  \n" +
                "						psipt.paymentNumber, psipt.id, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment,  \n" +
                "						 cps.creditMemoNumber, cps.id, cps.creditMemoDate , cps.totalAmount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		AND psip.isPaymentVoided = 0  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		 \"  \n" +
                "            );  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
                "		SET @Sproc_RetrieveCustomerRefundDetails= CONCAT(@Sproc_RetrieveCustomerRefundDetails, ' AND psip.id = ',pRefPaymentMstID,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (5185,'2.00','V1',' payment and refund list sps - KS '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
        case 5185:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* left join filter */  \n" +
                "	IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	deletedAt IS NULL  \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		   id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCodeID, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5186,'2.00','V1','User Story 36353 - Task 36455: UMID List > Label changes for CPN Part - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5186:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'QPA vs REF DES Mismatch' WHERE (`filterCode` = 'QPAREFDES');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Other than Each (UOM) Parts' WHERE (`filterCode` = 'NONEACHPART');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Mismatched Pins' WHERE (`filterCode` = 'MISMATCHEDPIN');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts Require Drive Tools' WHERE (`filterCode` = 'DRIVETOOLSPARTS');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Mismatched Pitch' WHERE (`filterCode` = 'MISMATCHPITCH');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with TBD (Correct/Incorrect) Status' WHERE (`filterCode` = 'UNKNOWNPART');  \n" +
                    "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Kit Allocation Not Required' WHERE (`filterCode` = 'KITALLOCNOTREQUIRED');  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "UPDATE `rfq_lineitems_errorcode` SET  \n" +
                    "`description` = '<% MFR %> <% MPN %> is not mapped to <% CPN %> Rev <% CPN Rev %>',  \n" +
                    "`org_description` = '<% MFR %> <% MPN %> is not mapped to <% CPN %> Rev <% CPN Rev %>',  \n" +
                    "`systemVariable` = '<% MFR %>,<% MPN %>,<% CPN %>,<% CPN Rev %>'  \n" +
                    "WHERE (`errorCode` = 'MPNNOTADDEDINCPN');  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5187,'2.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021]  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5187:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                    "IN ppartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                    "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                    "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                    "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                    "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                    "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                    "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                    "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                    "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                    "        ELSE 'N/A' END) AS programingStatus,  \n" +
                    "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                    "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                    "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                    "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                    "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                    "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                    "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                    "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                    "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                    "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                    "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                    "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                    "a.isObsoleteLine,  \n" +
                    "a.customerApprovalForQPAREFDESStep,  \n" +
                    "a.customerApprovalForBuyStep,  \n" +
                    "a.customerApprovalForPopulateStep,  \n" +
                    "a.dnpQPARefDesStep,  \n" +
                    "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "a.customerApprovalForDNPBuyStep,  \n" +
                    "a.customerApprovalCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                    "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                    "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                    "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                    "ac.description AS additionalComment,  \n" +
                    "ac.id AS additionalCommentId,  \n" +
                    "a.programmingMappingPendingRefdesCount,  \n" +
                    "a.refDesigCount,  \n" +
                    "a.dnpDesigCount  \n" +
                    "FROM rfq_lineitems a  \n" +
                    "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                    "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                    "  \n" +
                    "SELECT b.id,  \n" +
                    "b.lineID,  \n" +
                    "b.cust_lineID,  \n" +
                    "b.qpa,  \n" +
                    "b.refDesig,  \n" +
                    "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                    "a.mfgCodeID,  \n" +
                    "mcm.acquisitionDetail,  \n" +
                    "a.mfgPN,  \n" +
                    "a.mfgPNID,  \n" +
                    "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                    "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                    "a.distMfgCodeID,  \n" +
                    "a.distPN,  \n" +
                    "a.distMfgPNID,  \n" +
                    "b.custPN,  \n" +
                    "b.custPNID,  \n" +
                    "b.isCustPN,  \n" +
                    "b.uomID,  \n" +
                    "b.programingStatus,  \n" +
                    "b.substitutesAllow,  \n" +
                    "b.allocatedInKit,  \n" +
                    "a.description descriptionAlternate,  \n" +
                    "b.description,  \n" +
                    "b.numOfPosition,  \n" +
                    "b.numOfRows,  \n" +
                    "b.customerRev,  \n" +
                    "b.isCustPNProgrammingRequire,  \n" +
                    "b.customerDescription,  \n" +
                    "b.customerPartDesc,  \n" +
                    "b.isInstall,  \n" +
                    "b.isPurchase,  \n" +
                    "b.isNotRequiredKitAllocation,  \n" +
                    "b.isSupplierToBuy,  \n" +
                    "b.dnpQty,  \n" +
                    "b.dnpDesig,  \n" +
                    "a.id AS rfqAlternatePartID,  \n" +
                    "b.qpaDesignatorStep,  \n" +
                    "b.duplicateCPNStep,  \n" +
                    "b.restrictCPNUseWithPermissionStep,  \n" +
                    "b.restrictCPNUsePermanentlyStep,  \n" +
                    "b.restrictCPNUseInBOMStep,  \n" +
                    "b.requireMountingTypeStep,  \n" +
                    "b.requireFunctionalTypeStep,  \n" +
                    "b.requireMountingTypeError,  \n" +
                    "b.requireFunctionalTypeError,  \n" +
                    "b.isBuyDNPQty,  \n" +
                    "b.isObsoleteLine,  \n" +
                    "b.customerApprovalForQPAREFDESStep,  \n" +
                    "b.customerApprovalForBuyStep,  \n" +
                    "b.customerApprovalForPopulateStep,  \n" +
                    "b.dnpQPARefDesStep,  \n" +
                    "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "b.customerApprovalForDNPBuyStep,  \n" +
                    "b.customerApprovalCPN,  \n" +
                    "b.qpaCustomerApprovalComment,  \n" +
                    "b.dnpqpaCustomerApprovalComment,  \n" +
                    "b.buyCustomerApprovalComment,  \n" +
                    "b.buyDNPCustomerApprovalComment,  \n" +
                    "b.populateCustomerApprovalComment,  \n" +
                    "b.cpnCustomerApprovalComment,  \n" +
                    "b.isCustomerApprovedQPA,  \n" +
                    "b.isCustomerApprovedBuy,  \n" +
                    "b.isCustomerApprovedDNPQPA,  \n" +
                    "b.isCustomerApprovedBuyDNP,  \n" +
                    "b.isCustomerApprovedPopulate,  \n" +
                    "b.isCustomerApprovedCPN,  \n" +
                    "b.kitAllocationNotRequiredComment,  \n" +
                    "b.isNotRequiredKitAllocationApproved,  \n" +
                    "a.mfgVerificationStep,  \n" +
                    "a.mfgDistMappingStep,  \n" +
                    "a.mfgCodeStep,  \n" +
                    "a.customerApproval,  \n" +
                    "a.isCustomerUnAppoval,  \n" +
                    "a.org_mfgCode,  \n" +
                    "a.org_mfgPN,  \n" +
                    "a.org_distributor,  \n" +
                    "a.org_distPN,  \n" +
                    "a.distVerificationStep,  \n" +
                    "a.distCodeStep,  \n" +
                    "a.getMFGPNStep,  \n" +
                    "a.obsoletePartStep,  \n" +
                    "a.mfgGoodPartMappingStep,  \n" +
                    "a.mfgPNStep,  \n" +
                    "a.distPNStep,  \n" +
                    "a.badMfgPN,  \n" +
                    "a.distGoodPartMappingStep,  \n" +
                    "a.nonRohsStep,  \n" +
                    "a.epoxyStep,  \n" +
                    "a.invalidConnectorTypeStep,  \n" +
                    "a.duplicateMPNInSameLineStep,  \n" +
                    "a.mismatchMountingTypeStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.restrictUseWithPermissionStep,  \n" +
                    "a.restrictUsePermanentlyStep,  \n" +
                    "a.partPinIsLessthenBOMPinStep,  \n" +
                    "a.mismatchRequiredProgrammingStep,  \n" +
                    "a.mappingPartProgramStep,  \n" +
                    "a.exportControlledStep,  \n" +
                    "a.tbdPartStep,  \n" +
                    "a.userData1,  \n" +
                    "a.userData2,  \n" +
                    "a.userData3,  \n" +
                    "a.userData4,  \n" +
                    "a.userData5,  \n" +
                    "a.userData6,  \n" +
                    "a.userData7,  \n" +
                    "a.userData8,  \n" +
                    "a.userData9,  \n" +
                    "a.userData10,  \n" +
                    "a.pickupPadRequiredStep,  \n" +
                    "a.matingPartRquiredStep,  \n" +
                    "a.suggestedGoodPartStep,  \n" +
                    "a.suggestedGoodDistPartStep,  \n" +
                    "a.driverToolsRequiredStep,  \n" +
                    "a.functionalTestingRequiredStep,  \n" +
                    "a.mismatchCustomPartStep,  \n" +
                    "a.mismatchValueStep,  \n" +
                    "a.approvedMountingType,  \n" +
                    "a.mismatchPackageStep,  \n" +
                    "a.mismatchPowerStep,  \n" +
                    "a.mismatchToleranceStep,  \n" +
                    "a.mismatchTempratureStep,  \n" +
                    "a.mismatchNumberOfRowsStep,  \n" +
                    "a.uomMismatchedStep,  \n" +
                    "a.programingRequiredStep,  \n" +
                    "a.mismatchProgrammingStatusStep,  \n" +
                    "a.mismatchColorStep,  \n" +
                    "a.restrictUseInBOMStep,  \n" +
                    "a.restrictUseInBOMWithPermissionStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "a.restrictUseExcludingAliasStep,  \n" +
                    "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "a.unknownPartStep,  \n" +
                    "a.defaultInvalidMFRStep,  \n" +
                    "a.isUnlockApprovedPart,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnPart.partTypeName  \n" +
                    "ELSE  \n" +
                    "part.partTypeName END) AS parttypeID,  \n" +
                    "a.parttypeID AS functionalID,  \n" +
                    "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnMount.name  \n" +
                    "ELSE  \n" +
                    "mount.name END) AS mountingtypeID,  \n" +
                    "a.mountingtypeID AS mountingID,  \n" +
                    "cat.categoryname partcategoryID,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                    "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                    "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                    "CASE WHEN  \n" +
                    "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                    "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                    "THEN 1 ELSE 0 END isObsolete,  \n" +
                    "co.PIDCode,  \n" +
                    "co.mfgPNDescription,  \n" +
                    "co.pitch,  \n" +
                    "co.noOfRows,  \n" +
                    "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                    "co.value,  \n" +
                    "co.tolerance,  \n" +
                    "co.voltage,  \n" +
                    "co.isCustom,  \n" +
                    "co.packaging,  \n" +
                    "co.deviceMarking,  \n" +
                    "co.powerRating,  \n" +
                    "co.minOperatingTemp,  \n" +
                    "co.maxOperatingTemp,  \n" +
                    "co.connecterTypeID,  \n" +
                    "co.driverToolRequired,  \n" +
                    "co.matingPartRquired,  \n" +
                    "co.pickupPadRequired,  \n" +
                    "co.programingRequired,  \n" +
                    "co.dataSheetLink,  \n" +
                    "co.isCPN,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                    "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                    "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                    "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                    "co.isTemperatureSensitive,  \n" +
                    "co.noOfPosition AS componentLead,  \n" +
                    "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                    "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                    "co.createdBy,  \n" +
                    "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                    "co.color,  \n" +
                    "co.uom AS partUOMID,  \n" +
                    "co.serialNumber,  \n" +
                    "CASE WHEN  \n" +
                    "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                    "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                    "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                    "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                    "b.additionalComment ,  \n" +
                    "b.additionalCommentId,  \n" +
                    "a.suggestedByApplicationMsg,  \n" +
                    "a.suggestedByApplicationStep,  \n" +
                    "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                    "a.mismatchPitchStep,  \n" +
                    "b.programmingMappingPendingRefdesCount,  \n" +
                    "b.refDesigCount,  \n" +
                    "b.dnpDesigCount,co.feature  \n" +
                    "FROM rfq_lineitems_alternatepart a  \n" +
                    "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id  \n" +
                    "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                    "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                    "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                    "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                    "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIconList`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetBOMIconList`(  \n" +
                    "IN pPartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE totalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vDriveToolTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vPickUpPadTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vMattingTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vObsoleteTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vCustomPartTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vProgrammingPartTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vBadPartTotalCount INT DEFAULT 0;  \n" +
                    "	DECLARE vBadSupplierPartTotalCount INT DEFAULT 0;  \n" +
                    "    DECLARE vFullyMapedwithprogramCount INT DEFAULT 0;  \n" +
                    "	DECLARE vPartiallyMapedwithprogramCount INT DEFAULT 0;  \n" +
                    "	DECLARE vPendingMapedwithprogramCount INT DEFAULT 0;  \n" +
                    "	DECLARE vMappingNotRequireCount INT DEFAULT 0;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_IconList;  \n" +
                    "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));  \n" +
                    "  \n" +
                    "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
                    "	select 'RoHS', IFNULL(ro.rohsIcon, 'noimage.png'), ro.`name`  \n" +
                    "	from rfq_lineitems_alternatepart rla  \n" +
                    "	Inner join component com on com.id = rla.mfgPNID and com.isdeleted = 0  \n" +
                    "	Inner Join rfq_rohsmst ro on ro.id = com.RoHsStatusID and ro.isdeleted = 0  \n" +
                    "	where rla.partID = pPartID and rla.mfgPNID is not null and rla.isDeleted = 0  \n" +
                    "	group by ro.rohsIcon,ro.`name`;  \n" +
                    "  \n" +
                    "	select COUNT(cs.isExportControlled) INTO totalCount from rfq_lineitems_alternatepart rla  \n" +
                    "    Inner join component c on c.id = rla.mfgPNID and c.isdeleted = 0  \n" +
                    "    Inner Join component_standard_details csd ON csd.componentID = c.id AND csd.isDeleted = 0  \n" +
                    "    Inner JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                    "    WHERE rla.partID = pPartID AND rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0;  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "  \n" +
                    "			select sum(com.driverToolRequired), sum(com.pickupPadRequired), sum(com.matingPartRquired),  \n" +
                    "					sum(com.programingRequired),sum((case when com.isCustom = 1 or ifnull(disCom.isCustom,0) = 1 then 1 else 0 end)),  \n" +
                    "					sum((case when (com.eolDate IS NOT NULL AND com.eolDate < fun_DatetimetoUTCDateTime()) OR cps.name <> 'Active' then 1 else 0 end)),  \n" +
                    "					sum((case when com.isGoodPart = 2  then 1 else 0 end)),  \n" +
                    "                    sum((case when disCom.isGoodPart = 2 then 1 else 0 end))  \n" +
                    "					INTO vDriveToolTotalCount, vPickUpPadTotalCount, vMattingTotalCount, vProgrammingPartTotalCount,  \n" +
                    "						vCustomPartTotalCount, vObsoleteTotalCount, vBadPartTotalCount ,vBadSupplierPartTotalCount  \n" +
                    "            from rfq_lineitems_alternatepart rla  \n" +
                    "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0  \n" +
                    "			join component_partstatusmst cps on cps.id = com.partStatus  \n" +
                    "			left join component disCom on disCom.id = rla.distMfgPNID and disCom.isdeleted = 0  \n" +
                    "			where rla.partID = pPartID and rla.isdeleted = 0;  \n" +
                    "  \n" +
                    "	IF(vBadPartTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadPart', NULL, 'Incorrect Part');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF(vBadSupplierPartTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadSupplierPart', NULL, 'Incorrect Supplier Part');  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "	IF(vDriveToolTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(vMattingTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(vPickUpPadTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(vProgrammingPartTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND (mismatchMountingTypeStep = 0)) ;  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchMountingType', NULL, 'Mismatched Mounting Type');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mismatchFunctionalCategoryStep = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchFunctionalType', NULL, 'Mismatched Functional Type');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    SET totalCount = 0;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND isMPNAddedinCPN = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MPNNotMappedInCPN', NULL, 'MPN not Mapped in CPN');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND  approvedMountingType = 1) ;  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ApproveMountingType', NULL, 'Approved Mounting Type');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	/* SET totalCount = 0;  \n" +
                    "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                    "		EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name <> 'Active' AND cp.isDeleted = 0)  \n" +
                    "		THEN 1 ELSE 0 END) INTO totalCount  \n" +
                    "	FROM component co WHERE co.id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);  \n" +
                    "  */  \n" +
                    "	IF(vObsoleteTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (  \n" +
                    "		SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                    "	) AND id NOT IN (  \n" +
                    "		SELECT c.refComponentID FROM component_temperature_sensitive_data c WHERE c.deletedAt IS NULL AND c.refComponentID IN (  \n" +
                    "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                    "			)  \n" +
                    "		) AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE isTemperatureSensitive = 1);  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM component_temperature_sensitive_data WHERE deletedAt IS NULL AND refComponentID IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);  \n" +
                    "  \n" +
                    "	IF(totalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(vCustomPartTotalCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('CustomPart', NULL, 'Custom Part');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SET totalCount = 0;  \n" +
                    "  \n" +
                    "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
                    "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description` FROM component_dynamic_attribute WHERE id IN (  \n" +
                    "		SELECT attributeID FROM component_dynamic_attribute_mapping_part WHERE mfgPNID IN (  \n" +
                    "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                    "			)  AND deletedAt IS NULL	) ;  \n" +
                    "  \n" +
                    "    select sum(case  when programmingMappingStatus = 1 then 1 else 0 end) PendingMapping,  \n" +
                    "	sum(case when programmingMappingStatus = 2 then 1 else 0 end) PartialMapping,  \n" +
                    "	sum(case when programmingMappingStatus = 3 then 1 else 0 end) FullyMapping,  \n" +
                    "	sum(case when programmingMappingStatus = 4 then 1 else 0 end) MappingNotrequire  \n" +
                    "    INTO vPendingMapedwithprogramCount, vPartiallyMapedwithprogramCount, vFullyMapedwithprogramCount, vMappingNotRequireCount  \n" +
                    "	from(  \n" +
                    "	select (case when c.programingRequired and (rl.programingStatus = 1 or rl.programingStatus = 2) then  \n" +
                    "			(case when rl.isBuyDNPQty = 'P' then  \n" +
                    "				(case when (rl.refDesigCount + rl.dnpDesigCount) = rl.programmingMappingPendingRefdesCount then 1  \n" +
                    "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                    "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                    "					end)  \n" +
                    "				else  \n" +
                    "					(case when rl.refDesigCount = rl.programmingMappingPendingRefdesCount then 1  \n" +
                    "						when rl.refDesigCount > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                    "						when rl.refDesigCount > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                    "					end)  \n" +
                    "			end)  \n" +
                    "		  when (c.functionalCategoryID = -2 or c.mountingTypeID = -2) then  \n" +
                    "				(case when (rl.refDesigCount + rl.dnpDesigCount) = rl.programmingMappingPendingRefdesCount then 1  \n" +
                    "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                    "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                    "					end)  \n" +
                    "		when c.programingRequired and (rl.programingStatus <> 1 and rl.programingStatus <> 2) then 4  \n" +
                    "		else 0  \n" +
                    "	 end ) programmingMappingStatus  \n" +
                    "	 from rfq_lineitems_alternatepart rla  \n" +
                    "	 join component c on c.id = rla.mfgPNID  \n" +
                    "	 Join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isdeleted = 0  \n" +
                    "	 where rla.partID = pPartID and rla.isdeleted = 0  \n" +
                    "	 )a where programmingMappingStatus>0 ;  \n" +
                    "  \n" +
                    "	IF(vPendingMapedwithprogramCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('PendingtoMapPartwithProgram', NULL, 'Pending to Mapping Part with Program');  \n" +
                    "	END IF;  \n" +
                    "	IF(vPartiallyMapedwithprogramCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('PartiallyMapPartwithProgram', NULL, 'Partially Mapped Part with Program');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(vFullyMapedwithprogramCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('FullyMapPartwithProgram', NULL, 'Fully Mapped Part with Program');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF(vMappingNotRequireCount > 0) THEN  \n" +
                    "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('NotRequiretoMapPartwithProgram', NULL, 'Not Require to Mapping Part with Program');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "	SELECT * FROM temp_IconList;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_RemoveMPNFromCPNMapping`;  \n" +
                    "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                    "	IN prefCompID INT,  \n" +
                    "	IN prefCPNID INT,  \n" +
                    "    IN pUserID INT,  \n" +
                    "    IN pRoleID INT,  \n" +
                    "    IN pDeleteRequest tinyint,  \n" +
                    "    IN pDeleteMPNFrom tinyint,  \n" +
                    "    IN preason varchar(1200)  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE vLiveInternalVersion INT;  \n" +
                    "DECLARE vLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "DECLARE vInternalVersion VARCHAR(100);  \n" +
                    "DECLARE vMFGPN VARCHAR(100);  \n" +
                    "DECLARE subAssyType INT;  \n" +
                    "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                    "	BEGIN  \n" +
                    "		ROLLBACK;  \n" +
                    "		RESIGNAL;  \n" +
                    "	END;  \n" +
                    "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                    "	  BEGIN  \n" +
                    "		ROLLBACK;  \n" +
                    "		RESIGNAL;  \n" +
                    "	END;  \n" +
                    "	START TRANSACTION;  \n" +
                    "    SET  subAssyType = 3;  \n" +
                    "	# get Internal version format  \n" +
                    "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "			IF vLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "			ELSE  \n" +
                    "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;  \n" +
                    "				ELSE  \n" +
                    "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;  \n" +
                    "				END IF;  \n" +
                    "			END IF;  \n" +
                    "  \n" +
                    "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component k WHERE k.id = prefCPNID;  \n" +
                    "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;  \n" +
                    "  \n" +
                    "  	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                    "	SELECT  rl.partID  \n" +
                    "	FROM rfq_lineitems AS rl  \n" +
                    "	WHERE rl.custPNID = prefCPNID AND rl.isDeleted = 0  \n" +
                    "	GROUP BY rl.partID;  \n" +
                    "  \n" +
                    "		UPDATE component  \n" +
                    "		SET  \n" +
                    "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                    "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                    "		WHERE id IN(  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM component c  \n" +
                    "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                    "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                    "  \n" +
                    "		  UNION ALL  \n" +
                    "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                    "		  FROM rfq_lineitems rlp  \n" +
                    "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                    "          INNER JOIN component cp ON cp.id = rlap.mfgPNID  \n" +
                    "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                    "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                    "		)  \n" +
                    "		SELECT DISTINCT partId FROM cte);  \n" +
                    "  \n" +
                    "		SELECT  j.mfgPN INTO vMFGPN FROM component j WHERE j.id = prefCompID;  \n" +
                    "        INSERT INTO rfq_assembly_history  \n" +
                    "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,description, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                    "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MFR PN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                    "        concat('Delete Request From: ',(case when pDeleteRequest = 1 then 'Internal Error' when pDeleteRequest = 2 then 'Customer Request' end), '<br/> Reason: ', preason),  \n" +
                    "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                    "  \n" +
                    "  \n" +
                    "    UPDATE component  \n" +
                    "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))  \n" +
                    "    WHERE id = prefCPNID;  \n" +
                    "  \n" +
                    "	# remove CPN entry from CPN mapping  \n" +
                    "        update component_cust_alias_rev_pn  \n" +
                    "        set isdeleted = 1,  \n" +
                    "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                    "			deletedBy = pUserID,  \n" +
                    "			deleteByRoleId = pRoleID  \n" +
                    "        where refComponentID = prefCompID and refCPNPartID = prefCPNID and isdeleted = 0;  \n" +
                    "  \n" +
                    "	# Manage History for Change  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "    if pDeleteMPNFrom = 1 then  \n" +
                    "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                    "        update rfq_lineitems_alternatepart rla  \n" +
                    "        join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                    "        set rla.isMPNAddedinCPN = 0,  \n" +
                    "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                    "            rla.updatedBy = pUserID,  \n" +
                    "            rla.updateByRoleId = pRoleID  \n" +
                    "        where rla.mfgPNID = prefCompID and rl.custPNID = prefCPNID and rla.isdeleted = 0;  \n" +
                    "  \n" +
                    "  \n" +
                    "	elseif pDeleteMPNFrom = 2 then  \n" +
                    "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                    "        update rfq_lineitems_alternatepart rla  \n" +
                    "        Join  ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 )a on a.id = rla.id  \n" +
                    "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                    "        set rla.isDeleted = 1,  \n" +
                    "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                    "            rla.deletedBy = pUserID,  \n" +
                    "            rla.deleteByRoleId = pRoleID  \n" +
                    "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount>1 and a.isdeleted = 0;  \n" +
                    "  \n" +
                    "  \n" +
                    "		update rfq_lineitems_alternatepart rla  \n" +
                    "        Join ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 ) a on a.id = rla.id  \n" +
                    "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                    "        set  \n" +
                    "			rla.distributor = null, rla.distMfgCodeID = null, rla.distPN = null, rla.distMfgPNID = null, rla.mfgCode = null, rla.mfgCodeID = null,  \n" +
                    "            rla.mfgPN = null, rla.mfgPNID = null, rla.description = null, rla.RoHSStatusID = null, rla.customerApproval = 'P',  \n" +
                    "            rla.customerApprovalBy  = null, rla.customerApprovalDate = null, rla.badMfgPN = null, rla.userData1 = null, rla.userData2 = null,  \n" +
                    "			rla.userData3 = null, rla.userData4 = null, rla.userData5 = null, rla.userData6 = null, rla.userData7 = null, rla.userData8 = null,  \n" +
                    "            rla.userData9 = null, rla.userData10 = null, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                    "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount = 1 and rla.isdeleted = 0;  \n" +
                    "  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "Commit;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                    "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                    "IN pPartID INT,  \n" +
                    "IN pUserID INT,  \n" +
                    "IN pRoleID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE totalCount INT DEFAULT 0;  \n" +
                    "DECLARE currIndex INT DEFAULT 0;  \n" +
                    "DECLARE prevLineID INT;  \n" +
                    "DECLARE currCustPNID INT;  \n" +
                    "DECLARE currMFGPNID INT;  \n" +
                    "DECLARE currLineID INT;  \n" +
                    "DECLARE mountingTypeID INT;  \n" +
                    "DECLARE functionalCategoryID INT;  \n" +
                    "DECLARE rohsStatusID INT;  \n" +
                    "DECLARE categoryID INT;  \n" +
                    "DECLARE partTypeID INT;  \n" +
                    "DECLARE statusID INT;  \n" +
                    "DECLARE mfgPNID INT;  \n" +
                    "DECLARE currCustRev VARCHAR(10);  \n" +
                    "DECLARE currCustPN VARCHAR(500);  \n" +
                    "DECLARE currCustomerPartDesc TEXT;  \n" +
                    "DECLARE mfgPN VARCHAR(500);  \n" +
                    "DECLARE mfgPID VARCHAR(500);  \n" +
                    "DECLARE maxDisplayOrder DECIMAL;  \n" +
                    "DECLARE pLiveInternalVersion INT;  \n" +
                    "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "DECLARE pCompanyName VARCHAR(100);  \n" +
                    "DECLARE pMFGPN VARCHAR(100);  \n" +
                    "DECLARE pEpicoreType VARCHAR(100);  \n" +
                    "DECLARE vSerialNumer VARCHAR(20);  \n" +
                    "DECLARE v_message VARCHAR(20);  \n" +
                    "DECLARE maxPartId INT;  \n" +
                    "SET categoryID = 2;  \n" +
                    "SET partTypeID = 2;  \n" +
                    "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                    "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                    "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                    "		rla.mfgPNID,    c.RoHSStatusID  \n" +
                    "	FROM rfq_lineitems_alternatepart rla  \n" +
                    "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                    "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                    "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                    "	AND rl.partID = pPartID  \n" +
                    "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                    "	AND rl.duplicateCPNStep = 1  \n" +
                    "    );  \n" +
                    "  \n" +
                    "  \n" +
                    "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                    "    IF totalCount > 0 THEN  \n" +
                    "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                    "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                    "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                    "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                    "		IF functionalCategoryID IS NULL THEN  \n" +
                    "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                    "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                    "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF mountingTypeID IS NULL THEN  \n" +
                    "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                    "		END IF;  \n" +
                    "		SET prevLineID = 0;  \n" +
                    "		WHILE currIndex < totalCount DO  \n" +
                    "			SET currCustPN = NULL;  \n" +
                    "			SET currCustRev = NULL;  \n" +
                    "			SET currCustomerPartDesc = NULL;  \n" +
                    "  \n" +
                    "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                    "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc  \n" +
                    "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                    "  \n" +
                    "			SET currIndex = currIndex + 1;  \n" +
                    "  \n" +
                    "            SET pLiveInternalVersion = 0;  \n" +
                    "  \n" +
                    "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                    "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                    "					IF (currMFGPNID > 0 and currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                    "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "  \n" +
                    "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                    "  \n" +
                    "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "  \n" +
                    "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                    "  \n" +
                    "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                    "						INSERT INTO rfq_assembly_history  \n" +
                    "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                    "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                    "  \n" +
                    "						-- Update All Assembly for CPN change  \n" +
                    "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                    "					END IF;  \n" +
                    "				END IF;  \n" +
                    "				IF (currCustPNID IS NULL) THEN  \n" +
                    "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                    "						SET rohsStatusID = 0;  \n" +
                    "					ELSE  \n" +
                    "						SET rohsStatusID = 1;  \n" +
                    "					END IF;  \n" +
                    "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                    "						SET currCustRev = \"-\";  \n" +
                    "					END IF;  \n" +
                    "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                    "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                    "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                    "					SET mfgPNID = NULL;  \n" +
                    "  \n" +
                    "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                    "					-- SELECT   mfgPNID;  \n" +
                    "					IF mfgPNID IS NULL THEN  \n" +
                    "					-- SELECT   mfgPNID;  \n" +
                    "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                    "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                    "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                    "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                    "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                    "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)  \n" +
                    "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                    "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                    "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                    "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'));  \n" +
                    "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                    "						IF(currMFGPNID > 0 ) THEN  \n" +
                    "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "						END IF;  \n" +
                    "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                    "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                    "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                    "						INSERT INTO rfq_assembly_history  \n" +
                    "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "							oldValue,newValue,changeVersion,  \n" +
                    "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                    "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MFR PN\",  \n" +
                    "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                    "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                    "					ELSE  \n" +
                    "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                    "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "							SET currCustPNID = mfgPNID;  \n" +
                    "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                    "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                    "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                    "							INSERT INTO rfq_assembly_history  \n" +
                    "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "								oldValue,newValue,changeVersion,  \n" +
                    "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                    "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",  \n" +
                    "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                    "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                    "						-- Update All Assembly for CPN change  \n" +
                    "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                    "						ELSE  \n" +
                    "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                    "						END IF;  \n" +
                    "					END IF;  \n" +
                    "				END IF;  \n" +
                    "			END IF;  \n" +
                    "			END WHILE;  \n" +
                    "  \n" +
                    "			UPDATE component  \n" +
                    "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                    "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                    "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                    "		END IF;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                    "		SELECT  * FROM temp_new_cpn_id;  \n" +
                    "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_UpdateRFQ_LineItems_AlternatePart_CPN`;  \n" +
                    "CREATE PROCEDURE `Sproc_UpdateRFQ_LineItems_AlternatePart_CPN`(  \n" +
                    "	IN pRefCPNPartID INT,  \n" +
                    "	IN pUserID INT,  \n" +
                    "	IN pReturnResult TINYINT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE totalCount INT DEFAULT 0;  \n" +
                    "	DECLARE currIndex INT DEFAULT 0;  \n" +
                    "	DECLARE totalMFGPNCount INT DEFAULT 0;  \n" +
                    "	DECLARE currMFGPNIndex INT DEFAULT 0;  \n" +
                    "	DECLARE currLineID INT;  \n" +
                    "	DECLARE currPartID INT;  \n" +
                    "	DECLARE currMFGPNID INT;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom (partId INT);  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS  \n" +
                    "	SELECT  rl.id id,  rl.partID  \n" +
                    "	FROM rfq_lineitems AS rl  \n" +
                    "	WHERE rl.custPNID =  pRefCPNPartID AND rl.deletedAt IS NULL ;  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM existBOMResult;  \n" +
                    "	IF totalCount > 0 THEN  \n" +
                    "		WHILE currIndex < totalCount DO  \n" +
                    "			SELECT  a.id,		a.partID  \n" +
                    "			INTO 	currLineID	,currPartID  \n" +
                    "			FROM 	existBOMResult a LIMIT currIndex, 1;  \n" +
                    "  \n" +
                    "			CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS  \n" +
                    "			SELECT refComponentID FROM component_cust_alias_rev_pn WHERE  \n" +
                    "			refCPNPartID = pRefCPNPartID AND  \n" +
                    "			refComponentID NOT IN(SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND deletedAt IS NULL) AND  \n" +
                    "			deletedAt IS NULL;  \n" +
                    "			SELECT COUNT(1) INTO totalMFGPNCount FROM existCPNResult;  \n" +
                    "			IF totalMFGPNCount > 0 THEN  \n" +
                    "			SET currMFGPNIndex = 0;  \n" +
                    "			WHILE currMFGPNIndex < totalMFGPNCount DO  \n" +
                    "				SELECT  a.refComponentID  \n" +
                    "				INTO 	currMFGPNID  \n" +
                    "				FROM 	existCPNResult a LIMIT currMFGPNIndex, 1;  \n" +
                    "				IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID AND deletedAt IS NULL) = 0 THEN  \n" +
                    "					CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                    "					INSERT INTO `rfq_lineitems_alternatepart`(	`rfqLineItemsID`,	`mfgCode`,	`mfgCodeID`,		`mfgPN`,  \n" +
                    "											`mfgPNID`,		`RoHSStatusID`,  \n" +
                    "											`createdBy`,	`createdAt`,	`partID`,  \n" +
                    "											`customerApproval`, `restrictUsePermanentlyStep`)  \n" +
                    "					SELECT currLineID `rfqLineItemsID`, (SELECT mfgName FROM mfgcodemst WHERE id = c.mfgCodeId)  `mfgCode`, c.mfgCodeID `mfgCodeID`, c.`mfgPN` `mfgPN`,  \n" +
                    "					c.id mfgPNID, 	c.`RoHSStatusID` `RoHSStatusID`,  \n" +
                    "					pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, currPartID `partID`,  \n" +
                    "					'P' `customerApproval` , 1 `restrictUsePermanentlyStep`  \n" +
                    "					FROM component c WHERE c.id = currMFGPNID AND c.deletedAt IS NULL;  \n" +
                    "					INSERT INTO temp_component_update_bom(partId) VALUES (currPartID);  \n" +
                    "				/*else IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID and isMPNAddedinCPN = 0 AND deletedAt IS NULL) = 1 THEN  \n" +
                    "					CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                    "						update rfq_lineitems_alternatepart  \n" +
                    "                        set isMPNAddedinCPN = 1  \n" +
                    "                        WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID and isMPNAddedinCPN = 0 AND isdeleted = 0;  \n" +
                    "                        INSERT INTO temp_component_update_bom(partId) VALUES (currPartID);  \n" +
                    "					end if;*/  \n" +
                    "                END IF;  \n" +
                    "				SET currMFGPNIndex = currMFGPNIndex + 1;  \n" +
                    "			END WHILE;  \n" +
                    "			END IF;  \n" +
                    "			DROP TEMPORARY TABLE existCPNResult;  \n" +
                    "  \n" +
                    "			SET currIndex = currIndex + 1;  \n" +
                    "  \n" +
                    "		END WHILE;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE existBOMResult;  \n" +
                    "	IF pReturnResult THEN  \n" +
                    "		SELECT DISTINCT * FROM temp_component_update_bom;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN pEmployeeID INT,  \n" +
                    "	IN pCustomerIds VARCHAR(16383),  \n" +
                    "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                    "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                    "	IN pJobTypeIds VARCHAR(16383),  \n" +
                    "	IN pAssyIds VARCHAR(16383),  \n" +
                    "	IN pAssyNicknameIds LONGTEXT,  \n" +
                    "	IN pIsExportControlled TINYINT,  \n" +
                    "	IN pIsQuoteOverdue TINYINT,  \n" +
                    "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                    "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                    "	IN pFromDate DATE,  \n" +
                    "	IN pToDate DATE,  \n" +
                    "	IN pOlderThenDays INT  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "	DECLARE pOffset INT;  \n" +
                    "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                    "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                    "        DECLARE vTimeZone VARCHAR(50);  \n" +
                    "  \n" +
                    "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                    "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                    "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "  		SET pWhereClause = '1=1' ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                    "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                    "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                    "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                    "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                    "		   (CASE  \n" +
                    "			WHEN rfq_statusID = 1 THEN  \n" +
                    "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                    "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                    "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                    "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                    "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                    "		    END)');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                    "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                    "		 (CASE  \n" +
                    "			WHEN rfq_statusID = 1 THEN  \n" +
                    "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                    "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                    "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                    "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                    "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                    "		    END)  \n" +
                    "		');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF pIsQuoteOverdue = 1 THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                    "        (CASE  \n" +
                    "        WHEN rfq_statusID = 1 THEN  \n" +
                    "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                    "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                    "				quoteSubmitDate > quoteDueDate  \n" +
                    "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                    "				quoteClosedDate	> quoteDueDate  \n" +
                    "            END)');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                    "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                    "	END IF; */  \n" +
                    "  \n" +
                    "  \n" +
                    "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                    "	/* DECLARE SQLStatement varchar(255); */  \n" +
                    "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                    "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                    "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                    "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                    "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                    "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                    "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                    "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                    "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                    "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                    "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                    "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                    "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                    "			part.liveVersion AS liveInternalVersion,  \n" +
                    "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                    "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                    "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                    "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                    "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                    "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                    "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                    "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                    "			ra.status rfq_statusID,  \n" +
                    "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                    "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                    "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                    "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                    "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                    "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                    "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                    "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                    "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                    "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                    "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                    "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                    "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                    "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                    "            ra.isCustomPartDetShowInReport,  \n" +
                    "            ra.quoteValidTillDate,  \n" +
                    "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                    "			(CASE WHEN part.isActivityStart THEN concat(assyusr.firstName, ' ', assyusr.lastName) ELSE '' END )AS username, part.activityStartBy,  \n" +
                    "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,  \n" +
                    "			part.activityStartAt activityStartAtDateTime,  \n" +
                    "            ra.isActivityStart as isCostingActivityStart,  \n" +
                    "            (CASE WHEN ra.isActivityStart THEN concat(rfqusr.firstName, ' ', rfqusr.lastName) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                    "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,  \n" +
                    "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                    "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                    "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                    "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                    "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                    "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                    "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                    "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                    "            ra.partCostingBOMInternalVersion  \n" +
                    "		FROM rfqforms rf  \n" +
                    "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                    "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                    "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                    "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                    "        LEFT JOIN users rfqusr ON rfqusr.id = ra.activityStartBy  \n" +
                    "        LEFT JOIN users assyusr ON assyusr.id = part.activityStartBy  \n" +
                    "		WHERE rf.isdeleted = 0  \n" +
                    "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                    "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                    "		else 1=1 end)  \n" +
                    "        \");  \n" +
                    "  \n" +
                    "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	ELSE  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "	ELSE  \n" +
                    "		SET rowNumWhere = '';  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                    "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                    "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                    "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                    "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                    "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                    "	END IF;  \n" +
                    "	/* to get total count of rows */  \n" +
                    "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                    "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                    "	EXECUTE RFQquery1;  \n" +
                    "	DEALLOCATE PREPARE RFQquery1;  \n" +
                    "  \n" +
                    "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                    "	EXECUTE RFQquery2;  \n" +
                    "	DEALLOCATE PREPARE RFQquery2;  \n" +
                    "  \n" +
                    "  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                
                
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5188,'2.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021]  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5188:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                    "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pIsUpdateRequired BOOL;  \n" +
                    "	DECLARE pLiveInternalVersion INT(11);  \n" +
                    "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                    "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                    "	DECLARE newUOM VARCHAR(50);  \n" +
                    "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                    "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "	DECLARE pCompanyName VARCHAR(100);  \n" +
                    "	DECLARE pErrorNarrative TEXT;  \n" +
                    "	DECLARE pErrorDisplayName TEXT;  \n" +
                    "	DECLARE pErrorIsResearchStatus TINYINT(1);  \n" +
                    "	DECLARE pErrorCode VARCHAR(100);  \n" +
                    "	SET pIsUpdateRequired = FALSE;  \n" +
                    "  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                    "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "	IF pLiveInternalVersion > 0 THEN  \n" +
                    "  \n" +
                    "		IF NEW.lineID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item\",  \n" +
                    "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer BOM Line Number\",  \n" +
                    "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.qpa IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                    "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
                    "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.custPN IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                    "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                    "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                    "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Kit Allocation not Required\",  \n" +
                    "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                    "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Rev\",  \n" +
                    "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                    "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Lead\",  \n" +
                    "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN QTY\",  \n" +
                    "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN DES\",  \n" +
                    "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			IF NEW.uomID IS NOT NULL  \n" +
                    "				THEN  \n" +
                    "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                    "				ELSE  \n" +
                    "					SET newUOM = '';  \n" +
                    "			END IF;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                    "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                    "			IF NEW.substitutesAllow = 3 THEN  \n" +
                    "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                    "				SET newSubstitutesAllow = 'No';  \n" +
                    "			ELSE  \n" +
                    "				SET newSubstitutesAllow = '';  \n" +
                    "			END IF;  \n" +
                    "			IF newSubstitutesAllow != '' THEN  \n" +
                    "				SET pIsUpdateRequired = TRUE;  \n" +
                    "				INSERT INTO rfq_assembly_history  \n" +
                    "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "					oldValue,newValue,changeVersion,  \n" +
                    "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                    "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			IF NEW.programingStatus = 1 THEN  \n" +
                    "				SET newProgramingStatus = 'Pre';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                    "				SET newProgramingStatus = 'Post';  \n" +
                    "			ELSE  \n" +
                    "				SET newProgramingStatus = 'N/A';  \n" +
                    "			END IF;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Programing\",  \n" +
                    "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                    "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty Buy\",  \n" +
                    "				NULL, CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"Yes\" WHEN NEW.isBuyDNPQty = \"N\" THEN \"No\" ELSE \"Customer Consigned\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF pIsUpdateRequired = TRUE THEN  \n" +
                    "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                    "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pIsUpdateRequired BOOL;  \n" +
                    "	DECLARE pLiveInternalVersion INT;  \n" +
                    "	DECLARE pPartID INT;  \n" +
                    "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                    "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "	DECLARE pCompanyName VARCHAR(100);  \n" +
                    "	DECLARE pErrorNarrative TEXT;  \n" +
                    "	DECLARE pErrorDisplayName TEXT;  \n" +
                    "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                    "	DECLARE pErrorCode VARCHAR(100);  \n" +
                    "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                    "  \n" +
                    "	SET pIsUpdateRequired = FALSE;  \n" +
                    "  \n" +
                    "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                    "  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                    "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                    "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                    "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                    "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                    "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                    "			SET pDeleteMessage =\"MFR PN \";  \n" +
                    "		ELSE  \n" +
                    "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                    "		END IF;  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                    "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                    "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                    "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                    "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                    "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                    "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                    "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                    "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                    "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                    "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                    "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                    "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                    "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                    "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                    "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                    "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                    "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                    "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                    "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                    "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                    "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                    "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                    "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                    "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                    "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                    "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                    "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                    "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, -1) != IFNULL(NEW.uomMismatchedStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                    "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                    "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, -1) != IFNULL(NEW.restrictUseInBOMStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                    "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                    "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                    "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                    "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                    "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, -1) != IFNULL(NEW.mismatchNumberOfRowsStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                    "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                    "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                    "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                    "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                    "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                    "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, -1) != IFNULL(NEW.isUnlockApprovedPart, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                    "			SET pDeleteMessage =\"MFR PN \";  \n" +
                    "		ELSE  \n" +
                    "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                    "		END IF;  \n" +
                    "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "	 		INSERT INTO rfq_assembly_history  \n" +
                    "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "	 			oldValue,newValue,changeVersion,  \n" +
                    "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                    "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                    "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                    "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                    "	 		INSERT INTO rfq_assembly_history  \n" +
                    "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "	 			oldValue,newValue,changeVersion,  \n" +
                    "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                    "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                    "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                    "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSE  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                    "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                    "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  # Mismatch Programming required step  \n" +
                    "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                    "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "      # Part and Program ref des mapping required step  \n" +
                    "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                    "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    # Mismatch Programming status Step  \n" +
                    "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                    "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                    "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                    "		ELSE  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                    "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    # Mismatch Programming status Step  \n" +
                    "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                    "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF pIsUpdateRequired = TRUE THEN  \n" +
                    "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                    "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pIsUpdateRequired BOOL;  \n" +
                    "	DECLARE pLiveInternalVersion INT;  \n" +
                    "	DECLARE pPartID INT;  \n" +
                    "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "	DECLARE pCompanyName VARCHAR(100);  \n" +
                    "	DECLARE pErrorNarrative TEXT;  \n" +
                    "	DECLARE pErrorDisplayName TEXT;  \n" +
                    "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                    "	DECLARE pErrorCode VARCHAR(100);  \n" +
                    "	SET pIsUpdateRequired = FALSE;  \n" +
                    "  \n" +
                    "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF pLiveInternalVersion > 0 THEN  \n" +
                    "  \n" +
                    "		IF NEW.distributor IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                    "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.distPN IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                    "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                    "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "			-- if New.org_mfgCode is null then  \n" +
                    "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                    "			-- end if;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                    "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                    "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                    "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                    "			-- END IF;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                    "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                    "		END IF;  \n" +
                    "        # mismatch programming require step  \n" +
                    "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "        # part program ref des mapping require step  \n" +
                    "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "        # Mismatch Programming Statue step  \n" +
                    "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	 # MPN Mapping Pengin in CPN  \n" +
                    "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                    "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                    "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		ELSE  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                    "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "		IF pIsUpdateRequired = TRUE THEN  \n" +
                    "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5189,'2.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021]  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;  
                case 5189:
  allDbChangesArray.push(
  /* **************************** New Script -> 02-09-2021 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
      "	IN ppageIndex INT,  \n" +
      "	IN precordPerPage INT,  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pIsKitList TINYINT,  \n" +
      "	IN pPlannedStatus VARCHAR(10),  \n" +
      "	IN pSalesOrderDetailId INT,  \n" +
      "	IN pIsPendingWOCreationList TINYINT,  \n" +
      "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
      "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
      "	IN pfilterStatus VARCHAR(100),  \n" +
      "	IN pcustomerIds VARCHAR(16000),  \n" +
      "	IN pshippingMethodId VARCHAR(16000),  \n" +
      "	IN ptermsIds VARCHAR(16000),  \n" +
      "	IN psearchposotext VARCHAR(1000),  \n" +
      "	IN psearchposotype VARCHAR(10),  \n" +
      "	IN pfromDate DATE,  \n" +
      "	IN ptoDate DATE,  \n" +
      "	IN prushJob TINYINT,  \n" +
      "	IN ppartIds VARCHAR(16000),  \n" +
      "	IN pworkorders VARCHAR(16000),  \n" +
      "	IN psearchextPricetext VARCHAR(1000),  \n" +
      "	IN psearchextPricetype VARCHAR(10),  \n" +
      "	IN pkitreturnStatus VARCHAR(100),  \n" +
      "	IN pkitReleaseStatus VARCHAR(100)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	DECLARE pOffset INT;  \n" +
      "	DECLARE rowNumWhere VARCHAR(255);  \n" +
      "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
      "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
      "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
      "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
      "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
      "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
      "	SET v_PendingWOWhereClause='';  \n" +
      "  \n" +
      "	IF(pIsKitList=1) THEN  \n" +
      "		SET v_DynamicColumns = CONCAT(\",  \n" +
      "			hu.refType as refTypeKR,  \n" +
      "			hu.status as haltStatusKR,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hu.status = 'H' THEN  \n" +
      "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonKR,  \n" +
      "			hutt.refType as refTypePO,  \n" +
      "			hutt.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hutt.status = 'H' THEN  \n" +
      "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO,  \n" +
      "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin = CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
      "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
      "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
      "	ELSE  \n" +
      "		SET v_DynamicColumns=CONCAT(\",  \n" +
      "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hut.status = 'H' THEN  \n" +
      "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin =CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
      "				SELECT 	MAX(ht.id)  \n" +
      "				FROM 	holdunholdtrans ht  \n" +
      "				WHERE 	hut.refTransId = ht.refTransId  \n" +
      "						AND ht.refType='PO'  \n" +
      "						AND ht.isdeleted=0  \n" +
      "					)  \n" +
      "				\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
      "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
      "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
      "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
      "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
      "						co.mfgPN AS mfgPN,  \n" +
      "						co.nickname AS nickName,  \n" +
      "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
      "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
      "						vusalesorderdet.poNumber,  \n" +
      "						vusalesorderdet.salesOrderNumber  \n" +
      "				FROM 		workorder wo  \n" +
      "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
      "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
      "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
      "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
      "		\");  \n" +
      "	END IF;  \n" +
      "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
      "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
      "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
      "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
      "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
      "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
      "        IF pOrderBy IS NULL THEN  \n" +
      "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
      "        END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
      "		SELECT  a.*,  \n" +
      "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
      "		FROM  \n" +
      "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
      "							'No'  \n" +
      "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
      "							'Yes'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `isHotJobValue`,  \n" +
      "				`vuss`.`isHotJob`,  \n" +
      "				`vuss`.`Sales Order ID` AS id,  \n" +
      "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
      "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
      "				`vuss`.frequency as frequencyName,  \n" +
      "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
      "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
      "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
      "				`vuss`.`Po Number` AS poNumber,  \n" +
      "				`vuss`.`Po Date` AS poDate,  \n" +
      "				`vuss`.`Customer ID` AS customerID,  \n" +
      "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
      "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
      "				`vuss`.`Sales Order Status` AS `status`,  \n" +
      "				`vuss`.`Revision` AS revision,  \n" +
      "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
      "				`vuss`.`Terms ID` AS termsID,  \n" +
      "				`vuss`.`So Date` AS soDate,  \n" +
      "				`vuss`.`Company Name` AS companyName,  \n" +
      "				`vuss`.`internalPO` AS internalPO,  \n" +
      "				`vuss`.`mfgCode` AS mfgCode,  \n" +
      "				`vuss`.`Full Name` AS fullName,  \n" +
      "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
      "				`vuss`.`PO Qty` AS qty,  \n" +
      "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
      "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
      "				`vuss`.`mrpQty` AS mrpQty,  \n" +
      "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
      "				`vuss`.`kitQty` AS kitQty, \",  \n" +
      "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
      "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
      "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
      "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
      "				`vuss`.`shippingQty` AS shippingQty,  \n" +
      "				`vuss`.`remark` AS remark,  \n" +
      "				`vuss`.`Assy ID` AS PIDCode,  \n" +
      "				`vuss`.`Assy Name` AS mfgPN,  \n" +
      "				`vuss`.`NickName` AS nickName,  \n" +
      "				`vuss`.`liveVersion` AS liveVersion,  \n" +
      "				`vuss`.`partDescription` AS partDescription,  \n" +
      "				`vuss`.`cancleReason` AS cancleReason,  \n" +
      "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
      "				`vuss`.`modifyDate` AS modifyDate,  \n" +
      "				`vuss`.`createdDate` AS createdDate,  \n" +
      "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
      "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
      "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
      "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
      "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
      "				vuss.isBlanketPO,  \n" +
      "				vuss.blanketPOText,  \n" +
      "				vuss.poRevision,  \n" +
      "				vuss.partType,  \n" +
      "				vuss.isCancle,  \n" +
      "				vuss.mfgcodeID,  \n" +
      "				vuss.manufacturerName,  \n" +
      "				`vuss`.`PartID` AS partID,  \n" +
      "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
      "				`vuss`.`kitNumber` AS kitNumber,  \n" +
      "				`vuss`.`serialNumber` AS serialNumber,  \n" +
      "				`vuss`.partCategory,  \n" +
      "				vuss.lineID,  \n" +
      "				vuss.internalCommentSo,  \n" +
      "				vuss.internalComment,  \n" +
      "				vuss.originalPODate,  \n" +
      "				vuss.isRmaPO,  \n" +
      "				vuss.rmaPOText,  \n" +
      "				vuss.isLegacyPO,  \n" +
      "				vuss.legacyPOText,  \n" +
      "				vuss.originalPOQty,  \n" +
      "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
      "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
      "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
      "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
      "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
      "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
      "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
      "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
      "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
      "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
      "							'Draft'  \n" +
      "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
      "							'Published'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `statusConvertedValue`,  \n" +
      "				hutkit.refType as refTypeKA,  \n" +
      "				hutkit.status as haltStatusKA,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	hutkit.status = 'H' THEN  \n" +
      "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
      "						ELSE 	''  \n" +
      "					END  \n" +
      "				) AS reasonKA,  \n" +
      "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
      "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
      "				(  \n" +
      "				CASE  \n" +
      "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
      "						TRUE  \n" +
      "					ELSE  \n" +
      "						FALSE  \n" +
      "				END  \n" +
      "				) as isKitPlanningRequired,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
      "							'Unplanned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
      "							'Partially Planned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
      "							'Fully Planned'  \n" +
      "						ELSE  \n" +
      "							NULL  \n" +
      "					END  \n" +
      "				) as kitPlanStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	ka.kitReturnStatus is null then  \n" +
      "							'N/A'  \n" +
      "						ELSE  \n" +
      "							ka.kitReturnStatus  \n" +
      "					END  \n" +
      "				) as kitReturnStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ka.kitReleaseStatus is null then  \n" +
      "							'Not Released'  \n" +
      "						else  \n" +
      "							ka.kitReleaseStatus  \n" +
      "					END  \n" +
      "				) as kitReleaseStatus,  \n" +
      "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
      "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
      "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
      "				p.nextReleaseDate,  \n" +
      "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
      "				p.releasedPlanCount totalkitRelease,  \n" +
      "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
      "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
      "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
      "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
      "				vuss.releasedWorkorder,  \n" +
      "                ka.shortagePer,  \n" +
      "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
      "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
      "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
      "		LEFT JOIN  	(  \n" +
      "					SELECT  salesOrderDetID,  \n" +
      "						refAssyId,  \n" +
      "						count(1) totalPlan,  \n" +
      "						SUM(poQty) totalPOQty,  \n" +
      "						SUM(kitReleaseQty) totalKitQty,  \n" +
      "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
      "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
      "					FROM 	salesorder_plan_detailsmst  \n" +
      "					WHERE 	isDeleted=0  \n" +
      "							AND subAssyID is null  \n" +
      "					GROUP BY salesOrderDetID, refAssyId  \n" +
      "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
      "		LEFT JOIN 	(  \n" +
      "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "						`k`.`assyID` AS `assyID`,  \n" +
      "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
      "						`k`.`shortageLine` AS `shortageLine`,  \n" +
      "						allocPermainAssy allocPerComponent,  \n" +
      "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
      "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
      "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
      "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
      "						FROM (  \n" +
      "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "								mainAssy AS `assyID`,  \n" +
      "								COUNT(1) AS `totalLine`,  \n" +
      "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
      "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
      "								sum( k.shortageline) shortageline,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
      "							  FROM (  \n" +
      "  \n" +
      "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
      "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
      "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
      "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
      "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
      "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
      "									FROM  	`vu_kit_allocation_detail` vk  \n" +
      "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
      "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
      "								) `k`  \n" +
      "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
      "						) `k`  \n" +
      "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
      "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
      "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
      "		) AS a  \n" +
      "    \");  \n" +
      "  \n" +
      "    IF(pIsKitList = 1) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pOrderBy IS NOT NULL) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
      "	ELSE  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "		SET pWhereClause = '1=1' ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
      "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
      "	  IF(psearchposotype='C')THEN  \n" +
      "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
      "          ELSE  \n" +
      "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
      "          END IF;  \n" +
      "        END IF;  \n" +
      "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
      "	  IF(psearchextPricetype='C')THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(prushJob = 1) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pworkorders IS NOT NULL)THEN  \n" +
      "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
      "	END IF;  \n" +
      "	IF(ppartIds IS NOT NULL)THEN  \n" +
      "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
      "	END IF;  \n" +
      "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	-- from date to date filter  \n" +
      "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
      "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
      "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
      "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
      "    END IF;  \n" +
      "  \n" +
      "  	IF(pIsKitList = 1) THEN  \n" +
      "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
      "  	ELSE  \n" +
      "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
      "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
      "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
      "		END IF;  \n" +
      "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pSalesOrderDetailId != 0) THEN  \n" +
      "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "  \n" +
      "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "	ELSE  \n" +
      "		SET rowNumWhere = '';  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	/* to get total count of rows */  \n" +
      "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
      "    PREPARE query1 FROM @SQLStatement1;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
      "    PREPARE query2 FROM @SQLStatement2;  \n" +
      "	EXECUTE query2;  \n" +
      "	DEALLOCATE PREPARE query2;  \n" +
      "  \n" +
      "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query3 FROM @SQLStatement3;  \n" +
      "	EXECUTE query3;  \n" +
      "	DEALLOCATE PREPARE query3;  \n" +
      "  \n" +
      "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query4 FROM @SQLStatement4;  \n" +
      "	EXECUTE query4;  \n" +
      "	DEALLOCATE PREPARE query4;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 02-09-2021 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5190,'2.00','V1',' Alter Procedure Sproc_GetSalesorderList-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
        case 5190:
        allDbChangesArray.push(
        /* **************************** New Script -> 02-09-2021 *********************************** */
        "INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`,  \n" +
            "`displayName`,`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)  \n" +
            "VALUES ('AuthenticateCheckNumberDuplication', 1 ,1, 1,  \n" +
            "'Authenticate Check Number Duplication',1,  \n" +
            "'Authentication for check number duplication allowed under same bank account number. 1 - Authentication Required , 0 - Authentication not required ',1,1) ;  \n" +
        /* **************************** Add Script Version -> 02-09-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5191,'2.00','V1',' AuthenticateCheckNumberDuplication global key entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5191:
        allDbChangesArray.push(
        /* **************************** New Script -> 02-09-2021 *********************************** */
        "DROP PROCEDURE IF EXISTS `Sproc_GetCustSuppRefundListByPaymentNum` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustSuppRefundListByPaymentNum`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPaymentNumber VARCHAR(100),  \n" +
            "	IN pBankAccountNo VARCHAR(50),  \n" +
            "	IN pCustRefundMstID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_refundMstIDWhrClause VARCHAR(50);  \n" +
            "  \n" +
            "	SET v_refundMstIDWhrClause = '';  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "  \n" +
            "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pCustRefundMstID IS NULL AND pCustRefundMstID != '') THEN  \n" +
            "  		SET v_refundMstIDWhrClause = CONCAT(\" AND psip.id = \", pRefundMstID );  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	SET @Sproc_GetCustSuppRefundListByPaymentNum = CONCAT(\"  \n" +
            "		SELECT  psip.id,  \n" +
            "			psip.mfgcodeID ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS customerCodeName,  \n" +
            "			psip.bankName,  \n" +
            "			psip.bankAccountNo,  \n" +
            "			psip.paymentType,  \n" +
            "			psip.bankAccountMasID,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate AS refundDate,  \n" +
            "			psip.paymentAmount,  \n" +
            "			psip.accountReference,  \n" +
            "			psip.remark,  \n" +
            "			psip.paymentNumber,  \n" +
            "			gc.gencCategoryName AS paymentMethod,  \n" +
            "			gc.systemGenerated AS systemGeneratedPaymentMethod,  \n" +
            "			psip.refGencTransModeID , gtmm.modeName,  \n" +
            "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
            "			psip.refPaymentMode ,  \n" +
            "			(CASE WHEN psip.refPaymentMode = 'CR' THEN 'Customer Refund'  \n" +
            "				WHEN psip.refPaymentMode = 'P' THEN 'Supplier Payment' ELSE ''  \n" +
            "				END) AS entityNameInApplied,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
            "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		     LEFT JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
            "		WHERE psip.paymentNumber = '\", pPaymentNumber ,\"'  \n" +
            "		AND psip.bankAccountNo = '\", pBankAccountNo ,\"'  \n" +
            "		\",v_refundMstIDWhrClause,\"  \n" +
            "		AND psip.refPaymentMode IN ('CR','P')  \n" +
            "		AND psip.isPaymentVoided = 0  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "  \n" +
            "            \");  \n" +
            "  \n" +
            "      --  select @Sproc_GetCustSuppRefundListByPaymentNum;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	 -- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
        /* **************************** New Script -> 02-09-2021 *********************************** */
        "DROP PROCEDURE IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(  \n" +
            "IN pCustomerID INT,  \n" +
            "IN pCustRefundMstID INT,  \n" +
            "IN pRefPaymentMode VARCHAR(10)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
            "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
            "	SELECT *  \n" +
            "	FROM (  \n" +
            "		SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
            "                psip.paymentNumber,  \n" +
            "                psip.systemId ,  \n" +
            "		psip.paymentDate,  \n" +
            "                psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0  \n" +
            "                    )  AS totalRefundIssuedAmount ,  \n" +
            "				psip.paymentAmount AS totalPaymentAmount,  \n" +
            "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
            "                    (SELECT `comment`  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0  \n" +
            "                    ) `comment`,  \n" +
            "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0  \n" +
            "                    ) paymentAmountForSelectedPayment  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		LEFT JOIN (SELECT psipd.refPayementid,  \n" +
            "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
            "				    FROM packingslip_invoice_payment_det psipd  \n" +
            "				     WHERE psipd.isDeleted = 0  \n" +
            "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
            "                     ON psip.id = payDetTemp.refPayementid  \n" +
            "             WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
            "             AND psip.refPaymentMode = pRefPaymentMode  \n" +
            "             )  tempPay  \n" +
            "		WHERE  \n" +
            "			(  \n" +
            "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
            "						 /* get all peding to refund */  \n" +
            "			)  \n" +
            "		;  \n" +
            "ELSE  \n" +
            "  \n" +
            "	/* update customer payment case */  \n" +
            "  \n" +
            "	SELECT isPaymentVoided INTO v_isRefundPaymentVoided  \n" +
            "	FROM packingslip_invoice_payment  \n" +
            "	WHERE id = pCustRefundMstID  \n" +
            "	AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "	IF(v_isRefundPaymentVoided = 0) THEN  \n" +
            "  \n" +
            "		SELECT *  \n" +
            "		FROM (  \n" +
            "			SELECT psip.id AS paymentMstID,  \n" +
            "						(SELECT id  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) AS paymentDetMstID ,  \n" +
            "			psip.paymentNumber,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate,  \n" +
            "		       psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID = psip.id  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) AS totalRefundIssuedAmount ,  \n" +
            "					psip.paymentAmount AS totalPaymentAmount,  \n" +
            "					IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
            "			(SELECT `comment`  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) `comment`,  \n" +
            "			    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) paymentAmountForSelectedPayment  \n" +
            "			FROM packingslip_invoice_payment psip  \n" +
            "			LEFT JOIN (SELECT psipd.refPayementid,  \n" +
            "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
            "					    FROM packingslip_invoice_payment_det psipd  \n" +
            "					     WHERE psipd.isDeleted = 0  \n" +
            "						 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
            "						ON psip.id = payDetTemp.refPayementid  \n" +
            "			WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
            "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
            "			)  tempPay  \n" +
            "			WHERE  \n" +
            "				(  \n" +
            "					(tempPay.paymentAmountForSelectedPayment > 0)  \n" +
            "									 /* get all paid */  \n" +
            "				)  \n" +
            "  \n" +
            "			UNION  \n" +
            "  \n" +
            "			SELECT *  \n" +
            "			FROM (  \n" +
            "				SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
            "				psip.paymentNumber,  \n" +
            "				psip.systemId ,  \n" +
            "				psip.paymentDate,  \n" +
            "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "						(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "							FROM packingslip_invoice_payment_det  \n" +
            "							WHERE refRefundPaymentID = psip.id  \n" +
            "							AND isPaymentVoided = 0  \n" +
            "							AND isDeleted = 0  \n" +
            "				    )  AS totalRefundIssuedAmount ,  \n" +
            "						psip.paymentAmount AS totalPaymentAmount,  \n" +
            "						IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
            "				(SELECT `comment`  \n" +
            "							FROM packingslip_invoice_payment_det  \n" +
            "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "							AND isPaymentVoided = 0  \n" +
            "							AND isDeleted = 0  \n" +
            "				    ) `comment`,  \n" +
            "				    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "							FROM packingslip_invoice_payment_det  \n" +
            "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
            "							AND isPaymentVoided = 0  \n" +
            "							AND isDeleted = 0  \n" +
            "				    ) paymentAmountForSelectedPayment  \n" +
            "				FROM packingslip_invoice_payment psip  \n" +
            "				LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,  \n" +
            "							IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
            "						    FROM packingslip_invoice_payment_det psipd  \n" +
            "						     WHERE psipd.isDeleted = 0  \n" +
            "							 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
            "				     ON psip.id = payDetTemp.refPayementid  \n" +
            "			     WHERE psip.isMarkForRefund = 1  \n" +
            "			     AND psip.mfgcodeID = pCustomerID  \n" +
            "			     AND psip.isDeleted = 0  \n" +
            "			     AND psip.isPaymentVoided = 0  \n" +
            "			     AND psip.refPaymentMode = pRefPaymentMode  \n" +
            "			     AND psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det  \n" +
            "										WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0  \n" +
            "										AND isDeleted = 0 GROUP BY refPayementid)  \n" +
            "			) tempPay  \n" +
            "  \n" +
            "			WHERE  \n" +
            "			(  \n" +
            "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
            "						 /* get all peding to refund  */  \n" +
            "			)  \n" +
            "			;  \n" +
            "  \n" +
            "	ELSEIF(v_isRefundPaymentVoided = 1) THEN  \n" +
            "  \n" +
            "  \n" +
            "			SELECT psipt.id AS paymentMstID,  \n" +
            "				psipd.id AS paymentDetMstID,  \n" +
            "				psipt.paymentNumber,  \n" +
            "				psipt.systemId ,  \n" +
            "				psipt.paymentDate,  \n" +
            "				psipt.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				(SELECT IFNULL(SUM(paymentAmount),0) FROM packingslip_invoice_payment_det  \n" +
            "				WHERE refRefundPaymentID = psipt.id AND isPaymentVoided = 0 AND isDeleted = 0) AS totalRefundIssuedAmount ,  \n" +
            "				psipt.paymentAmount AS totalPaymentAmount,  \n" +
            "				(SELECT IFNULL(SUM(paymentAmount),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refPayementid = psipt.id AND isPaymentVoided = 0 AND isDeleted = 0) AS paidPaymentAmount ,  \n" +
            "				psipd.`comment` AS `comment` ,  \n" +
            "				IFNULL(SUM(psipd.paymentAmount),0)  AS paymentAmountForSelectedPayment  \n" +
            "			FROM packingslip_invoice_payment_det psipd  \n" +
            "					JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
            "			WHERE psipd.refPayementid = pCustRefundMstID  \n" +
            "			AND psipd.refRefundPaymentID IS NOT NULL  \n" +
            "			AND psipd.isDeleted = 0  ;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "   END IF;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 02-09-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5192,'2.00','V1',' customer refund sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5192:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetComponentMFGPIDPRODPNAliasSearch`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentMFGPIDPRODPNAliasSearch`(  \n" +
            "IN pSearch VARCHAR(500),  \n" +
            "IN pMfgType VARCHAR(50),  \n" +
            "IN pIsAssy TINYINT,  \n" +
            "IN pId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  /* this logic used in purchase order  \n" +
            "  packing slip  \n" +
            "  UMID management  \n" +
            "  Component Master  \n" +
            "  Reserve Stock  \n" +
            "  Component Assy DFM  \n" +
            "  Reports  \n" +
            "  Price Break Update  \n" +
            "  Customer Part  \n" +
            "  Good-Bad Mapping Part  \n" +
            "  Supplier Quote  \n" +
            "  Supplier RMA  \n" +
            "   */  \n" +
            "   SELECT * FROM  \n" +
            " (  \n" +
            "	 SELECT `com`.`id`,  \n" +
            "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
            "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`, ' | ', `com`.`PIDCode`,  \n" +
            "         (CASE WHEN `com`.`productionPN` is null THEN '' else CONCAT(' | ',`com`.`productionPN`) END)) mfgPN,  \n" +
            "		`com`.`mfgPN` orgMfgPN,  \n" +
            "		`com`.`mfgPNDescription`,  \n" +
            "        `com`.`mfgType`,  \n" +
            "        `com`.`PIDCode`  \n" +
            "	FROM `component` AS `com`  \n" +
            "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND  \n" +
            "    (`mfgCodemst`.`isdeleted` =0)  \n" +
            "        WHERE `com`.`id` = IFNULL(pId, com.id)  and  `com`.`isdeleted` =0 and `com`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)  \n" +
            "        AND `com`.`category` = (CASE WHEN pIsAssy = 1 THEN 3 ELSE `com`.`category`END)  \n" +
            "    ) AS a  \n" +
            "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
            "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
            "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
            ")  \n" +
            "ORDER BY mfgPN;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5193,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        break;
        case 5193:
            allDbChangesArray.push(
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
            "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE pIsUpdateRequired BOOL;  \n" +
            "	DECLARE pLiveInternalVersion INT;  \n" +
            "	DECLARE newPartTypeName VARCHAR(50);  \n" +
            "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
            "	DECLARE newUOM VARCHAR(50);  \n" +
            "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
            "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
            "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
            "	DECLARE pCompanyName VARCHAR(100);  \n" +
            "	DECLARE pErrorNarrative TEXT;  \n" +
            "	DECLARE pErrorDisplayName TEXT;  \n" +
            "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
            "	DECLARE pErrorCode VARCHAR(100);  \n" +
            "	SET pIsUpdateRequired = FALSE;  \n" +
            "  \n" +
            "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
            "  \n" +
            "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
            "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
            "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
            "	ELSE  \n" +
            "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
            "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
            "		ELSE  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
            "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
            "	IF pLiveInternalVersion > 0 THEN  \n" +
            "  \n" +
            "		IF NEW.lineID IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item\",  \n" +
            "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer BOM Line Number\",  \n" +
            "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.qpa IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
            "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.refDesig IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
            "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.custPN IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
            "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		IF NEW.isInstall IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
            "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
            "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Kit Allocation not Required\",  \n" +
            "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
            "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerRev IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Rev\",  \n" +
            "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
            "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Lead\",  \n" +
            "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN QTY\",  \n" +
            "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN DES\",  \n" +
            "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF  NEW.uomID IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			IF NEW.uomID IS NOT NULL  \n" +
            "				THEN  \n" +
            "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
            "				ELSE  \n" +
            "					SET newUOM = '';  \n" +
            "			END IF;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
            "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
            "			IF NEW.substitutesAllow = 3 THEN  \n" +
            "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
            "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
            "				SET newSubstitutesAllow = 'No';  \n" +
            "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
            "				SET newSubstitutesAllow = '';  \n" +
            "			END IF;  \n" +
            "			IF newSubstitutesAllow != '' THEN  \n" +
            "				SET pIsUpdateRequired = TRUE;  \n" +
            "				INSERT INTO rfq_assembly_history  \n" +
            "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "					oldValue,newValue,changeVersion,  \n" +
            "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
            "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			IF NEW.programingStatus = 1 THEN  \n" +
            "				SET newProgramingStatus = 'Pre-Assy';  \n" +
            "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
            "				SET newProgramingStatus = 'Post-Assy';  \n" +
            "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
            "				SET newProgramingStatus = 'Cust Will Program';  \n" +
            "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
            "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
            "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
            "				SET newProgramingStatus = 'Who Will Program';  \n" +
            "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
            "				SET newProgramingStatus = 'N/A';  \n" +
            "			END IF;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
            "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
            "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
            "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
            "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
            "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
            "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF pIsUpdateRequired = TRUE THEN  \n" +
            "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
            "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE pIsUpdateRequired BOOL;  \n" +
            "	DECLARE pLiveInternalVersion INT;  \n" +
            "	DECLARE pPartID INT;  \n" +
            "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
            "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
            "	DECLARE pCompanyName VARCHAR(100);  \n" +
            "	DECLARE pErrorNarrative TEXT;  \n" +
            "	DECLARE pErrorDisplayName TEXT;  \n" +
            "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
            "	DECLARE pErrorCode VARCHAR(100);  \n" +
            "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
            "  \n" +
            "	SET pIsUpdateRequired = FALSE;  \n" +
            "  \n" +
            "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
            "  \n" +
            "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
            "  \n" +
            "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
            "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
            "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
            "	ELSE  \n" +
            "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
            "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
            "		ELSE  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
            "  \n" +
            "  \n" +
            "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
            "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
            "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
            "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
            "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
            "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
            "			SET pDeleteMessage =\"MFR PN \";  \n" +
            "		ELSE  \n" +
            "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
            "		END IF;  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
            "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
            "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.badMfgPN, '') != IFNULL(NEW.badMfgPN, '') THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
            "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
            "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
            "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
            "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
            "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
            "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
            "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
            "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
            "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
            "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
            "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
            "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
            "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
            "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
            "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
            "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
            "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
            "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
            "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
            "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
            "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
            "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
            "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
            "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
            "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
            "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, 0) != IFNULL(NEW.uomMismatchedStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
            "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
            "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, 0) != IFNULL(NEW.restrictUseInBOMStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
            "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
            "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
            "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
            "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
            "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, 0) != IFNULL(NEW.mismatchNumberOfRowsStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
            "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
            "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
            "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
            "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
            "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
            "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, 0) != IFNULL(NEW.isUnlockApprovedPart, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
            "			SET pDeleteMessage =\"MFR PN \";  \n" +
            "		ELSE  \n" +
            "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
            "		END IF;  \n" +
            "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "	 		INSERT INTO rfq_assembly_history  \n" +
            "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "	 			oldValue,newValue,changeVersion,  \n" +
            "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
            "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
            "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
            "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
            "	 		INSERT INTO rfq_assembly_history  \n" +
            "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "	 			oldValue,newValue,changeVersion,  \n" +
            "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
            "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
            "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
            "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSE  \n" +
            "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
            "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
            "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  # Mismatch Programming required step  \n" +
            "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
            "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "      # Part and Program ref des mapping required step  \n" +
            "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
            "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "    # Mismatch Programming status Step  \n" +
            "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
            "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
            "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
            "		ELSE  \n" +
            "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
            "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    # Mismatch Programming status Step  \n" +
            "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
            "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pIsUpdateRequired = TRUE THEN  \n" +
            "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
            "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE pIsUpdateRequired BOOL;  \n" +
            "	DECLARE pLiveInternalVersion INT;  \n" +
            "	DECLARE pPartID INT;  \n" +
            "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
            "	DECLARE pCompanyName VARCHAR(100);  \n" +
            "	DECLARE pErrorNarrative TEXT;  \n" +
            "	DECLARE pErrorDisplayName TEXT;  \n" +
            "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
            "	DECLARE pErrorCode VARCHAR(100);  \n" +
            "	SET pIsUpdateRequired = FALSE;  \n" +
            "  \n" +
            "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
            "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
            "  \n" +
            "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
            "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
            "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
            "	ELSE  \n" +
            "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
            "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
            "		ELSE  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
            "  \n" +
            "  \n" +
            "	IF pLiveInternalVersion > 0 THEN  \n" +
            "  \n" +
            "		IF NEW.distributor IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
            "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.distPN IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
            "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
            "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "			-- if New.org_mfgCode is null then  \n" +
            "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
            "			-- end if;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
            "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
            "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "			-- IF New.org_mfgPN IS NULL THEN  \n" +
            "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
            "			-- END IF;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
            "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
            "		END IF;  \n" +
            "        # mismatch programming require step  \n" +
            "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "        # part program ref des mapping require step  \n" +
            "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "        # Mismatch Programming Statue step  \n" +
            "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	 # MPN Mapping Pengin in CPN  \n" +
            "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
            "			SET pIsUpdateRequired = TRUE;  \n" +
            "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
            "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
            "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		ELSE  \n" +
            "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
            "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "		IF pIsUpdateRequired = TRUE THEN  \n" +
            "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "DROP TRIGGER IF EXISTS  `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
            "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE pIsUpdateRequired BOOL;  \n" +
            "	DECLARE pLiveInternalVersion INT;  \n" +
            "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
            "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
            "	DECLARE newPartTypeName VARCHAR(50);  \n" +
            "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
            "	DECLARE oldUOM VARCHAR(50);  \n" +
            "	DECLARE newUOM VARCHAR(50);  \n" +
            "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
            "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
            "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
            "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
            "	DECLARE pCompanyName VARCHAR(100);  \n" +
            "	DECLARE pErrorNarrative TEXT;  \n" +
            "	DECLARE pErrorDisplayName TEXT;  \n" +
            "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
            "	DECLARE pErrorCode VARCHAR(100);  \n" +
            "  \n" +
            "	SET pIsUpdateRequired = FALSE;  \n" +
            "  \n" +
            "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
            "  \n" +
            "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
            "  \n" +
            "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
            "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
            "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
            "	ELSE  \n" +
            "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
            "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
            "		ELSE  \n" +
            "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
            "  \n" +
            "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item\",  \n" +
            "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer BOM Line Number\",  \n" +
            "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
            "  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
            "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
            "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
            "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
            "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
            "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Kit Allocation not Required\",  \n" +
            "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
            "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Rev\",  \n" +
            "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
            "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
            "			CAST(trim(OLD.numOfPosition)+0 AS CHAR), CAST(trim(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DPN QTY\",  \n" +
            "			CAST(trim(OLD.dnpQty)+0 AS CHAR), CAST(trim(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DPN DES\",  \n" +
            "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
            "		IF OLD.uomID IS NOT NULL  \n" +
            "			THEN  \n" +
            "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
            "			ELSE  \n" +
            "				SET oldUOM = '';  \n" +
            "		END IF;  \n" +
            "		IF NEW.uomID IS NOT NULL  \n" +
            "			THEN  \n" +
            "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
            "			ELSE  \n" +
            "				SET newUOM = '';  \n" +
            "		END IF;  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
            "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
            "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
            "			IF OLD.substitutesAllow = 3 THEN  \n" +
            "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
            "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
            "				SET oldSubstitutesAllow = 'No';  \n" +
            "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
            "				SET oldSubstitutesAllow = '';  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
            "			IF NEW.substitutesAllow = 3 THEN  \n" +
            "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
            "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
            "				SET newSubstitutesAllow = 'No';  \n" +
            "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
            "				SET newSubstitutesAllow = '';  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
            "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
            "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
            "			IF OLD.programingStatus = 1 THEN  \n" +
            "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
            "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
            "				SET oldProgramingStatus = 'Post-Assy';  \n" +
            "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
            "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
            "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
            "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
            "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
            "				SET oldProgramingStatus = 'Who Will Program';  \n" +
            "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
            "				SET oldProgramingStatus = 'N/A';  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
            "			IF NEW.programingStatus = 1 THEN  \n" +
            "				SET newProgramingStatus = 'Pre-Assy';  \n" +
            "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
            "				SET newProgramingStatus = 'Post-Assy';  \n" +
            "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
            "				SET newProgramingStatus = 'Cust Will Program';  \n" +
            "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
            "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
            "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
            "				SET newProgramingStatus = 'Who Will Program';  \n" +
            "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
            "				SET newProgramingStatus = 'N/A';  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
            "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
            "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		INSERT INTO rfq_assembly_history  \n" +
            "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "			oldValue,newValue,changeVersion,  \n" +
            "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
            "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
            "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
            "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
            "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
            "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
            "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
            "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
            "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
            "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode  \n" +
            "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
            "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
            "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
            "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
            "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
            "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
            "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
            "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
            " 			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
            "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
            "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
            "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
            "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
            "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
            "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Approved comments of QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
            "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
            "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
            "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Approved comments of Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
            "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
            "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
            "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Approved comments of Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
            "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
            "        FROM rfq_lineitems_errorcode  \n" +
            "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
            "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
            "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
            "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
            "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
            "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
            "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
            "		SET pIsUpdateRequired = TRUE;  \n" +
            "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
            "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
            "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
            "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
            "			INSERT INTO rfq_assembly_history  \n" +
            "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
            "				oldValue,newValue,changeVersion,  \n" +
            "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
            "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
            "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
            "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pIsUpdateRequired = TRUE THEN  \n" +
            "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5194,'2.00','V1','Bug 36373: BOM : Internal version History is showing wrong in BOM while adding new line in BOM  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;        
        case 5194:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2021 *********************************** */
            "update page_detail set pageName='MRP List',menuName='MRP List', displayMenuName='MRP List', iconClass='t-icons-mrp-list' where pageName='Purchase List';  \n" +
            "update page_detail set pageName='Purchase List',menuName='Purchase List', displayMenuName='Purchase List', iconClass='t-icons-purchase-list' where pageName='Purchase';  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5195,'2.00','V1',' User Story 36364: Menu Name Changes: Purchase Management - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5195:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_BI_packingslip_invoice_payment_det`;  \n" +
            "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN  \n" +
            "	DECLARE v_receiptType VARCHAR(1);  \n" +
            "    DECLARE v_creditMemoType VARCHAR(2);  \n" +
            "	DECLARE v_invoiceTotal DECIMAL(18,8);  \n" +
            "	DECLARE v_totalPayment DECIMAL(18,8);  \n" +
            "    DECLARE v_newPaymentAmount DECIMAL(18,8);  \n" +
            "	DECLARE v_isTariffInvoice TINYINT;  \n" +
            "	DECLARE v_refPaymentMode VARCHAR(5);  \n" +
            "	DECLARE vMessage VARCHAR(500);  \n" +
            "  \n" +
            "	SELECT 	a.refPaymentMode  \n" +
            "	INTO 	v_refPaymentMode  \n" +
            "	FROM 	packingslip_invoice_payment a  \n" +
            "	WHERE 	a.isDeleted = 0  \n" +
            "		   AND a.isPaymentVoided = 0  \n" +
            "		   AND a.id = NEW.refPayementid LIMIT 1;  \n" +
            "  \n" +
            "	IF v_refPaymentMode = 'P' THEN  \n" +
            "		/*getting invoice amount and type*/  \n" +
            "		SELECT 	a.receiptType,  \n" +
            "				(IFNULL(SUM(b.extendedPrice),0)/*+IFNULL(sum(a.markedForRefundAmt),0)*/),  \n" +
            "				a.isTariffInvoice  \n" +
            "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice  \n" +
            "		FROM 	packing_slip_material_receive a  \n" +
            "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
            "		WHERE 	a.id = NEW.refPackingslipInvoiceID  \n" +
            "				AND a.isDeleted = 0  \n" +
            "				AND b.isDeleted = 0  \n" +
            "		GROUP BY a.receiptType, a.isTariffInvoice;  \n" +
            "  \n" +
            "		/*getting total payment amount including new added payment */  \n" +
            "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))  \n" +
            "			INTO 	v_totalPayment  \n" +
            "			FROM 	packingslip_invoice_payment_det b  \n" +
            "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
            "				AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'P')  \n" +
            "                AND b.isPaymentVoided = 0  \n" +
            "                AND b.isDeleted = 0  \n" +
            "                AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
            "  \n" +
            "		IF v_receiptType IN ('D', 'C') THEN  \n" +
            "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN  \n" +
            "			/*in case of debit/credit memo payment amount must be less then zero*/  \n" +
            "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));  \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN  \n" +
            "			/*in case of debit/credit memo outstanding amount must be less or equal to zero*/  \n" +
            "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));  \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;  \n" +
            "			/*ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  */  \n" +
            "			/*in case of debit/credit memo now if outstanding amount is zero then update debit/credit memo status to paid*/  \n" +
            "				/*UPDATE 	packing_slip_material_receive  \n" +
            "				SET 	`status` = 'P',  \n" +
            "					updatedBy = NEW.updatedBy,  \n" +
            "					updatedAt = NEW.updatedAt,  \n" +
            "					updateByRoleId = NEW.updateByRoleId  \n" +
            "				WHERE 	id = NEW.refPackingslipInvoiceID;  */  \n" +
            "			END IF;  \n" +
            "		ELSEIF v_receiptType = 'I' THEN  \n" +
            "			IF IFNULL(NEW.paymentAmount,0) <= 0 AND IFNULL(v_invoiceTotal,0) != 0 THEN  \n" +
            "			/*invoice payment amount must not negetive, if invoice amount is not zero*/  \n" +
            "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));  \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN  \n" +
            "			/*invoice outstanding amount must not negetive*/  \n" +
            "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));  \n" +
            "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;  \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
            "            /*if invoice outstanding amount zero then update invoice status to paid*/  \n" +
            "				UPDATE packing_slip_material_receive  \n" +
            "				   SET `status` = 'P',  \n" +
            "						updatedBy = NEW.updatedBy,  \n" +
            "						updatedAt = NEW.updatedAt,  \n" +
            "						updateByRoleId = NEW.updateByRoleId  \n" +
            "				  WHERE id = NEW.refPackingslipInvoiceID;  \n" +
            "  \n" +
            "				 IF v_isTariffInvoice = FALSE THEN  \n" +
            "					/*in case of non tariff invoice update packing slip status to paid*/  \n" +
            "					UPDATE packing_slip_material_receive  \n" +
            "					   SET `status` = 'P',  \n" +
            "							updatedBy = NEW.updatedBy,  \n" +
            "							updatedAt = NEW.updatedAt,  \n" +
            "							updateByRoleId = NEW.updateByRoleId  \n" +
            "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
            "				 END IF;  \n" +
            "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) <> 0 and v_totalPayment <> 0 THEN  \n" +
            "				/*if payment done but not fully paid then set invoice status PP Partially paid*/  \n" +
            "				UPDATE packing_slip_material_receive  \n" +
            "				   SET `status` = 'PP',  \n" +
            "						updatedBy = NEW.updatedBy,  \n" +
            "						updatedAt = NEW.updatedAt,  \n" +
            "						updateByRoleId = NEW.updateByRoleId  \n" +
            "				  WHERE id = NEW.refPackingslipInvoiceID;  \n" +
            "  \n" +
            "				 IF v_isTariffInvoice = FALSE THEN  \n" +
            "					/*in case of non tariff invoice update packing slip status to Partially Paid*/  \n" +
            "					UPDATE packing_slip_material_receive  \n" +
            "					   SET `status` = 'PP',  \n" +
            "							updatedBy = NEW.updatedBy,  \n" +
            "							updatedAt = NEW.updatedAt,  \n" +
            "							updateByRoleId = NEW.updateByRoleId  \n" +
            "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
            "				 END IF;  \n" +
            "            END IF;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "    ELSEIF v_refPaymentMode = 'RR' THEN  \n" +
            "		/*getting invoice amount and type*/  \n" +
            "		 SELECT a.receiptType,  \n" +
            "				IFNULL(sum(a.markedForRefundAmt),0),  \n" +
            "				a.isTariffInvoice  \n" +
            "		   INTO v_receiptType, v_invoiceTotal, v_isTariffInvoice  \n" +
            "		   FROM packing_slip_material_receive a  \n" +
            "		   JOIN packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
            "		  WHERE a.id = NEW.refPackingslipInvoiceID  \n" +
            "			AND a.isDeleted = 0  \n" +
            "			AND b.isDeleted = 0  \n" +
            "		  GROUP BY a.receiptType, a.isTariffInvoice;  \n" +
            "  \n" +
            "        /*getting total payment amount including new added payment */  \n" +
            "			SELECT (IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))  \n" +
            "			  INTO v_totalPayment  \n" +
            "			  FROM packingslip_invoice_payment_det b  \n" +
            "			 WHERE b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
            "			   AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode = 'RR')  \n" +
            "               AND b.isPaymentVoided = 0  \n" +
            "               AND b.isDeleted = 0  \n" +
            "               AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
            "  \n" +
            "		IF v_totalPayment > v_invoiceTotal THEN  \n" +
            "			/*in case of debit/credit memo payment amount must be less then zero*/  \n" +
            "			SET vMessage = CONCAT('CM DM Refund must be less or equal to Marked for Refund Amount. actual amt is: ', ROUND((v_invoiceTotal - v_totalPayment),2),', Marked for Refund amt is: ',ROUND(IFNULL(v_invoiceTotal,0),2));  \n" +
            "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
            "        END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	/*CM and DM has Refund transaction also. so updateed at last to manage single code for both transactions*/  \n" +
            "    if v_refPaymentMode in ('P','RR') then /*update status to paid*/  \n" +
            "		/*getting invoice amount and type*/  \n" +
            "		SELECT 	a.receiptType,  \n" +
            "				IFNULL(SUM(b.extendedPrice),0),  \n" +
            "                a.creditMemoType  \n" +
            "		INTO 	v_receiptType, v_invoiceTotal, v_creditMemoType  \n" +
            "		FROM 	packing_slip_material_receive a  \n" +
            "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
            "		WHERE 	a.id = NEW.refPackingslipInvoiceID  \n" +
            "				AND a.isDeleted = 0  \n" +
            "				AND b.isDeleted = 0  \n" +
            "		GROUP BY a.receiptType, a.creditMemoType;  \n" +
            "  \n" +
            "		/*getting total payment amount including new added payment */  \n" +
            "		SELECT 	(ifnull(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0) +  \n" +
            "				 IFNULL(case when NEW.paymentAmount > 0 then (NEW.paymentAmount *-1) else NEW.paymentAmount end,0))  \n" +
            "			INTO 	v_totalPayment  \n" +
            "			FROM 	packingslip_invoice_payment_det b  \n" +
            "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
            "                AND b.isPaymentVoided = 0  \n" +
            "                AND b.isDeleted = 0  \n" +
            "                AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
            "		IF v_receiptType IN ('D', 'C') THEN  \n" +
            "			/*Payment and Memo Amount is same then set memo status to paid*/  \n" +
            "			IF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
            "				UPDATE 	packing_slip_material_receive  \n" +
            "				SET `status` = 'P',  \n" +
            "					updatedBy = NEW.updatedBy,  \n" +
            "					updatedAt = NEW.updatedAt,  \n" +
            "					updateByRoleId = NEW.updateByRoleId  \n" +
            "				WHERE 	id = NEW.refPackingslipInvoiceID;  \n" +
            "                IF v_receiptType = 'C' and v_creditMemoType = 'RC' THEN  \n" +
            "					/*in case of RMA credit memo set status to paid once CM paid*/  \n" +
            "					UPDATE packing_slip_material_receive  \n" +
            "					   SET `status` = 'P',  \n" +
            "							updatedBy = NEW.updatedBy,  \n" +
            "							updatedAt = NEW.updatedAt,  \n" +
            "							updateByRoleId = NEW.updateByRoleId  \n" +
            "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
            "				 END IF;  \n" +
            "            /*Payment and Memo Amount is not same and payment is not zero then set memo status to Partially Paid*/  \n" +
            "            ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) <> 0 and v_totalPayment <> 0 THEN  \n" +
            "				UPDATE 	packing_slip_material_receive  \n" +
            "				SET `status` = 'PP',  \n" +
            "					updatedBy = NEW.updatedBy,  \n" +
            "					updatedAt = NEW.updatedAt,  \n" +
            "					updateByRoleId = NEW.updateByRoleId  \n" +
            "				WHERE 	id = NEW.refPackingslipInvoiceID;  \n" +
            "                IF v_receiptType = 'C' and v_creditMemoType = 'RC' THEN  \n" +
            "					/*in case of RMA credit memo set status to partially paid once CM partially paid*/  \n" +
            "					UPDATE packing_slip_material_receive  \n" +
            "					   SET `status` = 'PP',  \n" +
            "							updatedBy = NEW.updatedBy,  \n" +
            "							updatedAt = NEW.updatedAt,  \n" +
            "							updateByRoleId = NEW.updateByRoleId  \n" +
            "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
            "				 END IF;  \n" +
            "            END IF;  \n" +
            "        END IF;  \n" +
            "    end if;  \n" +
            "END;  \n" +
            "drop procedure if exists `Sproc_UpdateSupplierPackingSlipStatusAfterVoidPayment`;  \n" +
            "CREATE PROCEDURE `Sproc_UpdateSupplierPackingSlipStatusAfterVoidPayment`(  \n" +
            "	IN pVoidPaymentId int,  \n" +
            "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
            "	IN pUserID VARCHAR(50),  \n" +
            "	IN pUserRoleID VARCHAR(50)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	drop temporary table if exists temp_paymentIds;  \n" +
            "	create temporary table temp_paymentIds(  \n" +
            "    id int not null,  \n" +
            "    refPackingslipInvoiceID int not null,  \n" +
            "    paymentAmount decimal(18,8),  \n" +
            "    extendedPrice decimal(18,8)  \n" +
            "    );  \n" +
            "  \n" +
            "    /*getting invoice CM DM ids based on payment id*/  \n" +
            "    insert into temp_paymentIds(id, refPackingslipInvoiceID)  \n" +
            "	select a.id, a.refPackingslipInvoiceID  \n" +
            "	  from packingslip_invoice_payment_det a  \n" +
            "	 where refPayementid = pVoidPaymentId;  \n" +
            "  \n" +
            "     /*updating invoice extended and payment amount in temp table*/  \n" +
            "     update temp_paymentIds tp  \n" +
            "        set extendedPrice = (SELECT IFNULL(SUM(b.extendedPrice),0)  \n" +
            "							   FROM packing_slip_material_receive a  \n" +
            "							   JOIN packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
            "							  WHERE a.id = tp.refPackingslipInvoiceID  \n" +
            "								AND a.isDeleted = 0  \n" +
            "								AND b.isDeleted = 0),  \n" +
            "			paymentAmount = (SELECT ifnull(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0)  \n" +
            "							   FROM packingslip_invoice_payment_det b  \n" +
            "							  WHERE b.refPackingslipInvoiceID = tp.refPackingslipInvoiceID  \n" +
            "								AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode in ('P','RR'))  \n" +
            "								AND b.isPaymentVoided = 0  \n" +
            "								AND b.isDeleted = 0  \n" +
            "								AND b.refCustPackingslipInvoiceID IS NULL);  \n" +
            "	/*update invoice CM DM status based on payment amount*/  \n" +
            "	update packing_slip_material_receive i  \n" +
            "      join temp_paymentIds tp ON tp.refPackingslipInvoiceID = i.id  \n" +
            "	   set i.status = (case when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) = 0 then 'P'  \n" +
            "							when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) <> 0 then 'PP'  \n" +
            "                            else 'A' end)  \n" +
            "     where i.isDeleted = 0;  \n" +
            "  \n" +
            "     /*update packing slip status based on invoice payment amount*/  \n" +
            "     update packing_slip_material_receive i  \n" +
            "      join temp_paymentIds tp ON tp.refPackingslipInvoiceID = i.refPackingSlipNumberForInvoice  \n" +
            "	   set i.status = (case when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) = 0 then 'P'  \n" +
            "							when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) <> 0 then 'PP'  \n" +
            "                            else 'A' end)  \n" +
            "     where i.isDeleted = 0;  \n" +
            "	drop temporary table if exists temp_paymentIds;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5196,'2.00','V1','User Story 36282: Supplier Invoice: Add Paid Date column on list page and Change Invoice Payment Status - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5196:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2021 *********************************** */
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(30),  \n" +
            "	IN pMfgCodeIds LONGTEXT,  \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearch TINYINT,  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pInvoiceIds LONGTEXT,  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE,  \n" +
            "    IN pMarkedForRefundStatus LONGTEXT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "    DECLARE vCurrentDate DATE;  \n" +
            "    DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
            "			SELECT 		p.id,  \n" +
            "					p.systemId,  \n" +
            "					p.poNumber,  \n" +
            "                    p.poDate,  \n" +
            "                    p.refPurchaseOrderID poId,  \n" +
            "					p.mfgCodeID,  \n" +
            "					p.supplierSONumber,  \n" +
            "                    p.soDate,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
            "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
            "					p.packingSlipDate,  \n" +
            "					p.invoiceNumber,  \n" +
            "                    p.lockStatus invoiceLockStatus,  \n" +
            "					p.invoiceDate,  \n" +
            "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,  \n" +
            "                    p.lockStatus creditMemoLockStatus,  \n" +
            "					p.creditMemoDate,  \n" +
            "					p.debitMemoNumber,  \n" +
            "                    p.refSupplierCreditMemoNumber,  \n" +
            "                    p.lockStatus debitMemoLockStatus,  \n" +
            "					p.debitMemoDate,  \n" +
            "					p.receiptDate,  \n" +
            "					p.description,  \n" +
            "					p.billToAddress,  \n" +
            "					p.shipToAddress,  \n" +
            "					p.poVersion,  \n" +
            "					p.isDeleted,  \n" +
            "					p.receiptType,  \n" +
            "					p.`status`,  \n" +
            "					p.applyDate,  \n" +
            "					p.refParentCreditDebitInvoiceno,  \n" +
            "					p.refPackingSlipNumberForInvoice,  \n" +
            "					p.invoiceTotalDue,  \n" +
            "					p.isTariffInvoice,  \n" +
            "					p.creditMemoType,  \n" +
            "                    (  \n" +
            "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
            "								'Invoice Credit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MC' THEN  \n" +
            "								'MISC Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'RC' THEN  \n" +
            "								'RMA Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'ID' THEN  \n" +
            "								'Invoice Debit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MD' THEN  \n" +
            "								'MISC Debit Memo'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
            "								'Invoice'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
            "								'MISC Invoice'  \n" +
            "						END  \n" +
            "					) subTypeValue,  \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                    m.mfgName supplierName,  \n" +
            "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
            "					m.mfgCode supplierCodeName,  \n" +
            "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
            "					pg.packingSlipDocCount,  \n" +
            "					pd.itemReceived,  \n" +
            "					pd.otherChargesItemReceived,  \n" +
            "					pd.itemDisapproved,  \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
            "					ps.status parentInvoiceStatus,  \n" +
            "					ps.invoiceNumber refInvoiceNumber,  \n" +
            "                    ps.lockStatus refInvoiceLockStatus,  \n" +
            "					ps.creditMemoType parentCreditMemoType,  \n" +
            "					pd.totalExtendedAmount,  \n" +
            "                    pd.totalDiscount,  \n" +
            "					pe.totalCreditAmount,  \n" +
            "					pe.totalDebitAmount,  \n" +
            "					(  \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
            "					) amountToPay,  \n" +
            "                    pd.totalExtendedReceivedPrice,  \n" +
            "					pd.packingDetailNote,  \n" +
            "					pd.approveLineCount,  \n" +
            "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
            "											p.debitMemoDate  \n" +
            "										WHEN p.receiptType = 'C' THEN  \n" +
            "											p.creditMemoDate  \n" +
            "										ELSE p.invoiceDate  \n" +
            "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
            "					g.gencCategoryName paymentTermName,  \n" +
            " 					m.paymentTermsID paymentTermsID,  \n" +
            "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
            "                    p.paymentTermsID invPaymentTermsID,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
            "					psm.packingSlipModeStatus,  \n" +
            "                    psPay.paymentDate,  \n" +
            "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
            "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
            "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
            "					p.invoiceRequireManagementApproval,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
            "								'Yes'  \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
            "								'No'  \n" +
            "						END  \n" +
            "					) invoiceRequireManagementApprovalValue,  \n" +
            "					p.invoiceApprovalStatus,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
            "								'Approved'  \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
            "								'Pending'  \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
            "								'N/A'  \n" +
            "						END  \n" +
            "					) invoiceApprovalStatusValue,  \n" +
            "					p.invoiceApprovedBy,  \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
            "					p.invoiceApprovalDate,  \n" +
            "					p.invoiceApprovalComment,  \n" +
            "					p.internalRemark,  \n" +
            "                    p.remark,  \n" +
            "					p.lockStatus,  \n" +
            "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "						when p.lockStatus = 'LC' then 'Locked'  \n" +
            "						else null end  \n" +
            "					) lockStatusValue,  \n" +
            "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
            "                    case when p.receiptType = 'I' then  \n" +
            "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
            "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
            "					h1.refType as haltRefType,  \n" +
            "                    h1.status as haltStatus,  \n" +
            "                    (CASE WHEN h1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltStatusText,  \n" +
            "                    (CASE  \n" +
            "							WHEN h1.status = 'H' THEN  \n" +
            "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReason,  \n" +
            "                    psh1.refType as haltRefTypeRefInv,  \n" +
            "                    psh1.status as haltStatusRefInv,  \n" +
            "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInvText,  \n" +
            "                    (CASE  \n" +
            "							WHEN psh1.status = 'H' THEN  \n" +
            "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInv,  \n" +
            "                    p.markedForRefund,  \n" +
            "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
            "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
            "										'Waiting for Refund'  \n" +
            "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
            "										'Partially Refunded'  \n" +
            "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
            "										'Fully Refunded'  \n" +
            "								else '' end  \n" +
            "						end  \n" +
            "					) markedForRefundValue,  \n" +
            "                    p.markedForRefundAmt  \n" +
            "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
            "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
            "							gFiles.gencFileOwnerType,  \n" +
            "							gFiles.refTransID,  \n" +
            "							gFiles.entityID  \n" +
            "						FROM genericfiles gFiles  \n" +
            "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
            "						and gFiles.entityID in (-13,-15,-16)  \n" +
            "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
            "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
            "																		WHEN p.receiptType = 'D' THEN -16  \n" +
            "																		ELSE -13  \n" +
            "																	END)  \n" +
            "				and psDoc.refTransID = p.id  \n" +
            "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
            "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where h2.refTransId = h1.refTransId  \n" +
            " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
            "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
            "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
            "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where psh1.refTransId = h2.refTransId  \n" +
            " 											  and h2.refType = 'SINV'  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
            "            left join (  \n" +
            "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
            "				FROM 	vu_genericfilescount g  \n" +
            "				WHERE 	g.entityID = -14  \n" +
            "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
            "            ) pg on pg.refTransID = psm.id  \n" +
            "			left join (  \n" +
            "							select 	a.refPackingSlipMaterialRecID,  \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
            "								sum(a.itemReceived) itemReceived,  \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
            "								sum(a.itemDisapproved) itemDisapproved,  \n" +
            "								sum(a.approveLineCount) approveLineCount,  \n" +
            "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
            "                                sum(discount) totalDiscount,  \n" +
            "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
            "							from 	(  \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
            "										psm.packingSlipSerialNumber,  \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
            "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
            "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
            "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
            "										extendedPrice,  \n" +
            "                                        discount,  \n" +
            "										extendedReceivedPrice  \n" +
            "									FROM 	packing_slip_material_receive_det psm  \n" +
            "									WHERE 	psm.isDeleted = 0  \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
            "								) a  \n" +
            "							group by a.refPackingSlipMaterialRecID  \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
            "				left join (select b.refPackingslipInvoiceID,  \n" +
            "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
            "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
            "							  from packingslip_invoice_payment a  \n" +
            "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "							 where a.refPaymentMode IN ('P','RR')  \n" +
            "							   and a.isPaymentVoided = 0  \n" +
            "							   and b.isDeleted = 0  \n" +
            "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
            "				left join (  \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
            "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
            "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
            "							from 		packing_slip_material_receive ps  \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
            "                            left join (select b.refPackingslipInvoiceID,  \n" +
            "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "										 where a.refPaymentMode IN ('P','RR')  \n" +
            "										   and b.isPaymentVoided = 0  \n" +
            "										   and b.isDeleted = 0  \n" +
            "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
            "								  where ps.receiptType in ('C','D')  \n" +
            "									and ps.isDeleted = 0  \n" +
            "									and pd.isDeleted = 0  \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
            "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
            "				and exists (select 1  \n" +
            "							  from packingslip_invoice_payment pm  \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
            "							 where pm.isPaymentVoided = 0  \n" +
            "							   and pm.refPaymentMode = 'P'  \n" +
            "							   and pd.refPackingslipInvoiceID = p.id  \n" +
            "							   and pm.isDeleted = 0  \n" +
            "                               and pd.isDeleted = 0  \n" +
            "							   and pm.paymentNumber \",  \n" +
            "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
            "                               ,\") \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
            "		IF pIsExactSearch = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
            "				SELECT 1  \n" +
            "				  FROM packing_slip_material_receive_det x  \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "    EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "				round(c.paidAmount,2) totalPaidAmount,  \n" +
            "                round(c.refundAmount,2) totalRefundAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
            "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            "drop function if exists `fun_getInvoiceStatusName`;  \n" +
            "CREATE FUNCTION `fun_getInvoiceStatusName`(pStatus varchar(2)) RETURNS varchar(25) CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE vName varchar(25);  \n" +
            "		if pStatus = 'PE' THEN  \n" +
            "			set vName = 'Pending';  \n" +
            "		elseif pStatus = 'I' THEN  \n" +
            "			set vName = 'Investigate';  \n" +
            "		elseif pStatus = 'A' THEN  \n" +
            "			set vName = 'Approved to Pay';  \n" +
            "		elseif pStatus = 'PP' THEN  \n" +
            "			set vName = 'Partially Paid';  \n" +
            "		ELSE  \n" +
            "			set vName = 'Fully Paid';  \n" +
            "		END IF;  \n" +
            "    return vName;  \n" +
            "end;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5197,'2.00','V1','User Story 36282: Supplier Invoice: Add Paid Date column on list page and Change Invoice Payment Status - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5197:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2021 *********************************** */
            "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(10),  \n" +
            "	IN pMfgCodeIds VARCHAR(16383),  \n" +
            "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pPackingslipWithRejectedLines tinyint  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "  \n" +
            "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
            "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
            "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
            "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
            "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
            "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
            "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
            "									  \" )  \n" +
            "					\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
            "				SELECT 	refPackingSlipMaterialRecID  \n" +
            "				FROM 	packing_slip_material_receive_det  \n" +
            "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
            "			SELECT  *  \n" +
            "			FROM	(  \n" +
            "					SELECT 		p.id,  \n" +
            "							p.systemId,  \n" +
            "							p.poNumber,  \n" +
            "                            p.poDate,  \n" +
            "							p.refPurchaseOrderID poId,  \n" +
            "							p.mfgCodeID,  \n" +
            "							p.supplierSONumber,  \n" +
            "                            p.soDate,  \n" +
            "							p.packingSlipNumber,  \n" +
            "							p.packingSlipDate,  \n" +
            "							p.invoiceNumber,  \n" +
            "							p.invoiceDate,  \n" +
            "							p.creditMemoNumber,  \n" +
            "							p.creditMemoDate,  \n" +
            "							p.debitMemoNumber,  \n" +
            "							p.debitMemoDate,  \n" +
            "							p.receiptDate,  \n" +
            "							p.description,  \n" +
            "							p.billToAddress,  \n" +
            "							p.shipToAddress,  \n" +
            "							p.poVersion,  \n" +
            "							p.isDeleted,  \n" +
            "							p.receiptType,  \n" +
            "							p.`status`,  \n" +
            "							p.packingSlipModeStatus,  \n" +
            "							p.chequeNumber,  \n" +
            "							p.chequeDate,  \n" +
            "							p.chequeAmount,  \n" +
            "							p.applyDate,  \n" +
            "							p.refParentCreditDebitInvoiceno,  \n" +
            "							p.refPackingSlipNumberForInvoice,  \n" +
            "							p.invoiceTotalDue,  \n" +
            "							p.isTariffInvoice,  \n" +
            "							p.bankName,  \n" +
            "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
            "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
            "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "							(  \n" +
            "								CASE  \n" +
            "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
            "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
            "									ELSE NULL  \n" +
            "								END  \n" +
            "							) packingSlipModeStatusValue,  \n" +
            "							ps.id invoiceId,  \n" +
            "							ps.invoiceNumber refInvoiceNumber,  \n" +
            "                            ps.lockStatus refInvoiceLockStatus,  \n" +
            "							ps.invoiceDate refInvoiceDate,  \n" +
            "							(  \n" +
            "								CASE  \n" +
            "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
            "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
            "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
            "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
            "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
            "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
            "									ELSE NULL  \n" +
            "								END  \n" +
            "							) statusValue,  \n" +
            "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
            "							psm.totalDetailLine itemReceived,  \n" +
            "							psm.totalRejectLine totalRejectedLine,  \n" +
            "                            p.lockStatus,  \n" +
            "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
            "                                else null end  \n" +
            "                            ) lockStatusValue,  \n" +
            "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
            "					FROM		packing_slip_material_receive p  \n" +
            "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
            "					LEFT JOIN 	(  \n" +
            "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine  \n" +
            "								FROM 		packing_slip_material_receive_det psm  \n" +
            "								WHERE 		isDeleted = 0  \n" +
            "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
            "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
            "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
            "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')  \",  \n" +
            "			case when pPackingslipWithRejectedLines = true then  \n" +
            "					\" and exists (select 1 from packing_slip_material_receive_det d where d.refPackingSlipMaterialRecID = p.id and d.receivedStatus = 'R') \"  \n" +
            "				else ' ' end,  \n" +
            "			\"	) a  \n" +
            "			WHERE \", v_advanceFilterWhereClause  \n" +
            "		);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "    END;  \n" +
            "drop procedure if exists `Sproc_RetriveSupplierRMAList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pMfgCodeIds VARCHAR(16383),  \n" +
            "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
            "	IN pSearchType VARCHAR(10),  \n" +
            "	IN pMfrPnId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
            "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
            "		IF (pSearchType = 'contains') THEN  \n" +
            "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
            "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
            "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
            "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
            "										  \" )  \n" +
            "									\");  \n" +
            "		ELSE  \n" +
            "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
            "												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
            "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
            "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
            "										  \" )  \n" +
            "									\");  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
            "				SELECT 	refPackingSlipMaterialRecID  \n" +
            "				FROM 	packing_slip_material_receive_det  \n" +
            "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
            "		SELECT	*  \n" +
            "		FROM 	(  \n" +
            "				SELECT 		p.id,  \n" +
            "						p.systemId,  \n" +
            "						p.receiptType,  \n" +
            "						p.packingSlipModeStatus rmaModeStatus,  \n" +
            "						(  \n" +
            "							CASE  \n" +
            "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
            "								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
            "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
            "								ELSE NULL  \n" +
            "							END  \n" +
            "						) rmaModeStatusValue,  \n" +
            "						p.`status`,  \n" +
            "						(  \n" +
            "							CASE  \n" +
            "								WHEN p.status = 'D' THEN 'Draft'  \n" +
            "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
            "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
            "								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
            "								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
            "                                WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
            "								WHEN p.status = 'P' THEN 'Paid'  \n" +
            "								ELSE NULL  \n" +
            "							END  \n" +
            "						) statusValue,  \n" +
            "						p.mfgCodeID,  \n" +
            "						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
            "						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
            "						p.poNumber rmaNumber,  \n" +
            "						p.poDate rmaDate,  \n" +
            "						p.packingSlipNumber,  \n" +
            "						p.packingSlipDate,  \n" +
            "						p.receiptDate shippedDate,  \n" +
            "						IFNULL(g.cnt,0) rmaDocCount,  \n" +
            "						psm.totalDetailLine itemReturn,  \n" +
            "						ps.id refCreditMemoId,  \n" +
            "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
            "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
            "						ps.creditMemoDate refCreditMemoDate,  \n" +
            "						p.remark,  \n" +
            "						p.internalRemark,  \n" +
            "						p.shippingMethodId,  \n" +
            "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
            "						p.carrierId,  \n" +
            "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
            "						p.carrierAccountNumber,  \n" +
            "						p.shippingInsurance,  \n" +
            "						(  \n" +
            "							CASE  \n" +
            "								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
            "								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
            "								ELSE NULL  \n" +
            "							END  \n" +
            "						) shippingInsuranceValue,  \n" +
            "						p.rmaShippingAddress,  \n" +
            "						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                        p.lockStatus,  \n" +
            "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "							when p.lockStatus = 'LC' then 'Locked'  \n" +
            "							else null end  \n" +
            "						) lockStatusValue,  \n" +
            "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
            "				FROM 		packing_slip_material_receive p  \n" +
            "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
            "				LEFT JOIN 	(  \n" +
            "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
            "							FROM 		packing_slip_material_receive_det psm  \n" +
            "							WHERE 		isDeleted = 0  \n" +
            "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
            "						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
            "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
            "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
            "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
            "			) AS a  \n" +
            "		WHERE \", v_advanceFilterWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = ' 1=1 ' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5198,'2.00','V1','User Story 36282: Supplier Invoice: Add Paid Date column on list page and Change Invoice Payment Status - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5198:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_deducted_allocation_available_stock`;  \n" +
                "CREATE VIEW `vu_deducted_allocation_available_stock` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`uid` AS `Uid`,  \n" +
                "        `a`.`refcompid` AS `refcompid`,  \n" +
                "        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `a`.`pkgUnit` AS `pkgunit`,  \n" +
                "        `b`.`allocatedUnit` AS `allocatedunit`,  \n" +
                "        (`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) AS `Availablestock`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `a`.`receiveMaterialType` AS `receiveMaterialType`,  \n" +
                "        `a`.`customerID` AS `customerID`,  \n" +
                "        `a`.`customerConsign` AS `customerConsign`  \n" +
                "    FROM  \n" +
                "        ((`component_sid_stock` `a`  \n" +
                "        JOIN `component` `c` ON ((`a`.`refcompid` = `c`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `css`.`id` AS `id`,  \n" +
                "                SUM(`k`.`allocatedQty`) AS `beforCovertAllocatedUnit`,  \n" +
                "                SUM(FUN_CONVERTUOM(`k`.`allocatedUOM`, `css`.`uom`, `k`.`allocatedUnit`)) AS `allocatedUnit`  \n" +
                "        FROM  \n" +
                "            (`component_sid_stock` `css`  \n" +
                "        JOIN `kit_allocation` `k` ON (((`k`.`refUIDId` = `css`.`id`)  \n" +
                "            AND (`k`.`STATUS` = 'A'))))  \n" +
                "        WHERE  \n" +
                "            ((`css`.`isinStk` = 1)  \n" +
                "                AND (`css`.`isDeleted` = 0))  \n" +
                "        GROUP BY `css`.`id`) `b` ON ((`a`.`id` = `b`.`id`)))  \n" +
                "    WHERE  \n" +
                "        ((`a`.`isDeleted` = 0)  \n" +
                "            AND ((`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) > 0))  \n" +
                "    UNION ALL SELECT  \n" +
                "        0 AS `id`,  \n" +
                "        '-' AS `uid`,  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `PkgUnit`,  \n" +
                "        0 AS `allocatedunit`,  \n" +
                "        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `availableStock`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        NULL AS `receiveMaterialType`,  \n" +
                "        NULL AS `customerID`,  \n" +
                "        0 AS `customerConsign`  \n" +
                "    FROM  \n" +
                "        (`vu_umid_creation_pending` `vu`  \n" +
                "        JOIN `component` `c` ON ((`c`.`id` = `vu`.`PartId`)))  \n" +
                "    WHERE  \n" +
                "        (`vu`.`BalanceQty` > 0);  \n" +
                /* **************************** New Script -> 02-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5199,'2.00','V1','Task 36487: CP: Regression Testing [02-09-2021] Refactor vu_deducted_allocation_available_stock - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5199:
            allDbChangesArray.push(
            /* **************************** New Script -> 03-09-2021 *********************************** */
            "ALTER TABLE user_configuration  \n" +
            "ADD COLUMN defaultCustPaymentListTabID INT COMMENT '0-Summary tab , 1-Detail tab';  \n" +
            "  \n" +
            "ALTER TABLE user_configuration  \n" +
            "ADD COLUMN defaultCustAppliedCMListTabID INT COMMENT '0-Summary tab , 1-Detail tab' ;  \n" +
            "  \n" +
            "ALTER TABLE user_configuration  \n" +
            "ADD COLUMN defaultCustAppliedWOFFListTabID INT COMMENT '0-Summary tab , 1-Detail tab' ;  \n" +
            "  \n" +
            "ALTER TABLE user_configuration  \n" +
            "ADD COLUMN defaultCustRefundListTabID INT COMMENT '0-Summary tab , 1-Detail tab' ;  \n" +
            /* **************************** Add Script Version -> 03-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5200,'2.00','V1',' default paymet list tab field entry in user_configuration table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5200:
            allDbChangesArray.push(
            /* **************************** New Script -> 03-09-2021 *********************************** */
            "ALTER TABLE employees  \n" +
            "DROP COLUMN defaultCustPaymentListTabID ;  \n" +
            "  \n" +
            "ALTER TABLE employees  \n" +
            "DROP COLUMN defaultCustAppliedCMListTabID ;  \n" +
            "  \n" +
            "ALTER TABLE employees  \n" +
            "DROP COLUMN defaultCustAppliedWOFFListTabID ;  \n" +
            "  \n" +
            "ALTER TABLE employees  \n" +
            "DROP COLUMN defaultCustRefundListTabID ;  \n" +
            /* **************************** Add Script Version -> 03-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5201,'2.00','V1',' removed default paymet list tab field entry from employees table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5201:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOAssyList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
                "pCustomerID INT,  \n" +
                "pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          c.mfgPN,  \n" +
                "		  c.PIDCode,  \n" +
                "		  c.id partID,  \n" +
                "		  sd.qty,  \n" +
                "		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
                "		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
                "		  sm.salesOrderNumber,  \n" +
                "		  sm.poNumber,  \n" +
                "		  sm.id AS soID,  \n" +
                "		   sd.id,  \n" +
                "		 CONCAT('(',mg.mfgcode,') ',c.mfgPN,' | ',sm.salesOrderNumber,' | ',sm.poNumber) blanketAssy  \n" +
                "	         FROM salesorderdet sd  \n" +
                "	         JOIN component c ON c.id=sd.partID AND c.isdeleted=0  \n" +
                "	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
                "	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "	         LEFT JOIN (  \n" +
                "	         SELECT  \n" +
                "			SUM(qty) AS assignPOQty,  \n" +
                "			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
                "	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
                "	         WHERE sm.customerID=pCustomerID AND sd.partID=pPartID AND sm.isBlanketPO=1 AND sd.isdeleted=0 AND (sd.qty - IFNULL(bp. assignPOQty,0))>0;  \n" +
                "  \n" +
                "    END;  \n" +
            /* **************************** New Script -> 03-09-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN  \n" +
                "                ((`a`.`salesOrderDetStatus` = 1)  \n" +
                "                    OR (`a`.`salesOrderDetailId` IS NULL))  \n" +
                "            THEN  \n" +
                "                'In Progress'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
            /* **************************** New Script -> 03-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5202,'2.00','V1',' Alter table Sproc_getBlanketPOAssyList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5202:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                "	AND rl.duplicateCPNStep = 1  \n" +
                "    );  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 and currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						IF(currMFGPNID > 0 ) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MFR PN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5203,'2.00','V1','Bug 36159: Receive error on add CPN part from BOM.  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;    
                case 5203:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 03-09-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                    "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                    "	IN pFromPartID INT,  \n" +
                    "    IN pNewEpicorType varchar(50),  \n" +
                    "    IN pNewAssemblyType INT,  \n" +
                    "    IN pNewMfgcodeID INT,  \n" +
                    "    IN pNewCustAssyPN varchar(500),  \n" +
                    "    IN pNewPartRev varchar(50),  \n" +
                    "    IN pNewMfgPN varchar(100),  \n" +
                    "    IN pNewAssyCode varchar(50),  \n" +
                    "    IN pNewNickName varchar(50),  \n" +
                    "    IN pNewPIDCode varchar(109),  \n" +
                    "    IN pIsCPN tinyint,  \n" +
                    "    IN pIsCustom tinyInt,  \n" +
                    "    IN pUserID Int,  \n" +
                    "    IN pUserRoleId Int,  \n" +
                    "    IN pIsAttribute tinyint,  \n" +
                    "    IN pIsSettings tinyint,  \n" +
                    "    IN pIsAdditionalAttibute tinyint,  \n" +
                    "    IN pIsPackagingDetail tinyint,  \n" +
                    "    IN pIsStandards tinyint,  \n" +
                    "    IN pIsRequiredFunctionalType tinyint,  \n" +
                    "    IN pIsRequiredMountingType tinyint,  \n" +
                    "    IN pIsPackagingAliasPart tinyint,  \n" +
                    "    IN pIsOtherPartName tinyint,  \n" +
                    "    IN pIsAlternatePart tinyint,  \n" +
                    "    IN pIsRoHSReplacementPart tinyint,  \n" +
                    "    IN pIsDriveTool tinyint,  \n" +
                    "    IN pIsProcessMaterial tinyint,  \n" +
                    "    IN pIsRequiredMattingParts tinyint,  \n" +
                    "    IN pIsPickupPad tinyint,  \n" +
                    "    IN pIsFunctionalTesingTool tinyint,  \n" +
                    "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                    "    IN pIsBOM tinyint,  \n" +
                    "    IN pIsFluxType tinyInt,  \n" +
                    "    IN pIsComments tinyInt,  \n" +
                    "    IN pIsCopyImages tinyInt,  \n" +
                    "    IN pIsCopyDatasheet tinyInt,  \n" +
                    "    IN pIsCopyDocument tinyInt,  \n" +
                    "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                    "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                    "    IN pIsTrackSNumber tinyInt,  \n" +
                    "    IN pMfgPNDescription varchar(2000),  \n" +
                    "    IN pDetailDescription varchar(2000)  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE vValidationPassed tinyint;  \n" +
                    "DECLARE vFromPartCategory tinyint;  \n" +
                    "DECLARE vFromMfgType varchar(5);  \n" +
                    "DECLARE vCount INT;  \n" +
                    "DECLARE vToPartID INT;  \n" +
                    "DECLARE vUserRoleId INT;  \n" +
                    "DECLARE vMisMatchFields longtext;  \n" +
                    "DECLARE vSerialNumber varchar(20);  \n" +
                    "DECLARE vMessage varchar(20);  \n" +
                    "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                    "BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  \n" +
                    "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                    "  BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  */  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                    "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                    "  \n" +
                    "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                    "  	set vCount = 0;  \n" +
                    "    select co.category, m.mfgType, count(co.id)  \n" +
                    "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                    "	  from component co  \n" +
                    "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                    "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                    "  \n" +
                    "	if vCount = 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "		select 'PART_NOT_FOUND' as message;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                    "		set pIsAttribute = 1;  \n" +
                    "        set pIsAdditionalAttibute = 1;  \n" +
                    "    end if;  \n" +
                    "  \n" +
                    "	set vCount = 0;  \n" +
                    "    if (vFromPartCategory = 3) then # check category  \n" +
                    "	   select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                    "          and co.category = 3  \n" +
                    "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                    "		  and co.rev = pNewPartRev  \n" +
                    "          and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "		if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "            select 'DUPLICATE_REV' as message;  \n" +
                    "        end if;  \n" +
                    "  \n" +
                    "         set vCount = 0;  \n" +
                    "		 select count(1) into vCount  \n" +
                    "			 from component co  \n" +
                    "			where co.nickName != pNewNickName  \n" +
                    "              and co.category = 3  \n" +
                    "              and co.custAssyPN = pNewCustAssyPN  \n" +
                    "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "			  and co.isDeleted = 0  \n" +
                    "			  and co.deletedAt is null;  \n" +
                    "		  if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                    "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                    "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                    "				 from component co  \n" +
                    "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                    "				where co.nickName != pNewNickName  \n" +
                    "				  and co.category = 3  \n" +
                    "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                    "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "				  and co.isDeleted = 0  \n" +
                    "				  and co.deletedAt is null ;  \n" +
                    "				 -- limit 1;  \n" +
                    "		  end if;  \n" +
                    "  \n" +
                    "		set vCount = 0;  \n" +
                    "		 select count(1) into vCount  \n" +
                    "			 from component co  \n" +
                    "			where co.nickName = pNewNickName  \n" +
                    "              and co.category = 3  \n" +
                    "              and co.custAssyPN != pNewCustAssyPN  \n" +
                    "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "			  and co.isDeleted = 0  \n" +
                    "			  and co.deletedAt is null;  \n" +
                    "		 if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                    "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                    "				 from component co  \n" +
                    "				where co.nickName = pNewNickName  \n" +
                    "				  and co.category = 3  \n" +
                    "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                    "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "				  and co.isDeleted = 0  \n" +
                    "				  and co.deletedAt is null  ;  \n" +
                    "-- 				  limit 1;  \n" +
                    "		  end if;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "    set vCount = 0;  \n" +
                    "		select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                    "		  and co.mfgPN = pNewMfgPN  \n" +
                    "          and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "	 if vCount > 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "        select 'DUPLICATE_MFGPN' as message;  \n" +
                    "     end if;  \n" +
                    "  \n" +
                    "    set vCount = 0;  \n" +
                    "		select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.PIDCode = pNewPIDCode  \n" +
                    "		  and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "    if vCount > 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "        select 'DUPLICATE_PID' as message;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                    "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                    "													'MPNSystemID'  \n" +
                    "												else 'SPNSystemID' end,  \n" +
                    "											 true);  \n" +
                    "		  select systemID, message into vSerialNumber, vMessage  \n" +
                    "		  from temp_serialNumber;  \n" +
                    "        if vMessage is not null and vMessage != '' then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "			select vMessage as message;  \n" +
                    "		end if;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                    "		-- START TRANSACTION;  \n" +
                    "		insert into component(  \n" +
                    "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                    "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                    "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                    "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                    "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                    "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                    "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                    "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                    "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                    "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType)  \n" +
                    "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                    "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                    "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                    "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                    "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                    "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                    "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                    "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                    "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                    "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                    "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                    "                internalReference,  \n" +
                    "                mfgType  \n" +
                    "		 from component  \n" +
                    "		where id = pFromPartID;  \n" +
                    "		set vToPartID = LAST_INSERT_ID();  \n" +
                    "  \n" +
                    "		IF pIsAttribute  then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                    "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                    "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                    "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                    "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                    "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                    "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                    "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                    "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                    "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                    "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                    "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                    "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                    "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                    "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                    "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                    "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                    "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                    "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                    "			toPart.`pitch` = fromPart.pitch,  \n" +
                    "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                    "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                    "			toPart.`length` = fromPart.length,  \n" +
                    "			toPart.`width` = fromPart.width,  \n" +
                    "			toPart.`heightText` = fromPart.heightText,  \n" +
                    "			toPart.`height` = fromPart.height,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		IF pIsSettings then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                    "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                    "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                    "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                    "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                    "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                    "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                    "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                    "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                    "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                    "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                    "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                    "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                    "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                    "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                    "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                    "			toPart.`eau` = fromPart.eau,  \n" +
                    "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                    "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                    "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                    "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                    "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                    "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                    "		end if;  \n" +
                    "		IF pIsAdditionalAttibute then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                    "			from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                    "			toPart.`voltage` = fromPart.voltage,  \n" +
                    "			toPart.`value` = fromPart.value,  \n" +
                    "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                    "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                    "			toPart.`weight` = fromPart.weight,  \n" +
                    "			toPart.`feature` = fromPart.feature,  \n" +
                    "			toPart.`color` = fromPart.color,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		IF pIsPackagingDetail then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                    "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                    "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                    "			toPart.`minimum` = fromPart.minimum,  \n" +
                    "			toPart.`mult` = fromPart.mult,  \n" +
                    "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                    "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                    "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                    "			toPart.`uom` = fromPart.uom,  \n" +
                    "			toPart.`uomText` = fromPart.uomText,  \n" +
                    "			toPart.`unit` = fromPart.unit,  \n" +
                    "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                    "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                    "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                    "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                    "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                    "            toPart.`isReceiveBulkItem` = fromPart.isReceiveBulkItem,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		if pIsStandards then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                    "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "			INSERT INTO `component_standard_details`  \n" +
                    "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                    "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                    "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                    "			and not exists (select 1 from component_standard_details csd  \n" +
                    "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                    "		end if;  \n" +
                    "		if pIsRequiredMountingType then  \n" +
                    "			INSERT INTO `component_requiremountingtype`  \n" +
                    "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "			and not exists (select 1 from component_requiremountingtype  \n" +
                    "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                    "		end if;  \n" +
                    "		if pIsRequiredFunctionalType then  \n" +
                    "			INSERT INTO `component_requirefunctionaltype`  \n" +
                    "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                    "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                    "		end if;  \n" +
                    "		IF pIsAcceptableShippinCountry then  \n" +
                    "			INSERT INTO component_acceptable_shipping_countries  \n" +
                    "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                    "			SELECT  \n" +
                    "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                    "			FROM  \n" +
                    "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                    "		end if;  \n" +
                    "  \n" +
                    "		IF(pIsPackagingAliasPart)  \n" +
                    "		THEN  \n" +
                    "			set vMisMatchFields  = '';  \n" +
                    "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                    "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                    "		END IF;  \n" +
                    "		IF(vValidationPassed = 0)  \n" +
                    "		THEN  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                    "		ELSE  \n" +
                    "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                    "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                    "  \n" +
                    "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                    "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                    "			THEN  \n" +
                    "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                    "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                    "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                    "			end if;  \n" +
                    "            IF(vValidationPassed = 0)  \n" +
                    "			THEN  \n" +
                    "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                    "			ELSE  \n" +
                    "				if pIsPackagingAliasPart then  \n" +
                    "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                    "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                    "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                    "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                    "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                    "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                    "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                    "					# Insert data in packaging alias table for ToPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "					# Update data for packaging alias group id for  ToPartID  \n" +
                    "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                    "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                    "					# Insert data in packaging alias table for ToPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "					# Update data for packaging alias group id for  FromPartID  \n" +
                    "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                    "					end if;  \n" +
                    "				end if;  \n" +
                    "				if pIsOtherPartName then  \n" +
                    "					INSERT INTO `component_otherpn`  \n" +
                    "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "					and not exists (select 1 from component_otherpn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                    "				end if;  \n" +
                    "				If pIsAlternatePart then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                    "				end if;  \n" +
                    "				if pIsRoHSReplacementPart then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                    "				end if;  \n" +
                    "				if pIsDriveTool then  \n" +
                    "					INSERT INTO `component_drivetools`  \n" +
                    "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_drivetools  \n" +
                    "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                    "				end if;  \n" +
                    "				if pIsProcessMaterial then  \n" +
                    "					INSERT INTO `component_processmaterial`  \n" +
                    "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_processmaterial  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                    "				end if;  \n" +
                    "				if pIsRequiredMattingParts then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                    "				end if;  \n" +
                    "				if pIsPickupPad then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                    "				end if;  \n" +
                    "				if pIsFunctionalTesingTool then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                    "				end if;  \n" +
                    "				if pIsFinctionalRestingEquipment then  \n" +
                    "					INSERT INTO `component_functionaltestingequipment`  \n" +
                    "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                    "				end if;  \n" +
                    "				if (vFromPartCategory = 3) then  \n" +
                    "					if pIsBOM then  \n" +
                    "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                    "					end if;  \n" +
                    "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                    "				end if;  \n" +
                    "				if(pIsComments = 1) THEN  \n" +
                    "						INSERT INTO componenet_inspection_requirement_det  \n" +
                    "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                    "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                    "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                    "						INSERT INTO assembly_revision_comments  \n" +
                    "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                    "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                    "							partID = pFromPartID;  \n" +
                    "				END IF;  \n" +
                    "  \n" +
                    "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                    "				IF pIsCopyImages  then  \n" +
                    "					insert into component_images  \n" +
                    "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                    "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                    "					 from component_images  \n" +
                    "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                    "				end if;  \n" +
                    "				IF pIsCopyDatasheet  then  \n" +
                    "					insert into component_datasheets  \n" +
                    "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                    "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                    "					from component_datasheets  \n" +
                    "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                    "				end if;  \n" +
                    "				IF pIsOperationalAttirbutes  then  \n" +
                    "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                    "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                    "					SELECT  \n" +
                    "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                    "					FROM  \n" +
                    "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                    "				end if;  \n" +
                    "				IF pIsCopyDocument then  \n" +
                    "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                    "					INSERT INTO generic_folder  \n" +
                    "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                    "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                    "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                    "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                    "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                    "					FROM generic_folder a  \n" +
                    "					WHERE a.refTransID = pFromPartID  \n" +
                    "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                    "  \n" +
                    "					UPDATE generic_folder gf1,  \n" +
                    "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                    "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                    "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                    "					) gf2  \n" +
                    "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                    "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                    "					AND gf1.refTransID = vToPartID  \n" +
                    "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                    "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                    "  \n" +
                    "					INSERT INTO genericfiles  \n" +
                    "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                    "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                    "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                    "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                    "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                    "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                    "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                    "  \n" +
                    "					UPDATE genericfiles gf1,  \n" +
                    "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                    "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                    "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                    "					) gf2  \n" +
                    "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                    "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                    "					AND gf1.refTransID = vToPartID  \n" +
                    "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                    "				end if;  \n" +
                    "  \n" +
                    "				-- commit;  \n" +
                    "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                    "				IF(@documentPathOfFromPart is null)  \n" +
                    "				THEN  \n" +
                    "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                    "				END IF;  \n" +
                    "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "	end if;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5204,'2.00','V1',' Task 36507: Configure checkbox for Receive as Bulk Item for Other part type - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break;   
        case 5204:
                allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                    "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                    "	IN pPageIndex INT,  \n" +
                    "	IN pRecordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN pPartId INT,  \n" +
                    "	IN pRefSalesOrderDetailId INT,  \n" +
                    "	IN pLineId INT,  \n" +
                    "    IN pShortageLines BOOLEAN,  \n" +
                    "	IN pPackagingAlias BOOLEAN,  \n" +
                    "	IN pFunctionalType VARCHAR(1000),  \n" +
                    "	IN pMountingType VARCHAR(1000),  \n" +
                    "	IN pCartType VARCHAR(1000),  \n" +
                    "	IN pWarehouse VARCHAR(1000),  \n" +
                    "	IN pFeasibilityQty INT,  \n" +
                    "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                    "	IN pCustomerId INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE pOffset INT;  \n" +
                    "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                    "	DECLARE pAllocatedSharedCount INT;  \n" +
                    "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                    "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                    "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                    "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                    "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                    "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                    "	SET SESSION group_concat_max_len = 500000;  \n" +
                    "  \n" +
                    "	SET vFilterWhereClause = '';  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF (pLineId != 0) THEN  \n" +
                    "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                    "	ELSE  \n" +
                    "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                    "	END IF;  \n" +
                    "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                    "	ELSE  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                    "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                    "	END IF;  \n" +
                    "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                    "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pShortageLines = 1) THEN  \n" +
                    "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                    "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                    "		FROM 		kit_allocation ka  \n" +
                    "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                    "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                    "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                    "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                    "		AND 		ka.assyID = pPartId  \n" +
                    "		AND 		ka.`status` = 'A'  \n" +
                    "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                    "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                    "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                    "					END)  \n" +
                    "		AND 		css.isDeleted = 0 ;  \n" +
                    "  \n" +
                    "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                    "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                    "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "	ELSE  \n" +
                    "		SET rowNumWhere = '';  \n" +
                    "	END IF;  \n" +
                    "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                    "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                    "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');  \n" +
                    "	ELSE  \n" +
                    "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                    "		INTO 	pKitQty  \n" +
                    "		FROM 	kit_allocation_assy_detail  \n" +
                    "		WHERE 	partId = pPartId  \n" +
                    "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                    "				AND isDeleted = 0;  \n" +
                    "	END IF;  \n" +
                    "	SET @vFromSQLQuery = CONCAT('  \n" +
                    "		SELECT	*  \n" +
                    "		FROM	(  \n" +
                    "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                    "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                    "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                    "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                    "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                    "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                    "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                    "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                    "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                    "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                    "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                    "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                    "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                    "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                    "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                    "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                    "							(  \n" +
                    "								CASE  \n" +
                    "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                    "									ELSE  \n" +
                    "										CASE  \n" +
                    "											WHEN c.connecterTypeID = - 2 THEN  \n" +
                    "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                    "													ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                    "											ELSE  \n" +
                    "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                    "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END  \n" +
                    "										END  \n" +
                    "								END  \n" +
                    "							) shortagePerBuild,  \n" +
                    "							(  \n" +
                    "								CASE  \n" +
                    "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                    "									ELSE  \n" +
                    "										CASE  \n" +
                    "											WHEN c.connecterTypeID = -2 THEN  \n" +
                    "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0  \n" +
                    "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END  \n" +
                    "											ELSE  \n" +
                    "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                    "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                    "										END  \n" +
                    "								END  \n" +
                    "							) shortagePerBuildWithAvailable,  \n" +
                    "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                    "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                    "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                    "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                    "					FROM	(  \n" +
                    "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                    "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                    "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                    "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                    "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                    "											THEN 0  \n" +
                    "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                    "										END) requirePinsBuild,  \n" +
                    "										mfgPN AS mfgPN,  \n" +
                    "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                    "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                    "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                    "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                    "										(  \n" +
                    "											CASE  \n" +
                    "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                    "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                    "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                    "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                    "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                    "												ELSE 0  \n" +
                    "											END  \n" +
                    "										) freeToShareAmongOtherKits,  \n" +
                    "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                    "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                    "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                    "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                    "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                    "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                    "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                    "						FROM  \n" +
                    "						(  \n" +
                    "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                    "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                    "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                    "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                    "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                    "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                    "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                    "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                    "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                    "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                    "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                    "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                    "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                    "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                    "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                    "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                    "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                    "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                    "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                    "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                    "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                    "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                    "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                    "								FROM 	(  \n" +
                    "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                    "												max(c.connecterTypeID) connecterTypeID,  \n" +
                    "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                    "														then min(c.functionalCategoryID)  \n" +
                    "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                    "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                    "														else -1 /* MisMatched */  \n" +
                    "												end) parttypeID,  \n" +
                    "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                    "															then  min(c.mountingTypeID)  \n" +
                    "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                    "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                    "														else  -1  \n" +
                    "												end) mountingTypeID,  \n" +
                    "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                    "												group_concat(kal.description) AS description  \n" +
                    "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                    "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                    "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                    "												AND 	kal.partID =  ', pPartId, '  \n" +
                    "												AND 	kal.isDeleted = 0  \n" +
                    "												AND		c.isDeleted = 0  \n" +
                    "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                    "									) AS kl  \n" +
                    "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                    "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                    "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                    "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                    "												AND kl.partID = ka.assyID  \n" +
                    "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                    "							where 		 k.isDeleted = 0  \n" +
                    "						) AS a      inner join  \n" +
                    "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                    "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                    "			GROUP_CONCAT(  \n" +
                    "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                    "				a.RoHSStatusID,''@@@'',  \n" +
                    "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                    "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                    "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                    "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                    "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                    "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                    "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                    "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                    "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                    "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                    "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                    "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                    "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                    "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                    "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                    "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                    "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                    "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                    "				a.mfgCode,''@@@'',  \n" +
                    "				a.mfgPNID,''@@@'',  \n" +
                    "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                    "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                    "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                    "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                    "			FROM  \n" +
                    "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                    "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                    "                        approvedMountingType,  \n" +
                    "                        mismatchMountingTypeStep,  \n" +
                    "                        mismatchFunctionalCategoryStep,  \n" +
                    "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                    "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                    "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                    "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                    "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                    "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                    "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                    "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                    "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                    "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                    "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                    "						  from  \n" +
                    "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                    "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                    "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                    "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                    "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                    "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                    "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                    "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                    "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                    "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                    "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                    "									ELSE    /*Packaging Alias*/  \n" +
                    "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                    "									END AS restrictUsePermanentlyStep,  \n" +
                    "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                    "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                    "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                    "									ELSE  \n" +
                    "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                    "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                    "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                    "									ELSE     /*Packaging Alias*/  \n" +
                    "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                    "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                    "									ELSE  \n" +
                    "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "									END AS restrictUseExcludingAliasStep,  \n" +
                    "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                    "									ELSE  \n" +
                    "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                    "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                    "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                    "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                    "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                    "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                    "									JOIN component c ON al.mfgPNID = c.id  \n" +
                    "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                    "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                    "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                    "															 and x.mfgpnid = d.id  \n" +
                    "															 and d.id != c.id)  \n" +
                    "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                    "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                    "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                    "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                    "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                    "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                    "							) a group by a.id, a.refRfqLineitem  \n" +
                    "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                    "					) AS c  \n" +
                    "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                    "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                    "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                    "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                    "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                    "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                    "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                    "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                    "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                    "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                    "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                    "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                    "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                    "		) As mainData  \n" +
                    "		WHERE', pWhereClause,' ', vFilterWhereClause  \n" +
                    "	);  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;  \n" +
                    "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                    "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                    "  \n" +
                    "    EXECUTE mainQuery;  \n" +
                    "	DEALLOCATE PREPARE mainQuery;  \n" +
                    "  \n" +
                    "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                    "	PREPARE query1 FROM @SQLStatement1;  \n" +
                    "	EXECUTE query1;  \n" +
                    "	DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                    "	PREPARE query2 FROM @SQLStatement2;  \n" +
                    "	EXECUTE query2;  \n" +
                    "	DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                    "	PREPARE query3 FROM @SQLStatement3;  \n" +
                    "	EXECUTE query3;  \n" +
                    "	DEALLOCATE PREPARE query3;  \n" +
                    "  \n" +
                    "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                    "	PREPARE query4 FROM @SQLStatement4;  \n" +
                    "	EXECUTE query4;  \n" +
                    "	DEALLOCATE PREPARE query4;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;  \n" +
                    "  \n" +
                    "END;  \n" +
                /* **************************** Add Script Version -> 11-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5205,'2.00','V1',' Tune SP Sproc_RetriveKitAllocationList Improve Performance from 10 Second to 2 second- DP '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5205:
  allDbChangesArray.push(
  /* **************************** New Script -> 03-09-2021 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
      "	IN ppageIndex INT,  \n" +
      "	IN precordPerPage INT,  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pIsKitList TINYINT,  \n" +
      "	IN pPlannedStatus VARCHAR(10),  \n" +
      "	IN pSalesOrderDetailId INT,  \n" +
      "	IN pIsPendingWOCreationList TINYINT,  \n" +
      "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
      "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
      "	IN pfilterStatus VARCHAR(100),  \n" +
      "	IN pcustomerIds VARCHAR(16000),  \n" +
      "	IN pshippingMethodId VARCHAR(16000),  \n" +
      "	IN ptermsIds VARCHAR(16000),  \n" +
      "	IN psearchposotext VARCHAR(1000),  \n" +
      "	IN psearchposotype VARCHAR(10),  \n" +
      "	IN pfromDate DATE,  \n" +
      "	IN ptoDate DATE,  \n" +
      "	IN prushJob TINYINT,  \n" +
      "	IN ppartIds VARCHAR(16000),  \n" +
      "	IN pworkorders VARCHAR(16000),  \n" +
      "	IN psearchextPricetext VARCHAR(1000),  \n" +
      "	IN psearchextPricetype VARCHAR(10),  \n" +
      "	IN pkitreturnStatus VARCHAR(100),  \n" +
      "	IN pkitReleaseStatus VARCHAR(100)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	DECLARE pOffset INT;  \n" +
      "	DECLARE rowNumWhere VARCHAR(255);  \n" +
      "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
      "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
      "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
      "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
      "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
      "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
      "	SET v_PendingWOWhereClause='';  \n" +
      "  \n" +
      "	IF(pIsKitList=1) THEN  \n" +
      "		SET v_DynamicColumns = CONCAT(\",  \n" +
      "			hu.refType as refTypeKR,  \n" +
      "			hu.status as haltStatusKR,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hu.status = 'H' THEN  \n" +
      "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonKR,  \n" +
      "			hutt.refType as refTypePO,  \n" +
      "			hutt.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hutt.status = 'H' THEN  \n" +
      "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO,  \n" +
      "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin = CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
      "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
      "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
      "	ELSE  \n" +
      "		SET v_DynamicColumns=CONCAT(\",  \n" +
      "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hut.status = 'H' THEN  \n" +
      "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin =CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
      "				SELECT 	MAX(ht.id)  \n" +
      "				FROM 	holdunholdtrans ht  \n" +
      "				WHERE 	hut.refTransId = ht.refTransId  \n" +
      "						AND ht.refType='PO'  \n" +
      "						AND ht.isdeleted=0  \n" +
      "					)  \n" +
      "				\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
      "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
      "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
      "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
      "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
      "						co.mfgPN AS mfgPN,  \n" +
      "						co.nickname AS nickName,  \n" +
      "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
      "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
      "						vusalesorderdet.poNumber,  \n" +
      "						vusalesorderdet.salesOrderNumber  \n" +
      "				FROM 		workorder wo  \n" +
      "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
      "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
      "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
      "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
      "		\");  \n" +
      "	END IF;  \n" +
      "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
      "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
      "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
      "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
      "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
      "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
      "        IF pOrderBy IS NULL THEN  \n" +
      "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
      "        END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
      "		SELECT  a.*,  \n" +
      "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
      "		FROM  \n" +
      "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
      "							'No'  \n" +
      "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
      "							'Yes'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `isHotJobValue`,  \n" +
      "				`vuss`.`isHotJob`,  \n" +
      "				`vuss`.`Sales Order ID` AS id,  \n" +
      "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
      "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
      "				`vuss`.frequency as frequencyName,  \n" +
      "				vuss.frequencyType as frequencyTypeName,  \n" +
      "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
      "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
      "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
      "				`vuss`.`Po Number` AS poNumber,  \n" +
      "				`vuss`.`Po Date` AS poDate,  \n" +
      "				`vuss`.`Customer ID` AS customerID,  \n" +
      "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
      "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
      "				`vuss`.`Sales Order Status` AS `status`,  \n" +
      "				`vuss`.`Revision` AS revision,  \n" +
      "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
      "				`vuss`.`Terms ID` AS termsID,  \n" +
      "				`vuss`.`So Date` AS soDate,  \n" +
      "				`vuss`.`Company Name` AS companyName,  \n" +
      "				`vuss`.`internalPO` AS internalPO,  \n" +
      "				`vuss`.`mfgCode` AS mfgCode,  \n" +
      "				`vuss`.`Full Name` AS fullName,  \n" +
      "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
      "				`vuss`.`PO Qty` AS qty,  \n" +
      "				vuss.assignQty as assignBlanketPOQty,  \n" +
      "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
      "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
      "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
      "				`vuss`.`mrpQty` AS mrpQty,  \n" +
      "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
      "				`vuss`.`kitQty` AS kitQty, \",  \n" +
      "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
      "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
      "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
      "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
      "				`vuss`.`shippingQty` AS shippingQty,  \n" +
      "				`vuss`.`remark` AS remark,  \n" +
      "				`vuss`.`Assy ID` AS PIDCode,  \n" +
      "				`vuss`.`Assy Name` AS mfgPN,  \n" +
      "				`vuss`.`NickName` AS nickName,  \n" +
      "				`vuss`.`liveVersion` AS liveVersion,  \n" +
      "				`vuss`.`partDescription` AS partDescription,  \n" +
      "				`vuss`.`cancleReason` AS cancleReason,  \n" +
      "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
      "				`vuss`.`modifyDate` AS modifyDate,  \n" +
      "				`vuss`.`createdDate` AS createdDate,  \n" +
      "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
      "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
      "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
      "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
      "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
      "				vuss.isBlanketPO,  \n" +
      "				vuss.blanketPOText,  \n" +
      "				vuss.poRevision,  \n" +
      "				vuss.partType,  \n" +
      "				vuss.isCancle,  \n" +
      "				vuss.mfgcodeID,  \n" +
      "				vuss.manufacturerName,  \n" +
      "				`vuss`.`PartID` AS partID,  \n" +
      "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
      "				`vuss`.`kitNumber` AS kitNumber,  \n" +
      "				`vuss`.`serialNumber` AS serialNumber,  \n" +
      "				`vuss`.partCategory,  \n" +
      "				vuss.lineID,  \n" +
      "				vuss.internalCommentSo,  \n" +
      "				vuss.internalComment,  \n" +
      "				vuss.originalPODate,  \n" +
      "				vuss.isRmaPO,  \n" +
      "				vuss.rmaPOText,  \n" +
      "				vuss.isLegacyPO,  \n" +
      "				vuss.legacyPOText,  \n" +
      "				vuss.originalPOQty,  \n" +
      "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
      "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
      "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
      "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
      "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
      "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
      "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
      "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
      "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
      "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
      "							'Draft'  \n" +
      "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
      "							'Published'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `statusConvertedValue`,  \n" +
      "				hutkit.refType as refTypeKA,  \n" +
      "				hutkit.status as haltStatusKA,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	hutkit.status = 'H' THEN  \n" +
      "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
      "						ELSE 	''  \n" +
      "					END  \n" +
      "				) AS reasonKA,  \n" +
      "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
      "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
      "				(  \n" +
      "				CASE  \n" +
      "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
      "						TRUE  \n" +
      "					ELSE  \n" +
      "						FALSE  \n" +
      "				END  \n" +
      "				) as isKitPlanningRequired,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
      "							'Unplanned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
      "							'Partially Planned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
      "							'Fully Planned'  \n" +
      "						ELSE  \n" +
      "							NULL  \n" +
      "					END  \n" +
      "				) as kitPlanStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	ka.kitReturnStatus is null then  \n" +
      "							'N/A'  \n" +
      "						ELSE  \n" +
      "							ka.kitReturnStatus  \n" +
      "					END  \n" +
      "				) as kitReturnStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ka.kitReleaseStatus is null then  \n" +
      "							'Not Released'  \n" +
      "						else  \n" +
      "							ka.kitReleaseStatus  \n" +
      "					END  \n" +
      "				) as kitReleaseStatus,  \n" +
      "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
      "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
      "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
      "				p.nextReleaseDate,  \n" +
      "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
      "				p.releasedPlanCount totalkitRelease,  \n" +
      "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
      "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
      "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
      "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
      "				vuss.releasedWorkorder,  \n" +
      "                ka.shortagePer,  \n" +
      "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
      "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
      "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
      "		LEFT JOIN  	(  \n" +
      "					SELECT  salesOrderDetID,  \n" +
      "						refAssyId,  \n" +
      "						count(1) totalPlan,  \n" +
      "						SUM(poQty) totalPOQty,  \n" +
      "						SUM(kitReleaseQty) totalKitQty,  \n" +
      "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
      "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
      "					FROM 	salesorder_plan_detailsmst  \n" +
      "					WHERE 	isDeleted=0  \n" +
      "							AND subAssyID is null  \n" +
      "					GROUP BY salesOrderDetID, refAssyId  \n" +
      "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
      "		LEFT JOIN 	(  \n" +
      "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "						`k`.`assyID` AS `assyID`,  \n" +
      "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
      "						`k`.`shortageLine` AS `shortageLine`,  \n" +
      "						allocPermainAssy allocPerComponent,  \n" +
      "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
      "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
      "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
      "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
      "						FROM (  \n" +
      "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "								mainAssy AS `assyID`,  \n" +
      "								COUNT(1) AS `totalLine`,  \n" +
      "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
      "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
      "								sum( k.shortageline) shortageline,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
      "							  FROM (  \n" +
      "  \n" +
      "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
      "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
      "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
      "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
      "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
      "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
      "									FROM  	`vu_kit_allocation_detail` vk  \n" +
      "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
      "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
      "								) `k`  \n" +
      "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
      "						) `k`  \n" +
      "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
      "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
      "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
      "		) AS a  \n" +
      "    \");  \n" +
      "  \n" +
      "    IF(pIsKitList = 1) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pOrderBy IS NOT NULL) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
      "	ELSE  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "		SET pWhereClause = '1=1' ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
      "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
      "	  IF(psearchposotype='C')THEN  \n" +
      "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
      "          ELSE  \n" +
      "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
      "          END IF;  \n" +
      "        END IF;  \n" +
      "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
      "	  IF(psearchextPricetype='C')THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(prushJob = 1) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pworkorders IS NOT NULL)THEN  \n" +
      "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
      "	END IF;  \n" +
      "	IF(ppartIds IS NOT NULL)THEN  \n" +
      "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
      "	END IF;  \n" +
      "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	-- from date to date filter  \n" +
      "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
      "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
      "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
      "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
      "    END IF;  \n" +
      "  \n" +
      "  	IF(pIsKitList = 1) THEN  \n" +
      "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
      "  	ELSE  \n" +
      "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
      "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
      "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
      "		END IF;  \n" +
      "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pSalesOrderDetailId != 0) THEN  \n" +
      "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "  \n" +
      "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "	ELSE  \n" +
      "		SET rowNumWhere = '';  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	/* to get total count of rows */  \n" +
      "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
      "    PREPARE query1 FROM @SQLStatement1;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
      "    PREPARE query2 FROM @SQLStatement2;  \n" +
      "	EXECUTE query2;  \n" +
      "	DEALLOCATE PREPARE query2;  \n" +
      "  \n" +
      "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query3 FROM @SQLStatement3;  \n" +
      "	EXECUTE query3;  \n" +
      "	DEALLOCATE PREPARE query3;  \n" +
      "  \n" +
      "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query4 FROM @SQLStatement4;  \n" +
      "	EXECUTE query4;  \n" +
      "	DEALLOCATE PREPARE query4;  \n" +
      "END;  \n" +
  /* **************************** New Script -> 03-09-2021 *********************************** */
      "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
      "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
      "    SELECT  \n" +
      "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
      "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
      "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
      "        `a`.`poNumber` AS `Po Number`,  \n" +
      "        `a`.`poDate` AS `Po Date`,  \n" +
      "        `a`.`customerID` AS `Customer ID`,  \n" +
      "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
      "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
      "        `a`.`status` AS `Sales Order Status`,  \n" +
      "        `a`.`revision` AS `Revision`,  \n" +
      "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
      "        `a`.`termsID` AS `Terms ID`,  \n" +
      "        `a`.`soDate` AS `So Date`,  \n" +
      "        `a`.`partID` AS `PartID`,  \n" +
      "        `a`.`PIDCode` AS `Assy ID`,  \n" +
      "        `a`.`mfgPN` AS `Assy Name`,  \n" +
      "        `a`.`rev` AS `Assy Revision`,  \n" +
      "        `a`.`nickName` AS `NickName`,  \n" +
      "        `a`.`liveVersion` AS `liveVersion`,  \n" +
      "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
      "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
      "        `a`.`qty` AS `PO Qty`,  \n" +
      "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
      "        `a`.`shippingQty` AS `shippingQty`,  \n" +
      "        `a`.`companyName` AS `Company Name`,  \n" +
      "        `a`.`internalPO` AS `internalPO`,  \n" +
      "        `a`.`mfgCode` AS `mfgCode`,  \n" +
      "        `a`.`fullName` AS `Full Name`,  \n" +
      "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
      "        `a`.`isCancle` AS `isCancle`,  \n" +
      "        `a`.`cancleReason` AS `cancleReason`,  \n" +
      "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "        `a`.`shippingDate` AS `shippingDate`,  \n" +
      "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "        `a`.`remark` AS `remark`,  \n" +
      "        `a`.`price` AS `price`,  \n" +
      "        `a`.`mrpQty` AS `mrpQty`,  \n" +
      "        `a`.`kitQty` AS `kitQty`,  \n" +
      "        `a`.`isHotJob` AS `isHotJob`,  \n" +
      "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "        `a`.`RoHSName` AS `RoHSName`,  \n" +
      "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
      "        `a`.`lineID` AS `lineID`,  \n" +
      "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
      "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
      "            WHEN  \n" +
      "                ((`a`.`salesOrderDetStatus` = 1)  \n" +
      "                    OR (`a`.`salesOrderDetailId` IS NULL))  \n" +
      "            THEN  \n" +
      "                'In Progress'  \n" +
      "            ELSE 'Completed'  \n" +
      "        END) AS `Status`,  \n" +
      "        `a`.`modifyDate` AS `modifyDate`,  \n" +
      "        `a`.`createdDate` AS `createdDate`,  \n" +
      "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
      "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
      "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
      "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
      "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
      "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
      "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
      "        `a`.`kitnumber` AS `kitnumber`,  \n" +
      "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "        `a`.`partDescription` AS `partDescription`,  \n" +
      "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
      "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
      "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
      "        `a`.`internalComment` AS `internalComment`,  \n" +
      "        `a`.`partCategory` AS `partCategory`,  \n" +
      "        `a`.`serialNumber` AS `serialNumber`,  \n" +
      "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
      "        `a`.`poRevision` AS `poRevision`,  \n" +
      "        `a`.`partType` AS `partType`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
      "            ELSE `a`.`salesOrderDetStatus`  \n" +
      "        END) AS `salesOrderDetStatus`,  \n" +
      "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "        `a`.`frequency` AS `frequency`,  \n" +
      "        `a`.`refSODetID` AS `refSODetID`,  \n" +
      "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
      "        `a`.`originalPODate` AS `originalPODate`,  \n" +
      "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
      "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
      "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
      "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
      "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
      "        `a`.`frequencyType` AS `frequencyType`,  \n" +
      "        `a`.`assignQty` AS `assignQty`  \n" +
      "    FROM  \n" +
      "        (SELECT  \n" +
      "            `sm`.`id` AS `salesOrderId`,  \n" +
      "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
      "                `sm`.`poNumber` AS `poNumber`,  \n" +
      "                `sm`.`poDate` AS `poDate`,  \n" +
      "                `sm`.`customerID` AS `customerID`,  \n" +
      "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
      "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
      "                `sm`.`status` AS `status`,  \n" +
      "                `sm`.`revision` AS `revision`,  \n" +
      "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
      "                `sm`.`termsID` AS `termsID`,  \n" +
      "                `sm`.`soDate` AS `soDate`,  \n" +
      "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
      "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
      "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
      "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
      "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'No'  \n" +
      "                END) AS `blanketPOText`,  \n" +
      "                `sm`.`poRevision` AS `poRevision`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
      "                `co`.`PIDCode` AS `PIDCode`,  \n" +
      "                `co`.`mfgPN` AS `mfgPN`,  \n" +
      "                `co`.`rev` AS `rev`,  \n" +
      "                `co`.`nickName` AS `nickName`,  \n" +
      "                `co`.`liveVersion` AS `liveVersion`,  \n" +
      "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
      "                `co`.`isCustom` AS `isCustomPart`,  \n" +
      "                `co`.`partType` AS `partType`,  \n" +
      "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
      "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
      "                `cu`.`isCompany` AS `internalPO`,  \n" +
      "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
      "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
      "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
      "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "                `roh`.`name` AS `RoHSName`,  \n" +
      "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
      "                `a`.`qty` AS `qty`,  \n" +
      "                `a`.`id` AS `salesOrderDetailId`,  \n" +
      "                `a`.`kitNumber` AS `kitnumber`,  \n" +
      "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "                `a`.`partDescription` AS `partDescription`,  \n" +
      "                `a`.`partID` AS `partID`,  \n" +
      "                `a`.`isCancle` AS `isCancle`,  \n" +
      "                `a`.`isHotJob` AS `isHotJob`,  \n" +
      "                `a`.`cancleReason` AS `cancleReason`,  \n" +
      "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
      "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
      "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "                `a`.`remark` AS `remark`,  \n" +
      "                `a`.`price` AS `price`,  \n" +
      "                `a`.`mrpQty` AS `mrpQty`,  \n" +
      "                `a`.`kitQty` AS `kitQty`,  \n" +
      "                `a`.`shippingQty` AS `shippingQty`,  \n" +
      "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
      "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "                `a`.`internalComment` AS `internalComment`,  \n" +
      "                `a`.`partCategory` AS `partCategory`,  \n" +
      "                `a`.`lineID` AS `lineID`,  \n" +
      "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
      "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
      "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
      "                `soh`.`assignQty` AS `assignQty`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'NO'  \n" +
      "                END) AS `rmaPOText`,  \n" +
      "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'NO'  \n" +
      "                END) AS `legacyPOText`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
      "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
      "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
      "                    ELSE ''  \n" +
      "                END) AS `frequency`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
      "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
      "                    ELSE ''  \n" +
      "                END) AS `frequencyType`,  \n" +
      "                `a`.`refSODetID` AS `refSODetID`,  \n" +
      "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
      "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
      "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            ((((((((((((`salesordermst` `sm`  \n" +
      "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
      "            AND (`a`.`isDeleted` = 0)  \n" +
      "            AND (`sm`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
      "            AND (`cu`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
      "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
      "            AND (`mg`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
      "            AND (`roh`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
      "            AND (`cc`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
      "            AND (`gc`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
      "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
      "        FROM  \n" +
      "            (`customer_packingslip_det` `cpd`  \n" +
      "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
      "        WHERE  \n" +
      "            ((`cps`.`transType` = 'P')  \n" +
      "                AND (`cpd`.`isDeleted` = 0))  \n" +
      "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
      "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
      "        FROM  \n" +
      "            `workorder_salesorder_details` `x`  \n" +
      "        WHERE  \n" +
      "            (`x`.`isDeleted` = 0)  \n" +
      "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `ssm`.`sDetID` AS `sDetID`,  \n" +
      "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
      "        FROM  \n" +
      "            `salesshippingmst` `ssm`  \n" +
      "        WHERE  \n" +
      "            (`ssm`.`isDeleted` = 0)  \n" +
      "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
      "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
      "        FROM  \n" +
      "            `salesorderdet` `sod`  \n" +
      "        WHERE  \n" +
      "            (`sod`.`isDeleted` = 0)  \n" +
      "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
      "                `s`.`refAssyId` AS `refAssyId`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            (`salesorder_plan_detailsmst` `s`  \n" +
      "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
      "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
      "        WHERE  \n" +
      "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
  /* **************************** New Script -> 03-09-2021 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5206,'2.00','V1','Alter procedure Sproc_GetSalesorderList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
    case 5206:
    allDbChangesArray.push(
    /* **************************** New Script -> 03-09-2021 *********************************** */
        "DROP FUNCTION IF EXISTS `fun_getCustRefundSubStatusNameByID` ;  \n" +
       "CREATE FUNCTION `fun_getCustRefundSubStatusNameByID`(  \n" +
       "	pRefundSubStatusID INT(11)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
       "BEGIN  \n" +
       "	DECLARE result NVARCHAR(50);  \n" +
       "  \n" +
       "	SELECT (CASE WHEN (pRefundSubStatusID = 1) THEN 'Draft'  \n" +
       "		WHEN (pRefundSubStatusID = 2) THEN 'Published'  \n" +
       "		WHEN (pRefundSubStatusID = 3) THEN 'Ready to Print Check'  \n" +
       "		WHEN (pRefundSubStatusID = 4) THEN 'Refunded'  \n" +
       "			ELSE '' END) INTO @result;  \n" +
       "      	SET result = @result;  \n" +
       "	RETURN result;  \n" +
       "END;  \n" +
        /* **************************** New Script -> 03-09-2021 *********************************** */
        "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
        "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
        "    FOR EACH ROW BEGIN  \n" +
        "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
        "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
        "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
        "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
        "	DECLARE v_TimeZone VARCHAR(50);  \n" +
        "  \n" +
        "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
        "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
        "  \n" +
        "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
        "        INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
        "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
        "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,  \n" +
        "					NEW.paymentNumber,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
        "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
        "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
        "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),  \n" +
        "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
        "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
        "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
        "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
        "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
        "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
        "		  FROM genericcategory  \n" +
        "		 WHERE gencCategoryID = OLD.paymentType  \n" +
        "		 LIMIT 1;  \n" +
        "  \n" +
        "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
        "		  FROM genericcategory  \n" +
        "		 WHERE gencCategoryID = NEW.paymentType  \n" +
        "		 LIMIT 1;  \n" +
        "  \n" +
        "         INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Payment Method\",								vOldval,  \n" +
        "					vNewval,									OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 		(vTableName,									NEW.id,  \n" +
        "					\"Account Reference\",								OLD.accountReference,  \n" +
        "					NEW.accountReference,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
        "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
        "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,									NEW.id,  \n" +
        "					\"Bank Name\",								OLD.bankName,  \n" +
        "					NEW.bankName,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Comments\",									OLD.remark,  \n" +
        "					NEW.remark,									OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),  \n" +
        "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "			 VALUES 	(vTableName,									NEW.id,  \n" +
        "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
        "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
        "		IF NEW.isDeleted = TRUE THEN  \n" +
        "			SET vNewval = 'Deleted';  \n" +
        "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
        "			SET vNewval = 'Restored';  \n" +
        "		ELSE  \n" +
        "			SET vNewval = 'Unknown action on delete';  \n" +
        "        END IF;  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "                    Colname,									Oldval,  \n" +
        "                    Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,								NEW.id,  \n" +
        "                    vNewval,									NULL,  \n" +
        "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
        "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
        "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
        "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
        "				END;  \n" +
        "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
        "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
        "				END;  \n" +
        "        INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
        "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
        "						ELSE \"Payment Status\" END), 						vOldval,  \n" +
        "					vNewval,									OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "  \n" +
        "  \n" +
        "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "							(tableName,									refPaymentID,  \n" +
        "							Colname,									Oldval,  \n" +
        "							Newval,										createdAt,  \n" +
        "							createdBy,									createByRoleId,  \n" +
        "							updatedAt,									updatedBy,  \n" +
        "							updateByRoleId)  \n" +
        "				  VALUES 	(vTableName,										NEW.id,  \n" +
        "							\"Voided Date\",							'',  \n" +
        "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,  \n" +
        "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "  \n" +
        "  \n" +
        "			  INSERT INTO supplier_invoice_payment_history  \n" +
        "							(tableName,									refPaymentID,  \n" +
        "							Colname,									Oldval,  \n" +
        "							Newval,										createdAt,  \n" +
        "							createdBy,									createByRoleId,  \n" +
        "							updatedAt,									updatedBy,  \n" +
        "							updateByRoleId)  \n" +
        "				  VALUES 	(vTableName,										NEW.id,  \n" +
        "							\"Voided By\",									'',  \n" +
        "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,  \n" +
        "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		  END IF;  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
        "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
        "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
        "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
        "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
        "		INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
        "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
        "        INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
        "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
        "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
        "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
        "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
        "        INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Locked Date\",									'',  \n" +
        "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
        "        INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,										NEW.id,  \n" +
        "					\"Locked By\",									'',  \n" +
        "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "    END IF;  \n" +
        "  \n" +
        "  \n" +
        "  \n" +
        "  \n" +
        "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
        "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
        "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
        "				FROM mfgcodemst  \n" +
        "				WHERE id =OLD.mfgcodeID  \n" +
        "				ORDER BY id DESC LIMIT 1;  \n" +
        "			END IF;  \n" +
        "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
        "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
        "				FROM mfgcodemst  \n" +
        "				WHERE id =NEW.mfgcodeID  \n" +
        "				ORDER BY id DESC LIMIT 1;  \n" +
        "			END IF;  \n" +
        "			  INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,									refPaymentID,  \n" +
        "						Colname,									Oldval,  \n" +
        "						Newval,										createdAt,  \n" +
        "						createdBy,									createByRoleId,  \n" +
        "						updatedAt,									updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,										NEW.id,  \n" +
        "						\"Supplier\",									vOldval,  \n" +
        "						vNewval,												OLD.updatedAt,  \n" +
        "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		END IF;  \n" +
        "  \n" +
        "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,									refPaymentID,  \n" +
        "						Colname,									Oldval,  \n" +
        "						Newval,										createdAt,  \n" +
        "						createdBy,									createByRoleId,  \n" +
        "						updatedAt,									updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,										NEW.id,  \n" +
        "						\"Pay To name\",									OLD.payToName,  \n" +
        "						NEW.payToName,									OLD.updatedAt,  \n" +
        "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	    END IF;  \n" +
        "  \n" +
        "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,									refPaymentID,  \n" +
        "						Colname,									Oldval,  \n" +
        "						Newval,										createdAt,  \n" +
        "						createdBy,									createByRoleId,  \n" +
        "						updatedAt,									updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,										NEW.id,  \n" +
        "						\"Pay To Address\",									OLD.payToAddress,  \n" +
        "						NEW.payToAddress,								OLD.updatedAt,  \n" +
        "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	    END IF;  \n" +
        "  \n" +
        "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,									refPaymentID,  \n" +
        "						Colname,									Oldval,  \n" +
        "						Newval,										createdAt,  \n" +
        "						createdBy,									createByRoleId,  \n" +
        "						updatedAt,									updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,										NEW.id,  \n" +
        "						\"Bill To Name\",									OLD.billToName,  \n" +
        "						NEW.billToName,									OLD.updatedAt,  \n" +
        "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	    END IF;  \n" +
        "  \n" +
        "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,									refPaymentID,  \n" +
        "						Colname,									Oldval,  \n" +
        "						Newval,										createdAt,  \n" +
        "						createdBy,									createByRoleId,  \n" +
        "						updatedAt,									updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,										NEW.id,  \n" +
        "						\"Bill To Address\",								OLD.billToAddress,  \n" +
        "						NEW.billToAddress,								OLD.updatedAt,  \n" +
        "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
        "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	    END IF;  \n" +
        "  \n" +
        "  \n" +
        "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
        "  \n" +
        "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "						(tableName,						refPaymentID,  \n" +
        "						Colname,						Oldval,  \n" +
        "						Newval,							createdAt,  \n" +
        "						createdBy,						createByRoleId,  \n" +
        "						updatedAt,						updatedBy,  \n" +
        "						updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,							NEW.id,  \n" +
        "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
        "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
        "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "	    END IF;  \n" +
        "  \n" +
        "    END IF;  \n" +
        "  \n" +
        "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
        "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "			VALUES 	(vTableName,										NEW.id,  \n" +
        "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
        "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
        "						ELSE '' END),								OLD.offsetAmount,  \n" +
        "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
        "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		END IF;  \n" +
        "  \n" +
        "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,									refPaymentID,  \n" +
        "					Colname,									Oldval,  \n" +
        "					Newval,										createdAt,  \n" +
        "					createdBy,									createByRoleId,  \n" +
        "					updatedAt,									updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "		  VALUES 	(vTableName,								NEW.id,  \n" +
        "					\"COA\",  \n" +
        "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
        "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
        "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
        "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
        "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		END IF;  \n" +
        "    END IF;  \n" +
        "  \n" +
        "  \n" +
        "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
        "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,							refPaymentID,  \n" +
        "					Colname,							Oldval,  \n" +
        "					Newval,								createdAt,  \n" +
        "					createdBy,							createByRoleId,  \n" +
        "					updatedAt,							updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,							NEW.id,  \n" +
        "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
        "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
        "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		END IF;  \n" +
        "  \n" +
        "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
        "			INSERT INTO supplier_invoice_payment_history  \n" +
        "					(tableName,							refPaymentID,  \n" +
        "					Colname,							Oldval,  \n" +
        "					Newval,								createdAt,  \n" +
        "					createdBy,							createByRoleId,  \n" +
        "					updatedAt,							updatedBy,  \n" +
        "					updateByRoleId)  \n" +
        "			  VALUES 	(vTableName,							NEW.id,  \n" +
        "					\"Mark As Paid\",							fun_getIntToText(OLD.isMarkAsPaid),  \n" +
        "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
        "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
        "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
        "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
        "		END IF;  \n" +
        "    END IF;  \n" +
        "  \n" +
        "END;  \n" +
        /* **************************** New Script -> 03-09-2021 *********************************** */
        "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
        "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(  \n" +
        "	IN pPaymentMstID INT ,  \n" +
        "	IN pRefPaymentMode VARCHAR(10)  \n" +
        "    )  \n" +
        "BEGIN  \n" +
        "  \n" +
        "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
        "		DECLARE v_TimeZone VARCHAR(50);  \n" +
        "		DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
        "		DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
        "		DECLARE v_FieldsForCustPayment VARCHAR(1000);  \n" +
        "  \n" +
        "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
        "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
        "		SET v_PayRefundTblJoin = '';  \n" +
        "		SET v_FieldsForPayStatus = '\"\"';  \n" +
        "		SET v_FieldsForCustPayment = '';  \n" +
        "  \n" +
        "		IF (pRefPaymentMode = 'R') THEN  \n" +
        "			SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
        "									FROM packingslip_invoice_payment_det  \n" +
        "									WHERE refRefundPaymentID = ',pPaymentMstID,'  \n" +
        "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
        "									GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
        "								ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
        "  \n" +
        "			SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
        "											(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
        "										(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
        "											ELSE \"No Pending Amount\" END)  \n" +
        "								ELSE  \n" +
        "									(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
        "										THEN \"Not Applied\"  \n" +
        "										ELSE \"Partially Applied\" END)  \n" +
        "								END) ') ;  \n" +
        "  \n" +
        "			SET v_FieldsForCustPayment = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
        "  \n" +
        "		END IF;  \n" +
        "  \n" +
        "  \n" +
        "		SET @v_querySt = CONCAT(\"  \n" +
        "		SELECT 	psip.id,  \n" +
        "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
        "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
        "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
        "			psip.refGencTransModeID ,  \n" +
        "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
        "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
        "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
        "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') AS lockedAt,  \n" +
        "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
        "			\", v_FieldsForCustPayment,\"  \n" +
        "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
        "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,  \n" +
        "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL  \n" +
        "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)  \n" +
        "					END) AS refPaymentNumFromTransInitiate ,  \n" +
        "			psip.refPaymentID  ,  \n" +
        "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id  \n" +
        "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedOfPayment ,  \n" +
        "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
        "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
        "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
        "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
        "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
        "		FROM packingslip_invoice_payment psip  \n" +
        "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,  \n" +
        "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
        "				    FROM packingslip_invoice_payment_det psipd  \n" +
        "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
        "											AND cps.isDeleted = 0  \n" +
        "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
        "				     AND psipd.isDeleted = 0  \n" +
        "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
        "				ON psip.id = invPayDetTemp.refPayementid  \n" +
        "			\", v_PayRefundTblJoin ,\"  \n" +
        "		WHERE psip.id = \",pPaymentMstID,\"  \n" +
        "		AND psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
        "		AND psip.isDeleted = 0  \n" +
        "		\");  \n" +
        "  \n" +
        "  \n" +
        "		PREPARE query1 FROM @v_querySt;  \n" +
        "		EXECUTE query1;  \n" +
        "		DEALLOCATE PREPARE query1;  \n" +
        "  \n" +
        "  \n" +
        "	END;  \n" +
        /* **************************** New Script -> 03-09-2021 *********************************** */
        "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
        "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
        "	IN pCustCreditMemoMstID INT ,  \n" +
        "	IN pCustomerPaymentMstID INT  \n" +
        "    )  \n" +
        "BEGIN  \n" +
        "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
        "		DECLARE v_TimeZone VARCHAR(50);  \n" +
        "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
        "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
        "  \n" +
        "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
        "			cps.totalAmount ,  cps.agreedRefundAmt ,  \n" +
        "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
        "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
        "			psip.paymentNumber ,  \n" +
        "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
        "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
        "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
        "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
        "			cps.paymentStatus AS CMPaymentStatus,  \n" +
        "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
        "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
        "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
        "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
        "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
        "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
        "	FROM customer_packingslip AS cps  \n" +
        "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
        "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
        "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
        "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
        "	WHERE cps.id = pCustCreditMemoMstID  \n" +
        "	AND cps.isDeleted = 0  \n" +
        "		;  \n" +
        "END;  \n" +
        /* **************************** Add Script Version -> 03-09-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5207,'2.00','V1',' refund sp and history trigger - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
    break;
        case 5207:
        allDbChangesArray.push(
        /* **************************** New Script -> 03-09-2021 *********************************** */
        "UPDATE page_detail  \n" +
            "SET pageURL = '/customerrefundlist'  \n" +
            "WHERE pageRoute = 'app.transaction.customerrefund' ;  \n" +
        /* **************************** Add Script Version -> 03-09-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5208,'2.00','V1',' update page_detail entry for customer refund - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5208:
        allDbChangesArray.push(
        /* **************************** New Script -> 06-09-2021 *********************************** */
        "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
        "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
        "	DECLARE pOldValue TEXT;  \n" +
        "	DECLARE pNewValue TEXT;  \n" +
        "    DECLARE pLabelValue TEXT;  \n" +
        "  \n" +
        "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
        "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
        "		FROM mfgcodemst  \n" +
        "		WHERE id =NEW.mfgcodeID  \n" +
        "		ORDER BY id DESC LIMIT 1;  \n" +
        "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
        "  \n" +
        "       INSERT INTO Component_History  \n" +
        "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
        "		Oldval, 			Newval, 			createdBy,  \n" +
        "		createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
        "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
        "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
        "       INSERT INTO Component_History  \n" +
        "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
        "		Oldval, 			Newval, 			createdBy,  \n" +
        "		createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
        "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
        "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
        "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
        "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
        "		FROM mfgcodemst  \n" +
        "		WHERE id =OLD.mfgcodeID  \n" +
        "		ORDER BY id DESC LIMIT 1;  \n" +
        "	END IF;  \n" +
        "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
        "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
        "		FROM mfgcodemst  \n" +
        "		WHERE id =NEW.mfgcodeID  \n" +
        "		ORDER BY id DESC LIMIT 1;  \n" +
        "	END IF;  \n" +
        "       INSERT INTO Component_History  \n" +
        "		(refComponentID,                tableName,                 	Colname,  \n" +
        "		Oldval, 			Newval, 			createdBy,  \n" +
        "		createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
        "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Description',  \n" +
        "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
        "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
        "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
        "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
        "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_rohsmst  \n" +
        "			WHERE id =OLD.RoHSStatusID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_rohsmst  \n" +
        "			WHERE id =NEW.RoHSStatusID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
        "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
        "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
        "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
        "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
        "										'Correct Part'  \n" +
        "								WHEN OLD.isGoodPart = 2 THEN  \n" +
        "										'Incorrect Part'  \n" +
        "								WHEN OLD.isGoodPart = 3 THEN  \n" +
        "										'TBD Part'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
        "										'Correct Part'  \n" +
        "								WHEN NEW.isGoodPart = 2 THEN  \n" +
        "										'Incorrect Part'  \n" +
        "								WHEN NEW.isGoodPart = 3 THEN  \n" +
        "										'TBD Part'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
        "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
        "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby)  \n" +
        "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
        "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
        "	END IF;*/  \n" +
        "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
        "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
        "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
        "		IF OLD.uom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =OLD.uom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.uom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =NEW.uom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
        "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_mountingtypemst  \n" +
        "			WHERE id =OLD.mountingTypeID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "  \n" +
        "			FROM rfq_mountingtypemst  \n" +
        "			WHERE id =NEW.mountingTypeID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
        "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
        "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_packagecasetypemst  \n" +
        "			WHERE id =OLD.partPackageID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_packagecasetypemst  \n" +
        "			WHERE id =NEW.partPackageID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
        "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Min',  \n" +
        "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
        "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
        "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
        "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
        "		IF OLD.category IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_partcategory  \n" +
        "			WHERE id =OLD.category  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.category IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_partcategory  \n" +
        "			WHERE id =NEW.category  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
        "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
        "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
        "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
        "			FROM component  \n" +
        "			WHERE id =OLD.replacementPartID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
        "			FROM component  \n" +
        "			WHERE id =NEW.replacementPartID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
        "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
        "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Value',  \n" +
        "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
        "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
        "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
        "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
        "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_parttypemst  \n" +
        "			WHERE id =OLD.functionalCategoryID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_parttypemst  \n" +
        "			WHERE id =NEW.functionalCategoryID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
        "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Length',  \n" +
        "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Width',  \n" +
        "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Height',  \n" +
        "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
        "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
        "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
        "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
        "		IF OLD.partStatus IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM component_partstatusmst  \n" +
        "			WHERE id = OLD.partStatus  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.partStatus IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM component_partstatusmst  \n" +
        "			WHERE id = NEW.partStatus  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
        "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
        "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
        "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
        "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
        "			CAST(OLD.updatedAtApi AS CHAR),	CAST(NEW.updatedAtApi AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
        "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
        "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
        "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
        "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
        "		IF OLD.isCustom IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isCustom = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isCustom IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isCustom = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
        "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
        "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
        "		IF OLD.mslID IS NOT NULL THEN  \n" +
        "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
        "			FROM component_mslmst  \n" +
        "			WHERE id =OLD.mslID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.mslID IS NOT NULL THEN  \n" +
        "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
        "			FROM component_mslmst  \n" +
        "			WHERE id =NEW.mslID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
        "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_connectertypemst  \n" +
        "			WHERE id =OLD.connecterTypeID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_connectertypemst  \n" +
        "			WHERE id =NEW.connecterTypeID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
        "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
        "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
        "			FROM cost_category  \n" +
        "			WHERE id =OLD.costCategoryID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
        "			FROM cost_category  \n" +
        "			WHERE id =NEW.costCategoryID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
        "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
        "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
        "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
        "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
        "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
        "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
        "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
        "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
        "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
        "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
        "		IF OLD.bomLock IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.bomLock = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.bomLock IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.bomLock = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
        "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
        "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
        "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
        "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
        "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
        "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
        "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
        "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
        "		IF OLD.customerID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
        "			FROM mfgcodemst  \n" +
        "			WHERE id =OLD.customerID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.customerID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
        "			FROM mfgcodemst  \n" +
        "			WHERE id =NEW.customerID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
        "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
        "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
        "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
        "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
        "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
        "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
        "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
        "		IF OLD.isCPN IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isCPN = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isCPN IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isCPN = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
        "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
        "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
        "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
        "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
        "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
        "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.programingRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.programingRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
        "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
        "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
        "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
        "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
        "		IF OLD.partType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_partcategory  \n" +
        "			WHERE id =OLD.partType  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.partType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_partcategory  \n" +
        "			WHERE id =NEW.partType  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
        "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
        "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
        "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
        "											'Yes'  \n" +
        "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
        "											'No'  \n" +
        "									ELSE '' END;  \n" +
        "			END IF;  \n" +
        "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
        "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
        "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
        "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
        "											'Yes'  \n" +
        "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
        "											'No'  \n" +
        "									ELSE '' END;  \n" +
        "			END IF;  \n" +
        "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
        "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
        "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
        "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
        "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
        "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
        "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
        "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
        "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
        "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
        "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
        "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
        "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
        "		INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
        "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Color',  \n" +
        "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
        "		IF OLD.partType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
        "				FROM component  \n" +
        "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.partType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
        "				FROM component  \n" +
        "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
        "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
        "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
        "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
        "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
        "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
        "											'Yes'  \n" +
        "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
        "											'No'  \n" +
        "									ELSE '' END;  \n" +
        "			END IF;  \n" +
        "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
        "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
        "		IF OLD.packagingID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM component_packagingmst  \n" +
        "			WHERE id =OLD.packagingID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.packagingID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM component_packagingmst  \n" +
        "			WHERE id =NEW.packagingID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
        "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
        "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
        "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
        "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
        "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
        "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
        "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
        "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =OLD.grossWeightUom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =NEW.grossWeightUom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
        "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
        "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =OLD.packagingWeightUom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
        "			FROM uoms  \n" +
        "			WHERE id =NEW.packagingWeightUom  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
        "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
        "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
        "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
        "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM measurement_types  \n" +
        "			WHERE id =OLD.uomClassID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM measurement_types  \n" +
        "			WHERE id =NEW.uomClassID  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
        "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,        tableName,          Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
        "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
        "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
        "										'No'  \n" +
        "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
        "										'With Approval'  \n" +
        "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
        "										'Yes'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
        "										'No'  \n" +
        "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
        "										'With Approval'  \n" +
        "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
        "										'Yes'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,        tableName,          Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
        "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
        "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
        "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
        "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
        "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
        "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
        "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
        "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.rfqOnly = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.rfqOnly = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
        "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
        "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 				Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
        "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'MISC Comment',  \n" +
        "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
        "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
        "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "  \n" +
        "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Detailed Description',  \n" +
        "			CAST(OLD.detailDescription AS CHAR),	CAST(NEW.detailDescription AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
        "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
        "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
        "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
        "			FROM rfq_assy_typemst  \n" +
        "			WHERE id =OLD.assemblyType  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
        "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
        "			FROM rfq_assy_typemst  \n" +
        "			WHERE id =NEW.assemblyType  \n" +
        "			ORDER BY id DESC LIMIT 1;  \n" +
        "		END IF;  \n" +
        "       INSERT INTO Component_History  \n" +
        "		(refComponentID,                tableName,                 	Colname,  \n" +
        "		Oldval, 			Newval, 			createdBy,  \n" +
        "		createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
        "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
        "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
        "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
        "    THEN  \n" +
        "		-- Create string for Old configure value for Flux Type  \n" +
        "		set pOldValue = '';  \n" +
        "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
        "			set pOldValue = 'Not Applicable';  \n" +
        "		END IF;  \n" +
        "        IF(OLD.isNoClean = 1) THEN  \n" +
        "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
        "		END IF;  \n" +
        "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
        "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
        "		END IF;  \n" +
        "  \n" +
        "        -- Create string for New configure value for Flux Type  \n" +
        "        set pNewValue = '';  \n" +
        "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
        "			set pNewValue = 'Not Applicable';  \n" +
        "		END IF;  \n" +
        "        IF(NEW.isNoClean = 1) THEN  \n" +
        "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
        "		END IF;  \n" +
        "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
        "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
        "		END IF;  \n" +
        "  \n" +
        "       INSERT INTO Component_History  \n" +
        "		(refComponentID,                tableName,                 	Colname,  \n" +
        "		Oldval, 			Newval, 			createdBy,  \n" +
        "		createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
        "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
        "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
        "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
        "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
        "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
        "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
        "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
        "										'Yes'  \n" +
        "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
        "										'No'  \n" +
        "								ELSE '' END;  \n" +
        "		END IF;  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
        "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
        "	       INSERT INTO Component_History  \n" +
        "			(refComponentID,                tableName,                 	Colname,  \n" +
        "			Oldval, 			Newval, 			createdBy,  \n" +
        "			createdAt,  			updatedAt, 			Updatedby,  \n" +
        "        createByRoleId,		updateByRoleId)  \n" +
        "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
        "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
        "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
        "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
        "	END IF;  \n" +
        "END;  \n" +
        /* **************************** Add Script Version -> 06-09-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5209,'2.00','V1',' Bug 36521: Showing wrong label in Part history for Functional Testing Time - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;

        case 5209:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "alter table assemblystock add column refSalesOrderDetID int;  \n" +
              "  \n" +
              "alter table assemblystock add column refSalesOrderID int;  \n" +
              "  \n" +
              "alter table assemblystock add column isPOAdded tinyint default 0;  \n" +
              "  \n" +
              "ALTER TABLE `assemblystock`  \n" +
              "ADD CONSTRAINT `FK_assemblystock_refSalesOrderDetID`  \n" +
              "  FOREIGN KEY (`refSalesOrderDetID`)  \n" +
              "  REFERENCES `salesorderdet` (`id`);  \n" +
              "  \n" +
              "select chartRawDataCatID into @chartCatID from chart_rawdata_category where dbViewName = 'vu_salesorder_shipped_report'; \n" +
              "  \n" +
              "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `aggregate`, `dataType`, `isActive`, `createdBy`, `isDeleted`, `isStaticField`, `displayOrder`, `fieldWidth`)  \n" +
              "VALUES (@chartCatID, 'IsLegacyPOText', 'Legacy PO', 'GROUP', 'varchar', '1', '1', '0', '1', '5.5', '110');  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5210,'2.00','V1','Add isPOAdded & SO Id Column to assemblystock And Entry for MIS Report new column  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5210:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP VIEW IF EXISTS vu_workorder_soponumber_details;  \n" +
              "CREATE VIEW `vu_workorder_soponumber_details` AS  \n" +
              "    SELECT  \n" +
              "        `wosodet`.`woID` AS `woID`,  \n" +
              "        `sodet`.`partID` AS `partID`,  \n" +
              "        GROUP_CONCAT(`som`.`poNumber`  \n" +
              "            SEPARATOR ',') AS `poNumber`,  \n" +
              "        GROUP_CONCAT(`som`.`salesOrderNumber`  \n" +
              "            SEPARATOR ',') AS `salesOrderNumber`  \n" +
              "    FROM  \n" +
              "        ((`workorder_salesorder_details` `wosodet`  \n" +
              "        LEFT JOIN `salesorderdet` `sodet` ON (((`wosodet`.`salesOrderDetailID` = `sodet`.`id`)  \n" +
              "            AND (`sodet`.`isDeleted` = 0))))  \n" +
              "        LEFT JOIN `salesordermst` `som` ON (((`sodet`.`refSalesOrderID` = `som`.`id`)  \n" +
              "            AND (`som`.`isDeleted` = 0))))  \n" +
              "    WHERE  \n" +
              "        (`wosodet`.`isDeleted` = 0)  \n" +
              "    GROUP BY `wosodet`.`woID` , `sodet`.`partID`  \n" +
              "    UNION ALL SELECT  \n" +
              "        `ass`.`woNumber` AS `woID`,  \n" +
              "        `ass`.`partID` AS `partID`,  \n" +
              "        GROUP_CONCAT(`ass`.`poNumber`  \n" +
              "            SEPARATOR ',') AS `poNumber`,  \n" +
              "        GROUP_CONCAT(`ass`.`soNumber`  \n" +
              "            SEPARATOR ',') AS `salesOrderNumber`  \n" +
              "    FROM  \n" +
              "        `assemblystock` `ass`  \n" +
              "    WHERE  \n" +
              "        ((`ass`.`isDeleted` = 0)  \n" +
              "            AND (`ass`.`type` = 'OS'))  \n" +
              "    GROUP BY `ass`.`woNumber` , `ass`.`partID`;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5211,'2.00','V1','  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5211:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP VIEW IF EXISTS vu_salesorder_shipped_report;  \n" +
              "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
              "    SELECT  \n" +
              "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
              "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
              "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
              "        `a`.`poNumber` AS `Po Number`,  \n" +
              "        `a`.`poDate` AS `Po Date`,  \n" +
              "        `a`.`customerID` AS `Customer ID`,  \n" +
              "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
              "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
              "        `a`.`status` AS `Sales Order Status`,  \n" +
              "        `a`.`revision` AS `Revision`,  \n" +
              "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
              "        `a`.`termsID` AS `Terms ID`,  \n" +
              "        `a`.`soDate` AS `So Date`,  \n" +
              "        `a`.`partID` AS `PartID`,  \n" +
              "        `a`.`PIDCode` AS `Assy ID`,  \n" +
              "        `a`.`mfgPN` AS `Assy Name`,  \n" +
              "        `a`.`rev` AS `Assy Revision`,  \n" +
              "        `a`.`nickName` AS `NickName`,  \n" +
              "        `a`.`liveVersion` AS `liveVersion`,  \n" +
              "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
              "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
              "        `a`.`qty` AS `PO Qty`,  \n" +
              "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
              "        `a`.`shippingQty` AS `shippingQty`,  \n" +
              "        `a`.`companyCode` AS `Company Code`,  \n" +
              "        `a`.`companyName` AS `Company Name`,  \n" +
              "        `a`.`fullName` AS `Full Name`,  \n" +
              "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
              "        `a`.`isCancle` AS `isCancle`,  \n" +
              "        `a`.`cancleReason` AS `cancleReason`,  \n" +
              "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
              "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
              "        `a`.`shippingDate` AS `shippingDate`,  \n" +
              "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
              "        `a`.`remark` AS `remark`,  \n" +
              "        `a`.`price` AS `price`,  \n" +
              "        `a`.`mrpQty` AS `mrpQty`,  \n" +
              "        `a`.`kitQty` AS `kitQty`,  \n" +
              "        `a`.`isHotJob` AS `isHotJob`,  \n" +
              "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
              "        `a`.`RoHSName` AS `RoHSName`,  \n" +
              "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
              "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
              "        (CASE  \n" +
              "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
              "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'In Progress'  \n" +
              "            ELSE 'Completed'  \n" +
              "        END) AS `Status`,  \n" +
              "        `a`.`modifyDate` AS `modifyDate`,  \n" +
              "        `a`.`createdDate` AS `createdDate`,  \n" +
              "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
              "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
              "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
              "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
              "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
              "        `a`.`kitNumber` AS `kitNumber`,  \n" +
              "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
              "        `a`.`lineID` AS `lineID`,  \n" +
              "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
              "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
              "        `a`.`isLegacyPOText` AS `IsLegacyPOText`  \n" +
              "    FROM  \n" +
              "        (SELECT  \n" +
              "            `sm`.`id` AS `salesOrderId`,  \n" +
              "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
              "                `sm`.`poNumber` AS `poNumber`,  \n" +
              "                `sm`.`poDate` AS `poDate`,  \n" +
              "                `sm`.`customerID` AS `customerID`,  \n" +
              "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
              "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
              "                `sm`.`status` AS `status`,  \n" +
              "                `sm`.`revision` AS `revision`,  \n" +
              "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
              "                `sm`.`termsID` AS `termsID`,  \n" +
              "                `sm`.`soDate` AS `soDate`,  \n" +
              "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
              "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
              "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
              "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
              "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
              "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
              "                (SELECT  \n" +
              "                        1  \n" +
              "                    FROM  \n" +
              "                        `workorder_salesorder_details` `x`  \n" +
              "                    WHERE  \n" +
              "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
              "                            AND (`x`.`isDeleted` = 0))  \n" +
              "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
              "                `co`.`PIDCode` AS `PIDCode`,  \n" +
              "                `co`.`mfgPN` AS `mfgPN`,  \n" +
              "                `co`.`rev` AS `rev`,  \n" +
              "                `co`.`nickName` AS `nickName`,  \n" +
              "                `co`.`liveVersion` AS `liveVersion`,  \n" +
              "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
              "                `co`.`isCustom` AS `isCustomPart`,  \n" +
              "                `cu`.`mfgCode` AS `companyCode`,  \n" +
              "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
              "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
              "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
              "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
              "                `roh`.`name` AS `RoHSName`,  \n" +
              "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
              "                `a`.`qty` AS `qty`,  \n" +
              "                `a`.`id` AS `salesOrderDetailId`,  \n" +
              "                `a`.`kitNumber` AS `kitNumber`,  \n" +
              "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
              "                `a`.`partID` AS `partID`,  \n" +
              "                `a`.`isCancle` AS `isCancle`,  \n" +
              "                `a`.`isHotJob` AS `isHotJob`,  \n" +
              "                `a`.`cancleReason` AS `cancleReason`,  \n" +
              "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
              "                (SELECT  \n" +
              "                        MIN(`ssm`.`shippingDate`)  \n" +
              "                    FROM  \n" +
              "                        `salesshippingmst` `ssm`  \n" +
              "                    WHERE  \n" +
              "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
              "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
              "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
              "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
              "                `a`.`remark` AS `remark`,  \n" +
              "                `a`.`price` AS `price`,  \n" +
              "                `a`.`mrpQty` AS `mrpQty`,  \n" +
              "                `a`.`kitQty` AS `kitQty`,  \n" +
              "                `a`.`shippingQty` AS `shippingQty`,  \n" +
              "                (SELECT  \n" +
              "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
              "                    FROM  \n" +
              "                        `shippedassembly`  \n" +
              "                    WHERE  \n" +
              "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
              "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
              "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
              "                                `salesshippingmst`.`shippingID`  \n" +
              "                            FROM  \n" +
              "                                `salesshippingmst`  \n" +
              "                            WHERE  \n" +
              "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
              "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
              "                `a`.`lineID` AS `lineID`,  \n" +
              "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
              "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
              "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`  \n" +
              "        FROM  \n" +
              "            ((((((`salesorderdet` `a`  \n" +
              "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
              "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
              "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
              "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
              "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
              "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
              "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
              "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
              "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
              "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
              "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
              "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
              "        WHERE  \n" +
              "            ((`a`.`isDeleted` = 0)  \n" +
              "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5212,'2.00','V1','vu_salesorder_shipped_report  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5212:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPOStockDetails;  \n" +
              "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
              "	IN ppageIndex INT,  \n" +
              "	IN pRecordPerPage INT,  \n" +
              "	IN pOrderBy VARCHAR(255),  \n" +
              "	IN pWhereClause VARCHAR(16383),  \n" +
              "	IN pPartID INT ,  \n" +
              "    IN pIsShowAllPO tinyint)  \n" +
              "BEGIN  \n" +
              "	DECLARE pOffset INT;  \n" +
              "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
              "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
              "	DECLARE v_TimeZone VARCHAR(50);  \n" +
              "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
              "    DECLARE whereClause1 VARCHAR(500);  \n" +
              "	SET whereClause1 = \"where 1=1\";  \n" +
              "  \n" +
              "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
              "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
              "  \n" +
              "    IF pPartID IS NOT NULL THEN  \n" +
              "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
              "	END IF;  \n" +
              "  \n" +
              "    IF !pIsShowAllPO THEN  \n" +
              "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
              "	ELSE  \n" +
              "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
              "	select a.salesOrderDetailId,  \n" +
              "		a.soID,  \n" +
              "		a.poNumber,  \n" +
              "		a.poDate,  \n" +
              "		a.soNumber,  \n" +
              "		a.PartID,  \n" +
              "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
              "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
              "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
              "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
              "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
              "			ELSE 0 END) AS excessShipQty,  \n" +
              "		a.buildQty,  \n" +
              "        a.woCount ,a.isLegacyPO,a.IsLegacyPOText  \n" +
              "        from (SELECT  \n" +
              "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
              "				vu_ssr.`Sales Order ID` soID,  \n" +
              "				vu_ssr.`Po Number` poNumber,  \n" +
              "				vu_ssr.`Po Date` poDate,  \n" +
              "				vu_ssr.`Sales Order` soNumber,  \n" +
              "				vu_ssr.`PO Qty` poQty,  \n" +
              "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
              "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
              "				vu_ssr.`PartID` PartID,  \n" +
              "				ka.perAssyBuildQty AS    qpa,  \n" +
              "                vu_ssr.`Status` status,  \n" +
              "				vu_ssr.`lineID` lineID,  \n" +
              "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
              "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
              "                FROM workorder_salesorder_details wsd  \n" +
              "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
              "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
              "                 (select count(vwss.woNumber) from  vu_workorder_summary_stk vwss  \n" +
              "                JOIN vu_workorder_sopoNumber_details vwsd ON vwsd.woID =  ifnull(vwss.woID,vwss.woNumber) and vwsd.partID = vwss.partID  \n" +
              "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
              "                where FIND_IN_SET (vu_ssr.`Po Number`,vwsd.poNumber)  \n" +
              "                and vwss.partID = \",pPartID , \"  \n" +
              "                and (CASE WHEN vwss.woid IS NULL THEN ((vwss.readytoShipQty + vwss.shippedQty + vwss.stockAdjustmentQty) - (vwss.shippedQty)) ELSE ((vwss.buildQty) - (vwss.scrapQty + vwss.shippedQty + vwss.readytoShipQty)) END) >  0)   woCount  ,  \n" +
              "				vu_ssr.isLegacyPO,vu_ssr.IsLegacyPOText  \n" +
              "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
              "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);  \n" +
              "  \n" +
              "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
              "	ELSE  \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
              "	END IF;  \n" +
              "  \n" +
              "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
              "		SET pWhereClause = '1=1' ;  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
              "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
              "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
              "	ELSE  \n" +
              "		SET rowNumWhere = '';  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
              "	-- select @SQLStatement1;  \n" +
              "	PREPARE query1 FROM @SQLStatement1;  \n" +
              "	EXECUTE query1;  \n" +
              "	DEALLOCATE PREPARE query1;  \n" +
              "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
              "   -- select @SQLStatement2;  \n" +
              "	PREPARE query2 FROM @SQLStatement2;  \n" +
              "	EXECUTE query2;  \n" +
              "	DEALLOCATE PREPARE query2;  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5213,'2.00','V1','Sproc_GetAssemblyPOStockDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          
          case 5213:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
              "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
              "	IN ppageIndex INT,  \n" +
              "	IN pRecordPerPage INT,  \n" +
              "	IN pOrderBy VARCHAR(255),  \n" +
              "	IN pWhereClause VARCHAR(16383),  \n" +
              "	IN pPartID INT,  \n" +
              "	IN pWoID INT ,  \n" +
              "    IN pPONumber VARCHAR(255),  \n" +
              "    IN pIsShowAllWO tinyint)  \n" +
              "BEGIN  \n" +
              "	DECLARE pOffset INT;  \n" +
              "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
              "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
              "	DECLARE v_TimeZone VARCHAR(50);  \n" +
              "	DECLARE whereClause1 VARCHAR(500);  \n" +
              "	SET whereClause1 = \"where 1=1\";  \n" +
              "  \n" +
              "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
              "		SET pWhereClause = '1=1' ;  \n" +
              "	END IF;  \n" +
              "  \n" +
              "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
              "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
              "  \n" +
              "    IF pPartID IS NOT NULL THEN  \n" +
              "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
              "	END IF;  \n" +
              "  \n" +
              "    IF pWoID IS NOT NULL THEN  \n" +
              "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
              "	END IF;  \n" +
              "  \n" +
              "    IF (pPONumber IS NOT NULL) THEN  \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\"');  \n" +
              "	end if;  \n" +
              "  \n" +
              "     IF (!pIsShowAllWO)  THEN  \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
              "    END IF;  \n" +
              "  \n" +
              "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
              "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
              "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
              "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
              "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
              "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
              "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ',')  \n" +
              "									 else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) FROM `assemblystock`  WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
              "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
              "						   END) poNumber,  \n" +
              "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
              "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
              "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  \n" +
              "									FROM `assemblystock` WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
              "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
              "                            END) soNumbers,  \n" +
              "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
              "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
              "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
              "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
              "					FROM vu_workorder_summary_stk vu_wss  \n" +
              "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
              "								ON vu_wss.woid = wo.woMstID  \n" +
              "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
              "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
              "					\", whereClause1);  \n" +
              "  \n" +
              "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
              "	ELSE  \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
              "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
              "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
              "	ELSE  \n" +
              "		SET rowNumWhere = '';  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
              "	-- select @SQLStatement1;  \n" +
              "	PREPARE query1 FROM @SQLStatement1;  \n" +
              "	EXECUTE query1;  \n" +
              "	DEALLOCATE PREPARE query1;  \n" +
              "  \n" +
              "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
              "	PREPARE query2 FROM @SQLStatement2;  \n" +
              "	EXECUTE query2;  \n" +
              "	DEALLOCATE PREPARE query2;  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5214,'2.00','V1','  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5214:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "drop PROCEDURE IF EXISTS Sproc_GetAssemblyStock;  \n" +
              "CREATE PROCEDURE `Sproc_GetAssemblyStock`(  \n" +
              "	IN ppageIndex INT,  \n" +
              "	IN precordPerPage INT,  \n" +
              "	IN pOrderBy VARCHAR(255),  \n" +
              "    IN pWhereClause VARCHAR(16383),  \n" +
              "    IN pStockType VARCHAR(50)  \n" +
              "    )  \n" +
              "BEGIN  \n" +
              "	DECLARE pOffset INT;  \n" +
              "	DECLARE rowNumWhere VARCHAR(255);  \n" +
              "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
              "	DECLARE v_TimeZone VARCHAR(50);  \n" +
              "  \n" +
              "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
              "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
              "  \n" +
              "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" Select ass.id ,ass.openingdate,  \n" +
              "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
              "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
              "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.woID, ass.serialNo,  \n" +
              "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
              "			ass.parentWarehouse,  \n" +
              "			ass.systemGeneratedsss,ass.typestock,  \n" +
              "			ass.dateCode, ifnull(ass.dateCodeFormat, wo.dateCodeFormat) dateCodeFormat,  \n" +
              "			ass.updatedby,ass.createdby,  \n" +
              "			ass.createdbyRole, ass.updatedbyRole,  \n" +
              "			ass.createdAt, ass.updatedAt,  \n" +
              "			ass.qtyBox,  \n" +
              "            ifnull(ass.poQty, SUM(`wsd`.`poQty`)) AS `totalPOQty`,  \n" +
              "			ifnull(ass.poNumber, GROUP_CONCAT(`so`.`poNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `poNumber`,  \n" +
              "			ifnull(ass.soNumber, GROUP_CONCAT(`so`.`salesOrderNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `salesOrderNumber`,  \n" +
              "            ass.refSalesOrderDetID , ass.soID , ass.isLegacyPO , ass.isLegacyPOText,  \n" +
              "            ass.isPOAdded, ass.isPOAddedText  \n" +
              "			from (SELECT s.id, s.openingdate,  \n" +
              "				c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,  \n" +
              "				c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,  \n" +
              "				ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,  \n" +
              "				s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,  \n" +
              "				fun_getDepartmentNameByBinID(s.binID) parentWarehouse,  \n" +
              "				(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,  \n" +
              "				fun_getStockType(s.type) typestock,  \n" +
              "				s.dateCode,s.dateCodeFormat,  \n" +
              "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
              "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
              "				fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
              "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
              "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
              "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
              "				  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox,  \n" +
              "				   s.poQty,s.poNumber,s.soNumber,  \n" +
              "				  s.type,s.woID ,s.refSalesOrderDetID , s.refSalesOrderID soID, legcySO.isLegacyPO,  \n" +
              "                  fun_getIntToText(ifnull(legcySO.isLegacyPO,0)) isLegacyPOText,  \n" +
              "                  s.isPOAdded ,  \n" +
              "                  fun_getIntToText(ifnull(s.isPOAdded,0)) isPOAddedText  \n" +
              "			FROM assemblystock s  \n" +
              "			JOIN component c ON c.id = s.partID AND c.category = 3  \n" +
              "			LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
              "            LEFT JOIN salesordermst legcySO on legcySO.id = s.refSalesOrderID and legcySO.isDeleted = 0  \n" +
              "			WHERE s.isdeleted = 0  \n" +
              "		) ass  \n" +
              "        LEFT JOIN workorder_salesorder_details wsd ON wsd.woID = ass.woID and wsd.partID = ass.partID and wsd.isDeleted = 0  \n" +
              "        LEFT JOIN workorder wo ON wo.woID = ass.woID and wo.isDeleted = 0  \n" +
              "        LEFT JOIN salesorderdet sod ON sod.id = wsd.salesOrderDetailID and wsd.partID = sod.partID and sod.isDeleted = 0  \n" +
              "        LEFT JOIN salesordermst so ON so.id = sod.refSalesOrderID and so.isDeleted = 0  \n" +
              "        where FIND_IN_SET(ass.type,'\",pStockType,\"')  \n" +
              "        group by ass.id ,ass.openingdate,  \n" +
              "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
              "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
              "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.serialNo,  \n" +
              "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
              "			ass.parentWarehouse,  \n" +
              "			ass.systemGeneratedsss,ass.typestock,  \n" +
              "			ass.dateCode,ass.dateCodeFormat,  \n" +
              "			ass.updatedby,ass.createdby,  \n" +
              "			ass.createdbyRole, ass.updatedbyRole,  \n" +
              "			ass.createdAt, ass.updatedAt,  \n" +
              "			ass.qtyBox\");  \n" +
              "  \n" +
              "		IF (pOrderBy IS NOT NULL) THEN  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
              "		ELSE  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");  \n" +
              "		END IF;  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
              "			SET pWhereClause = '1=1';  \n" +
              "		END IF;  \n" +
              "  \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
              "		ELSE  \n" +
              "			SET rowNumWhere = '';  \n" +
              "		END IF;  \n" +
              "  \n" +
              "		/* to get total count of rows */  \n" +
              "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);  \n" +
              "		PREPARE query2 FROM @SQLStatement2;  \n" +
              "		EXECUTE query2;  \n" +
              "		DEALLOCATE PREPARE query2;  \n" +
              "  \n" +
              "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c  \n" +
              "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
              "		PREPARE query1 FROM @SQLStatement2;  \n" +
              "		EXECUTE query1;  \n" +
              "		DEALLOCATE PREPARE query1;  \n" +
              "  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5215,'2.00','V1','Sproc_GetAssemblyStock  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5215:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_GetAssyStockDetailByID;  \n" +
              "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(  \n" +
              "	IN passyStockID INT  \n" +
              "	)  \n" +
              "BEGIN  \n" +
              "		SELECT s.id,s.openingStock,s.openingdate,  \n" +
              "			s.woNumber,s.serialNo,s.partID,s.`type`,  \n" +
              "			s.whID,s.binID,  s.dateCode, s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,  \n" +
              "			(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID  \n" +
              "				AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty,  \n" +
              "		    s.refSalesOrderDetID,s.refSalesOrderID,s.isPOAdded  \n" +
              "		FROM assemblystock s  \n" +
              "		WHERE s.id=passyStockID  \n" +
              "		AND s.isDeleted=0;  \n" +
              "  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5216,'2.00','V1','Sproc_GetAssyStockDetailByID  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5216:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS sproc_getLegacySalesOrderList;  \n" +
              "CREATE PROCEDURE `sproc_getLegacySalesOrderList`(  \n" +
              "	pPartId INT,  \n" +
              "    pSearchPO Varchar(2000),  \n" +
              "    pSalesOrderDetId INT  \n" +
              ")  \n" +
              "BEGIN  \n" +
              "	SET @temp_sproc_getLegacySalesOrderList = concat(\"SELECT concat(so.poNumber,' | ',so.salesOrderNumber) SOPONumber,  \n" +
              "			so.salesOrderNumber soNumber,  \n" +
              "			so.poNumber,  \n" +
              "            so.customerId,  \n" +
              "            sod.id salesOrderDetID,  \n" +
              "            sod.partId,  \n" +
              "            sum(sod.originalPOQty) originalPOQty,  \n" +
              "            sum(sod.qty) POQty,  \n" +
              "            so.isLegacyPO,  \n" +
              "            so.id salesOrderID  \n" +
              "		FROM Salesordermst so  \n" +
              "		JOIN Salesorderdet sod on sod.refSalesOrderID = so.id and sod.isDeleted = 0  \n" +
              "		-- JOIN component co on co.id = sod.partId and co.isDeleted = 0  \n" +
              "		WHERE so.isDeleted = 0  \n" +
              "		AND so.status = 1  \n" +
              "		AND so.isLegacyPO = 1  \n" +
              "		AND sod.partId = \", pPartID ,  \n" +
              "	  \" AND (so.salesOrderNumber like '%\", pSearchPO ,\"%' or so.poNumber like '%\", pSearchPO ,\"%' )\"  \n" +
              "    );  \n" +
              "  -- SELECT  @temp_sproc_getLegacySalesOrderList;  \n" +
              "    IF(pSalesOrderDetId IS NOT NULL) THEN  \n" +
              "		SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" and sod.id = \",pSalesOrderDetId);  \n" +
              "    END IF;  \n" +
              "    	SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" group by so.salesOrderNumber, so.poNumber,  \n" +
              "										so.customerId,sod.id,sod.partId,so.isLegacyPO,so.id\");  \n" +
              "    SET @temp_sproc_getLegacySalesOrderList = CONCAT(\" SELECT * FROM ( \",@temp_sproc_getLegacySalesOrderList,\" ) c\");  \n" +
              "    PREPARE query1 FROM @temp_sproc_getLegacySalesOrderList;  \n" +
              "	EXECUTE query1;  \n" +
              "	DEALLOCATE PREPARE query1;  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5217,'2.00','V1',' sproc_getLegacySalesOrderList - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5217:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_GetPOStatusAssyWODetails;  \n" +
              "CREATE PROCEDURE `Sproc_GetPOStatusAssyWODetails`(  \n" +
              "	IN ppartID INT(11),  \n" +
              "	IN psalesOrderDetailID INT(11),  \n" +
              "	IN pcustomerID INT(11)  \n" +
              "    )  \n" +
              "BEGIN  \n" +
              "	# if first qty control op is with issue qty then consider first op issue qty for un process qty  \n" +
              "	# if first qty control op is not issue qty control then consider first op added total qty for un process qty  \n" +
              "  \n" +
              "	SELECT * ,  \n" +
              "		(CASE WHEN result.isFirstOpWithIssueQty = 0 THEN (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0))  \n" +
              "			 WHEN result.isFirstOpWithIssueQty = 1 THEN (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0))  \n" +
              "			ELSE 0 END) AS  unProcessQty ,  \n" +
              "		(CASE WHEN isFirstOpWithIssueQty = 0 THEN  \n" +
              "			 ((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0)))  \n" +
              "					 + IFNULL(result.readytoShipQty,0))  \n" +
              "			WHEN isFirstOpWithIssueQty = 1 THEN  \n" +
              "				((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0)))  \n" +
              "						 + IFNULL(result.readytoShipQty,0))  \n" +
              "			ELSE 0 END) AS displayWIPQtyForReport  \n" +
              "  \n" +
              "	FROM (  \n" +
              "		SELECT vuwoss.woid, vuwoss.woNumber, vuwoss.woVersion , vuwoss.buildQty, vuwoss.poQty, vuwoss.readytoShipQty ,  \n" +
              "			vuwoss.shippedQty, vuwoss.scrapQty, vuwoss.wipQty, vuwoss.firstOPtotalQty , vuwoss.partID ,  \n" +
              "			co.PIDCode , co.mfgPN , co.nickName , co.liveVersion , co.rev , co.isCustom ,  \n" +
              "			(CASE WHEN (SELECT COUNT(1) FROM workorder_salesorder_details WHERE deletedAt IS NULL  \n" +
              "					 AND salesOrderDetailID = psalesOrderDetailID  AND woID = vuwoss.woid  \n" +
              "					 AND partID = vuwoss.partID  AND parentPartID = vuwoss.partID LIMIT 1) > 0  \n" +
              "							THEN 0 ELSE 1 END) AS isSubAssembly ,  \n" +
              "			rr.name rohsStatus, rr.rohsIcon rohsIcon ,  \n" +
              "			(SELECT woSubStatus FROM workorder WHERE woID = vuwoss.woid) AS woSubStatus ,  \n" +
              "			(SELECT SUM(IFNULL(issueQty,0)) FROM workorder_trans WHERE deletedAt IS NULL  \n" +
              "				AND woID = vuwoss.woid AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS woFirstOpTotIssueQty,  \n" +
              "  \n" +
              "			(SELECT isIssueQty FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "			AND woID  = vuwoss.woid	AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS isFirstOpWithIssueQty  \n" +
              "  \n" +
              "			-- (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)) AS unProcessQty ,  \n" +
              "			-- ((IFNULL(vuwoss.wipQty,0) - (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)))  \n" +
              "					-- + IFNULL(vuwoss.readytoShipQty,0)) AS  displayWIPQtyForReport  \n" +
              "		FROM vu_workorder_summary_stk vuwoss  \n" +
              "			JOIN component co ON co.id = vuwoss.partID AND co.deletedAt IS NULL  \n" +
              "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL  \n" +
              "		 WHERE vuwoss.partID = ppartID  \n" +
              "         and (woid IN (SELECT wosd.woID  \n" +
              "				FROM workorder_salesorder_details  wosd  \n" +
              "					JOIN workorder wo ON wo.woID = wosd.woID AND wo.customerID = pcustomerID AND wo.deletedAt IS NULL  \n" +
              "				WHERE wosd.deletedAt IS NULL  \n" +
              "				AND wosd.salesOrderDetailID = psalesOrderDetailID  \n" +
              "				AND wosd.partID = ppartID)                   )  \n" +
              "          UNION  ALL  \n" +
              "          SELECT ass.woid, ass.woNumber, null woVersion ,  0 buildQty, sum(ass.poQty) poQty,  0 readytoShipQty ,  \n" +
              "			(select sum(shippedqty) from shippedassembly sa where sa.partID = ass.partID and sa.woNumber = ass.woNumber and sa.isDeleted = 0 ) shippedQty,  \n" +
              "            0 scrapQty, sum(ass.openingStock) wipQty,  0 firstOPtotalQty , ass.partID ,  \n" +
              "			coa.PIDCode , coa.mfgPN , coa.nickName , coa.liveVersion , coa.rev , coa.isCustom ,  \n" +
              "			0 AS isSubAssembly ,  \n" +
              "			rra.name rohsStatus, rra.rohsIcon rohsIcon ,  \n" +
              "			null woSubStatus ,  \n" +
              "			0 woFirstOpTotIssueQty,  \n" +
              "			0 isFirstOpWithIssueQty  \n" +
              "          From assemblystock ass  \n" +
              "          left join component coa on coa.id = ass.partID and coa.isDeleted = 0  \n" +
              "          LEFT JOIN rfq_rohsmst rra ON rra.id = coa.roHSStatusID AND rra.isDeleted = 0  \n" +
              "		  left join salesorderdet sod on sod.id = ass.refSalesOrderDetID and sod.isDeleted = 0  \n" +
              "          left join salesordermst som on som.id = ass.refSalesOrderID and som.isDeleted = 0  \n" +
              "		  where ass.woId is null and ass.type ='OS'  \n" +
              "			and ass.refSalesOrderDetID = psalesOrderDetailID  \n" +
              "			and ass.partID = ppartID  \n" +
              "            and som.customerID = pcustomerID  \n" +
              "          Group by ass.woid, ass.woNumber, ass.partID ,  \n" +
              "			coa.PIDCode , coa.mfgPN , coa.nickName , coa.liveVersion , coa.rev , coa.isCustom ,  \n" +
              "			rra.name , rra.rohsIcon  \n" +
              "		) result;  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5218,'2.00','V1','Sproc_GetPOStatusAssyWODetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          
          case 5218:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_GetWOHeaderDisplayDetails;  \n" +
              "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
              "	IN pwoID INT(11),  \n" +
              "	IN pwoOPID INT(11),  \n" +
              "	IN pwoTransID INT(11),  \n" +
              "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
              "	IN pNoCleanCleanType VARCHAR(5),  \n" +
              "	IN pwoAssyID INT(11) ,  \n" +
              "	IN pemployeeIDOfWOOP INT  \n" +
              "    )  \n" +
              "BEGIN  \n" +
              "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
              "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
              "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
              "			`wo`.`isOperationTrackBySerialNo`,  \n" +
              "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
              "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
              "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
              "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
              "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
              "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
              "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
              "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
              "				AND woTransEmpinout.woID=pwoID  \n" +
              "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
              "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
              "			`ca`.`PIDCode` ,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
              "			`ca`.`liveVersion` AS liveVersion,  \n" +
              "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
              "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
              "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
              "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
              "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
              "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
              "            `mf`.mfgType,  \n" +
              "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
              "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
              "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
              "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
              "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
              "             vusalesorderdet.lineID,  \n" +
              "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
              "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
              "					THEN `wo`.isHotJob  \n" +
              "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
              "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
              "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
              "				ELSE NULL END) AS DPMO,  \n" +
              "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
              "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
              "				WHERE refWOID = pwoID)  \n" +
              "			) AS parentWorkorders  ,  \n" +
              "			wo.terminateWOID refWOId,  \n" +
              "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
              "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp  \n" +
              "		FROM workorder AS `wo`  \n" +
              "		LEFT OUTER JOIN  \n" +
              "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
              "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
              "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
              "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
              "			FROM `workorder_certification` a  \n" +
              "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
              "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
              "			) AS `wocerti`  \n" +
              "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
              "		LEFT OUTER JOIN `component` AS `ca`  \n" +
              "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
              "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
              "		AND `ro`.`deletedAt` IS NULL  \n" +
              "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
              "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
              "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
              "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
              "		GROUP BY `wo`.`woID` ;  \n" +
              "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
              "		SELECT  \n" +
              "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
              "			`wo`.`isOperationTrackBySerialNo`,  \n" +
              "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
              "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
              "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
              "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
              "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
              "				AND woTransEmpinout.woID=pwoID  \n" +
              "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
              "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
              "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
              "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
              "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
              "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
              "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
              "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
              "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
              "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
              "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
              "			`woop`.isPlacementTracking,  \n" +
              "			`woop`.isLoopOperation,  \n" +
              "			`woop`.isAllowFinalSerialMapping,  \n" +
              "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
              "			`woop`.colorCode,  \n" +
              "            `woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
              "            `woop`.`isNoClean` AS `opNoClean`,  \n" +
              "            `woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
              "			`ca`.`PIDCode`,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
              "			`ca`.`liveVersion` AS liveVersion,  \n" +
              "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
              "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
              "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
              "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
              "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
              "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
              "            `mf`.mfgType,  \n" +
              "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
              "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
              "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
              "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
              "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
              "             vusalesorderdet.lineID,  \n" +
              "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
              "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
              "					THEN `wo`.isHotJob  \n" +
              "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
              "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
              "				WHERE wc.clusterID  \n" +
              "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
              "						WHERE woc.woopid=pwoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
              "				 AND wc.deletedAt IS NULL AND wc.woID = pwoID  \n" +
              "			) isParellelOperation,  \n" +
              "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
              "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
              "				ELSE NULL END) AS DPMO,  \n" +
              "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
              "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
              "				WHERE refWOID = pwoID)  \n" +
              "			) AS parentWorkorders  ,  \n" +
              "            wo.terminateWOID refWOId,  \n" +
              "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
              "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
              "            fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification  \n" +
              "		FROM workorder AS `wo`  \n" +
              "		LEFT OUTER JOIN  \n" +
              "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
              "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
              "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
              "			FROM `workorder_certification` a  \n" +
              "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
              "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
              "			) AS `wocerti`  \n" +
              "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
              "		LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
              "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID  \n" +
              "		LEFT OUTER JOIN `component` AS `ca`  \n" +
              "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
              "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
              "		AND `ro`.`deletedAt` IS NULL  \n" +
              "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
              "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
              "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
              "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
              "		GROUP BY `wo`.`woID` ;  \n" +
              "	END IF ;  \n" +
              "  \n" +
              "	/********************************* 2.current data ****************************************************/  \n" +
              "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
              "	/********************************* 2.current data ****************************************************/  \n" +
              "  \n" +
              "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
              "		/********************************** 3.current data ***************************************************/  \n" +
              "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
              "		/********************************** 3.current data ***************************************************/  \n" +
              "        -- END IF;  \n" +
              "  \n" +
              "	# last ECO request data  \n" +
              "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
              "        # last DFM request data  \n" +
              "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
              "  \n" +
              "        # is export controlled assembly  \n" +
              "        SELECT (CASE WHEN  \n" +
              "	(SELECT COUNT(1) FROM certificate_standards  \n" +
              "	WHERE deletedAt IS NULL  \n" +
              "	AND isExportControlled = 1  \n" +
              "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
              "					WHERE deletedAt IS NULL  \n" +
              "					AND componentID IN (  \n" +
              "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
              "								WHERE deletedAt IS NULL  \n" +
              "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
              "										WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
              "								UNION  \n" +
              "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
              "								WHERE deletedAt IS NULL AND woID = pwoID  \n" +
              "								UNION  \n" +
              "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
              "							   )  \n" +
              "					) > 0) THEN 1  \n" +
              "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
              "  \n" +
              "  \n" +
              "	#  7. get wo op empl wise total time consumption details  \n" +
              "	# include both setup and production activity  \n" +
              "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
              "  END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5219,'2.00','V1','Sproc_GetWOHeaderDisplayDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          
          case 5219:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
              "DROP PROCEDURE IF EXISTS Sproc_ValidatePOQtyForSalesOrder;  \n" +
              "CREATE PROCEDURE `Sproc_ValidatePOQtyForSalesOrder`(  \n" +
              "	IN pwoSalesOrderDetID INT(11),  \n" +
              "	IN psalesOrderDetailID INT(11),  \n" +
              "	IN pwoID INT(11),  \n" +
              "	IN ppartID INT(11),  \n" +
              "	IN pscrapQty INT(11),  \n" +
              "	IN ppoQty INT(11) ,  \n" +
              "	IN pisDelete INT(11)  \n" +
              ")  \n" +
              "BEGIN  \n" +
              "	DECLARE whereClause VARCHAR(500);  \n" +
              "	DECLARE woAllowScrapQty INT;  \n" +
              "	DECLARE soQPA INT;  \n" +
              "	DECLARE allowPOQty INT;  \n" +
              "	DECLARE allowAssignPOQty INT;  \n" +
              "	DECLARE allowMinPOQty INT;  \n" +
              "	DECLARE assignedPOQty INT;  \n" +
              "    DECLARE vIsSkipKitCreation TINYINT DEFAULT 0;  \n" +
              "	-- create temporary table for error  \n" +
              "	DROP TEMPORARY TABLE IF EXISTS  temp_wosalesqty_error;  \n" +
              "	CREATE TEMPORARY TABLE temp_wosalesqty_error  \n" +
              "	(  \n" +
              "	     errorText VARCHAR(5000)  \n" +
              "	);  \n" +
              "  \n" +
              "	SET woAllowScrapQty = 0;  \n" +
              "	SET allowPOQty = 0;  \n" +
              "	SET soQPA = 0;  \n" +
              "	SET allowAssignPOQty = 0;  \n" +
              "	SET allowMinPOQty = 0;  \n" +
              "	SET assignedPOQty = 0;  \n" +
              "	SET whereClause = \"where isDeleted=0\";  \n" +
              "	IF (IFNULL(pisDelete,0) = 0) THEN  \n" +
              "		#1. Check Scrap Quantity is valid or not for workorder  \n" +
              "		SELECT scrapQty INTO woAllowScrapQty FROM vu_workorder_summary_stk WHERE woID=pwoID;  \n" +
              "		-- SELECT CONCAT(\"1.1-pscrapQty \",pscrapQty);  \n" +
              "		-- select concat(\"1.2-woAllowScrapQty \",woAllowScrapQty);  \n" +
              "		-- SELECT CONCAT(\"Result 1 \",IFNULL(pscrapQty,0) > IFNULL(woAllowScrapQty,0));  \n" +
              "		IF(IFNULL(pscrapQty,0) > IFNULL(woAllowScrapQty,0)) THEN  \n" +
              "			SET @stmt_op = CONCAT('PO scrap quantity must be less than work order scrap quantity.');  \n" +
              "			INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "		END IF;  \n" +
              "  \n" +
              "		#2. Check Assigned PO Qty Should not more than Sales Order PO Qty + Work Order Scrap Qty  \n" +
              "		IF psalesOrderDetailID IS NOT NULL THEN  \n" +
              "			Select  isSkipKitCreation into vIsSkipKitCreation  \n" +
              "            From SalesOrderdet sod  \n" +
              "            where sod.id = psalesOrderDetailID  \n" +
              "            and sod.partId = ppartID  \n" +
              "            and sod.isDeleted = 0;  \n" +
              "            SET  vIsSkipKitCreation = ifnull(vIsSkipKitCreation,0);  \n" +
              "            -- In case \"Skip Kit Allocation\" set in SO detail then  skip kit allocation validation Added 01/09/21  \n" +
              "  \n" +
              "            IF vIsSkipKitCreation = 1  THEN  \n" +
              "				CALL Sproc_CreateConsolidateDataForPart(psalesOrderDetailID,ppartID);  \n" +
              "                -- in case no sub assembly below query will return  null qpa  \n" +
              "				select ifnull(sum(qpa),1) into soQPA  \n" +
              "				from temp_Sproc_CreateRfqConsolidateLineItem temp  \n" +
              "				join part_sub_assy_relationship partRel on partRel.prPerPartID = temp.consolidatedmfgPNIDs and partRel.isDeleted = 0  \n" +
              "				where partRel.partID  = ppartID;  \n" +
              "            ELSE  \n" +
              "				SELECT IFNULL(ka.perAssyBuildQty,0) INTO soQPA FROM kit_allocation_assy_detail ka WHERE ka.refSalesorderdetid = psalesOrderDetailID  \n" +
              "						AND ka.partId = ppartID AND ka.isDeleted=0;  \n" +
              "            END IF;  \n" +
              "			IF(soQPA = 0)  THEN  \n" +
              "				SET @stmt_op = CONCAT('Kit allocation not completed yet. Please finish kit allocation first.');  \n" +
              "				INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "			ELSE  \n" +
              "				SELECT (sd.qty * soQPA) INTO allowPOQty FROM salesorderdet sd WHERE isDeleted=0 AND id=psalesOrderDetailID;  \n" +
              "				-- SELECT CONCAT(\"2.1-ppoQty \",ppoQty);  \n" +
              "				-- SELECT CONCAT(\"2.2-allowPOQty \",allowPOQty);  \n" +
              "				-- SELECT CONCAT(\"2.3-woAllowScrapQty \",woAllowScrapQty);  \n" +
              "				-- SELECT CONCAT(\"2-Result \",IFNULL(ppoQty,0) > (IFNULL(allowPOQty,0) + IFNULL(woAllowScrapQty,0)));  \n" +
              "				IF(IFNULL(ppoQty,0) > (IFNULL(allowPOQty,0) + IFNULL(woAllowScrapQty,0))) THEN  \n" +
              "					SET @stmt_op = CONCAT('PO quantity can not be more than sum of sales order po quantity and work order scrap quantity.');  \n" +
              "					INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "				END IF;  \n" +
              "  \n" +
              "				#3. Check Assigned PO Qty is available or not for sales order details  \n" +
              "  \n" +
              "				#3.1 Case While Edit Work Order Sales Order Details  \n" +
              "				IF pwoSalesOrderDetID IS NOT NULL THEN  \n" +
              "					SELECT ((MAX(a.qty) * soQPA) - MAX(a.poqty) + MAX(a.actualScrapQty) + MAX(scrapqty)) INTO allowAssignPOQty  \n" +
              "					 FROM  \n" +
              "					(SELECT sd.qty ,sd.id, NULL woSalesOrderDetID, 0 poqty, 0 scrapqty, NULL woID, 0 actualScrapQty  FROM salesorderdet sd  \n" +
              "					WHERE IFNULL(sd.isDeleted,0)=0 AND sd.deletedAt IS NULL  \n" +
              "					UNION ALL  \n" +
              "					SELECT 0 qty, wsd.salesOrderDetailID, wsd.woSalesOrderDetID, IFNULL(SUM(wsd.poqty),0), IFNULL(SUM(wsd.scrapqty),0), wsd.woID,  \n" +
              "					(SELECT IFNULL(SUM(scrapQty),0) FROM vu_workorder_summary_stk WHERE woID IN  \n" +
              "						(SELECT woID FROM workorder_salesorder_details WHERE salesOrderDetailID=psalesOrderDetailID  \n" +
              "							AND wsd.parentPartID = ppartID AND deletedAt IS NULL)) actualScrapQty  \n" +
              "							FROM workorder_salesorder_details wsd  \n" +
              "							WHERE IFNULL(wsd.isDeleted,0)=0 AND wsd.deletedAt IS NULL  \n" +
              "							AND wsd.woSalesOrderDetID <> pwoSalesOrderDetID  \n" +
              "							AND wsd.parentPartID = ppartID  \n" +
              "						GROUP BY wsd.salesOrderDetailID)a  \n" +
              "					WHERE a.id=psalesOrderDetailID  \n" +
              "					GROUP BY a.id;  \n" +
              "					-- SELECT CONCAT(\"3.1-ppoQty \",ppoQty);  \n" +
              "					-- SELECT CONCAT(\"3.2-allowAssignPOQty \",allowAssignPOQty);  \n" +
              "					-- SELECT CONCAT(\"3.3-pscrapQty \",pscrapQty);  \n" +
              "					-- SELECT CONCAT(\"3-Result \",IFNULL(ppoQty,0) > IFNULL(allowAssignPOQty,0) + IFNULL(pscrapQty,0));  \n" +
              "					IF(IFNULL(ppoQty,0) > IFNULL(allowAssignPOQty,0) + IFNULL(pscrapQty,0)) THEN  \n" +
              "						SET @stmt_op = CONCAT('Assinged PO quantity can not be more than sum of assigned work order po quantity and work order scrap quantity.');  \n" +
              "						INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "					END IF;  \n" +
              "  \n" +
              "					SELECT SUM(wsd.poQty) INTO assignedPOQty FROM workorder_salesorder_details wsd WHERE wsd.woID=pwoID  \n" +
              "					AND wsd.isDeleted=0 AND wsd.deletedAt IS NULL AND wsd.woSalesOrderDetID <> pwoSalesOrderDetID  \n" +
              "					AND wsd.parentPartID = ppartID;  \n" +
              "				ELSE  \n" +
              "				#3.2 Case While Add New Work Order Sales Order Details  \n" +
              "					SELECT ((MAX(a.qty) * soQPA) - MAX(a.poqty) + MAX(a.actualScrapQty)) INTO allowAssignPOQty  \n" +
              "					 FROM  \n" +
              "					(SELECT sd.qty, sd.id, NULL woSalesOrderDetID, 0 poqty, 0 scrapqty, NULL woID, 0 actualScrapQty  FROM salesorderdet sd  \n" +
              "					WHERE sd.isDeleted=0 AND sd.partCategory=3  \n" +
              "					UNION ALL  \n" +
              "					SELECT 0 qty, wsd.salesOrderDetailID, wsd.woSalesOrderDetID, IFNULL(SUM(wsd.poqty),0), IFNULL(SUM(wsd.scrapqty),0), wsd.woID,  \n" +
              "					(SELECT IFNULL(SUM(scrapQty),0) FROM vu_workorder_summary_stk WHERE woID IN  \n" +
              "						(SELECT woID FROM workorder_salesorder_details WHERE salesOrderDetailID=psalesOrderDetailID  \n" +
              "						AND wsd.parentPartID = ppartID AND deletedAt IS NULL)) actualScrapQty  \n" +
              "					FROM workorder_salesorder_details wsd  \n" +
              "					WHERE IFNULL(wsd.isDeleted,0)=0 AND wsd.deletedAt IS NULL  \n" +
              "					AND wsd.parentPartID = ppartID  \n" +
              "					GROUP BY wsd.salesOrderDetailID)  \n" +
              "					a  \n" +
              "					WHERE a.id=psalesOrderDetailID  \n" +
              "					GROUP BY a.id;  \n" +
              "					-- SELECT CONCAT(\"4.1-ppoQty \",ppoQty);  \n" +
              "					-- SELECT CONCAT(\"4.2-allowAssignPOQty \",allowAssignPOQty);  \n" +
              "					-- SELECT CONCAT(\"4.3-pscrapQty \",pscrapQty);  \n" +
              "					-- SELECT CONCAT(\"4-Result \",IFNULL(ppoQty,0) > (IFNULL(allowAssignPOQty,0) + IFNULL(pscrapQty,0)));  \n" +
              "					IF(IFNULL(ppoQty,0) > (IFNULL(allowAssignPOQty,0) + IFNULL(pscrapQty,0))) THEN  \n" +
              "						SET @stmt_op = CONCAT('Assinged PO quantity can not be more than sum of assigned work order po quantity and work order scrap quantity.');  \n" +
              "						INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "					END IF;  \n" +
              "  \n" +
              "					SELECT SUM(wsd.poQty) INTO assignedPOQty FROM workorder_salesorder_details wsd  \n" +
              "					WHERE wsd.woID=pwoID AND wsd.parentPartID = ppartID  \n" +
              "					AND wsd.isDeleted=0 AND wsd.deletedAt IS NULL;  \n" +
              "				END IF;  \n" +
              "			END IF;  \n" +
              "			#4. Check Assigned PO Qty is available or not for sales order details  \n" +
              "			SELECT OPProdQty INTO allowMinPOQty FROM vu_workorder_production_stk WHERE woID=pwoID ORDER BY opNumber LIMIT 1;  \n" +
              "			-- SELECT CONCAT(\"5.1-allowMinPOQty \",allowMinPOQty);  \n" +
              "			-- SELECT CONCAT(\"5.2-ppoQty \",ppoQty);  \n" +
              "			-- SELECT CONCAT(\"5.3-assignedPOQty \",assignedPOQty);  \n" +
              "			-- SELECT CONCAT(\"5-Result \",IFNULL(allowMinPOQty,0) > (IFNULL(ppoQty,0) + IFNULL(assignedPOQty,0)));  \n" +
              "  \n" +
              "			IF(IFNULL(allowMinPOQty,0) > (IFNULL(ppoQty,0) + IFNULL(assignedPOQty,0))) THEN  \n" +
              "				SET @stmt_op = CONCAT('<b>', IFNULL(allowMinPOQty,0), '</b> is minimum po quantity for work order, Production already started for this po quantity.');  \n" +
              "				INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "			END IF;  \n" +
              "		END IF;  \n" +
              "	ELSE  \n" +
              "		#1. Check PO Qty is not assigned to production  \n" +
              "		# check total assigned po qty in workorder and compare with min qty  \n" +
              "		SELECT OPProdQty INTO allowMinPOQty FROM vu_workorder_production_stk WHERE woID=pwoID ORDER BY opNumber LIMIT 1;  \n" +
              "		-- SELECT CONCAT(\"6.1-allowMinPOQty \",allowMinPOQty);  \n" +
              "  \n" +
              "		SELECT IFNULL(SUM(wsd.poQty),0) INTO allowAssignPOQty  \n" +
              "			FROM workorder_salesorder_details wsd  \n" +
              "			WHERE wsd.woSalesOrderDetID <> pwoSalesOrderDetID  \n" +
              "			AND wsd.parentPartID = ppartID AND wsd.woID = pwoID  \n" +
              "			AND IFNULL(wsd.isDeleted,0)=0 AND wsd.deletedAt IS NULL;  \n" +
              "		-- SELECT CONCAT(\"6.2-allowAssignPOQty \",allowAssignPOQty);  \n" +
              "  \n" +
              "		-- SELECT CONCAT(\"6-Result \",IFNULL(allowMinPOQty,0) > IFNULL(allowAssignPOQty,0));  \n" +
              "		IF(IFNULL(allowMinPOQty,0) > IFNULL(allowAssignPOQty,0)) THEN  \n" +
              "			SET @stmt_op = CONCAT('<b>', IFNULL(allowMinPOQty,0), '</b> is minimum po quantity for work order, Production already started for this po quantity.');  \n" +
              "			INSERT INTO temp_wosalesqty_error (errorText) VALUES (@stmt_op);  \n" +
              "		END IF;  \n" +
              "	END IF;  \n" +
              "	SELECT errorText FROM temp_wosalesqty_error;  \n" +
              "    SELECT soQPA;  \n" +
              "  \n" +
              "END;  \n" +	
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5220,'2.00','V1','Sproc_ValidatePOQtyForSalesOrder  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
          
          case 5220:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
               "drop function if exists fun_getDesignatorList;  \n" +
              "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
              "	pRefDesig TEXT  \n" +
              ") RETURNS text CHARSET utf8mb4  \n" +
              "BEGIN  \n" +
              "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
              "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
              "  DECLARE item VARCHAR(200);  \n" +
              "  DECLARE delim CHAR(1) ;  \n" +
              "  DECLARE vGetRange VARCHAR(2000);  \n" +
              "  SET delim = ',';  \n" +
              "  If pRefDesig IS NOT NULL Then  \n" +
              "    -- Replace space with comma, as we consider space as a seperator too  \n" +
              "    SET refDesigArr = trim(pRefDesig);  \n" +
              "    SET refDesigArr = replace(refDesigArr,' ', '');  \n" +
              "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
              "    set maxLength = length(refDesigArr);  \n" +
              "	REPEAT  \n" +
              "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
              "        IF endPos = 0 THEN  \n" +
              "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
              "        ELSE  \n" +
              "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
              "        END IF;  \n" +
              "		IF item <>'' OR item IS NOT NULL THEN  \n" +
              "			IF (instr(item,'-') > 0) THEN  \n" +
              "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
              "			ELSE  \n" +
              "				SET vGetRange = item;  \n" +
              "			END IF;  \n" +
              "			IF startpos >  1 AND  endPos = 0 THEN  \n" +
              "				SET vReturn = concat(vReturn,vGetRange);  \n" +
              "				SET startPos = maxLength ;  \n" +
              "			ELSE  \n" +
              "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
              "				SET startPos = endPos + 1;  \n" +
              "			END IF;  \n" +
              "		END IF;  \n" +
              "	UNTIL startPos>= maxLength END REPEAT;  \n" +
              "  END IF;  \n" +
              "  return vReturn;  \n" +
              "end;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5221,'2.00','V1','fun_getDesignatorList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
        case 5221:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-09-2021  *********************************** */
            "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \"AND isPaymentVoided=0 AND paymentNumber \",CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = '\", pPaymentNumber ,\"' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            pip.paymentNumber,  \n" +
                "                            pipd.isPaymentVoided  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "					LEFT JOIN packingslip_invoice_payment_det pipd ON pipd.refPackingslipInvoiceID = p.refPackingSlipNumberForInvoice AND pipd.isDeleted = 0  \n" +
                "					LEFT JOIN packingslip_invoice_payment pip ON pip.id = pipd.refPayementid AND pip.isDeleted = 0  \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5222,'2.00','V1','User Story 36002: [Main Branch] Material Receipt: Give provision to add line summary and related changes in advance filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5222:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_SyncComponentDatasheet` ;  \n" +
            "CREATE PROCEDURE `Sproc_SyncComponentDatasheet`()  \n" +
            "BEGIN  \n" +
            "	SELECT 	b.id, b.datasheetName, a.datasheetURL, c.documentPath , group_concat(b.refComponentID) as refComponentID, group_concat(c.mfgPN) as mfgPN  \n" +
            "	FROM 	component_datasheets AS b  \n" +
            "	INNER JOIN (  \n" +
            "			SELECT cd.id, cd.refComponentID, cd.datasheetURL, cd.createdAt  \n" +
            "			FROM   component_datasheets cd  \n" +
            "			WHERE  cd.isDeleted = 0 AND cd.datasheetURL LIKE '%http%'  \n" +
            "	) AS a ON a.refComponentID = b.refComponentID  \n" +
            "	AND a.datasheetURL LIKE CONCAT('%', b.datasheetName,'%')  \n" +
            "	INNER JOIN component c  ON c.id = b.refComponentID  \n" +
            "	WHERE b.isDeleted = 0  \n" +
            "	AND b.datasheetname IS NOT NULL  \n" +
            "	AND b.datasheetURL IS NOT NULL  \n" +
            "	AND b.datasheetURL NOT LIKE '%http%'  \n" +
            "	GROUP BY b.id, b.datasheetName, a.datasheetURL, c.documentPath;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5223 ,'2.00','V1',' Task 36563: Datasheet change given by DV - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        break;
        case 5223:
            allDbChangesArray.push(
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getKitConsolidateLineMFGPNWithPackaging`;  \n" +
            "CREATE FUNCTION `fun_getKitConsolidateLineMFGPNWithPackaging`(  \n" +
            "  pIsPackaging TINYINT,  \n" +
            "  PrefSalesOrderDetid INT,  \n" +
            "  pCustomerID INT  \n" +
            "	) RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result TEXT;  \n" +
            "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "		SELECT  CONCAT('(SELECT  \n" +
            "			GROUP_CONCAT(  \n" +
            "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
            "				a.RoHSStatusID,''@@@'',  \n" +
            "				IFNULL(a.name,\"\"),''@@@'',  \n" +
            "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
            "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
            "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
            "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
            "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
            "				a.mfgCode,''@@@'',  \n" +
            "				a.mfgPNID,''@@@'',  \n" +
            "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
            "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
            "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
            "                SEPARATOR \"', v_GroupConcatSeparator ,'\" )  \n" +
            "			FROM  \n" +
            "			( select z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "                        approvedMountingType,  \n" +
            "                        mismatchMountingTypeStep,  \n" +
            "                        mismatchFunctionalCategoryStep,  \n" +
            "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
            "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
            "						  from  \n" +
            "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
            "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "									ELSE    /*Packaging Alias*/  \n" +
            "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "									END AS restrictUsePermanentlyStep,  \n" +
            "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "									ELSE     /*Packaging Alias*/  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
            "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
            "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
            "									JOIN component c ON al.mfgPNID = c.id  \n" +
            "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
            "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
            "															 and x.mfgpnid = d.id  \n" +
            "															 and d.id != c.id and x.isdeleted = 0)  \n" +
            "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
            "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
            "									WHERE l.refSalesOrderDetid = ', PrefSalesOrderDetid,'  \n" +
            "									AND l.refRfqLineitem = a.rfqLineItemsId AND al.isDeleted = 0 AND c.isGoodPart = 1',  \n" +
            "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
            "							) z group by  z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
            "					) a  \n" +
            "  		) AS mfgPN')  INTO @result;  \n" +
            "	SET result = @result;  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getKitMFRPNIdsWithPackaging`;  \n" +
            "CREATE FUNCTION `fun_getKitMFRPNIdsWithPackaging`(  \n" +
            "	pRefSalesOrderDetId INT  \n" +
            ") RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result LONGTEXT;  \n" +
            "  \n" +
            "	SELECT  CONCAT('  \n" +
            "		(  \n" +
            "			SELECT GROUP_CONCAT(a.mfgPNID)  \n" +
            "			FROM  \n" +
            "				(  \n" +
            "					SELECT 		IFNULL(d.id,c.id) AS mfgPNID  \n" +
            "					FROM 		kit_allocation_lineitems_alternatepart  al  \n" +
            "					JOIN 		kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
            "					JOIN 		component c ON al.mfgPNID = c.id  \n" +
            "					LEFT JOIN 	Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "					WHERE 		l.refSalesOrderDetid = ', pRefSalesOrderDetId ,'  \n" +
            "								AND l.refRfqLineitem = a.rfqLineItemsId AND al.isDeleted = 0 AND c.isGoodPart = 1  \n" +
            "					GROUP BY 	IFNULL(d.id,c.id)  \n" +
            "				) a  \n" +
            "  		) AS mfgPNIdsWithPackaging  \n" +
            "  	')  INTO result;  \n" +
            "  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getMFRPNIdsWithPackagingforkit`;  \n" +
            "CREATE FUNCTION `fun_getMFRPNIdsWithPackagingforkit`(  \n" +
            "	pRefSalesOrderDetId INT  \n" +
            ") RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result LONGTEXT;  \n" +
            "  \n" +
            "	SELECT  CONCAT('  \n" +
            "		(  \n" +
            "			SELECT GROUP_CONCAT(a.mfgPNID)  \n" +
            "			FROM  \n" +
            "				(  \n" +
            "					SELECT 		IFNULL(d.id,c.id) AS mfgPNID  \n" +
            "					FROM 		kit_allocation_consolidate_line_alternatepart  al  \n" +
            " 					JOIN 		kit_allocation_consolidate_line_detail l ON  l.id = al.kitConsolidateID  \n" +
            "					JOIN 		component c ON al.mfgPNID = c.id  \n" +
            "					LEFT JOIN 	Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "					WHERE 		l.refSalesOrderDetid = ', pRefSalesOrderDetId ,'  \n" +
            "								AND l.id = a.id AND al.isDeleted = 0 AND c.isGoodPart = 1  \n" +
            "					GROUP BY 	IFNULL(d.id,c.id)  \n" +
            "				) a  \n" +
            "  		) AS mfgPNIdsWithPackaging  \n" +
            "  	')  INTO result;  \n" +
            "  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getConsolidateLineMFGPNWithPackagingforkit`;  \n" +
            "CREATE FUNCTION `fun_getConsolidateLineMFGPNWithPackagingforkit`(  \n" +
            "  pIsPackaging TINYINT,  \n" +
            "  PrefSalesOrderDetid INT,  \n" +
            "  pCustomerID INT  \n" +
            "	) RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result TEXT;  \n" +
            "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "		SELECT  CONCAT('(SELECT  \n" +
            "			GROUP_CONCAT(  \n" +
            "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
            "				a.RoHSStatusID,''@@@'',  \n" +
            "				IFNULL(a.name,\"\"),''@@@'',  \n" +
            "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
            "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
            "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
            "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
            "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
            "				a.mfgCode,''@@@'',  \n" +
            "				a.mfgPNID,''@@@'',  \n" +
            "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
            "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
            "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
            "                SEPARATOR \"', v_GroupConcatSeparator ,'\" )  \n" +
            "			FROM  \n" +
            "			( select z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "                        approvedMountingType,  \n" +
            "                        mismatchMountingTypeStep,  \n" +
            "                        mismatchFunctionalCategoryStep,  \n" +
            "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
            "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
            "						  from  \n" +
            "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
            "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "									ELSE    /*Packaging Alias*/  \n" +
            "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "									END AS restrictUsePermanentlyStep,  \n" +
            "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "									ELSE     /*Packaging Alias*/  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
            "									FROM kit_allocation_consolidate_line_alternatepart  al  \n" +
            " 									JOIN kit_allocation_consolidate_line_detail l ON  l.id = al.kitConsolidateID  \n" +
            "									JOIN component c ON al.mfgPNID = c.id  \n" +
            "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "									and  not exists ( select 1  from  kit_allocation_consolidate_line_alternatepart x  \n" +
            " 													where  x.kitConsolidateID  =  al.kitConsolidateID  \n" +
            " 															 and x.mfgpnid = d.id  and x.isdeleted = 0 and al.isdeleted = 0  \n" +
            " 															 and d.id != c.id)  \n" +
            "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
            "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
            "									WHERE l.refSalesOrderDetid = ', PrefSalesOrderDetid,'  \n" +
            "									AND l.id = a.id  AND al.isDeleted = 0 AND c.isGoodPart = 1',  \n" +
            "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
            "							) z group by  z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
            "					) a  \n" +
            "  		) AS mfgPN')  INTO @result;  \n" +
            "	SET result = @result;  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pRefSalesOrderDetID INT,  \n" +
            "	IN pLineId LONGTEXT,  \n" +
            "	IN pPartId INT,  \n" +
            "	IN pKitQty INT,  \n" +
            "    IN pShortageLines BOOLEAN,  \n" +
            "	IN pPackagingAlias BOOLEAN,  \n" +
            "	IN pFunctionalType VARCHAR(1000),  \n" +
            "	IN pMountingType VARCHAR(1000),  \n" +
            "	IN pCartType VARCHAR(1000),  \n" +
            "	IN pWarehouse VARCHAR(1000),  \n" +
            "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
            "	IN pCustomerId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE pWhereLineId VARCHAR(500);  \n" +
            "	DECLARE vCartLineId VARCHAR(16383);  \n" +
            "	DECLARE vWHLineId VARCHAR(16383);  \n" +
            "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "  \n" +
            "	SET vFilterWhereClause = '';  \n" +
            "  \n" +
            "	IF (pLineId IS NOT NULL) THEN  \n" +
            "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
            "	ELSE  \n" +
            "		SET pWhereLineId = ' AND 1=1';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
            "		SET pWhereClause = ' 1=1';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pShortageLines) THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
            "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
            "		FROM kit_allocation ka  \n" +
            "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
            "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
            "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
            "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
            "				ka.status = 'A' AND  \n" +
            "                css.isdeleted = 0 AND  \n" +
            "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
            "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
            "  \n" +
            "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
            "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pIsCallFromFeasibility) THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
            "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
            "  \n" +
            "	SET @vFromSQLQuery = CONCAT('  \n" +
            "		SELECT	*  \n" +
            "		FROM	(  \n" +
            "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
            "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
            "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
            "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
            "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
            "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
            "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
            "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
            "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
            "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
            "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
            "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
            "					allocatedPins,		scrapedPins,  \n" +
            "					/*SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IFNULL(d.availableStock, 0)),0)) availableStock,  \n" +
            "					SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IFNULL(d.availableStock, 0)) availableStockInPin,*/  \n" +
            "					(  \n" +
            "						CASE  \n" +
            "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
            "							ELSE  \n" +
            "								CASE  \n" +
            "									WHEN c.connecterTypeID = -2 THEN  \n" +
            "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
            "									ELSE  \n" +
            "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
            "								END  \n" +
            "						END  \n" +
            "					) shortagePerBuild,  \n" +
            "					(  \n" +
            "						CASE  \n" +
            "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
            "							ELSE  \n" +
            "								CASE  \n" +
            "									WHEN c.connecterTypeID = - 2 THEN  \n" +
            "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
            "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
            "									ELSE  \n" +
            "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
            "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
            "								END  \n" +
            "						END  \n" +
            "					) shortagePerBuildWithAvailable  \n" +
            "				FROM	(  \n" +
            "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
            "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
            "							a.custPNID,  \n" +
            "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
            "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
            "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
            "							a.restrictCPNUseInBOMStep,  \n" +
            "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
            "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
            "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
            "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
            "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
            "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
            "							a.isInstall,			a.connecterTypeID,  \n" +
            "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
            "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
            "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
            "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
            "							a.numOfPosition,  \n" +
            "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
            "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
            "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
            "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
            "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
            "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
            "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
            "					INNER JOIN 	(  \n" +
            "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
            "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
            "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
            "										SUM(b.scrapedPins) scrapedPins  \n" +
            "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
            "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
            "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
            "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
            "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
            "				) AS  c  \n" +
            "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
            "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
            "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
            "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  \n" +
            "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
            "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
            "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
            "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
            "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
            "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
            "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
            "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
            "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
            "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
            "		)  \n" +
            "		AS  mainQuery  \n" +
            "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
            "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
            "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
            "	EXECUTE mainQuery;  \n" +
            "	DEALLOCATE PREPARE mainQuery;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
            "	PREPARE query3 FROM @SQLStatement3;  \n" +
            "	EXECUTE query3;  \n" +
            "	DEALLOCATE PREPARE query3;  \n" +
            "  \n" +
            "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
            "	PREPARE query4 FROM @SQLStatement4;  \n" +
            "	EXECUTE query4;  \n" +
            "	DEALLOCATE PREPARE query4;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPartId INT,  \n" +
            "	IN pRefSalesOrderDetailId INT,  \n" +
            "	IN pLineId INT,  \n" +
            "    IN pShortageLines BOOLEAN,  \n" +
            "	IN pPackagingAlias BOOLEAN,  \n" +
            "	IN pFunctionalType VARCHAR(1000),  \n" +
            "	IN pMountingType VARCHAR(1000),  \n" +
            "	IN pCartType VARCHAR(1000),  \n" +
            "	IN pWarehouse VARCHAR(1000),  \n" +
            "	IN pFeasibilityQty INT,  \n" +
            "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
            "	IN pCustomerId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE pAllocatedSharedCount INT;  \n" +
            "	DECLARE pKitQty INT DEFAULT 0;  \n" +
            "	DECLARE pWhereLineId VARCHAR(500);  \n" +
            "	DECLARE vCartLineId VARCHAR(16383);  \n" +
            "	DECLARE vWHLineId VARCHAR(16383);  \n" +
            "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
            "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "  \n" +
            "	SET vFilterWhereClause = '';  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "  \n" +
            "	IF (pLineId != 0) THEN  \n" +
            "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
            "	ELSE  \n" +
            "		SET pWhereLineId = ' AND 1 = 1';  \n" +
            "	END IF;  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
            "	END IF;  \n" +
            "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pShortageLines = 1) THEN  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
            "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
            "		FROM 		kit_allocation ka  \n" +
            "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
            "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
            "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
            "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
            "		AND 		ka.assyID = pPartId  \n" +
            "		AND 		ka.`status` = 'A'  \n" +
            "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
            "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
            "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
            "					END)  \n" +
            "		AND 		css.isDeleted = 0 ;  \n" +
            "  \n" +
            "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
            "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
            "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
            "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');  \n" +
            "	ELSE  \n" +
            "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
            "		INTO 	pKitQty  \n" +
            "		FROM 	kit_allocation_assy_detail  \n" +
            "		WHERE 	partId = pPartId  \n" +
            "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
            "				AND isDeleted = 0;  \n" +
            "	END IF;  \n" +
            "	SET @vFromSQLQuery = CONCAT('  \n" +
            "		SELECT	*  \n" +
            "		FROM	(  \n" +
            "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
            "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
            "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
            "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
            "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
            "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
            "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
            "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
            "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
            "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
            "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
            "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
            "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
            "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
            "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
            "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
            "							(  \n" +
            "								CASE  \n" +
            "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
            "									ELSE  \n" +
            "										CASE  \n" +
            "											WHEN c.connecterTypeID = - 2 THEN  \n" +
            "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
            "													ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
            "											ELSE  \n" +
            "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
            "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END  \n" +
            "										END  \n" +
            "								END  \n" +
            "							) shortagePerBuild,  \n" +
            "							(  \n" +
            "								CASE  \n" +
            "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
            "									ELSE  \n" +
            "										CASE  \n" +
            "											WHEN c.connecterTypeID = -2 THEN  \n" +
            "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0  \n" +
            "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END  \n" +
            "											ELSE  \n" +
            "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
            "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
            "										END  \n" +
            "								END  \n" +
            "							) shortagePerBuildWithAvailable,  \n" +
            "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
            "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
            "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
            "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
            "					FROM	(  \n" +
            "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
            "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
            "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
            "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
            "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
            "											THEN 0  \n" +
            "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
            "										END) requirePinsBuild,  \n" +
            "										mfgPN AS mfgPN,  \n" +
            "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
            "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
            "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
            "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
            "										(  \n" +
            "											CASE  \n" +
            "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
            "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
            "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
            "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
            "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
            "												ELSE 0  \n" +
            "											END  \n" +
            "										) freeToShareAmongOtherKits,  \n" +
            "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
            "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
            "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
            "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
            "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
            "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
            "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
            "						FROM  \n" +
            "						(  \n" +
            "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
            "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
            "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
            "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
            "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
            "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
            "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
            "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
            "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
            "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
            "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
            "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
            "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
            "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
            "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
            "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
            "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
            "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
            "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
            "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
            "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
            "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
            "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
            "								FROM 	(  \n" +
            "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
            "												max(c.connecterTypeID) connecterTypeID,  \n" +
            "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
            "														then min(c.functionalCategoryID)  \n" +
            "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
            "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
            "														else -1 /* MisMatched */  \n" +
            "												end) parttypeID,  \n" +
            "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
            "															then  min(c.mountingTypeID)  \n" +
            "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
            "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
            "														else  -1  \n" +
            "												end) mountingTypeID,  \n" +
            "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
            "												group_concat(kal.description) AS description  \n" +
            "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
            "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
            "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
            "												AND 	kal.partID =  ', pPartId, '  \n" +
            "												AND 	kal.isDeleted = 0  \n" +
            "												AND		c.isDeleted = 0  \n" +
            "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
            "									) AS kl  \n" +
            "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
            "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
            "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
            "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
            "												AND kl.partID = ka.assyID  \n" +
            "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
            "							where 		 k.isDeleted = 0  \n" +
            "						) AS a      inner join  \n" +
            "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
            "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
            "			GROUP_CONCAT(  \n" +
            "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
            "				a.RoHSStatusID,''@@@'',  \n" +
            "				IFNULL(a.name,\"\"),''@@@'',  \n" +
            "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
            "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
            "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
            "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
            "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
            "				a.mfgCode,''@@@'',  \n" +
            "				a.mfgPNID,''@@@'',  \n" +
            "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
            "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
            "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
            "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
            "			FROM  \n" +
            "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "                        approvedMountingType,  \n" +
            "                        mismatchMountingTypeStep,  \n" +
            "                        mismatchFunctionalCategoryStep,  \n" +
            "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
            "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
            "						  from  \n" +
            "							(SELECT l.id,l.refRfqLineitem ,  \n" +
            "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
            "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "									ELSE    /*Packaging Alias*/  \n" +
            "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "									END AS restrictUsePermanentlyStep,  \n" +
            "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "									ELSE     /*Packaging Alias*/  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
            "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
            "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
            "									JOIN component c ON al.mfgPNID = c.id  \n" +
            "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
            "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
            "															 and x.mfgpnid = d.id  \n" +
            "															 and d.id != c.id and x.isdeleted = 0)  \n" +
            "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
            "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
            "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
            "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
            "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
            "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
            "							) a group by a.id, a.refRfqLineitem  \n" +
            "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
            "					) AS c  \n" +
            "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
            "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
            "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
            "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
            "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
            "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
            "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
            "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
            "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
            "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
            "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
            "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
            "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
            "		) As mainData  \n" +
            "		WHERE', pWhereClause,' ', vFilterWhereClause  \n" +
            "	);  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;  \n" +
            "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
            "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
            "  \n" +
            "    EXECUTE mainQuery;  \n" +
            "	DEALLOCATE PREPARE mainQuery;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
            "	PREPARE query3 FROM @SQLStatement3;  \n" +
            "	EXECUTE query3;  \n" +
            "	DEALLOCATE PREPARE query3;  \n" +
            "  \n" +
            "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
            "	PREPARE query4 FROM @SQLStatement4;  \n" +
            "	EXECUTE query4;  \n" +
            "	DEALLOCATE PREPARE query4;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrivePurchaseConsolidatedList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrivePurchaseConsolidatedList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPartId INT,  \n" +
            "	IN pKitQty INT,  \n" +
            "    IN pPOQty INT,  \n" +
            "    IN pMRPQty INT,  \n" +
            "	IN pPackagingAlias BOOLEAN,  \n" +
            "	IN pRefSalesOrderDetID INT,  \n" +
            "    IN pLineId INT,  \n" +
            "    IN pCustomerId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "    DECLARE pWhereLineId VARCHAR(500);  \n" +
            "  \n" +
            "	IF (pLineId != 0) THEN  \n" +
            "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);  \n" +
            "	ELSE  \n" +
            "		SET pWhereLineId = ' AND 1=1';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = \"ORDER BY lineID ASC\";  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
            "		SET pWhereClause = ' 1=1';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
            "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
            "  \n" +
            "	SET @vFromSQLQuery = CONCAT('  \n" +
            "		SELECT	*  \n" +
            "		FROM	(  \n" +
            "			SELECT 	id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
            "				rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
            "				custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
            "				restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
            "				restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
            "				isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
            "				notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
            "				qpa,		 	consolidatedQPA,  \n" +
            "				uomID, 			unitName,    			isInstall,				connecterTypeID,  \n" +
            "				parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
            "				mfgPN,    		numOfPosition, 			requireQty,    				requirePins,  \n" +
            "				allocatedQty,		allocatedUnit,			consumeUnits,    			consumeQty,  \n" +
            "				allocatedPins,		scrapedPins,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
            "						ELSE  \n" +
            "							CASE  \n" +
            "								WHEN connecterTypeID = -2 THEN  \n" +
            "									CASE WHEN (((IFNULL(qpa, 0) * ', pMRPQty ,' * IFNULL(numOfPosition, 0)) - allocatedPins) < 0) THEN 0 ELSE ((IFNULL(qpa, 0) * ', pMRPQty ,' * IFNULL(numOfPosition, 0)) - allocatedPins) END  \n" +
            "								ELSE  \n" +
            "									CASE WHEN (((IFNULL(qpa, 0) * ', pMRPQty ,') - allocatedUnit) < 0) THEN 0 ELSE ((IFNULL(qpa, 0) * ', pMRPQty ,') - allocatedUnit) END  \n" +
            "							END  \n" +
            "					END  \n" +
            "				) shortagePerBuild,  \n" +
            "                isPurchaseWithDNP isPurchase,  \n" +
            "                refMongoTrnsID  \n" +
            "			FROM	(  \n" +
            "				SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
            "						a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
            "						a.custPNID,  \n" +
            "						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
            "						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
            "						1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
            "						a.restrictCPNUseInBOMStep,  \n" +
            "						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
            "						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
            "						a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
            "						a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
            "						IFNULL(a.qpa, 0) qpa,	IFNULL(a.qpa, 0) consolidatedQPA,  \n" +
            "						a.uomID, 			fun_getUnitNameByID(a.uomID) unitName,  \n" +
            "						a.isInstall,		a.isPurchaseWithDNP,		a.connecterTypeID,  \n" +
            "						a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
            "						a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
            "						',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
            "						a.numOfPosition,  \n" +
            "						(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.qpa, 0) * ', pMRPQty ,') END) requireQty,  \n" +
            "						(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.qpa, 0) * ', pMRPQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
            "						b.allocatedQty,			b.allocatedUnit,		b.consumeUnits,  \n" +
            "						b.consumeQty,			b.allocatedPins,		b.scrapedPins,  \n" +
            "						fun_getAvilableStockWithPackagingAlias(a.rfqLineItemsId, NULL, a.refSalesOrderDetId, a.uomID, a.consolidatedMfgPNIDs) availabelStock,  \n" +
            "                        refMongoTrnsID  \n" +
            "				FROM 		kit_allocation_consolidate_Line_detail a  \n" +
            "				INNER JOIN 	(  \n" +
            "							SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  min(b.refMongoTrnsID) refMongoTrnsID,  \n" +
            "									SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.ConsumeQty) consumeQty,  \n" +
            "									SUM(b.ConsumeUnits) consumeUnits,	SUM(b.AllocatedPins ) allocatedPins, 	SUM(b.scrapedPins) scrapedPins  \n" +
            "							FROM 		temp_Kit_Consolidate_Detail a  \n" +
            "							LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
            "							GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
            "						) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
            "				WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
            "			) AS  subData  \n" +
            "		)  \n" +
            "		AS  mainData  \n" +
            "		WHERE', pWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
            "  \n" +
            "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
            "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
            "	EXECUTE mainQuery;  \n" +
            "	DEALLOCATE PREPARE mainQuery;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = \" SELECT * FROM ConsolidatedResult \";  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement3 = (SELECT fun_lastPricingStatus(pRefSalesOrderDetID,0,1));  \n" +
            "	PREPARE query3 FROM @SQLStatement3;  \n" +
            "	EXECUTE query3;  \n" +
            "	DEALLOCATE PREPARE query3;  \n" +
            "  \n" +
            "	#DROP TEMPORARY TABLE Results_Sproc_RetrivePurchaseConsolidatedList;  \n" +
            "	DROP TEMPORARY TABLE ConsolidatedResult;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5224,'2.00','V1','User Story 36526: Correct consolidated logic for packaging alias case for alternate parts in different line  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;            
        case 5224:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
            "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
            "	IN pRMADetailLineId INT,  \n" +
            "	IN pPackingSlipId INT,  \n" +
            "	IN pPackingSlipDetailId INT,  \n" +
            "	IN pPartId INT,  \n" +
            "	IN pPackagingId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	SELECT 	MAX(pds.id) stockId,  \n" +
            "			'PU' AS `type`,  \n" +
            "			'Pending UMID' AS `typeValue`,  \n" +
            "			NULL umidId,  \n" +
            "			NULL umid,  \n" +
            "			vu.PartId partId,  \n" +
            "			vu.packagingID packagingId,  \n" +
            "			NULL receiveMaterialType,  \n" +
            "			SUM(pd.receivedQty) receivedQty,  \n" +
            "			SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) availableQty,  \n" +
            "			SUM(IFNULL(pds.qty,0)) shipmentQty,  \n" +
            "			vu.BinID binId,  \n" +
            "			b.name binName,  \n" +
            "			b.WarehouseID,  \n" +
            "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
            "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
            "            0 availableQtyAtRMA,  \n" +
            "            0 availableUnitAtRMA,  \n" +
            "            vu.receivedStatus  \n" +
            "	FROM 		vu_umid_creation_pending vu  \n" +
            "	LEFT JOIN 	(  \n" +
            "				SELECT 		refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID , receivedStatus  \n" +
            "				FROM 		packing_slip_material_receive_det  \n" +
            "				WHERE 		isDeleted = 0  \n" +
            "				GROUP BY  	refPackingSlipMaterialRecID, packagingID, partID, receivedStatus  \n" +
            "			) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId AND pd.receivedStatus = vu.receivedStatus  \n" +
            "	LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
            "						AND pds.refPackingSlipId = vu.packingSlipID  \n" +
            "						AND pds.packagingId = vu.packagingID  \n" +
            "						AND pds.partId = vu.PartId  \n" +
            "						AND pds.isDeleted = 0  \n" +
            "						AND pds.type = 'PU'  \n" +
            "						AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
            "	LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
            "	WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
            "				AND vu.packagingID = pPackagingId  \n" +
            "				AND vu.partID = pPartId  \n" +
            "				AND b.isDeleted = 0  \n" +
            "	GROUP BY 	typeValue, umidId, umid, partId, packagingId, receiveMaterialType,binId, binName, WarehouseID, warehouseName, parentWarehouseName, vu.receivedStatus  \n" +
            "    having SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) > 0 or MAX(pds.id) is not null  \n" +
            "	UNION  \n" +
            "	SELECT 		cp.id stockId,  \n" +
            "			cp.type AS `type`,  \n" +
            "			'UMID' AS `typeValue`,  \n" +
            "			c.id umidId,  \n" +
            "			c.uid umid,  \n" +
            "			c.refcompid partId,  \n" +
            "			c.packaging packagingId,  \n" +
            "			c.receiveMaterialType,  \n" +
            "			pd.receivedQty receivedQty,  \n" +
            "			c.pkgQty availableQty,  \n" +
            "			cp.qty shipmentQty,  \n" +
            "			c.binID binId,  \n" +
            "			b.name binName,  \n" +
            "			b.WarehouseID,  \n" +
            "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
            "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
            "            cp.availableQtyAtRMA,  \n" +
            "            cp.availableUnitAtRMA,  \n" +
            "            pd.receivedStatus  \n" +
            "	FROM 		packing_slip_material_receive_det_stock cp  \n" +
            "	INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
            "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
            "	INNER JOIN 	binmst b ON b.id = c.binId  \n" +
            "	WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId      and cp.refRMADetailid = pRMADetailLineId  \n" +
            "				AND cp.type = 'U'  \n" +
            "				AND cp.isDeleted = 0  \n" +
            "				AND c.isDeleted = 0  \n" +
            "				AND pd.isDeleted = 0  \n" +
            "				AND b.isDeleted = 0  \n" +
            "	UNION  \n" +
            "	SELECT 		NULL stockId,  \n" +
            "			'U' AS `type`,  \n" +
            "			'UMID' AS `typeValue`,  \n" +
            "			c.id umidId,  \n" +
            "			c.uid umid,  \n" +
            "			c.refcompid partId,  \n" +
            "			c.packaging packagingId,  \n" +
            "			c.receiveMaterialType,  \n" +
            "			pd.receivedQty receivedQty,  \n" +
            "			c.pkgQty availableQty,  \n" +
            "			0 shipmentQty,  \n" +
            "			c.binID binId,  \n" +
            "			b.name binName,  \n" +
            "			b.WarehouseID,  \n" +
            "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
            "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
            "            c.pkgQty availableQtyAtRMA,  \n" +
            "            c.pkgUnit availableUnitAtRMA,  \n" +
            "            pd.receivedStatus  \n" +
            "	FROM 		component_sid_stock_packing_detail cp  \n" +
            "	INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
            "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
            "	INNER JOIN 	binmst b ON b.id = c.binID  \n" +
            "	WHERE 		c.pkgQty > 0  \n" +
            "				AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
            "				AND cp.isDeleted = 0  \n" +
            "				AND c.isDeleted = 0  \n" +
            "				AND pd.isDeleted = 0  \n" +
            "				AND b.isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5225,'2.00','V1','Task 36564: Add a column Received Status for Pending, Accepted, Accepted with Deviation, Rejected line status - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5225:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021 *********************************** */
            "update page_detail set pageName='Part Alias Validations',menuName='Part Alias Validations', displayMenuName='Part Alias Validations' where pageName='Alias Part Validations';  \n" +
            /* **************************** Add Script Version -> 06-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5226,'2.00','V1',' User Story 36364: Menu Name Changes: Purchase Management - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5226:
            allDbChangesArray.push(
            /* **************************** New Script -> 07-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getDesignatorList;  \n" +
                "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
                "	pRefDesig TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
                "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
                "  DECLARE item VARCHAR(200);  \n" +
                "  DECLARE delim CHAR(1) ;  \n" +
                "  DECLARE vGetRange VARCHAR(2000);  \n" +
                "  SET delim = ',';  \n" +
                "  If pRefDesig IS NOT NULL Then  \n" +
                "    -- Replace space with comma, as we consider space as a seperator too  \n" +
                "    SET refDesigArr = trim(pRefDesig);  \n" +
                "    SET refDesigArr = replace(refDesigArr,' ', '');  \n" +
                "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
                "    set maxLength = length(refDesigArr);  \n" +
                "	REPEAT  \n" +
                "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
                "        IF endPos = 0 THEN  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
                "        ELSE  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
                "        END IF;  \n" +
                "		IF item <>'' OR item IS NOT NULL THEN  \n" +
                "			IF (instr(item,'-') > 0) THEN  \n" +
                "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
                "			ELSE  \n" +
                "				SET vGetRange = item;  \n" +
                "			END IF;  \n" +
                "			IF startpos >=  1 AND  endPos = 0 THEN  \n" +
                "				SET vReturn = concat(vReturn,vGetRange);  \n" +
                "				SET startPos = maxLength ;  \n" +
                "			ELSE  \n" +
                "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	UNTIL startPos>= maxLength END REPEAT;  \n" +
                "  END IF;  \n" +
                "  return vReturn;  \n" +
                "end;  \n" +
            /* **************************** Add Script Version -> 07-09-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5227,'2.00','V1','fun_getDesignatorList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5227:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Kit Allocation not Required\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
                "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item(Line#)\",  \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Cust BOM Line#\",  \n" +
                "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Kit Allocation not Required\",  \n" +
                "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN Rev\",  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Pin Per REF DES on PCB\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfRows IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"No. of Rows\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty\",  \n" +
                "				NULL, CAST(trim(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP REF DES\",  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.uomID IS NOT NULL  \n" +
                "				THEN  \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "				ELSE  \n" +
                "					SET newUOM = '';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "			IF newSubstitutesAllow != '' THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
                "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
                "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5228,'2.00','V1','Manage No of rows entry in history for BOM - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5228:
                allDbChangesArray.push(
                /* **************************** New Script -> 07-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetailsPerLine` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
                "    IN pMarkedForRefund TINYINT,  \n" +
                "    IN pWithCommissionLine TINYINT,  \n" +
                "    IN pWithOtherChargesLine TINYINT,  \n" +
                "    IN pZeroAmountLineFilter TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,  \n" +
                "        cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "        cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cpd.shippingNotes , cpd.internalComment,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status, cp.subStatus,  \n" +
                "         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cpd.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId) paymentDueDate,  \n" +
                "         cpd.id detID,  \n" +
                "         cpd.partId,  \n" +
                "         co.mfgpn,  \n" +
                "         cpd.assyDescription ,  \n" +
                "         co.PIDCode,  \n" +
                "         co.RoHSStatusID,  \n" +
                "         co.mfgcodeID,  \n" +
                "         co.nickname,  \n" +
                "         cpd.lineID,  \n" +
                "         cpd.reflineID,  \n" +
                "         cpd.custPOLineID,  \n" +
                "         cpd.shipQty,  \n" +
                "         cpd.unitPrice,  \n" +
                "         cpd.componentStockType,  \n" +
                "         cpd.extendedPrice,  \n" +
                "         othercharges AS lineOtherCharges,  \n" +
                "         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "		 cpd.quoteNumber,  \n" +
                "		 cpd.quoteFrom,  \n" +
                "         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
                "			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
                "              else null end) qtyTurnTimeID,  \n" +
                "		 cpd.assyQtyTurnTimeText,  \n" +
                "		 cpd.refRFQGroupID,  \n" +
                "         rohs.rohsIcon,  \n" +
                "         rohs.name rohsName,  \n" +
                "         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
                "         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
                "         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
                "         cp.totalAmount,  \n" +
                "         cp.refCustInvoiceID,  \n" +
                "         co.partType,  \n" +
                "         co.isCustom, co.custAssyPN customPartNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "        JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
                "        LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
                "        LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cpd.partId in (', pPartId , ')');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
                "	END IF;  \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWithCommissionLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pWithOtherChargesLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
                "    END IF;  \n" +
                "   IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5229,'2.00','V1',' Sproc_RetrieveCustomerInvoiceDetailsPerLine - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5229:
                    allDbChangesArray.push(
                    /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_ImportCPNData`;  \n" +
                    "CREATE PROCEDURE `Sproc_ImportCPNData`(  \n" +
                    "	IN pcustomerID INT,  \n" +
                    "	IN pUserID INT,  \n" +
                    "	IN pUserRoleID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE mountingTypeID INT;  \n" +
                    "	DECLARE functionalCategoryID INT;  \n" +
                    "	DECLARE rohsStatusID INT;  \n" +
                    "	DECLARE categoryID INT;  \n" +
                    "	DECLARE partTypeID INT;  \n" +
                    "	DECLARE statusID INT;  \n" +
                    "	DECLARE mfgPNID INT;  \n" +
                    "	DECLARE pEpicoreType VARCHAR(100);  \n" +
                    "	DECLARE vSerialNumer VARCHAR(8);  \n" +
                    "	DECLARE maxDisplayOrder DECIMAL;  \n" +
                    "	DECLARE mfgPID VARCHAR(500);  \n" +
                    "	DECLARE maxPartId INT;  \n" +
                    "	DECLARE totCPN INT;  \n" +
                    "	DECLARE pcustPN VARCHAR(100);  \n" +
                    "	DECLARE pcustPart VARCHAR(100);  \n" +
                    "	DECLARE pcustPNRev VARCHAR(100);  \n" +
                    "	DECLARE prefCPNPartID INT;  \n" +
                    "	DECLARE prefComponentIDs VARCHAR(5000);  \n" +
                    "	DECLARE i INT DEFAULT 0;  \n" +
                    "    DECLARE v_serialNumber varchar(20);  \n" +
                    "    DECLARE v_message varchar(20);  \n" +
                    "  \n" +
                    "	SET categoryID = 2;  \n" +
                    "	SET partTypeID = 2;  \n" +
                    "	SET rohsStatusID = 1;  \n" +
                    "  \n" +
                    "	SELECT epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                    "	SELECT mfgCode, mfgType INTO @mfgCode, @mfgType FROM mfgcodemst WHERE id = pcustomerID;  \n" +
                    "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                    "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                    "	SELECT id INTO statusID FROM component_partstatusmst WHERE `name`= 'Active';  \n" +
                    "	IF functionalCategoryID IS NULL THEN  \n" +
                    "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                    "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId)  \n" +
                    "		VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pUserRoleID);  \n" +
                    "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                    "	END IF;  \n" +
                    "  	IF mountingTypeID IS NULL THEN  \n" +
                    "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId)VALUES('CPN', 1, pUserID,pUserRoleID);  \n" +
                    "		SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SELECT COUNT(*) FROM t_CPNUploadDetails INTO totCPN;  \n" +
                    "	-- select * from t_CPNUploadDetails;  \n" +
                    "	WHILE i < totCPN DO  \n" +
                    "		SET prefCPNPartID = NULL;  \n" +
                    "		SET prefComponentIDs = NULL;  \n" +
                    "		SET pcustPart = NULL;  \n" +
                    "		SET pcustPN = NULL;  \n" +
                    "		SET pcustPNRev = NULL;  \n" +
                    "		SELECT refCPNPartID, refComponentIDs, custPN, custPart, custPNRev  \n" +
                    "		INTO prefCPNPartID, prefComponentIDs, pcustPN, pcustPart, pcustPNRev FROM t_CPNUploadDetails LIMIT i,1;  \n" +
                    "  \n" +
                    "		IF prefCPNPartID IS NULL THEN  \n" +
                    "			SET mfgPID =CONCAT( @mfgCode , \"+\" , pcustPN);  \n" +
                    "			SET mfgPNID = NULL;  \n" +
                    "			SELECT d.id INTO mfgPNID FROM component d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0 LIMIT 1;  \n" +
                    "			IF mfgPNID IS NULL THEN  \n" +
                    "				call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then  \n" +
                    "																'MPNSystemID'  \n" +
                    "															else 'SPNSystemID' end,  \n" +
                    "														true);  \n" +
                    "				  select systemID, message into v_serialNumber, v_message  \n" +
                    "				  from temp_serialNumber;  \n" +
                    "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                    "					isCPN, isCustom, mfgCodeID, createdBy, createByRoleId,  \n" +
                    "					RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                    "					createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,updatedBy,updatedAt,updateByRoleId,mfgType)  \n" +
                    "				VALUES (pcustPart, pcustPNRev, pcustPN, mfgPID, statusID,  \n" +
                    "					1,1,pcustomerID,pUserID, pUserRoleID,  \n" +
                    "					rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                    "					fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, v_serialNumber, -1, '-',pUserID,fun_DatetimetoUTCDateTime(), pUserRoleID,@mfgType);  \n" +
                    "				SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                    "				SELECT maxPartId;  \n" +
                    "				CALL Sproc_SaveCustMFGPn(maxPartId,prefComponentIDs,puserID,pUserRoleID);  \n" +
                    "			ELSE  \n" +
                    "				CALL Sproc_SaveCustMFGPn(mfgPNID,prefComponentIDs,puserID,pUserRoleID);  \n" +
                    "			END IF;  \n" +
                    "		ELSE  \n" +
                    "			CALL Sproc_SaveCustMFGPn(prefCPNPartID,prefComponentIDs,puserID,pUserRoleID);  \n" +
                    "			CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(prefCPNPartID, puserID,FALSE);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		SET i = i + 1;  \n" +
                    "	END WHILE;  \n" +
                    "	SELECT pcustomerID;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 07-09-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5230,'2.00','V1','Bug 36592: IMPORT CPN PART DATA: While adding same name of CPN as MPN from excel file then imported successfully with duplicate entry which is wrong. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;          
                case 5230:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 08-09-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_CheckPackingSlipMaterialValidation`;  \n" +
                    "CREATE PROCEDURE `Sproc_CheckPackingSlipMaterialValidation`(  \n" +
                    "	IN pPackingSlipID INT,  \n" +
                    "	IN pPackingSlipMaterialID INT,  \n" +
                    "	IN pBinID INT,  \n" +
                    "	IN pPartID INT,  \n" +
                    "	IN pUpdatedReceivedQty DECIMAL(18,8),  \n" +
                    "	IN pPackagingId INT,  \n" +
                    "	IN pSpq INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE vOldReceivedQty DECIMAL(18,8);  \n" +
                    "	DECLARE vUMIDCreatedQty DECIMAL(18,8);  \n" +
                    "	DECLARE vPackagingId INT;  \n" +
                    "	DECLARE vPackagingAliesComponentId VARCHAR(5000);  \n" +
                    "  \n" +
                    "	-- Return packing slip detail if it's invoice status is Paid  \n" +
                    "	SELECT 		1 errorCode,  \n" +
                    "			p.id packingSlipID,  \n" +
                    "			p.packingSlipNumber,  \n" +
                    "			p.packingSlipDate,  \n" +
                    "			p.status packingSlipStatus,  \n" +
                    "			i.id invoiceID,  \n" +
                    "			i.invoiceNumber,  \n" +
                    "			i.invoiceDate,  \n" +
                    "			i.status invoiceStatus  \n" +
                    "	FROM 		packing_slip_material_receive p  \n" +
                    "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                    "	WHERE 		p.id = pPackingSlipID  \n" +
                    "				AND 	i.status = 'P'  \n" +
                    "				AND 	p.isDeleted = 0;  \n" +
                    "  \n" +
                    "	-- Return packing slip line detail if it's invoice line status is Approve or Disapprove  \n" +
                    "	SELECT 		6 errorCode,  \n" +
                    "			p.id packingSlipID,  \n" +
                    "			p.packingSlipNumber,  \n" +
                    "			p.packingSlipDate,  \n" +
                    "			p.status packingSlipStatus,  \n" +
                    "			i.id invoiceID,  \n" +
                    "			i.invoiceNumber,  \n" +
                    "			i.invoiceDate,  \n" +
                    "			i.status invoiceStatus,  \n" +
                    "			inv_d.packingSlipSerialNumber invoiceSerialNumber,  \n" +
                    "			inv_d.status invoiceLineStatus  \n" +
                    "	FROM 		packing_slip_material_receive p  \n" +
                    "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                    "	LEFT JOIN	packing_slip_material_receive_det pkg_d ON pkg_d.refPackingSlipMaterialRecID = p.id AND pkg_d.id = pPackingSlipMaterialID AND pkg_d.deletedAt IS NULL  \n" +
                    "	LEFT JOIN	packing_slip_material_receive_det inv_d ON inv_d.refPackingSlipMaterialRecID = i.id AND pkg_d.packingSlipSerialNumber = inv_d.packingSlipSerialNumber AND inv_d.deletedAt IS NULL  \n" +
                    "	WHERE 		p.id = pPackingSlipID  \n" +
                    "				AND 	(inv_d.status = 'A' OR inv_d.status = 'D')  \n" +
                    "				AND 	p.isDeleted = 0;  \n" +
                    "  \n" +
                    "	-- Get detail of any UMID is created or not for particular line  \n" +
                    "	SELECT packagingID INTO vPackagingId FROM packing_slip_material_receive_det WHERE id = pPackingSlipMaterialID AND deletedAt IS NULL;  \n" +
                    "	IF (pPackagingId != vPackagingId) THEN  \n" +
                    "		SELECT 	4 errorCode,  \n" +
                    "			csspd.refPackingSlipDetailID,  \n" +
                    "			csspd.refComponentSidStockID  \n" +
                    "		FROM 	component_sid_stock_packing_detail csspd  \n" +
                    "		WHERE	deletedAt IS NULL  \n" +
                    "				AND refPackingSlipDetailID = pPackingSlipMaterialID;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- Get detail of pending UMID part if it is existing in same bin of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                    "	SELECT 		2 errorCode,  \n" +
                    "			psd.id,  \n" +
                    "			p.packingSlipNumber,  \n" +
                    "			psd.refPackingSlipMaterialRecID,  \n" +
                    "			psd.partID,  \n" +
                    "			c.mfgPN,  \n" +
                    "			c.PIDCode,  \n" +
                    "			p.mfgCodeID,  \n" +
                    "			mfg.mfgCode,  \n" +
                    "			mfg.mfgName,  \n" +
                    "			psd.binID,  \n" +
                    "			b.Name binName  \n" +
                    "	FROM 		packing_slip_material_receive_det psd  \n" +
                    "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                    "	WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                    "				AND 	psd.umidCreated = 0  \n" +
                    "				AND	p.id != pPackingSlipID  \n" +
                    "				AND 	psd.binID = pBinID  \n" +
                    "				AND 	psd.partID = pPartID  \n" +
                    "				AND		psd.deletedAt IS NULL;  \n" +
                    "  \n" +
                    "	-- Get detail of pending UMID part if it is existing in same bin with packaging alies and same packaging and same spq of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                    "	SELECT 	GROUP_CONCAT(componentID)  \n" +
                    "	INTO 	vPackagingAliesComponentId  \n" +
                    "	FROM 	component_packagingalias  \n" +
                    "	WHERE 	aliasgroupID = (SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pPartID AND deletedAt IS NULL LIMIT 1);  \n" +
                    "  \n" +
                    "	SELECT 		5 errorCode,  \n" +
                    "			psd.id,  \n" +
                    "			p.packingSlipNumber,  \n" +
                    "			psd.refPackingSlipMaterialRecID,  \n" +
                    "			psd.partID,  \n" +
                    "			c.mfgPN,  \n" +
                    "			c.PIDCode,  \n" +
                    "			p.mfgCodeID,  \n" +
                    "			mfg.mfgCode,  \n" +
                    "			mfg.mfgName,  \n" +
                    "			psd.binID,  \n" +
                    "			b.Name binName  \n" +
                    "	FROM 		packing_slip_material_receive_det psd  \n" +
                    "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                    "	INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                    "	WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                    "				AND 	psd.umidCreated = 0  \n" +
                    "				AND	p.id != pPackingSlipID  \n" +
                    "				AND 	psd.binID = pBinID  \n" +
                    "				AND 	FIND_IN_SET(psd.partID, IFNULL(vPackagingAliesComponentId, CAST(pPartID AS CHAR(11))))  \n" +
                    "				AND 	c.minimum = pSpq  \n" +
                    "				AND		psd.deletedAt IS NULL;  \n" +
                    "  \n" +
                    "        -- Get old received quantity to check further validation  \n" +
                    "        SELECT	receivedQty  \n" +
                    "        INTO 	vOldReceivedQty  \n" +
                    "        FROM 	packing_slip_material_receive_det  \n" +
                    "        WHERE 	id = pPackingSlipMaterialID  \n" +
                    "			AND isDeleted = 0;  \n" +
                    "  \n" +
                    "        IF(pUpdatedReceivedQty > vOldReceivedQty) THEN  \n" +
                    "		-- Update UMID created flag to false from API  \n" +
                    "		SELECT 	0 errorCode,  \n" +
                    "			partID,  \n" +
                    "			orderedQty,  \n" +
                    "			receivedQty,  \n" +
                    "			0 updateUMIDCreated  \n" +
                    "		FROM 	packing_slip_material_receive_det  \n" +
                    "		WHERE 	id = pPackingSlipMaterialID  \n" +
                    "				AND 	isDeleted = 0;  \n" +
                    "	ELSEIF(pUpdatedReceivedQty < vOldReceivedQty) THEN  \n" +
                    "		-- Get total UMID create qty  \n" +
                    "		SELECT 		SUM(orgQty) INTO vUMIDCreatedQty  \n" +
                    "		FROM 		component_sid_stock css  \n" +
                    "		INNER JOIN 	component_sid_stock_packing_detail cssp ON css.id = cssp.refComponentSidStockID AND cssp.isDeleted = 0  \n" +
                    "		INNER JOIN 	packing_slip_material_receive_det psd ON cssp.refPackingSlipDetailID = psd.id  \n" +
                    "					AND psd.id = pPackingSlipMaterialID  \n" +
                    "					AND psd.isDeleted = 0  \n" +
                    "		WHERE 		css.isdeleted = 0;  \n" +
                    "  \n" +
                    "		IF(vUMIDCreatedQty > pUpdatedReceivedQty) THEN  \n" +
                    "			-- Restrict to user if created UMID qty is greater than updated qty  \n" +
                    "			SELECT 	3 errorCode,  \n" +
                    "				partID,  \n" +
                    "				orderedQty,  \n" +
                    "				receivedQty,  \n" +
                    "				vUMIDCreatedQty umidCreatedQty  \n" +
                    "			FROM 	packing_slip_material_receive_det  \n" +
                    "			WHERE 	id = pPackingSlipMaterialID  \n" +
                    "					AND isDeleted = 0;  \n" +
                    "		ELSE  \n" +
                    "			SELECT 	0 errorCode,  \n" +
                    "				partID,  \n" +
                    "				orderedQty,  \n" +
                    "				receivedQty,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN (vUMIDCreatedQty = pUpdatedReceivedQty) THEN  \n" +
                    "							1  \n" +
                    "						ELSE  \n" +
                    "							0  \n" +
                    "					END  \n" +
                    "				) updateUMIDCreated  \n" +
                    "			FROM 	packing_slip_material_receive_det  \n" +
                    "			WHERE 	id = pPackingSlipMaterialID  \n" +
                    "					AND isDeleted = 0;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	SELECT 8 errorCode,  \n" +
                    "		qty RMAQty  \n" +
                    "	FROM  \n" +
                    "		packing_slip_material_receive_det_stock  \n" +
                    "	WHERE refPackingSlipId = pPackingSlipID  \n" +
                    "        AND partId = pPartID  \n" +
                    "        AND packagingId = pPackagingId  \n" +
                    "        AND binId = pBinID  \n" +
                    "        AND isdeleted = 0  \n" +
                    "        and qty > pUpdatedReceivedQty;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** New Script -> 08-09-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                    "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                    "	IN pPageIndex INT,  \n" +
                    "	IN pRecordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN pPackingSlipID INT,  \n" +
                    "   IN pInvoiceLineId INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE pOffset INT;  \n" +
                    "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "	DECLARE v_ParentPackingSlipId INT;  \n" +
                    "	DECLARE v_InvoiceSlipId INT;  \n" +
                    "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                    "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                    "  \n" +
                    "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                    "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                    "  \n" +
                    "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                    "  \n" +
                    "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                    "	SELECT 	*,  \n" +
                    "		(  \n" +
                    "			CASE  \n" +
                    "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                    "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                    "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                    "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                    "				ELSE NULL  \n" +
                    "			END  \n" +
                    "		) AS receivedStatusValue,  \n" +
                    "		(  \n" +
                    "			SELECT (  \n" +
                    "				CASE  \n" +
                    "					WHEN id is not null THEN TRUE  \n" +
                    "					ELSE FALSE  \n" +
                    "				END )  \n" +
                    "			FROM packing_slip_material_receive_det_stock  \n" +
                    "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                    "				AND partId = a.partID  \n" +
                    "				AND packagingId = a.packagingID  \n" +
                    "				AND binId = a.binID  \n" +
                    "				AND isdeleted = 0  \n" +
                    "                Limit 1  \n" +
                    "		) AS isRMACreated,  \n" +
                    "        (  \n" +
                    "			CASE  \n" +
                    "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                    "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                    "				ELSE False  \n" +
                    "			END  \n" +
                    "		) AS isPendingUMIDDisable  \n" +
                    "	FROM 	(  \n" +
                    "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                    "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                    "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                    "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                    "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                    "				p.invoicePrice, 				p.disputedPrice,  \n" +
                    "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                    "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                    "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                    "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                    "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                    "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                    "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                    "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                    "				p.discount,  \n" +
                    "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                    "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                    "				p.refCreditDebitInvoiceNo,  \n" +
                    "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                    "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                    "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                    "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                    "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                    "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                    "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                    "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                    "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                    "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                    "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                    "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                    "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                    "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                    "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                    "							p.receivedStatus  \n" +
                    "						ELSE  \n" +
                    "							(SELECT receivedStatus  \n" +
                    "							FROM 	packing_slip_material_receive_det  \n" +
                    "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                    "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "									AND isDeleted = 0 LIMIT 1)  \n" +
                    "					END  \n" +
                    "				) receivedStatus,  \n" +
                    "				p.remark,  \n" +
                    "				p.internalRemark,  \n" +
                    "				p.comment,  \n" +
                    "				p.internalRef,  \n" +
                    "				p.purchaseInspectionComment,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                    "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                    "						ELSE  \n" +
                    "							(SELECT COUNT(1)  \n" +
                    "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                    "							WHERE EXISTS (  \n" +
                    "									SELECT 	1  \n" +
                    "									FROM 	packing_slip_material_receive_det pslip  \n" +
                    "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                    "											AND 	pslip.id = psmp.lineId  \n" +
                    "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "											AND	pslip.isDeleted = 0)  \n" +
                    "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                    "					END  \n" +
                    "				) AS purchaseRequirementCount,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                    "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                    "						ELSE  \n" +
                    "							(SELECT COUNT(1)  \n" +
                    "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                    "							WHERE 	EXISTS (  \n" +
                    "									SELECT 	1  \n" +
                    "									FROM 	packing_slip_material_receive_det psmr  \n" +
                    "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                    "										AND	psmr.id = psm.lineId  \n" +
                    "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "										AND 	psmr.isDeleted = 0  \n" +
                    "									)  \n" +
                    "								AND psm.inspectionStatus = 'R'  \n" +
                    "								AND psm.isDeleted = 0  \n" +
                    "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                    "					END  \n" +
                    "				) AS rejectedPurchaseRequirementCount,  \n" +
                    "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                    "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                    "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                    "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                    "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                    "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                    "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                    "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                    "				ps.refInvoiceIdForMemo,  \n" +
                    "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                    "				ps.refInvoiceNumberForMemo,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                    "						ELSE  \n" +
                    "							(SELECT `status`  \n" +
                    "							FROM 	packing_slip_material_receive_det  \n" +
                    "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                    "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "									AND isDeleted = 0)  \n" +
                    "					END  \n" +
                    "				) invoiceStatus,  \n" +
                    "				(  \n" +
                    "					CASE  \n" +
                    "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                    "						ELSE  \n" +
                    "							(SELECT refCreditDebitInvoiceNo  \n" +
                    "							FROM 	packing_slip_material_receive_det  \n" +
                    "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                    "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "									AND isDeleted = 0)  \n" +
                    "					END  \n" +
                    "				) invoiceLineHasMemo,  \n" +
                    "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                    "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                    "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                    "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                    "					AND pd.partId = p.partID) commentCount,  \n" +
                    "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                    "				p.refPackingSlipIdForRma,  \n" +
                    "				p.refPackingSlipDetIdForRMA,  \n" +
                    "				p.refInvoiceIdForRma,  \n" +
                    "				p.refPackingSlipForRma,  \n" +
                    "				p.refInvoiceForRma,  \n" +
                    "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                    "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                    "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                    "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                    "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                    "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                    "                ps.packingSlipModeStatus,  \n" +
                    "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                    "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                    "		FROM		packing_slip_material_receive_det p  \n" +
                    "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                    "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                    "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                    "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                    "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                    "		LEFT JOIN	(  \n" +
                    "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                    "					FROM 	packing_slip_material_receive_det ps  \n" +
                    "					WHERE 	ps.isDeleted = 0  \n" +
                    "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                    "		LEFT JOIN 	(  \n" +
                    "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                    "					FROM 	packing_slip_material_receive_det det  \n" +
                    "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                    "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                    "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                    "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                    "		AND 		p.isDeleted = 0  \n" +
                    "	) a;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                    "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                    "	FROM		packing_slip_material_receive_det psm  \n" +
                    "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                    "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                    "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                    "	AND			ps.receiptType = 'P'  \n" +
                    "	AND			psm.isDeleted = 0  \n" +
                    "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                    "  \n" +
                    "	-- Set received qty detail  \n" +
                    "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                    "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                    "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                    "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                    "  \n" +
                    "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                    "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                    "	ELSE  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "		SET pWhereClause = '1=1' ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                    "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                    "    END IF;  \n" +
                    "  \n" +
                    "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                    "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "	ELSE  \n" +
                    "		SET rowNumWhere = '';  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	/* to get total count of rows */  \n" +
                    "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                    "	PREPARE query1 FROM @SQLStatement1;  \n" +
                    "	EXECUTE query1;  \n" +
                    "	DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "	PREPARE query2 FROM @SQLStatement2;  \n" +
                    "	EXECUTE query2;  \n" +
                    "	DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                    "											invoiceTotalDue As invoiceTotalDue,  \n" +
                    "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                    "										  from packingslip_invoice_payment a  \n" +
                    "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                    "										 where b.refPackingslipInvoiceID = c.id  \n" +
                    "                                           and a.refPaymentMode = 'P'  \n" +
                    "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                    "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                    "	PREPARE query3 FROM @SQLStatement3;  \n" +
                    "	EXECUTE query3;  \n" +
                    "	DEALLOCATE PREPARE query3;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 08-09-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5231,'2.00','V1',' User Story 36206: Material Receipt: Line Received Status Impact on Pending UMID Parts, UMID, and RMA flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                    break;      

    }
    return allDbChangesArray;
});

// sample
//break;
//case 5137:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 11-08-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 11-08-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5138,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/