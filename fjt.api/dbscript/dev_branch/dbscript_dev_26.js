(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5231:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2021 *********************************** */
                /* **************************** Add Script Version -> 11-08-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5232,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5232:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \";  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5233,'2.00','V1',' User Story 36587: Enhancement Point for Part master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5233:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_uti_generatekitConsolidateData`;  \n" +
                "CREATE PROCEDURE `Sproc_uti_generatekitConsolidateData`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE finished INTEGER DEFAULT 0;  \n" +
                "	DECLARE vsalesorderid int;  \n" +
                "	DECLARE vpartID int;  \n" +
                "    declare vTotalCount int  DEFAULT 0;  \n" +
                "    declare vcurrentCount int  DEFAULT 0;  \n" +
                "  DEClARE cursalesorder  \n" +
                "		CURSOR FOR  \n" +
                "			select sod.id, sod.partID from salesorderdet sod  \n" +
                "			join component c on c.id = sod.partID and c.category = 3  \n" +
                "			where sod.isdeleted = 0;  \n" +
                "	-- declare NOT FOUND handler  \n" +
                "	DECLARE CONTINUE HANDLER  \n" +
                "	FOR NOT FOUND SET finished = 1;  \n" +
                "		select id into @vuserID from users where `username` = 'ADMIN';  \n" +
                "		select id into @vroleID from roles where `name` = 'Super Admin';  \n" +
                "	OPEN cursalesorder;  \n" +
                "  \n" +
                "    getSalesorder: LOOP  \n" +
                "    IF finished = 1 THEN  \n" +
                "			LEAVE getSalesorder;  \n" +
                "            END IF;  \n" +
                "    	FETCH cursalesorder INTO vsalesorderid,vpartID;  \n" +
                "		CALL `Sproc_CreateKitAllocationConsolidateLine`(vsalesorderid, vpartID, @vuserID, @vroleID);  \n" +
                "	END LOOP getSalesorder;  \n" +
                "	CLOSE cursalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5234,'2.00','V1','Sproc_uti_generatekitConsolidateData - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5234:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_uti_generatekitConsolidateData`;  \n" +
                "CREATE PROCEDURE `Sproc_uti_generatekitConsolidateData`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE finished INTEGER DEFAULT 0;  \n" +
                "	DECLARE vsalesorderid int;  \n" +
                "	DECLARE vpartID int;  \n" +
                "    declare vTotalCount int  DEFAULT 0;  \n" +
                "    declare vcurrentCount int  DEFAULT 0;  \n" +
                "  DEClARE cursalesorder  \n" +
                "		CURSOR FOR  \n" +
                "			select sod.id, sod.partID from salesorderdet sod  \n" +
                "			join component c on c.id = sod.partID and c.category = 3  \n" +
                "			where sod.isdeleted = 0;  \n" +
                "	-- declare NOT FOUND handler  \n" +
                "	DECLARE CONTINUE HANDLER  \n" +
                "	FOR NOT FOUND SET finished = 1;  \n" +
                "		select id into @vuserID from users where `username` = 'ADMIN';  \n" +
                "		select id into @vroleID from roles where `name` = 'Super Admin';  \n" +
                "	OPEN cursalesorder;  \n" +
                "  \n" +
                "    getSalesorder: LOOP  \n" +
                "    IF finished = 1 THEN  \n" +
                "			LEAVE getSalesorder;  \n" +
                "            END IF;  \n" +
                "    	FETCH cursalesorder INTO vsalesorderid,vpartID;  \n" +
                "        if (select count(1) from kit_allocation_consolidate_line_alternatepart where refSalesOrderDetId = vsalesorderid and refAssyId = vpartID and isdeleted = 0) = 0 then  \n" +
                "			CALL `Sproc_CreateKitAllocationConsolidateLine`(vsalesorderid, vpartID, @vuserID, @vroleID);  \n" +
                "        end if;  \n" +
                "	END LOOP getSalesorder;  \n" +
                "	CLOSE cursalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5235,'2.00','V1','Sproc_uti_generatekitConsolidateData - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5235:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-09-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = - 2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuild,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailable,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  #SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5236,'2.00','V1','kit allocation list SP Performance tuning by DP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5236:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "ALTER TABLE warehousemst_history ADD COLUMN (updatedBy VARCHAR(255),  updatedAt DATETIME);  \n" +
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "ALTER TABLE binmst_history ADD COLUMN (updatedBy VARCHAR(255),  updatedAt DATETIME);  \n" +
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5237,'2.00','V1','Bug 36648: Warehouse History is not showing current information of User who updates details of the Warehouse - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5237:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_warehousemst`;  \n" +
                "CREATE TRIGGER `Trg_BU_warehousemst` BEFORE UPDATE ON `warehousemst` FOR EACH ROW FOLLOWS `TRG_UNQDATE_warehousemst`  \n" +
                " IF (  \n" +
                "		OLD.Name != NEW.Name OR  \n" +
                "		IFNULL(OLD.Description, '') != NEW.Description OR  \n" +
                "		IFNULL(OLD.nickname, '') != NEW.nickname OR  \n" +
                "		OLD.parentWHID != NEW.parentWHID OR  \n" +
                "		OLD.isActive != NEW.isActive OR  \n" +
                "		OLD.isPermanentWH != NEW.isPermanentWH OR  \n" +
                "		OLD.isDepartment != NEW.isDepartment OR  \n" +
                "		OLD.id != NEW.id OR  \n" +
                "		IFNULL(OLD.uniqueCartID, '') != NEW.uniqueCartID OR  \n" +
                "		IFNULL(OLD.scanWH, '') != NEW.scanWH OR  \n" +
                "		IFNULL(OLD.scanBin, '') != NEW.scanBin OR  \n" +
                "		OLD.allMovableBin != NEW.allMovableBin OR  \n" +
                "		IFNULL(OLD.userAccessMode, '') != NEW.userAccessMode OR  \n" +
                "		OLD.refEqpID != NEW.refEqpID OR  \n" +
                "		IFNULL(OLD.domain, '') != NEW.domain OR  \n" +
                "		IFNULL(OLD.cartMfr, '') != NEW.cartMfr OR  \n" +
                "		IFNULL(OLD.cartMachineName, '') != NEW.cartMachineName OR  \n" +
                "		IFNULL(OLD.warehouseType, '') != NEW.warehouseType OR  \n" +
                "		OLD.isCartOnline != NEW.isCartOnline  \n" +
                "	) THEN  \n" +
                "		INSERT INTO warehousemst_history(  \n" +
                "			NAME, 			Description, 		nickname,			parentWHID,  \n" +
                "			isActive, 		isPermanentWH, 		isDepartment,			refWHID,  \n" +
                "			createdBy,      	createdAt,		uniqueCartID,			scanWH,  \n" +
                "			scanBin,		allMovableBin,		userAccessMode,			refEqpID,  \n" +
                "			domain,			cartMfr, 		cartMachineName,		warehouseType,  \n" +
                "			isCartOnline,		updatedBy,		updatedAt,			createByRoleId,  \n" +
                "			updateByRoleId )  \n" +
                "		VALUES(  \n" +
                "			OLD.Name,			OLD.Description,		OLD.nickname,			OLD.parentWHID,  \n" +
                "			OLD.isActive,		OLD.isPermanentWH,		OLD.isDepartment,		OLD.id,  \n" +
                "			OLD.createdBy,  	OLD.createdAt,			OLD.uniqueCartID,		OLD.scanWH,  \n" +
                "			OLD.scanBin,		OLD.allMovableBin,		OLD.userAccessMode,		OLD.refEqpID,  \n" +
                "			OLD.domain,			OLD.cartMfr,			OLD.cartMachineName, 	OLD.warehouseType,  \n" +
                "			OLD.isCartOnline,	OLD.updatedBy,			OLD.updatedAt,			OLD.createByRoleId,  \n" +
                "			OLD.updateByRoleId);  \n" +
                "	END IF;  \n" +
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_binmst`;  \n" +
                "CREATE TRIGGER `Trg_BU_binmst` BEFORE UPDATE ON `binmst` FOR EACH ROW IF (  \n" +
                "		OLD.Name != NEW.Name OR  \n" +
                "		IFNULL(OLD.Description, '') != NEW.Description OR  \n" +
                "		OLD.WarehouseID != NEW.WarehouseID OR  \n" +
                "		(SELECT parentWHID FROM warehousemst WHERE id =  OLD.WarehouseID) != (SELECT parentWHID FROM warehousemst WHERE id =  NEW.WarehouseID) OR  \n" +
                "		IFNULL(OLD.nickname, '') != NEW.nickname OR  \n" +
                "		OLD.isActive != NEW.isActive OR  \n" +
                "		OLD.isPermanentBin != NEW.isPermanentBin OR  \n" +
                "		OLD.id != NEW.id OR  \n" +
                "		OLD.isRandom != NEW.isRandom OR  \n" +
                "		IFNULL(OLD.prefix, '') != NEW.prefix OR  \n" +
                "		IFNULL(OLD.suffix, '') != NEW.suffix  \n" +
                "	) THEN  \n" +
                "		INSERT INTO binmst_history(  \n" +
                "			NAME, 				Description, 		WarehouseID, 			parentWarehouseID,  \n" +
                "			nickname,  			isActive, 			isPermanentBin, 		systemGenerated,  \n" +
                "			refBinID, 			createdBy,  		createdAt, 			    isRandom,  \n" +
                "			prefix,				suffix,				createByRoleId,			updateByRoleId,  \n" +
                "			updatedBy,  		updatedAt)  \n" +
                "		VALUES(  \n" +
                "			OLD.Name,			OLD.Description,	OLD.WarehouseID,		(SELECT parentWHID FROM warehousemst WHERE id =  OLD.WarehouseID),  \n" +
                "			OLD.nickname,  		OLD.isActive,		OLD.isPermanentBin,		OLD.systemGenerated,  \n" +
                "			OLD.id,				OLD.createdBy,		OLD.createdAt,         	OLD.isRandom,  \n" +
                "			OLD.prefix,			OLD.suffix, 		OLD.createByRoleId,		OLD.updateByRoleId,  \n" +
                "			OLD.updatedBy,  	OLD.updatedAt);  \n" +
                "	END IF;  \n" +
                /* **************************** New Script -> 09-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5238,'2.00','V1','Bug 36648: Warehouse History is not showing current information of User who updates details of the Warehouse - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5238:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "update page_detail set isReadOnlyDeveloped = 1 where pageName = 'Manage Receiving Material';  \n" +
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5239,'2.00','V1','User Story 35426: [Technical] UMID: Remove salesOrderDetailID, BestBefore & bestBeforeDurationType from UMID table structure and manage their effect  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5239:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT 	salesOrderDetID,  \n" +
                "									(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "									MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_kit_plans  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "	SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* If component id is found */  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5240,'2.00','V1','User Story 35426: [Technical] UMID: Remove salesOrderDetailID, BestBefore & bestBeforeDurationType from UMID table structure and manage their effect  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5240:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-09-2021 *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "				pip.payToAddress,  \n" +
                "				pip.billToName supplierName,  \n" +
                "                pip.billToAddress supplierAddress,  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, (select `name` from company_info where isDeleted = 0 ) companyName  \n" +
                "		FROM customer_addresses cua  \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "        join countrymst c ON c.countryID = cua.countryID  \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5241,'2.00','V1','User Story 36802: Add Description and PO# in Check Print and Remittance report - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5241:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-09-2021  ********************************** */
                "ALTER TABLE component_sid_stock DROP COLUMN BestBefore;  \n" +
                "ALTER TABLE component_sid_stock DROP COLUMN bestBeforeDurationType;  \n" +
                "ALTER TABLE component_sid_stock DROP CONSTRAINT FK_component_sid_stock_SalesOrderDetailID;  \n" +
                "ALTER TABLE component_sid_stock DROP COLUMN salesOrderDetailID;  \n" +
                /* **************************** New Script -> 14-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5242,'2.00','V1','User Story 35426: [Technical] UMID: Remove salesOrderDetailID, BestBefore & bestBeforeDurationType from UMID table structure and manage their effect  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5242:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-09-2021  ********************************** */
                "ALTER TABLE salesordermst ADD COLUMN isAskForVersionConfirmation TINYINT DEFAULT 0,ADD COLUMN isAlreadyPublished TINYINT DEFAULT 0;  \n" +
                /* **************************** New Script -> 14-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5243,'2.00','V1','SO changes-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5243:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;   \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "	SELECT  (  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	vFeasibilityWithAllocatedQty  \n" +
                "	FROM 	vu_kit_allocation_detail  \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "			AND assyID = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "	SELECT 		id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			vFeasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (kitReleaseQty - buildFeasibility) ELSE kitReleaseQty END) AS Shortage,  \n" +
                "			func_getTotalShortageLineForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), FALSE, calculatedKitQty) shortageLines,  \n" +
                "			calculatedKitQty,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(kitReturnDate,v_TimeZone,v_DateTimeDisplayFormat) kitReturnDate, \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  vFeasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - vFeasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE deletedAt IS NULL AND sDetID = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail`;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        FUNC_MISMATCHITEMFORKIT(`a`.`salesOrderDetID`,  \n" +
                "                IFNULL(`a`.`subAssyID`, `a`.`refAssyId`),  \n" +
                "                'M',  \n" +
                "                NULL,  \n" +
                "                NULL) AS `mismatchItem`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        FUN_GETWORKORDERSTATUSIDBYWOID(`a`.`woID`) AS `woStatusID`,  \n" +
                "        FUN_GETWORKORDERSUBSTATUSIDBYWOID(`a`.`woID`) AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        `vu_kit_plans` `a`;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                             fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore  \n" +
                "		FROM	(  \n" +
                "			SELECT 		sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "                     fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.mismatchItem,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			 # Get total PO Qty and Kit Qty of Kit Plan  \n" +
                "			SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL;  \n" +
                "			SET v_RemainPOQty =  IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0);  \n" +
                "			SET v_RemainKitQty =  IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0);  \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5244,'2.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5244:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "	SELECT  (  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	vFeasibilityWithAllocatedQty  \n" +
                "	FROM 	vu_kit_allocation_detail  \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "			AND assyID = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "	SELECT 		id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			vFeasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (kitReleaseQty - buildFeasibility) ELSE kitReleaseQty END) AS Shortage,  \n" +
                "			func_getTotalShortageLineForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), FALSE, calculatedKitQty) shortageLines,  \n" +
                "			calculatedKitQty,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(kitReturnDate,v_TimeZone,v_DateTimeDisplayFormat) kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  vFeasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - vFeasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE deletedAt IS NULL AND sDetID = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    SELECT 	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "	FROM 	salesorder_plan_detailsmst  \n" +
                "	WHERE 	deletedAt IS NULL  \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND refAssyId = pAssyID AND subAssyID IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5245,'2.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5245:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* left join filter */  \n" +
                "	IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCodeID, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5246,'2.00','V1','Bug 36838: UI Issue: On UMID List Advanced filters, filter type colors are not showing - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5246:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			SET v_RemainPOQty =  IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0);  \n" +
                "			SET v_RemainKitQty =  IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0);  \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5247,'2.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5247:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  *********************************** */
                "drop procedure if exists sproc_getLegacySalesOrderList;  \n" +
                "CREATE PROCEDURE `sproc_getLegacySalesOrderList`(  \n" +
                "	pPartId INT,  \n" +
                "    pSearchPO Varchar(2000),  \n" +
                "    pSalesOrderDetId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = concat(\"SELECT so.poNumber SOPONumber,  \n" +
                "			so.salesOrderNumber soNumber,  \n" +
                "			so.poNumber,  \n" +
                "            so.customerId,  \n" +
                "            sod.id salesOrderDetID,  \n" +
                "            sod.partId,  \n" +
                "            sum(sod.originalPOQty) originalPOQty,  \n" +
                "            sum(sod.qty) POQty,  \n" +
                "            so.isLegacyPO,  \n" +
                "            so.id salesOrderID  \n" +
                "		FROM Salesordermst so  \n" +
                "		JOIN Salesorderdet sod on sod.refSalesOrderID = so.id and sod.isDeleted = 0  \n" +
                "		-- JOIN component co on co.id = sod.partId and co.isDeleted = 0  \n" +
                "		WHERE so.isDeleted = 0  \n" +
                "		AND so.status = 1  \n" +
                "		AND so.isLegacyPO = 1  \n" +
                "		AND sod.partId = \", pPartID ,  \n" +
                "	  \" AND (so.salesOrderNumber like '%\", pSearchPO ,\"%' or so.poNumber like '%\", pSearchPO ,\"%' )\"  \n" +
                "    );  \n" +
                "  -- SELECT  @temp_sproc_getLegacySalesOrderList;  \n" +
                "    IF(pSalesOrderDetId IS NOT NULL) THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" and sod.id = \",pSalesOrderDetId);  \n" +
                "    END IF;  \n" +
                "    	SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" group by so.salesOrderNumber, so.poNumber,  \n" +
                "										so.customerId,sod.id,sod.partId,so.isLegacyPO,so.id\");  \n" +
                "    SET @temp_sproc_getLegacySalesOrderList = CONCAT(\" SELECT * FROM ( \",@temp_sproc_getLegacySalesOrderList,\" ) c\");  \n" +
                "    PREPARE query1 FROM @temp_sproc_getLegacySalesOrderList;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-09-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5248,'2.00','V1','sproc_getLegacySalesOrderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5248:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustRefundSubStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getCustRefundSubStatusNameByID`(  \n" +
                "	pRefundSubStatusID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pRefundSubStatusID = 1) THEN 'Draft'  \n" +
                "		WHEN (pRefundSubStatusID = 2) THEN 'Published'  \n" +
                "		WHEN (pRefundSubStatusID = 3) THEN 'Ready to Print Check'  \n" +
                "		WHEN (pRefundSubStatusID = 4) THEN 'Refunded'  \n" +
                "			ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getIntToText` ;  \n" +
                "CREATE FUNCTION `fun_getIntToText`(  \n" +
                "	p_number INT) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT '';  \n" +
                "  \n" +
                "	IF p_number = 0 THEN  \n" +
                "		SET result  = 'No';  \n" +
                "	ELSEIF p_number = 1 THEN  \n" +
                "		SET result  = 'Yes';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5249,'2.00','V1',' Merge from Main to Dev - converted NVARCHAR to VARCHAR in function - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5249:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Payment History';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Manage Supplier Payment', '0', '0', 'app.transaction.invoicepayment.managepayment', '/managepayment', 'Manage Supplier Payment', @pageID, '0', 'icons-add-supplier-payment', '1', '1', '0', '0', 'Supplier Payment', '0', '0', '0', '0');  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Manage Supplier Payment';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Manage Supplier Payment Detail', '0', '0', 'app.transaction.invoicepayment.managepayment.detail', '/detail/:id', 'Manage Supplier Payment Detail', @pageID, '0', 'icons-add-supplier-payment', '1', '1', '0', '1', 'Supplier Payment', '1', '0', '0', '1');  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE isDeleted = 0 AND pageName = 'Manage Supplier Payment';  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`, `isReadOnlyDeveloped`)  \n" +
                "VALUES ('Manage Supplier Payment Document', '0', '0', 'app.transaction.invoicepayment.managepayment.document', '/documents/:id', 'Manage Supplier Payment Document', @pageID, '0', 'icons-add-supplier-payment', '1', '1', '0', '1', 'Supplier Payment', '1', '0', '0', '1');  \n" +
                /* **************************** Add Script Version -> 16-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5250,'2.00','V1','User Story 29904: Supplier Invoice Payment: need to give document upload provision in payment transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5250:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021 *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT 	pi.systemId,  \n" +
                "				pi.id paymentId,  \n" +
                "				pi.accountReference,  \n" +
                "				pi.mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,  \n" +
                "				pi.paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				pi.paymentNumber,  \n" +
                "				pi.bankAccountMasID,  \n" +
                "				pi.bankName,  \n" +
                "				pi.bankAccountNo,  \n" +
                "				pi.paymentDate,  \n" +
                "				pi.paymentAmount,  \n" +
                "				pi.payToName,  \n" +
                "				pi.payToAddress,  \n" +
                "				pi.remark,  \n" +
                "				pi.isPaymentVoided,  \n" +
                "				pi.voidPaymentReason,  \n" +
                "				pi.billToName,  \n" +
                "				pi.billToAddress,  \n" +
                "                pi.lockStatus,  \n" +
                "				fun_getUserNameByID(pi.lockedBy) lockByName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pi.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                PI.refPaymentMode  \n" +
                "		FROM 		packingslip_invoice_payment PI  \n" +
                "		INNER JOIN 	mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "		WHERE 		pi.isDeleted = 0  \n" +
                "					AND 		PI.refPaymentMode = 'P'  \n" +
                "					AND 		pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id) billToAddress,  \n" +
                "                null lockStatus,  \n" +
                "				null lockByName,  \n" +
                "				null lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5251,'2.00','V1','User Story 29904: Supplier Invoice Payment: need to give document upload provision in payment transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5251:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			SET v_RemainPOQty = IF(IFNULL(v_TotalPOQty,0), IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0), 0);   \n" +
                "			SET v_RemainKitQty = IF(IFNULL(v_TotalKitQty,0), IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0), 0);   \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID =  pAssyID  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b           inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail` ;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `w`.`woNumber` AS `workorderNumber`,  \n" +
                "        `w`.`woStatus` AS `woStatusID`,  \n" +
                "        `w`.`woSubStatus` AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        (`vu_kit_plans` `a`  \n" +
                "        LEFT JOIN `workorder` `w` ON ((`a`.`woID` = `w`.`woID`)));  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP function IF EXISTS `func_MismatchItemForKit`;  \n" +
                "CREATE FUNCTION `func_MismatchItemForKit`(  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyID INT,  \n" +
                "	pParentWHType VARCHAR(10),  \n" +
                "	pWarehouseId INT,  \n" +
                "	pBinId INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vMismatchCount INT;  \n" +
                "  \n" +
                "	SELECT (IF(a.isPermanentWH = 1, 1, 0) + IFNULL(SUM(a.unallocatedUMIDCount), 0) +  IFNULL(SUM(a.emptyBinCount), 0) + IFNULL(SUM(a.pendingUMIDBinCount), 0))  \n" +
                "	INTO 	vMismatchCount  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	DISTINCT 	w.parentWHID,  \n" +
                "						w.parentWHType,  \n" +
                "						pw.name parentWarehouseName,  \n" +
                "						b.warehouseID,  \n" +
                "						w.name warehouseName,  \n" +
                "						w.isPermanentWH,  \n" +
                "						w.warehouseType,  \n" +
                "						w.allMovableBin,  \n" +
                "						(  \n" +
                "							SELECT 		COUNT(1)  \n" +
                "							FROM 		component_sid_stock css2  \n" +
                "							INNER JOIN 	binmst b1 ON css2.binid = b1.id AND b1.isdeleted = 0   and css2.isinstk = 1  \n" +
                "							WHERE NOT 	EXISTS (SELECT 1 FROM kit_allocation k2 WHERE   k2.refUIDId = css2.id AND k2.status = 'A' )  \n" +
                "										AND css2.isdeleted = 0  \n" +
                "										AND b1.WarehouseID = w.id  \n" +
                "										AND  css2.binid = IFNULL(pBinId, css2.binid)  \n" +
                "						) unallocatedUMIDCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1) FROM binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  AND b1.isactive = 1 AND b1.isdeleted = 0 AND b1.isPermanentBin = 0  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM component_sid_stock css1 WHERE css1.binid = b1.id AND css1.isdeleted = 0)  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) emptyBinCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1)  \n" +
                "							FROM 	binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  \n" +
                "									AND b1.isactive = 1  \n" +
                "									AND b1.isdeleted = 0  \n" +
                "									AND b1.isPermanentBin = 0  \n" +
                "									AND EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) pendingUMIDBinCount  \n" +
                "			FROM kit_allocation k  \n" +
                "			INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "			INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "			INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "			INNER JOIN warehousemst pw ON pw.id = w.parentWHID  \n" +
                "			WHERE 	k.status = 'A'  \n" +
                "					AND 	k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "					AND	k.assyID = pAssyID  \n" +
                "					AND     pw.parentWHType = IFNULL(pParentWHType, pw.parentWHType)  \n" +
                "					AND	csd.isDeleted = 0  \n" +
                "					AND	b.isDeleted = 0  \n" +
                "					AND	w.isDeleted = 0  \n" +
                "					AND 	b.warehouseID = IFNULL(pWarehouseId, b.warehouseID)  \n" +
                "			ORDER BY w.name  \n" +
                "		)	AS a  \n" +
                "	WHERE 	a.isPermanentWH = 1  \n" +
                "			OR (a.unallocatedUMIDCount + a.emptyBinCount+ a.pendingUMIDBinCount) > 0;  \n" +
                "  \n" +
                "    RETURN vMismatchCount;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID, c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                             fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID,c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "            FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem  \n" +
                "		FROM	(  \n" +
                "			SELECT 	sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5252,'2.00','V1','Task 36918: Refactor SP, Functiona nad View changes given by DP for get kit release plan tunning - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5252:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailableQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailablePins  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);  \n" +
                "    DECLARE pPIDCode VARCHAR(200);  \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "    DECLARE pPartID INT;  \n" +
                "    DECLARE pRoHSName VARCHAR(100);  \n" +
                "    DECLARE pRoHSIcon VARCHAR(255);  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN  \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "					fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "					sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "				INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM salesorderdet s  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "					JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "					WHERE s.id = 106 AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM kit_allocation_assy_detail k  \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "                    JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "								AND k.partId = pAssyID  \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT  \n" +
                "				c.id,			 	refSalesOrderDetID,		mfgPNID,  \n" +
                "                pPartID partID,								pPIDCode PIDCode,  \n" +
                "                pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "                pCustomer companyName, 						pCustomerID customerID,  \n" +
                "				lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "                uomID,			 	unitName,				uomClassID,  \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,  \n" +
                "                (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "				END) shortagePerBuildQty,  \n" +
                "				(CASE  \n" +
                "									WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "											ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "										END  \n" +
                "				END) shortagePerQtyBuildPins  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "						k.id,	 		k.refSalesOrderDetID,		kal.mfgPNID,  \n" +
                "                        k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "                        k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  										k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.isNotRequiredKitAllocation,						kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "					INNER JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id AND kal.isDeleted = 0  \n" +
                "					INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "                    INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "					LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND k.partID = ka.assyID  AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "					WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "					GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "					rfqLineItemsId, numOfPosition;  \n" +
                "		ELSE  \n" +
                "			SELECT  \n" +
                "					c.id,			 refSalesOrderDetID,		mfgPNID,  \n" +
                "					pPartID partID,								pPIDCode PIDCode,  \n" +
                "					pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "					pCustomer companyName, 						pCustomerID customerID,  \n" +
                "					lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "					uomID,			 	unitName,				uomClassID,  \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "                    (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END) shortagePerBuildQty,  \n" +
                "					(CASE  \n" +
                "						WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "					END) shortagePerQtyBuildPins  \n" +
                "				FROM  \n" +
                "					(SELECT  \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 	kal.mfgPNID,  \n" +
                "							k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "							k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.isNotRequiredKitAllocation,				k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,		IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			INNER JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id AND kal.isDeleted = 0  \n" +
                "            INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "			INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "			LEFT JOIN 	vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND FIND_IN_SET(ka.refBOMLineID, k.consolidatedLineItemIDs)  \n" +
                "			WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "				rfqLineItemsId, numOfPosition;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5253,'2.00','V1','User Story 36843: KIT Allocation Shortage Line > Give Separate column for Shortage Unit and Pin [Kit Allocation & Internal(Units/Pins)/Customer/Allocated/Consumed Stock] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5253:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Kit Allocation not Required\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
                "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac where rfqLineItemsID = new.id  and errorCode = 2 ORDER BY  approvalDate DESC limit 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of QPA or REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac where rfqLineItemsID = new.id  and errorCode = 3 ORDER BY  approvalDate DESC limit 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Buy: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac where rfqLineItemsID = new.id  and errorCode = 4 ORDER BY  approvalDate DESC limit 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Populate: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac where rfqLineItemsID = new.id  and errorCode = 18 ORDER BY  approvalDate DESC limit 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of DNP Qty REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "		SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac where rfqLineItemsID = new.id  and errorCode = 17 ORDER BY  approvalDate DESC limit 1;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of Buy DNP Qty: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "        	INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5254,'2.00','V1','Trg_AU_RFQ_LineItem_BOM_History - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5254:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ExportRFQQuoteDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_ExportRFQQuoteDetail`(  \n" +
                "    IN prfqAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "        DECLARE ppartID int;  \n" +
                "  \n" +
                "        select partID into ppartID  \n" +
                "        from rfq_assemblies where id = prfqAssyID;  \n" +
                "  \n" +
                "	# Common detail from consolidate tables  \n" +
                "		select id as `consolidateID`, partID,consolidatedpartlineID, item as `Item`,qpa as `QPA`, refDesig as`REFDES`, Buy, Populate,  \n" +
                "        UOM, MFR, MFRPN as `MFRPN`,Pin from (  \n" +
                "		select rlh.id,(select partId from rfq_lineitems where id = rlh.rfqLineItemID) as partID, trim(rlh.lineID)+0 as `Item`, rlh.qpa, rlh.refDesig,  \n" +
                "        (case when rlh.isPurchase then 'Yes' else 'No' end) as `Buy`,(case when rlh.isInstall then 'Yes' else 'No' end) as `Populate`,  \n" +
                "        rlh.consolidatedpartlineID,rlh.numOfPosition as Pin,  \n" +
                "        fun_getUnitNameByID(rlh.uomID) as `UOM`,  \n" +
                "		group_concat(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) separator '@@@') as `MFR`, group_concat(fun_getMFGPNByID(rlah.mfgPNID) separator '@@@') as `MFRPN`  \n" +
                "        from  rfq_consolidated_mfgpn_lineitem rlh  \n" +
                "		join rfq_consolidated_mfgpn_lineitem_alternate rlah on rlh.id = rlah.consolidateID and rlah.isDeleted = 0  \n" +
                "		where rlh.rfqAssyID = prfqAssyID and rlh.isDeleted = 0  \n" +
                "        group by rlah.consolidateID  \n" +
                "		order by rlh.lineID,rlh.id)a;  \n" +
                "  \n" +
                "    # BOM data  \n" +
                "		select comAssy.PIDCode as AssyID, fun_replaceSpecialCharacters(comAssy.PIDCode) AssyIDwithoutSpecialChar, trim(rlh.lineID)+0 as `Item`, rlh.qpa as `QPA`, rlh.refDesig as `REF DES`, (case when rlh.isPurchase then 'Yes' else 'No' end) as `Buy`,  \n" +
                "        (case when rlh.isInstall then 'Yes' else 'No' end) as `Populate`, rlh.dnpQty as `DNP Qty`, rlh.dnpDesig as `DNP REF DES`,  \n" +
                "        (case when rlh.isBuyDNPQty then 'Yes' else 'No' end) as `Buy DNP Qty`,  \n" +
                "        fun_getUnitNameByID(rlh.uomID) as `UOM`,#rlh.description as lineIssue,  \n" +
                "		group_concat(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) separator \"@@@\") as `MFR`, group_concat(fun_getMFGPNByID(rlah.mfgPNID) separator \"@@@\") as `MFRPN`,  \n" +
                "        concat(rlh.description, group_concat(ifnull(rlah.description,'') separator \"@@@\")) as `PendingIssues`  \n" +
                "        from  rfq_lineitems rlh  \n" +
                "		join rfq_lineitems_alternatepart rlah on rlh.id = rlah.rfqLineItemsID and rlah.isDeleted = 0  \n" +
                "        join component comAssy on comAssy.id = rlh.partID  \n" +
                "		where rlh.partID in (select distinct prPerPartID from part_sub_assy_relationship where partID = ppartID and isDeleted = 0)  \n" +
                "        and rlh.isDeleted = 0  \n" +
                "        group by rlh.id  \n" +
                "		order by rlh.partID,rlh.lineID;  \n" +
                "  \n" +
                "	# RFQ Sub Assembly Name  \n" +
                "  \n" +
                "        select distinct  prPerPartID,`level`,fun_getAssyNameByID(prPerPartID) as AssyID from part_sub_assy_relationship where partID = ppartID and isDeleted = 0 order by `level`;  \n" +
                "  \n" +
                "    # RFQ Assy Quantity wise Quote Detail  \n" +
                "  \n" +
                "        select rq.requestQty,rclq.qtyID,rcl.qpa,rcl.lineID, rclq.consolidateID, (select partId from rfq_lineitems where id = rcl.rfqLineItemID) as partID,  \n" +
                "        rclq.finalPrice,rclq.unitPrice,rclq.selectedMpn,rclq.supplier,  (select connecterTypeID from component where id = rclq.componentID) as connecterTypeID  \n" +
                "        from rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                "        join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rclq.consolidateID and rcl.isDeleted = 0  \n" +
                "        join rfq_assy_quantity rq on rq.id = rclq.qtyID  \n" +
                "        where rcl.rfqAssyId = prfqAssyID and rclq.isDeleted = 0  \n" +
                "        order by rcl.lineID,rcl.id,rclq.qtyID;  \n" +
                "  \n" +
                "	# RFQ assembly Quantity for display quantity wise selected pricing  \n" +
                "        select id, requestQty from rfq_assy_quantity  \n" +
                "        where id in (select qtyID from rfq_consolidate_mfgpn_lineitem_quantity where isDeleted  = 0  \n" +
                "        and consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where isDeleted = 0 and rfqAssyID = prfqAssyID)  \n" +
                "        order by id);  \n" +
                "  \n" +
                "  \n" +
                "	# Main Assembly Detail  \n" +
                "		select id,mfgPN, fun_replaceSpecialCharacters(mfgPN) mfgPNwithoutSpecialChar,PIDCode,fun_getMfgCodeByID(mfgcodeID) customerCode from component where id = ppartID;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, fun_replaceSpecialCharacters(part.mfgPN) mfgPNwithoutSpecialChar,  \n" +
                "            part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN concat(assyusr.firstName, ' ', assyusr.lastName) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			(CASE WHEN part.isActivityStart THEN TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart,  \n" +
                "            (CASE WHEN ra.isActivityStart THEN concat(rfqusr.firstName, ' ', rfqusr.lastName) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			(CASE WHEN ra.isActivityStart THEN TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "        LEFT JOIN users rfqusr ON rfqusr.id = ra.activityStartBy  \n" +
                "        LEFT JOIN users assyusr ON assyusr.id = part.activityStartBy  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ExportRFQCostDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_ExportRFQCostDetail`(  \n" +
                "    IN prfqAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "        DECLARE ppartID INT;  \n" +
                "        DECLARE prefSubmittedQuoteID INT;  \n" +
                "  \n" +
                "        SELECT partID INTO ppartID FROM rfq_assemblies WHERE id = prfqAssyID;  \n" +
                "        SELECT MAX(id) INTO prefSubmittedQuoteID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = prfqAssyID;  \n" +
                "  \n" +
                "    # BOM data  \n" +
                "	SELECT compAssy.PIDCode as AssyID, fun_replaceSpecialCharacters(compAssy.PIDCode) AssyIDwithoutSpecialChar,  \n" +
                "		rlh.partID,  \n" +
                "		rlh.refRFQLineItemID,  \n" +
                "		fun_getAssyNameByID(rlh.partID) assyPn,  \n" +
                "		TRIM(rlh.lineID)+0 AS `Item`,  \n" +
                "		rlh.qpa AS `QPA`,  \n" +
                "		rlh.refDesig AS `REF DES`,  \n" +
                "		(CASE WHEN rlh.isPurchase THEN 'Yes' ELSE 'No' END) AS `Buy`,  \n" +
                "		(CASE WHEN rlh.isInstall THEN 'Yes' ELSE 'No' END) AS `Populate`,  \n" +
                "		rlh.dnpQty AS `DNP Qty`,  \n" +
                "		rlh.dnpDesig AS `DNP REF DES`,  \n" +
                "		(CASE WHEN rlh.isBuyDNPQty THEN 'Yes' ELSE 'No' END) AS `Buy DNP Qty`,  \n" +
                "		fun_getUnitNameByID(rlh.uomID) AS `UOM`,  \n" +
                "		rlh.numOfPosition AS Pin,  \n" +
                "		#rlh.description as lineIssue,  \n" +
                "		GROUP_CONCAT(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) SEPARATOR \"@@@\") AS `MFR`,  \n" +
                "		GROUP_CONCAT(fun_getMFGPNByID(rlah.mfgPNID) SEPARATOR \"@@@\") AS `MFRPN`,  \n" +
                "		CONCAT(rlh.description, GROUP_CONCAT(IFNULL(rlah.description,'') SEPARATOR \"@@@\")) AS `PendingIssues`  \n" +
                "        FROM  	rfq_lineitems_history rlh  \n" +
                "	JOIN 	rfq_lineitems_alternatepart_history rlah ON rlh.id = rlah.rfqLineItemsID AND rlah.isDeleted = 0  \n" +
                "    join component compAssy on compAssy.id = rlh.partID  \n" +
                "	WHERE 	rlh.partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isDeleted = 0)  \n" +
                "		AND rlh.isDeleted = 0  \n" +
                "		AND rlh.refSubmittedQuoteID = prefSubmittedQuoteID  \n" +
                "        GROUP BY rlh.id  \n" +
                "	ORDER BY rlh.partID,rlh.lineID;  \n" +
                "  \n" +
                "	# RFQ Sub Assembly Name  \n" +
                "  \n" +
                "        SELECT  \n" +
                "        DISTINCT prPerPartID,  \n" +
                "		`level`,  \n" +
                "		fun_getAssyNameByID(prPerPartID) AS AssyID,  \n" +
                "		fun_getAssyNameByID(prPerPartID) assyPn  \n" +
                "	FROM part_sub_assy_relationship  \n" +
                "	WHERE partID = ppartID AND isDeleted = 0 ORDER BY `level`;  \n" +
                "  \n" +
                "    # RFQ Assy Quantity wise Quote Detail  \n" +
                "  \n" +
                "        SELECT  rq.requestQty,  \n" +
                "		rclq.qtyID,  \n" +
                "		rcl.qpa,  \n" +
                "		rcl.lineID,  \n" +
                "		rcl.consolidatedLineItemIDs,  \n" +
                "		rclq.consolidateID,  \n" +
                "		(SELECT partId FROM rfq_lineitems WHERE id = rcl.rfqLineItemID) AS partID,  \n" +
                "		rclq.finalPrice,  \n" +
                "		rclq.unitPrice,  \n" +
                "		rclq.selectedMpn,  \n" +
                "		rclq.supplier,  \n" +
                "		(SELECT connecterTypeID FROM component WHERE id = rclq.componentID) AS connecterTypeID  \n" +
                "        FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                "        JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID AND rcl.isDeleted = 0  \n" +
                "        JOIN rfq_assy_quantity rq ON rq.id = rclq.qtyID  \n" +
                "        WHERE rcl.rfqAssyId = prfqAssyID AND rclq.isDeleted = 0  \n" +
                "        ORDER BY rcl.lineID,rcl.id,rclq.qtyID;  \n" +
                "  \n" +
                "	# RFQ assembly Quantity for display quantity wise selected pricing  \n" +
                "        SELECT 	id,  \n" +
                "		requestQty  \n" +
                "	FROM rfq_assy_quantity  \n" +
                "        WHERE id IN (SELECT qtyID FROM rfq_consolidate_mfgpn_lineitem_quantity WHERE isDeleted  = 0  \n" +
                "        AND consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID)  \n" +
                "        ORDER BY id);  \n" +
                "  \n" +
                "  \n" +
                "	# Main Assembly Detail  \n" +
                "	SELECT 	id,  \n" +
                "		mfgPN,  fun_replaceSpecialCharacters(mfgPN) mfgPNwithoutSpecialChar,  \n" +
                "		PIDCode,  \n" +
                "		fun_getMfgCodeByID(mfgcodeID) customerCode  \n" +
                "	FROM component WHERE id = ppartID;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(  \n" +
                "	pExcludeCanceled TINYINT,  \n" +
                "	pSalesOrderDetailID INT,  \n" +
                "	pSearch VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = \"	SELECT  k.*,  \n" +
                "								IF(numberOfSubAssy > 0 ,  CONCAT(searchQuery,', (', numberOfSubAssy , ')') , searchQuery)  AS salescolumn  \n" +
                "						FROM (  \n" +
                "								SELECT  \n" +
                "									`Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`,  \n" +
                "                                    fun_replaceSpecialCharacters(`Po Number`) poNumwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy ID`) AssyIDwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy Name`) AssyNamewithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`kitNumber`) kitNumberwithoutSpecialChar,  \n" +
                "									`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`,  \n" +
                "									`NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`,  \n" +
                "									`RohsIcon`,   `materialDueDate`,  `shippingDate`,  `Company Name`, 	  `Po Date`,  \n" +
                "									`kitNumber`,   `isSkipKitCreation`,  `Company Code`,  \n" +
                "									CONCAT(`Assy ID`, ', ',`Po Number`,', ',`Sales Order`,', ',`PO Qty`,', ',`kitNumber`) searchQuery,  \n" +
                "									(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy  \n" +
                "									FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 ) as k WHERE 1 = 1\";  \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `Status` != 'Canceled'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pSalesOrderDetailID IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");  \n" +
                "    END IF;  \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT  s.* FROM (  \n" +
                "								\",@SQLStatement1,\"	) as s WHERE  \n" +
                "							salescolumn LIKE '%\", pSearch ,\"%' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5255,'2.00','V1','Bug 36846: Bug 36845:  Bug 36924: Bug 36925: Bug 36622:  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5255:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID, c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID,c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "            FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem  \n" +
                "		FROM	(  \n" +
                "			SELECT 	sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5256,'2.00','V1','Refactor SP, Functiona nad View changes given by DP for get kit release plan tunning - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5256:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5257,'2.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5257:
            /* **************************** New Script -> 17-09-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.orgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5258,'2.00','V1',' Bug 36965: [Main Branch] In UMID created column need to show the Initial Counts instead of Current Count - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5258:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-09-2021 *********************************** */
                "drop procedure if exists `Sproc_GetSupplierPaymentDetailsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierPaymentDetailsForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "    IN pRefPaymentMode VARCHAR(5),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    IF (pRequiredCount) THEN  \n" +
                "		SELECT count(1) totalCount  \n" +
                "		  FROM packingslip_invoice_payment psip  \n" +
                "		 WHERE psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "           and psip.refPaymentMode = pRefPaymentMode  \n" +
                "           AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT psip.id,  \n" +
                "				psip.refPaymentMode,  \n" +
                "				psip.systemId,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.mfgcodeID,  \n" +
                "                fun_getMfgCodeAndNameByID(psip.mfgcodeID) supplierCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "				psip.paymentType,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				psip.bankName,  \n" +
                "				psip.bankAccountNo,  \n" +
                "				psip.bankAccountMasID,  \n" +
                "				psip.paymentDate,  \n" +
                "                psip.depositBatchNumber,  \n" +
                "                psip.offsetAmount,  \n" +
                "				psip.remark,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                CASE WHEN psip.isPaymentVoided = 1 THEN 'Voided'  \n" +
                "					when psip.isPaymentVoided = 0 THEN 'Paid' END isPaymentVoidedConvertedValue,  \n" +
                "				psip.voidPaymentReason,  \n" +
                "				(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy,  \n" +
                "                (CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "				psip.refVoidedPaymentId,  \n" +
                "				(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "					WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "				fun_getUserNameByID(psip.lockedBy) lockedBy,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                invPayDetTemp.creditMemoNumberList,  \n" +
                "				invPayDetTemp.debitMemoNumberList  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (select psipd.refPayementid,  \n" +
                "								GROUP_CONCAT(ps.invoiceNumber SEPARATOR ', ') invoiceNumberList,  \n" +
                "								GROUP_CONCAT(ps.creditMemoNumber SEPARATOR ', ') creditMemoNumberList,  \n" +
                "								GROUP_CONCAT(ps.debitMemoNumber SEPARATOR ', ') debitMemoNumberList  \n" +
                "						  from packingslip_invoice_payment_det psipd  \n" +
                "						  join packing_slip_material_receive ps ON ps.id = psipd.refPackingslipInvoiceID  \n" +
                "						  group by psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "            and psip.refPaymentMode = IFNULL(pRefPaymentMode, psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5259,'2.00','V1','User Story 34193: Maintain Elastic Search for Payment Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5259:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-09-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName = 'Communication';  \n" +
                "UPDATE `page_detail` SET `menuName` = 'Predefine Message', menuRoute='setting.system.communication.reason', parentPageID=@pageID, displayMenuName='Predefine Message' WHERE `pageName` = 'Reason';  \n" +
                /* **************************** New Script -> 20-09-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName = 'Reason';  \n" +
                "insert into page_detail (pageName, RO, RW, pageRoute, pageURL, menuName, parentPageID, hasChild, iconClass, isActive, createdBy, isDeleted, isDisplay, displayMenuName, isAllowAsHomePage,isPopup, isHideFromMenuList, isReadOnlyDeveloped)  \n" +
                "values ('Invoice Approved Predefine Message', 0, 0, 'app.reason.invoiceapprovedreason', '/rfqsetting/reason/invoice/:reasonId', 'Invoice Approved Predefine Message', @pageID, 0, 't-icons-bom-reasons', 1, 1, 0, 1, 'Invoice Approved Predefine Message', 1, 0, 0, 0);  \n" +
                /* **************************** Add Script Version -> 20-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5260,'2.00','V1',' User Story 33179: Supplier invoice >In Approval Popup give Predefine Message selection option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5260:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "ALTER TABLE `generic_transmode_mst`  \n" +
                "ADD COLUMN `deleteByRoleId` INT NULL,  \n" +
                "ADD COLUMN `updateByRoleId` INT NULL,  \n" +
                "ADD COLUMN `createByRoleId` INT NULL;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD INDEX `FK_packingslip_invoice_payment_refGencTransModeID_idx` (`refGencTransModeID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD CONSTRAINT `FK_packingslip_invoice_payment_refGencTransModeID`  \n" +
                "  FOREIGN KEY (`refGencTransModeID`)  \n" +
                "  REFERENCES `generic_transmode_mst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "update generic_transmode_mst set createdBy = '1' ,updatedBy = '1' where createdBy Is null and updatedBy is null;  \n" +
                "ALTER TABLE `generic_transmode_mst`  \n" +
                "CHANGE COLUMN `createdBy` `createdBy` VARCHAR(10) NOT NULL ;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "ALTER TABLE `report_parameter_setting_mapping`  \n" +
                "ADD COLUMN `displayOrder` DECIMAL(6,2) NULL DEFAULT NULL AFTER `isDisplay`;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5261,'2.00','V1',' User Story 36771: Create Master: Transaction Mode (For Refund Page) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5261:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "SELECT pageID INTO @parentPageID FROM page_detail WHERE pageName = 'Accounting';  \n" +
                "SELECT max(orderBy)into  @orderBY  FROM page_detail WHERE parentPageID = @parentPageID;  \n" +
                "  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`,`menuRoute`, `pageRoute`, `pageURL`, `menuName`,`orderBy`, `parentPageID`, `hasChild`, `iconClass`,`tabLevel`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('Transaction Modes', '0', '0','setting.accounting.transactionmodes', null, null, 'Transaction Modes', (@orderBY+0.1), @parentPageID, '1', 't-icons-transaction-mode', '2', '1', '1','1', '0', '0', 'Transaction Modes', '0', '0', '0');  \n" +
                "  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('generic_transmode_mst_payable','Payable Transaction Mode');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('generic_transmode_mst_receivable','Receivable Transaction Mode');  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_generic_transmode_mst`;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_generic_transmode_mst` BEFORE UPDATE ON `generic_transmode_mst` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5262,'2.00','V1',' User Story 36771: Create Master: Transaction Mode (For Refund Page) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5262:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Update reportmaster Set status = 'P' where status = 'p';  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "SELECT pageID INTO @transactionModesPageID FROM page_detail WHERE pageName = 'Transaction Modes';  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`,`menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,`orderBy`, `iconClass`,`tabLevel`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('Payable Transaction Modes', '0', '0','setting.accounting.transactionmodes.payable','app.transactionmodes.payable', '/:tabName', 'Payable Transaction Modes', @transactionModesPageID, '0', '1.1','t-icons-payable-transaction-mode', '3', '1', '1','1', '0', '1', 'Payable Transaction Modes', '1', '0', '0');  \n" +
                "  \n" +
                "SELECT pageID INTO @transactionModesPageID FROM page_detail WHERE pageName = 'Transaction Modes';  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`,`menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,`orderBy`, `iconClass`,`tabLevel`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('Receivable Transaction Modes', '0', '0','setting.accounting.transactionmodes.receivable','app.transactionmodes.receivable', '/:tabName', 'Receivable Transaction Modes', @transactionModesPageID, '0', '1.2' ,'t-icons-receivable-transaction-mode', '3', '1', '1','1', '0', '1', 'Receivable Transaction Modes', '1', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('Manage Payable Transaction Modes', '0', '0', 'app.transactionmodes.payable.manage', '/manage/:id', 'Add Payable Transaction Modes', @parentPageID, '0', 't-icons-payable-transaction-mode add-icon', '1', '1','1', '0', '1', 'Payable Transaction Mode', '1', '0', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('Manage Receivable Transaction Modes', '0', '0', 'app.transactionmodes.receivable.manage', '/manage/:id', 'Add Receivable Transaction Modes', @parentPageID, '0', 't-icons-receivable-transaction-mode add-icon', '1', '1','1', '0', '1', 'Receivable Transaction Mode', '1', '0', '0');  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveTransactionModesList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveTransactionModesList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pTransMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"  \n" +
                "            SELECT tm.*,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN (tm.isActive = 0) THEN 'Inactive'  \n" +
                "					WHEN (tm.isActive = 1) THEN 'Active'  \n" +
                "					ELSE ''  \n" +
                "					END  \n" +
                "				) AS `isActiveConvertedValue`,  \n" +
                "				(  \n" +
                "                CASE  \n" +
                "					WHEN (tm.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (tm.systemGenerated = 1) THEN 'Yes'  \n" +
                "					ELSE ''  \n" +
                "					END  \n" +
                "				) AS `systemGeneratedConvertedValue`,  \n" +
                "				ac.acct_name,  \n" +
                "				fun_getUserNameByID(tm.createdBy) createdbyvalue,  \n" +
                "				fun_getUserNameByID(tm.updatedBy) updatedbyvalue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(tm.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtvalue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(tm.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtvalue,  \n" +
                "				fun_getRoleByID(tm.updateByRoleId) updatedbyRolevalue,  \n" +
                "				fun_getRoleByID(tm.createByRoleId) createdbyRolevalue  \n" +
                "			FROM generic_transmode_mst tm  \n" +
                "            left join acct_acctmst ac ON ac.acct_id = tm.ref_acctid and ac.isDeleted = 0  \n" +
                "            WHERE tm.isDeleted = 0 AND tm.modeType = '\",pTransMode,\"' \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL , displayOrder ASC , id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @tempQuery,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_acct_acctmst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_acct_acctmst`(  \n" +
                "		IN tableName VARCHAR(255),  \n" +
                "		IN IDs LONGTEXT,  \n" +
                "		IN deletedBy INT,  \n" +
                "		IN entityID VARCHAR(255),  \n" +
                "		IN refrenceIDs LONGTEXT,  \n" +
                "		IN countList INT,  \n" +
                "		IN pRoleID INT  \n" +
                "		)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempchartofaccount as  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"bank_mst\" else \"\" end as msg FROM bank_mst WHERE isDeleted=0 AND acctId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"chart_of_accounts\" else \"\" end as msg FROM acct_acctmst WHERE isDeleted=0 AND parent_acct_id IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE isDeleted=0 AND  mfgType=\"DIST\" AND acctId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE isDeleted=0 AND  mfgType=\"MFG\" AND acctId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component\" else \"\" end as msg FROM component WHERE isDeleted=0 AND salesacctId IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component\" else \"\" end as msg FROM component WHERE isDeleted=0 AND purchaseacctId IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"generic_transmode_mst_payable\" else \"\" end as msg FROM generic_transmode_mst WHERE isDeleted=0 AND modeType = \"RP\" AND ref_acctid IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"generic_transmode_mst_receivable\" else \"\" end as msg FROM generic_transmode_mst WHERE isDeleted=0 AND modeType = \"RR\" AND ref_acctid IN(',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempchartofaccount t)=0 THEN  \n" +
                "				SET @SQl1 = CONCAT('update acct_acctmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where acct_id in(',IDs,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "                			DEALLOCATE PREPARE stmt1;  \n" +
                "				  SELECT * FROM tempchartofaccount WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempchartofaccount t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempchartofaccount t1  \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "					ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "    DROP TEMPORARY TABLE if exists tempchartofaccount;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetTransactionModesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetTransactionModesForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "	IN pmodeType varchar(2),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `generic_transmode_mst`  \n" +
                "		WHERE `isDeleted` = 0 AND `id` = IFNULL(pId,`id`) AND `modeType` = IFNULL(pmodeType,`modeType`) ;  \n" +
                "	ELSE  \n" +
                "		SELECT tm.id, tm.modeType, tm.modeName, tm.modeCode, tm.description, am.acct_name,  \n" +
                "			(CASE WHEN (tm.isActive = 0) THEN 'Inactive'  \n" +
                "				WHEN (tm.isActive = 1) THEN 'Active' ELSE '' END) AS isActive,  \n" +
                "			(CASE WHEN (tm.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (tm.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "			tm.isDeleted  \n" +
                "		FROM `generic_transmode_mst` AS tm  \n" +
                "			LEFT OUTER JOIN acct_acctmst AS am ON tm.ref_acctid = am.acct_id  \n" +
                "				AND am.deletedAt IS NULL  \n" +
                "		WHERE `id` = IFNULL(pId,`id`) AND `modeType` = IFNULL(pmodeType,`modeType`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(tm.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "					or (DATE(fun_CovnertDateTimeByTimezoneValue(tm.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop Procedure if exists `Sproc_GetLaborComparisonActualvsEstimatedReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLaborComparisonActualvsEstimatedReportDetails`(  \n" +
                "IN pAssyID int(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE tRfqAssyID int(1);  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 3  \n" +
                "order by quoteSubmitDate desc limit 1;  \n" +
                "if tRfqAssyID is null then  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 2 order by quoteSubmitDate desc limit 1;  \n" +
                "end if;  \n" +
                "		select fun_getAssyNameByID(partID) assembly, partID,  \n" +
                "        (case when mountingTypeID is not null then fun_getMountingTypeNameByID(mountingTypeID) else fun_getAssyNameByID(subAssyID) end) as mountingtype,  \n" +
                "		(case when mountingTypeID is not null then mountingTypeID else subAssyID end) as mountingTypeID,  \n" +
                "		CAST((perAssyPrice + overHeadAssyPrice) AS DECIMAL(12,5)) perAssyPrice ,  \n" +
                "        CAST(((perAssyPrice + overHeadAssyPrice) * requestQty) AS DECIMAL(12,2)) as totalCost,  \n" +
                "        0 costType,requestQty as Qty, subAssyID as sid  \n" +
                "		from rfq_assy_qtywise_bom_laborcosting_detail rbl  \n" +
                "		join rfq_assy_labor_bom_mountingtype_qpa_detail rlm on rlm.id = rfqAssyBOMMountingID  \n" +
                "		join rfq_assy_quantity raq on raq.id = rbl.rfqAssyQtyID and raq.isdeleted = 0  \n" +
                "		where rbl.isdeleted = 0 and partid = pAssyID  \n" +
                "		and rlm.rfqAssyID = tRfqAssyID  \n" +
                "		and rbl.rfqAssyQtyID = (case when (select count(1) from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0)) > 0  \n" +
                "        then  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty desc limit 1)  \n" +
                "		else  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty >= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty asc limit 1)  \n" +
                "		end)  \n" +
                "		union  \n" +
                "		select fun_getWorkorderNumberByID(woId) assembly, woId,fun_getMountingTypeNameByID(mountingTypeID) as mountingtype,  \n" +
                "		mountingTypeID, sum(CAST(perAssytotalcost AS DECIMAL(12,5))) perAssytotalcostAS, sum(CAST((perAssytotalcost * woQty)AS DECIMAL(12,2))) totalcost,  \n" +
                "        1 costType, woQty as Qty,null as sid  \n" +
                "		from (  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, (wo.buildQty) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		((wte.burdenRate) * (((wte.productionTime)/60)/60))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end))/wo.buildQty) perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		where wo.partID = pAssyID  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		union  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, ((select buildQty from workorder where woid = wamd.parentWOID)*  \n" +
                "		(select qpa from kit_allocation_lineitems_alternatepart kala  \n" +
                "		left join kit_allocation_lineitems kal on kal.id = kala.refKitAllocationLineItemId and kal.isdeleted = 0  \n" +
                "		left join workorder woi on woi.partID = kala.partID  \n" +
                "		where kala.mfgPNID = wo.partID and  \n" +
                "		kala.refSalesOrderDetID in (select salesOrderDetailID from workorder_salesorder_details where woid = wamd.parentWOID and isdeleted = 0)  \n" +
                "		and kala.isDeleted = 0)) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		(((wte.burdenRate) * (((wte.productionTime)/60)/60) ))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end)))perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		left join workorder_main_assembly_mapping_details wamd on wamd.refWOID = wo.woid and wamd.isDeleted = 0  \n" +
                "		where wamd.parentWOID in (select woid from workorder where partid = pAssyID and isdeleted = 0)  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		)a  \n" +
                "        group by a.mountingTypeID,a.woid;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop Procedure if exists `Sproc_GetManufacturerListPreparedByDetails`;  \n" +
                "Drop Procedure if exists `Sproc_GetReportPreparedByDetailsByEmloyeeId`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReportPreparedByDetailsByEmloyeeId`(  \n" +
                "	IN pEmployeeID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	CONCAT(street1,', ',city,', ',state,' ',postcode) AS address,  \n" +
                "		cua.email,  \n" +
                "		cua.faxNumber,  \n" +
                "		cu.contact,  \n" +
                "		cua.contact AS phoneNo,  \n" +
                "		cu.email AS companyEmail,  \n" +
                "		cu.primaryContactName AS companyContactName,  \n" +
                "		fun_getUserNameByEmployeID(pEmployeeID) employeeName  \n" +
                "	FROM 	customer_addresses cua  \n" +
                "	JOIN 	mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "	WHERE 	cua.addressType = 'B'  \n" +
                "			AND cu.isCompany = 1  \n" +
                "			AND cua.isDefault = 1  \n" +
                "			AND cua.isDeleted = 0;  \n" +
                "END;  \n" +

                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop Procedure if exists `Sproc_RetrieveReportList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReportList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsDynamicReport TINYINT,  \n" +
                "    IN pIsPublishReport TINYINT,  \n" +
                "	IN pIsTemplateReport TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "  \n" +
                "	SET @SQLStatement1=\"  \";  \n" +
                "	IF pIsDynamicReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType != 3 and reportGenerationType != 1 \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPublishReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType != 3  and status = 'P' \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsTemplateReport = TRUE THEN  \n" +
                "		SET @SQLStatement1= \" and reportGenerationType = '3' \";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT r.*,  \n" +
                "			fun_getUserNameByID(r.updatedBy) updatedbyvalue,  \n" +
                "			fun_getUserNameByID(r.createdBy) createdbyvalue,  \n" +
                "			fun_getRoleByID(r.createByRoleId) createdbyRolevalue,  \n" +
                "			fun_getRoleByID(r.updateByRoleId) updatedbyRolevalue,  \n" +
                "			fun_getReportCategoryNameByCategoryID(r.reportCategoryId) category,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtvalue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtvalue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(r.startDesigningDate,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') startDesigningDatevalue,  \n" +
                "		(CASE WHEN reportViewType THEN 'Detail' ELSE 'Summary' END) reportTypeConvertedvalue,   -- changecolumnnamr  \n" +
                "        e.entityName,  \n" +
                "		(CASE WHEN (r.status = 'D') THEN 'Draft' WHEN (r.status = 'P') THEN 'Published' ELSE '' END) AS statusConvertedValue,  \n" +
                "        (CASE WHEN (r.isEndUserReport = '1') THEN 'No' ELSE 'Yes' END) AS systemGenerated,  \n" +
                "		(CASE WHEN (r.isEndUserReport = '1') THEN '0' ELSE '1' END) AS isSystemGenerated,  \n" +
                "        fun_getReportNameByReportID(r.refReportId) cloneFrom,  \n" +
                "        TIMESTAMPDIFF(SECOND, r.startDesigningDate,'\",@utcDatetime,\"') startActivityDate,  \n" +
                "        fun_getUserNameByID(r.editingBy) activityStartBy  \n" +
                "		FROM `reportmaster`  r  \n" +
                "        left join entity e on e.entityId = r.entityId  \n" +
                "        left join report_change_logs rc on r.id = rc.reportId and endActivityDate is null  \n" +
                "		WHERE r.deletedAt IS NULL  \", @SQLStatement1);  \n" +
                "   -- and r.entityId is null   [revert code -add this in above condition.]  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY reportName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(  \n" +
                "    IN tableName VARCHAR(255),  \n" +
                "    IN IDs LONGTEXT,  \n" +
                "    IN deletedBy INT,  \n" +
                "    IN entityID VARCHAR(255),  \n" +
                "    IN refrenceIDs LONGTEXT,  \n" +
                "    IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF tableName=\"employees\" THEN  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_values\" THEN  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customers\" THEN  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"certificate_standards\" THEN  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department\" THEN  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"genericcategory\" THEN  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"equipment\" THEN  \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"master_templates\" THEN  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operations\" THEN  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"roles\" THEN  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"standard_class\" THEN  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement\" THEN  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component\" THEN  \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"entity\" THEN  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"salesordermst\" THEN  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shippedassembly\" THEN  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"br_label_template\" THEN  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"measurement_types\" THEN  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"uoms\" THEN  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"jobtypes\" THEN  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqtype\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reasonmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock\" THEN  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_templatemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shipping_requestdet\" THEN  \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems\" THEN  \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"requirement\" THEN  \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_addresses\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqforms\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"who_bought_who\" THEN  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cost_category\" THEN  \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chartypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"countrymst\" THEN  \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"warehousemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"binmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rackmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_logicalgroup\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reserve_stock_request\" THEN  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_packagingmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"scannermst\" THEN  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN  \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_price_break_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department_location\" THEN  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_parts_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_rohsmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_partstatusmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labor_cost_template\" THEN  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reportmaster\" THEN  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_template_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"calibration_details\" THEN  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN  \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"freeonboardmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_file_extension\" THEN  \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assemblystock\" THEN  \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_invoice\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"bank_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cameramst\" THEN  \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes_detail\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_order_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_order_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_purchase_order_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_acctmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"help_blog_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_classmst\" THEN  \n" +
                "	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst_comment_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_transmode_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_generic_transmode_mst_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5263,'2.00','V1',' User Story 36771: Create Master: Transaction Mode (For Refund Page) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5263:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_generic_transmode_mst_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_generic_transmode_mst_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempTransactionModes as  \n" +
                "	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND  refGencTransModeID IN (',IDs,') LIMIT 1)');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempTransactionModes t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "			SET @SQl1 = CONCAT('update generic_transmode_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "			SELECT * FROM tempTransactionModes WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempTransactionModes t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempTransactionModes t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempTransactionModes;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5264,'2.00','V1',' User Story 36771: Create Master: Transaction Mode (For Refund Page) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5264:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetDuplicateSalesOrderCommentsList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetDuplicateSalesOrderCommentsList`(  \n" +
                "    IN pSOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS  tempComponents;  \n" +
                "  CREATE TEMPORARY TABLE IF NOT EXISTS  tempComponents AS  \n" +
                "    SELECT sod.partID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  \n" +
                "  -- shipping comments for sales order  \n" +
                "            SELECT im.requirement,cid.partID,im.requiementType  \n" +
                "	     FROM componenet_inspection_requirement_det cid  \n" +
                "	     JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "	      WHERE im.requiementType ='C' AND cid.category='S' AND im.isdeleted=0 AND  \n" +
                "	      cid.partID IN (SELECT partID FROM tempComponents);  \n" +
                "  -- internal comments for sales order  \n" +
                "  SELECT partID,`comment` FROM assembly_revision_comments WHERE partID IN  \n" +
                "		(SELECT partID FROM tempComponents);  \n" +
                "-- component description  \n" +
                "  SELECT id,`mfgPNDescription` FROM component WHERE id IN  \n" +
                "		(SELECT partID FROM tempComponents);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveDuplicateSalesOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicateSalesOrder`(  \n" +
                "		IN pSOID INT,  \n" +
                "		IN pSONumber VARCHAR(100),  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN pSODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewSOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vsalesIndex INT;  \n" +
                "		 DECLARE vsalescount INT;  \n" +
                "		 DECLARE vOldSalesOrderDetID INT;  \n" +
                "		 DECLARE vNewSalesOrderDetID INT;  \n" +
                "		 DECLARE vOldSalesCommissionID INT;  \n" +
                "		 DECLARE vNewSalesCommissionID INT;  \n" +
                "		 DECLARE vPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM salesordermst WHERE id=pSOID;  \n" +
                "			-- insert sales order header detail  \n" +
                "		INSERT INTO salesordermst(salesOrderNumber,poNumber,poDate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,revision,termsID,`status`,createdBy,  \n" +
                "		updatedBy,soDate,revisionChangeNote,documentPath,createByRoleId,updateByRoleId,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,serialNumber,carrierID,carrierAccountNumber,  \n" +
                "		poRevision,isBlanketPO,isLegacyPO,isRmaPO,shippingComment)  \n" +
                "		SELECT pSONumber,pPONumber,pPODate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,'00',termsID,0,puserID,  \n" +
                "		 puserID,pSODate,'',documentPath,puserRoleID,puserRoleID,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,pSerialNumber,carrierID,carrierAccountNumber,  \n" +
                "		 '',isBlanketPO,isLegacyPO,isRmaPO,shippingComment FROM salesordermst WHERE id=pSOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewSOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesOrder AS  \n" +
                "  \n" +
                "				SELECT sod.id,row_number() over (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID FROM salesorderdet sod  \n" +
                "					JOIN component c ON c.id = sod.partID AND c.partStatus != -3  \n" +
                "					WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 ORDER BY sod.partCategory DESC;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempSalesOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old sales order detail id  \n" +
                "				SELECT id,partID INTO vOldSalesOrderDetID,vPartID FROM tempSalesOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new sales order detail  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,qty,price,shippingQty,remark,puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialTentitiveDocDate, vOldPODate) DAY),prcNumberofWeek,isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialDueDate, vOldPODate) DAY),  \n" +
                "			  partID,0,tentativeBuild,uom,lineID,puserRoleID,puserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,1,  \n" +
                "			  1,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType FROM salesorderdet WHERE id=vOldSalesOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,sod.qty,sod.price,sod.shippingQty,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=sod.partID AND im.requiementType='C' AND cid.category='S' AND im.isdeleted=0),puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialTentitiveDocDate, vOldPODate) DAY),sod.prcNumberofWeek,sod.isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialDueDate, vOldPODate) DAY),  \n" +
                "			   sod.partID,0,sod.tentativeBuild,sod.uom,sod.lineID,puserRoleID,puserRoleID,sod.refRFQGroupID,sod.refRFQQtyTurnTimeID,sod.salesCommissionTo,sod.custPOLineNumber,sod.partCategory,1,  \n" +
                "			   1,c.mfgPNDescription,sod.quoteNumber,(SELECT GROUP_CONCAT(arc.comment SEPARATOR '  \n" +
                "	')  FROM assembly_revision_comments arc  \n" +
                "			   WHERE arc.partID=sod.partID AND arc.isdeleted=0),sod.quoteFrom,sod.refAssyQtyTurnTimeID,sod.assyQtyTurnTimeText,sod.isCustomerConsign,sod.originalPOQty,sod.frequency,sod.frequencyType FROM salesorderdet sod JOIN component c ON c.id=sod.partID  \n" +
                "			 WHERE sod.id=vOldSalesOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewSalesOrderDetID;  \n" +
                "  \n" +
                "			  -- to save release details  \n" +
                "				  INSERT INTO salesshippingmst (sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,priority,createdBy,updatedBy,  \n" +
                "		 releaseNotes,promisedShipDate,createByRoleId,updateByRoleId,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		 revisedRequestedDockDate,revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip)  \n" +
                "  \n" +
                "		SELECT vNewSalesOrderDetID,qty,unitMeaser,DATE_ADD( pPODate, INTERVAL DATEDIFF(shippingDate, vOldPODate) DAY),shippingMethodID,shippingAddressID,description,priority,puserID,puserID,  \n" +
                "		releaseNotes, DATE_ADD( pPODate, INTERVAL DATEDIFF(promisedShipDate, vOldPODate) DAY),puserRoleID,puserRoleID,releaseNumber,DATE_ADD( pPODate, INTERVAL DATEDIFF(requestedDockDate, vOldPODate) DAY),carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		  DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedDockDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedShipDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedPromisedDate, vOldPODate) DAY),isAgreeToShip  \n" +
                "		FROM  \n" +
                "		salesshippingmst  \n" +
                "		WHERE sDetID= vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  vNewSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,puserID,puserID,puserRoleID,puserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "			            -- sales commission details  \n" +
                "			            CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesCommissionDetails AS  \n" +
                "  \n" +
                "				SELECT id,row_number() over (PARTITION BY refSalesOrderDetID) rowNumber FROM salesorderdet_commission_attribute_mstdet  \n" +
                "					WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SELECT COUNT(1) INTO vsalescount FROM tempSalesCommissionDetails;  \n" +
                "  \n" +
                "				      SET vsalesIndex=1;  \n" +
                "  \n" +
                "				      WHILE(vsalesIndex <= vsalescount) DO  \n" +
                "				      SELECT id INTO vOldSalesCommissionID FROM tempSalesCommissionDetails WHERE rowNumber=(vsalesIndex);  \n" +
                "  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute_mstdet(refSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,createdBy,updatedBy,createByRoleId,updateByRoleId,rfqAssyID)  \n" +
                "  \n" +
                "				        SELECT vNewSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,puserID,puserID,puserRoleID,puserRoleID,rfqAssyID FROM salesorderdet_commission_attribute_mstdet  \n" +
                "				        WHERE id=vOldSalesCommissionID;  \n" +
                "  \n" +
                "				        SELECT LAST_INSERT_ID() INTO vNewSalesCommissionID;  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,refSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,createdBy,updatedBy,  \n" +
                "				        createByRoleId,updateByRoleId,category,partID,refComponentSalesPriceBreakID,org_unitPrice)  \n" +
                "				        SELECT vNewSalesOrderDetID,vNewSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,puserID,puserID,  \n" +
                "				        puserRoleID,puserRoleID,category,partID,refComponentSalesPriceBreakID,org_unitPrice FROM salesorderdet_commission_attribute  \n" +
                "				        WHERE refSalesCommissionID=vNewSalesCommissionID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SET vsalesIndex  =vsalesIndex+1;  \n" +
                "				      END WHILE;  \n" +
                "                                  -- end sales commission  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "                       				-- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		     -- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempNewOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=vNewSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		   CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherChargesDet AS  \n" +
                "                       		   SELECT * FROM tempOtherCharges;  \n" +
                "  \n" +
                "				UPDATE salesorderdet AS sd ,tempOtherCharges AS b  \n" +
                "				SET sd.refSODetID=(SELECT tno.sdetid FROM tempNewOtherCharges tno WHERE tno.lineID IN (SELECT sdd.lineID FROM tempOtherChargesDet sdd WHERE sdd.sdetid=b.refSODetID))  \n" +
                "				WHERE sd.lineID=b.lineID AND sd.refSalesOrderID=vNewSOID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID IS NOT NULL AND sd.refSalesOrderID=vNewSOID;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=vNewSOID);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherCharges;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempSalesCommissionDetails;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS   tempSalesOrder;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempOtherChargesDet;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempNewOtherCharges;  \n" +
                "			  SELECT   vNewSOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderForElastic`(  \n" +
                "    IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON tm.gencCategoryID=som.shippingMethodID AND tm.isdeleted=0  \n" +
                "		WHERE som.isDeleted = FALSE;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "			som.shippingMethodID,  \n" +
                "			som.revision,  \n" +
                "			som.termsID,  \n" +
                "			CASE WHEN som.status=1 THEN 'Published' ELSE 'Draft' END statusText,  \n" +
                "			som.revisionChangeNote,  \n" +
                "			som.salesCommissionTo,  \n" +
                "			som.serialNumber,  \n" +
                "			som.carrierID,  \n" +
                "			som.carrierAccountNumber,  \n" +
                "                        som.poRevision,  \n" +
                "                        CASE WHEN som.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPO,  \n" +
                "                        CASE WHEN som.isLegacyPO=1 THEN 'Yes' ELSE 'No' END legacyPO,  \n" +
                "                        CASE WHEN som.isRmaPO=1 THEN 'Yes' ELSE 'No' END rmaPO,  \n" +
                "                        cm.gencCategoryName AS carrierName,  \n" +
                "                        cm.genccategoryCode AS carrierCode,  \n" +
                "                        tm.gencCategoryName AS termsCode,  \n" +
                "                        tm.genccategoryCode AS termsName,  \n" +
                "                        sm.gencCategoryName AS shippingMethodName,  \n" +
                "                        som.isdeleted  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON sm.gencCategoryID=som.shippingMethodID AND sm.isdeleted=0  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id)  AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5265,'2.00','V1',' Sales order copy - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5265:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getPendingVerificationUMIDCount;  \n" +
                "CREATE PROCEDURE `Sproc_getPendingVerificationUMIDCount`(  \n" +
                "	pWoID INT,  \n" +
                "    pOpID INT,  \n" +
                "	pWoTransID INT,  \n" +
                "    pTransType VARCHAR(1),  \n" +
                "    pWoOpEquipID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select wtu.woOpEqpID, count(1) cnt  \n" +
                "    From workorder_trans_umid_details wtu  \n" +
                "    JOIN workorder_trans wot on wot.woTransID = wtu.woTransID and wot.isDeleted = 0  \n" +
                "    Where wtu.woTransID = pWoTransID  \n" +
                "    and wtu.transactionType = pTransType  \n" +
                "    and ifnull(wtu.woOpEqpID,0) = ifnull(pWoOpEquipID,ifnull(wtu.woOpEqpID,0))  \n" +
                "    and  wtu.isDeleted = 0  \n" +
                "    and wtu.isVerified = 0  \n" +
                "    and wtu.reelStatus = 'P'  \n" +
                "    group by wtu.woOpEqpID;  \n" +
                "  \n" +
                "    Select wtu.woOpEqpID, count(1) cnt  \n" +
                "    From workorder_trans_umid_details wtu  \n" +
                "    JOIN workorder_trans wot on wot.woTransID = wtu.woTransID and wot.isDeleted = 0  \n" +
                "    Where wot.woID = pWoID  \n" +
                "    and wot.opID = pOpID  \n" +
                "    and wtu.transactionType = pTransType  \n" +
                "    and ifnull(wtu.woOpEqpID,0) = ifnull(pWoOpEquipID,ifnull(wtu.woOpEqpID,0))  \n" +
                "    and  wtu.isDeleted = 0  \n" +
                "    group by wtu.woOpEqpID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5266,'2.00','V1','Sproc_getPendingVerificationUMIDCount  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5266:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateWOOperationAtCheckOut;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWOOperationAtCheckOut`(  \n" +
                "	IN	pWoID	INT,  \n" +
                "	IN	pOpID	INT,  \n" +
                "    IN	pWoOPID INT,  \n" +
                "	IN	pWOTransID INT,  \n" +
                "    IN 	pTotalQty INT,  \n" +
                "    IN	pPassQty INT,  \n" +
                "    IN	pScrapQty INT,  \n" +
                "    IN  pIsCheckUnique TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWoOPID INT;  \n" +
                "	DECLARE vReturnPending INT ;  \n" +
                "    DECLARE vOPProdQty INT ;  \n" +
                "    DECLARE vBuildQty INT ;  \n" +
                "    DECLARE vTillProcessScrapQty INT;  \n" +
                "    DECLARE vNextIsLoopOperation INT;  \n" +
                "    DECLARE vCurrentIsLoopOperation INT;  \n" +
                "    -- DECLARE vIsCheckUnique INT;  \n" +
                "    DECLARE vUmidTransactionQty INT DEFAULT NULL;  \n" +
                "	DECLARE vTotalProcessedQtyForWOID INT;  \n" +
                "    DECLARE vIsRework TINYINT;  \n" +
                "    DECLARE vIssueQty INT;  \n" +
                "    DECLARE vLastOPID INT;  \n" +
                "    DECLARE vCheckEquipmentOnline TINYINT;  \n" +
                "    DECLARE vCheckAllOperationForEquipOnline TINYINT;  \n" +
                "    DECLARE vResult VARCHAR(15);  \n" +
                "    DECLARE vEquipOpName VARCHAR(255);  \n" +
                "	DECLARE vEquipOpNumber VARCHAR(15);  \n" +
                "    DECLARE vWoNumber VARCHAR(255);  \n" +
                "    DECLARE vEquipWoOPID INT;  \n" +
                "	DECLARE vTotalScrapTillNow INT DEFAULT 0;  \n" +
                "  \n" +
                "	CALL Sproc_GetOperationStockDetails(pwoID, pOPID);  \n" +
                "-- select 'Line 31';  \n" +
                "	SELECT returnPending , OPProdQty , BuildQty , TillProcessScrapQty , nextIsLoopOperation , currentIsLoopOperation -- , umidTransactionQty  \n" +
                "    INTO vReturnPending , vOPProdQty , vBuildQty , vTillProcessScrapQty , vNextIsLoopOperation ,vCurrentIsLoopOperation -- , vUmidTransactionQty  \n" +
                "    FROM temp_Sproc_GetopReadyStock;  \n" +
                "-- select 'Line 36';  \n" +
                "    /***** First check Stock details ****/  \n" +
                "	IF ((pTotalQty  > vReturnPending) OR ((vOPProdQty + pTotalQty) > (vBuildQty - vTillProcessScrapQty)))  \n" +
                "		AND (vNextIsLoopOperation IS NULL && vcurrentIsLoopOperation IS NULL) THEN  \n" +
                "                                SET vResult ='TRANS001';  \n" +
                "	ELSEIF pIsCheckUnique = 1 AND vUmidTransactionQty = 0 THEN  \n" +
                "-- select 'Line 42';  \n" +
                "		SET vResult = 'TRANS002' ;  \n" +
                "    ELSE-- Check For Equipment Online or Not.  \n" +
                "-- select 'Line 44';  \n" +
                "        -- Get Last WO Operation ID  \n" +
                "		SELECT woOPID ,isRework  INTO vLastOPID , vIsRework  \n" +
                "        FROM workorder_operation woop  \n" +
                "		WHERE woop.woid = pWoID  \n" +
                "        AND opNumber = (SELECT MAX(opnumber) FROM workorder_operation wo  \n" +
                "					WHERE wo.woid = pWoID AND IFNULL(wo.isDeleted,0)=0)  \n" +
                "		AND IFNULL(woop.isDeleted,0)=0;  \n" +
                "-- select 'Line 55',pPassQty,pScrapQty,pWoID,pOpID ;  \n" +
                "        -- Get total qty processed till now in current operation  \n" +
                "        Select IFNULL(sum(passQty),0) + IFNULL(sum(scrapQty),0) + (ifnull(pPassQty,0) + ifnull(pScrapQty,0))  \n" +
                "        INTO vTotalProcessedQtyForWOID  \n" +
                "		From workorder_trans_production  \n" +
                "        where woTransID IN (select  woTransID FROM workorder_trans  \n" +
                "							where woID = pWoID and isDeleted = 0 and opID = pOpID )  \n" +
                "        And isDeleted  = 0;  \n" +
                "-- total scrap  qty till now except current operation  \n" +
                "        select sum(scrapQty) INTO vTotalScrapTillNow from workorder_trans_production  \n" +
                "		where isDeleted = 0  \n" +
                "        and scrapQty is not null  \n" +
                "        and woTransID  IN (select  woTransID FROM workorder_trans  \n" +
                "			where woID = pWoID and isDeleted = 0  and checkoutTime is Not null and opID <> pOpID );  \n" +
                "-- select 'Line 63';  \n" +
                "		-- Get WO Build Qty  \n" +
                "        Select buildQty, woNumber into vBuildQty, vWoNumber  \n" +
                "        From Workorder  \n" +
                "        where woID = pWoID  \n" +
                "        and isDeleted = 0;  \n" +
                "-- select 'Line 69',vTotalProcessedQtyForWOID , vBuildQty , vTotalScrapTillNow ;  \n" +
                "        -- Get Issue Qty  \n" +
                "        Select issueQty into vIssueQty  \n" +
                "        From workorder_trans  \n" +
                "        Where woTransID = pWOTransID  \n" +
                "        And isDeleted = 0;  \n" +
                "-- select 'Line 75',vTotalProcessedQtyForWOID , vBuildQty , vTotalScrapTillNow , vIssueQty;  \n" +
                "        -- If current is Las Operation and All Build qty is processed then check  all previous operation  for equipment online.  \n" +
                "        IF (vLastOPID = pWoOPID) AND vBuildQty <= vTotalProcessedQtyForWOID  + ifnull(vTotalScrapTillNow,0) Then  \n" +
                "			-- Check  All Previous  \n" +
                "            SET vCheckAllOperationForEquipOnline = 1;  \n" +
                "        ELSE -- Not a Last Process  \n" +
                "			-- In case of Re work check processed Qty with  \n" +
                "			IF vIsRework = 1 and vIssueQty <=(ifnull(pPassQty,0) + ifnull(pScrapQty,0))  THEN  \n" +
                "				SET vCheckEquipmentOnline = 1;  \n" +
                "			ELSEIF vBuildQty <= vTotalProcessedQtyForWOID  + ifnull(vTotalScrapTillNow,0)  THEN  \n" +
                "				SET vCheckEquipmentOnline = 1;  \n" +
                "            ELSE  \n" +
                "				SET vCheckEquipmentOnline = 0 ;  \n" +
                "                SET vCheckAllOperationForEquipOnline = 0;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "-- select 'Line 98',vCheckAllOperationForEquipOnline , vCheckEquipmentOnline;  \n" +
                "        Select woop.opName, opNumber,woEp.woOPID  into vEquipOpName, vEquipOpNumber, vEquipWoOPID  \n" +
                "        From workorder_operation_equipment  woEp  \n" +
                "        JOIN workorder_operation woop ON woop.woOPID = woEp.woOPID and woop.isDeleted = 0  \n" +
                "        Where woEp.woID = pWoID And woEp.isDeleted = 0 And woEp.isOnline = 1  \n" +
                "        And woEp.opID = (case when vCheckAllOperationForEquipOnline then woEp.opID when vCheckEquipmentOnline then pOpID else 0 end);  \n" +
                "-- select 'Line 104',vEquipWoOPID;  \n" +
                "        IF vEquipWoOPID IS NOT NULL THEN  \n" +
                "			SET vResult = 'TRANS003'	;  \n" +
                "        ELSE  \n" +
                "			SET vResult = 1 ;  \n" +
                "		END IF;-- Check Equipment Error  \n" +
                "    END IF;  \n" +
                "	select vResult errCode, IF (vResult = 1, 0,1) hasError, vEquipOpName, vEquipOpNumber, vWoNumber , vEquipWoOPID ;  \n" +
                "	IF vResult = 'TRANS002' THEN  \n" +
                "		select * from temp_Sproc_GetopReadyStock;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5267,'2.00','V1','Sproc_ValidateWOOperationAtCheckOut  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5267:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "INSERT INTO `systemconfigrations` (`key`, `values`, `isEncrypted`, `isActive`, `isDeleted`, `createdBy`, `updatedBy`, `isEditable`, `description`, `displayName`, `createByRoleId`, `updateByRoleId`)  \n" +
                "VALUES ('SupervisorApprovalForUMIDScan', 'Manager', '0', '1', '0', '1', '1', '1', 'If UMID scan at Workorder Operation Activity require approval then access level for approval should be equal or more than X value.', 'SupervisorApprovalForUMIDScan', '1', '1');  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5268,'2.00','V1','Make Entry in Data Key  for SupervisorApprovalForUMIDScan  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5268:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS fun_checkUMIDScan;  \n" +
                "CREATE  FUNCTION `fun_checkUMIDScan`(  \n" +
                "	pUMID VARCHAR(100),  \n" +
                "	ppartID INT,  \n" +
                "	pwoTransID INT,  \n" +
                "	pwoOPID INT,  \n" +
                "	pemployeeId INT,  \n" +
                "	pcheckKitAllocation VARCHAR(5000),  \n" +
                "	ptransactionType VARCHAR(1),  \n" +
                "	pFromFeeder INT,  \n" +
                "	pisVerify INT,  \n" +
                "	pwoOpEqpID INT,  \n" +
                "	pfeederLocation VARCHAR(1000),  \n" +
                "	pwoID INT,  \n" +
                "	pCreatedBy VARCHAR(500),  \n" +
                "	pisConfirmed INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_binID INT;  \n" +
                "    DECLARE temp_umid_sid INT;  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_comp_alertExpiryDays INT;  \n" +
                "	DECLARE flag_isKitValid INT;  \n" +
                "	DECLARE flag_isTeamOperation INT DEFAULT 0;  \n" +
                "	DECLARE temp_expiryDate DATETIME;  \n" +
                "	DECLARE temp_expiryDaysLeftValidation INT;  \n" +
                "	DECLARE temp_expiryDaysLeftCount INT;  \n" +
                "	DECLARE temp_config_dateFormat VARCHAR(1000);  \n" +
                "	DECLARE temp_umid_valid INT DEFAULT 1;  \n" +
                "	DECLARE temp_isIncludeSubassembly INT DEFAULT 0;  \n" +
                "	DECLARE temp_recordFoundInAssembly VARCHAR (500);  \n" +
                "  \n" +
                "	DECLARE temp_comp_isGoodPart INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_partLevelRestrictUsePermanently INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_partLevelRestrictPackagingUsePermanently INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_restrictFromUMID INT DEFAULT 0;  \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                "	DECLARE temp_parent_wo INT DEFAULT 0;  \n" +
                "	DECLARE temp_part_cleantype VARCHAR(5) DEFAULT '';  \n" +
                "    DECLARE temp_assy_cleantype VARCHAR(5) DEFAULT '';  \n" +
                "    DECLARE temp_op_cleantype VARCHAR(5) DEFAULT 'NA';  \n" +
                "    DECLARE temp_err_text VARCHAR(2500) DEFAULT NULL;  \n" +
                "    DECLARE temp_op_number DECIMAL(7,3);  \n" +
                "    DECLARE temp_op_name VARCHAR(255);  \n" +
                "    DECLARE temp_wo_number VARCHAR(255);  \n" +
                "  \n" +
                "    SET temp_expiryDate = NULL;  \n" +
                "	SET temp_expiryDaysLeftValidation = NULL;  \n" +
                "	SET temp_expiryDaysLeftCount = NULL;  \n" +
                "  \n" +
                "  \n" +
                "    /********Get Parent WO of Revised WO***********/  \n" +
                "    WITH RECURSIVE RevWo AS  (  \n" +
                "			SELECT	woId,  \n" +
                "					1 lvl  ,  \n" +
                "					terminateWOID  \n" +
                "			FROM workorder  \n" +
                "			WHERE woId = pwoID  \n" +
                "			AND isDeleted = 0  \n" +
                "			UNION ALL  \n" +
                "			SELECT	wo.woID,  \n" +
                "					rw.lvl +1 lvl,  \n" +
                "					wo.terminateWOID  \n" +
                "			 FROM workorder wo  \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                "			 WHERE wo.isDeleted = 0  \n" +
                "			 )  \n" +
                "			SELECT rev.woID  INTO temp_parent_wo  \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                "  \n" +
                "    IF temp_parent_wo = 0 THEN SET temp_parent_wo = NULL; END IF;  \n" +
                "	#########################################################################################  \n" +
                "	################### NOTE: Temporaray table for error comes from sp ######################  \n" +
                "	#########################################################################################  \n" +
                "	IF(pUMID IS NOT NULL) THEN  \n" +
                "		# step 1 - get umid details from umid  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details AS  \n" +
                "		SELECT c.id, c.PIDCode, c.mfgPN,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode, c.mfgCodeID,  \n" +
                "			c.restrictUSEwithpermission AS partLevelRestrictUSEwithpermission,  \n" +
                "			c.restrictUsePermanently AS partLevelRestrictUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission AS partLevelRestrictPackagingUseWithpermission,  \n" +
                "			c.restrictPackagingUsePermanently AS partLevelRestrictPackagingUsePermanently,  \n" +
                "			c.packagingGroupId,  \n" +
                "			c.rev AS rev,  \n" +
                "			c.imageURL AS imageURL,  \n" +
                "			c.documentPath,  \n" +
                "			c.mfgPNDescription AS mfgPNDescription,  \n" +
                "			c.roHSStatusID,  \n" +
                "			c.alertExpiryDays,  \n" +
                "			c.umidVerificationRequire,  \n" +
                "			c.uom,  \n" +
                "			c.isGoodPart isGoodPart,  \n" +
                "			rr.name rohsStatus,  \n" +
                "			rr.rohsIcon rohsIcon,  \n" +
                "			css.id AS refsidid,  \n" +
                "			css.binID AS binID,  \n" +
                "			css.pkgQty AS pkgQty,  \n" +
                "			-- css.pkgCount AS pkgCount,  \n" +
                "			css.pkgUnit AS pkgUnit,  \n" +
                "			css.uom AS pkgUOM,  \n" +
                "			css.uid,  \n" +
                "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                "			css.isUMIDRestrict AS RestrictFromUMID,  \n" +
                "			css.expiryDate,  \n" +
                "			1 isActualComponent,  \n" +
                "			0 isPackagingAlias,  \n" +
                "			c.isCPN AS isCPN,  \n" +
                "			c.isCustom AS isCustom ,  \n" +
                "			CAST(NULL AS CHAR(3000)) AS refDesig,  \n" +
                "			c.programingRequired,  \n" +
                "			(SELECT feederLocation FROM workorder_operation_equipment_feeder_details  \n" +
                "				WHERE id IN (SELECT eqpFeederID FROM workorder_trans_umid_details  \n" +
                "					WHERE refsidid IN (SELECT id FROM component_sid_stock  \n" +
                "					WHERE uid=pUMID AND isDeleted=0) AND isDeleted=0 AND reelStatus=\"P\")  \n" +
                "					AND woOPID=pwoOPID) feederLocation   ,  \n" +
                "             c.isWaterSoluble, c.isNoClean  , c.isFluxNotApplicable,  \n" +
                "             fun_getMeasurementTypeForUOM(css.uom) umidUOMClassID  \n" +
                "		FROM component c  \n" +
                "		LEFT JOIN component_sid_stock css  \n" +
                "		ON css.refcompid = c.id AND css.deletedAt IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)  \n" +
                "		WHERE css.uid = pUMID  \n" +
                "		AND c.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SELECT wop.isTeamOperation, CASE	WHEN wop.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "											WHEN wop.isNoClean = 1 AND wop.isWaterSoluble = 0 THEN 'NC'  \n" +
                "											WHEN wop.isNoClean = 0 AND wop.isWaterSoluble = 1 THEN 'WS'  \n" +
                "											ELSE 'NA'  END  ,  \n" +
                "               wop.opNumber,wop.opName  \n" +
                "        INTO flag_isTeamOperation,temp_op_cleantype , temp_op_number, temp_op_name  \n" +
                "        FROM workorder_operation wop WHERE woopid = pwoOpID;  \n" +
                "  \n" +
                "		#check UMID already scanned in operation  \n" +
                "		IF ((pFromFeeder <> 1 AND pisVerify <> 1)) THEN  \n" +
                "			-- IF(IFNULL(flag_isTeamOperation,0) = 1) THEN  \n" +
                "			-- 	IF ((SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "			-- 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)  \n" +
                "			-- 		AND wtud.woOPID = pwoOPID AND wtud.woTransID = pwoTransID  \n" +
                "			-- 		AND IFNULL(transactionType,ptransactionType)=ptransactionType) > 0) THEN  \n" +
                "			-- 		-- ALREADY_IN_USE  \n" +
                "			-- 		SET temp_umid_valid = 0;  \n" +
                "			-- 		SET result = fun_checkAndInsertError('UMID003', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "			-- 	END IF;  \n" +
                "			-- ELSE  \n" +
                "				IF (pisConfirmed = 0 AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "			 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)  \n" +
                "			 		AND wtud.woOPID = pwoOPID  \n" +
                "			 		AND IFNULL(transactionType,ptransactionType)=ptransactionType  \n" +
                "			 		AND woTransID = pwoTransID) > 0) THEN  \n" +
                "			 		-- ALREADY_IN_USE  \n" +
                "			 		SET temp_umid_valid = 0;  \n" +
                "			 		SET result = fun_checkAndInsertError('UMID037', 0, 0, 1, 0, 0, \"DUP\", NULL, NULL);  \n" +
                "			 	END IF;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "		IF(temp_umid_valid = 1) THEN  \n" +
                "			# check umid available in list  \n" +
                "			# yes -  check for pid in bom  \n" +
                "			# no - invalid umid  \n" +
                "			## restrict to use forever - restrictUsePermanently  \n" +
                "			IF((SELECT COUNT(1) FROM temp_umid_details) > 0) THEN  \n" +
                "				SELECT id,packagingGroupId,  \n" +
                "					alertExpiryDays,expiryDate,  \n" +
                "					IFNULL(partLevelRestrictUsePermanently,0),IFNULL(partLevelRestrictPackagingUsePermanently,0),  \n" +
                "					IFNULL(RestrictFromUMID,0), isGoodPart, isCPN, binID , refsidid  \n" +
                "					-- , refSalesOrderDetID  \n" +
                "				INTO temp_umid_comp_id,temp_umid_package_id,  \n" +
                "					temp_comp_alertExpiryDays, temp_expiryDate,  \n" +
                "					temp_comp_partLevelRestrictUsePermanently,temp_comp_partLevelRestrictPackagingUsePermanently,  \n" +
                "					temp_umid_restrictFromUMID, temp_comp_isGoodPart, temp_comp_is_cpn, temp_umid_binID ,temp_umid_sid  \n" +
                "					-- , temp_umid_refSalesOrderDetID  \n" +
                "				FROM temp_umid_details WHERE uid=pUMID;  \n" +
                "  \n" +
                "				#check for part expired or not  \n" +
                "				#alertExpiryDays  \n" +
                "				#umidVerificationRequire  \n" +
                "				SELECT `values` INTO temp_config_dateFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";  \n" +
                "				IF((IFNULL(temp_expiryDate,0) > 0) AND (fun_DatetimetoUTCDateTime() > (temp_expiryDate))) THEN  \n" +
                "					-- EXPIRED_ON  \n" +
                "					SET result = fun_checkAndInsertError('UMID011', 0, 1, 0, 0, 0, temp_expiryDate, temp_config_dateFormat, NULL);  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictUsePermanently = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_PART  \n" +
                "					SET result = fun_checkAndInsertError('UMID013', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictPackagingUsePermanently = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_PART_PACKAGING  \n" +
                "					SET result = fun_checkAndInsertError('UMID022', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_umid_restrictFromUMID = 1) THEN  \n" +
                "					-- RESTRICTED_FROM_UMID  \n" +
                "					SET result = fun_checkAndInsertError('UMID012', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF(temp_comp_isGoodPart <> 1) THEN  \n" +
                "					-- RESTRICTED_INCORRECT_PART  \n" +
                "					SET result = fun_checkAndInsertError('UMID028', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF (( SELECT COUNT(1) FROM binmst b  \n" +
                "						where b.isDeleted = 0  \n" +
                "                        and b.id = -1 and b.WarehouseID = -3  \n" +
                "                        and b.id = temp_umid_binID ) > 0) THEN  \n" +
                "                        -- UMID FROM EMPTY BIN SHOW SEPARATE MESSAGE  \n" +
                "                        SET result = fun_checkAndInsertError('UMID048', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "                ELSEIF((SELECT COUNT(1) FROM binmst b  \n" +
                "						WHERE deletedAt IS NULL  \n" +
                "						AND warehouseID IN  \n" +
                "							(SELECT id FROM warehousemst WHERE deletedAt IS NULL AND parentWHID=-2)  \n" +
                "						AND id=temp_umid_binID) = 0)  THEN  \n" +
                "					-- UMID_MUST_BE_FROM_PRODUCTION_WAREHOUSE  \n" +
                "					SET result = fun_checkAndInsertError('UMID031', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSEIF((SELECT COUNT(1) FROM workorder_trans_umid_details ud  \n" +
                "						WHERE deletedAt IS NULL  \n" +
                "						AND reelstatus = 'P'  \n" +
                "                        AND transactionType  = 'F'  \n" +
                "                        AND refsidid = temp_umid_sid) > 0 AND pisVerify=0)  THEN  \n" +
                "					-- UMID SHOULD NOT BE ALREADY  IN FEEDER  \n" +
                "                    Select wo.woNumber , woOp.opNumber,  woOp.opName INTO temp_wo_number, temp_op_number,temp_op_name  \n" +
                "                    From workorder_trans_umid_details wtud  \n" +
                "                    JOIN workorder_trans wt ON wt.woTransId = wtud.woTransId and wt.isDeleted = 0  \n" +
                "                    JOIN workorder_operation woOp ON woOp.woOPID = wt.woOPID and woOp.isDeleted = 0  \n" +
                "                    JOIN workorder wo ON wo.woID = wt.woID and wo.isDeleted = 0  \n" +
                "                    WHERE wtud.reelstatus = 'P'  \n" +
                "					AND wtud.transactionType  = 'F'  \n" +
                "                    AND wtud.refsidid = temp_umid_sid  \n" +
                "                    LIMIT 1;  \n" +
                "                    SET temp_err_text = concat('<p></p><p style=\"color:black\"> UMID: ',pUMID,'</p> <p style=\"color:black\"> WO#: ',temp_wo_number,'</p> <p style=\"color:black\"> Operation Activity: (',temp_op_number,')',temp_op_name);  \n" +
                "					SET result = fun_checkAndInsertError('UMID041', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "                ELSEIF((SELECT COUNT(1) FROM component co  \n" +
                "						WHERE co.isDeleted = 0  \n" +
                "                        AND co.partStatus = -3  \n" +
                "                        AND  co.id = ppartID) > 0  AND pisConfirmed = 0)     THEN  \n" +
                "                        -- Take confirmation for inactive part  \n" +
                "                        SET result = fun_checkAndInsertError('UMID047', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "                        -- SET result = fun_checkAndInsertError('UMID039', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSE  \n" +
                "					#check current umid is assigned in bom or not  \n" +
                "					#check with part available in BOM or not  \n" +
                "					-- check for subassembly flag in work order and then check kit allocation case in subaasembly too.  \n" +
                "					SELECT IFNULL(isIncludeSubAssembly,0) INTO temp_isIncludeSubassembly FROM workorder WHERE woID=pwoID;  \n" +
                "                    #Feeder check  case removed as  per discussed with  Vaibhav bhai  \n" +
                "                    IF pcheckKitAllocation = 'MISSINGPART' THEN   -- ADDED FOR MISSING PART AS  NO NEED TO CHECK KIT ALLOCATION  \n" +
                "						#SELECT 'CREATE TEMP temp_assy_part_list TABLE ';  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation  \n" +
                "						FROM vu_bom_details_with_alias WHERE  \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation  \n" +
                "							WHERE refSalesOrderDetID  \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo ,pwoID)  ) AND `status` = \"A\" AND assyID=ppartID)));  \n" +
                "                    ELSEIF  temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1 AND  pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus  , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "                        WHERE AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "                           AND isDeleted = 0 ;  \n" +
                "					ELSEIF pcheckKitAllocation = 'KITALLOCATIONNOTREQUIRED' THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "							WHERE AssyID = ppartID  \n" +
                "							AND isDeleted = 0   ;  \n" +
                "					ELSEIF (temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1) THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus  , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias WHERE  \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)  \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation  \n" +
                "							WHERE refSalesOrderDetID  \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "							WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID) ) AND `status` = \"A\" AND assyID=ppartID)));  \n" +
                "					ELSE  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;  \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list  \n" +
                "						SELECT mfgpn AS mfgPN,  \n" +
                "							AssemblyID AS AssemblyID,  \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,  \n" +
                "							restrictPart AS restrictPart,  \n" +
                "							custPN AS custPN,  \n" +
                "							custPNID AS custPNID,  \n" +
                "							PIDCode,  \n" +
                "							LineID,  \n" +
                "							id AS rfqLineItemsID,  \n" +
                "							refDesig AS refDesig,  \n" +
                "							isBOMPart AS isActualComponent,  \n" +
                "							isPackagingAlias,  \n" +
                "							isCPN,  \n" +
                "							isInstall,  \n" +
                "							isPurchase,  \n" +
                "							isBuyDNPQty,  \n" +
                "							customerApprovalCPN,  \n" +
                "							partLevelRestrictUSEwithpermission,  \n" +
                "							partLevelRestrictUsePermanently,  \n" +
                "							partLevelRestrictPackagingUseWithpermission,  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseWithPermissionStep,  \n" +
                "							lineLevelReStrictUsePermanentlyStep,  \n" +
                "							lineLevelRestrictUseInBOMStep,  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,  \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,  \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "							lineLevelCustomerApproval,  \n" +
                "							RoHSStatusID,  \n" +
                "							isNotRequiredKitAllocation ,  \n" +
                "							Qpa , programingStatus , dnpDesigCount  \n" +
                "						FROM vu_bom_details_with_alias  \n" +
                "							WHERE ( AssyID  IN (SELECT assyID FROM kit_allocation  \n" +
                "												WHERE refSalesOrderDetID   IN (SELECT salesOrderDetailID FROM workorder_salesorder_details  \n" +
                "																	WHERE deletedAt IS NULL AND woID= IFNULL(temp_parent_wo,pwoID)  )  \n" +
                "												AND `status` = \"A\" AND assyID=ppartID)  \n" +
                "									OR AssyID IN (SELECT v1.AssyID FROM vu_bom_details_with_alias v1 WHERE v1.isDeleted = 0 AND v1.assyID = ppartID GROUP BY v1.AssyID HAVING COUNT(1) = SUM(CASE WHEN v1.isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END))  \n" +
                "									OR (mfgPnIDWithPackagingAliasID ,AssyID) IN (SELECT v2.mfgPnIDWithPackagingAliasID, v2.AssyID FROM vu_bom_details_with_alias v2 WHERE v2.assyID = ppartID AND v2.isNotRequiredKitAllocation = 1 )  \n" +
                "                                  ) AND isDeleted = 0    ;  \n" +
                "                             -- second \"OR\" condition added for case when all BOM line items set to skip kit allocation  \n" +
                "                             -- third \"OR\" condition added to  get Part detail for SO without kit allocation and having BOM part as Kit Not Required  \n" +
                "					END IF;  \n" +
                "					# if umid assigned in bom than check for feeder details available for pid  \n" +
                "					#yes - check with umid allocated in kit or not  \n" +
                "					#no - umid not assigned in bom  \n" +
                "					IF((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "						WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "						) = 0) THEN  \n" +
                "						IF (pFromFeeder = 1) THEN  \n" +
                "							-- UMID_NOT_ASSIGNED  \n" +
                "							SET result = fun_checkAndInsertError('UMID008', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSE  \n" +
                "							## Check for Supply materials and tools  \n" +
                "							IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "								wop.partID = temp_umid_comp_id AND  \n" +
                "								wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "									-- Check  UMID cleaning type with  Assembly cleaning type only for SMT parts  \n" +
                "									SELECT CASE WHEN tud.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "												WHEN tud.isNoClean = 1 AND tud.isWaterSoluble = 0 THEN 'NC'  \n" +
                "												WHEN tud.isNoClean = 0 AND tud.isWaterSoluble = 1 THEN 'WS'  \n" +
                "												ELSE ''  \n" +
                "											END INTO temp_part_cleantype  \n" +
                "									 FROM temp_umid_details tud   ;  \n" +
                "									SELECT CASE WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'ALL'  \n" +
                "												 WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "												 WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "												ELSE ''  \n" +
                "											END INTO temp_assy_cleantype  \n" +
                "                                      FROM component comst WHERE comst.id = ppartID;  \n" +
                "                                      # SET temp_err_text = 'UMID cleaning type mismatch with current operation activity or assembly cleaning type. <br/>';  \n" +
                "                                      SET temp_err_text = CONCAT(IFNULL(temp_err_text,'') ,'<label class=\"width-170\" style=\"color:black\">Assembly: </label>',  \n" +
                "											CASE WHEN temp_assy_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "											     WHEN temp_assy_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'  \n" +
                "                                                                                             WHEN temp_assy_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');  \n" +
                "									   SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\"  style=\"color:black\">Operation activity: </label>',  \n" +
                "											CASE WHEN temp_op_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label> <label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "												WHEN temp_op_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                                  WHEN temp_op_cleantype = 'NA' THEN 'Flux Type-Not Applicable.' END,'<br/>');  \n" +
                "									  SET temp_err_text = CONCAT(temp_err_text ,'<label class=\"width-170\" style=\"color:black\">UMID part: </label>',  \n" +
                "												CASE WHEN temp_part_cleantype = 'ALL' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label> <label class=\"margin-2 label-box label-primary\"> Water-Soluble</label>'  \n" +
                "												  WHEN temp_part_cleantype = 'NC' THEN '<label class=\"margin-2 label-box label-primary\">No-Clean</label>'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'WS' THEN '<label class=\"margin-2 label-box label-primary\">Water-Soluble</label>'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = 'NA' THEN 'Flux Type-Not Applicable.'  \n" +
                "                                                                                                  WHEN temp_part_cleantype = '' THEN 'Flux Type-Not Configured.' END,'<br/>');  \n" +
                "									IF temp_assy_cleantype = '' THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID045', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "									IF temp_part_cleantype = '' THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID046', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "									IF temp_assy_cleantype = 'NA'THEN  \n" +
                "										IF temp_op_cleantype IN ('WS','NC') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype = 'ALL' THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSEIF temp_assy_cleantype = 'NC' THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND temp_part_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSEIF temp_assy_cleantype = 'WS'  THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('MID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF  temp_op_cleantype = 'WS' AND temp_part_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									  ELSEIF temp_assy_cleantype = 'ALL' THEN  \n" +
                "										IF temp_op_cleantype = 'NA' AND  temp_part_cleantype IN ('ALL','WS','NC')  THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'NC' AND  temp_part_cleantype IN ('WS','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'WS' AND  temp_part_cleantype IN ('NC','ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSEIF temp_op_cleantype = 'ALL' AND  temp_part_cleantype IN ('ALL') THEN  \n" +
                "											SET result = fun_checkAndInsertError('UMID044', 0, 1, 0, 0, 0, temp_err_text, NULL, NULL);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										SET result = 1;  \n" +
                "									END IF;  \n" +
                "								## Check for packaging part for umid.  \n" +
                "								ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id  \n" +
                "									AND cp.componentID = temp_umid_comp_id AND cp.deletedAt IS NULL AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component c  \n" +
                "												WHERE c.id IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.deletedAt IS NULL)  \n" +
                "												AND c.deletedAt IS NULL))  > 0) THEN  \n" +
                "									SET result = 1;  \n" +
                "								ELSE  \n" +
                "									-- UMID_NOT_IN_WORKORDER_OR_KIT  \n" +
                "									SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "								END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET result = 1;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				-- INVALID  \n" +
                "				SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		-- REQUIRED  \n" +
                "		SET result = fun_checkAndInsertError('UMID005', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5269,'2.00','V1','fun_checkUMIDScan - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5269:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "INSERT INTO `systemconfigrations` (`key`, `values`, `isEncrypted`, `isActive`, `isDeleted`, `createdBy`, `updatedBy`, `isEditable`, `description`, `displayName`, `createByRoleId`, `updateByRoleId`)  \n" +
                "VALUES ('ExpireDaysLeftBeforeShipment', '7', '0', '1', '0', '1', '1', '1', 'Days left to expire before shipment from customer packing slip.', 'Days Left To Expire before Shipment', '1', '1');  \n" +
                "  \n" +
                "update systemconfigrations  \n" +
                "set displayName ='Days Left To Expire before Use'  \n" +
                "where `key`='ExpireDaysLeft' and isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 0-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5270,'2.00','V1','Inset new Key for ExpireDaysLeftBeforeShipment Update Key-ExpireDaysLeft display name   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5270:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetUMIDListForCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pPackingSlipDetId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vUMIDWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
                "	DECLARE vExpireDaysLeftBeforeShipment INT ;  \n" +
                "  \n" +
                "	select `values` into vExpireDaysLeftBeforeShipment  \n" +
                "	from systemconfigrations  \n" +
                "	where `key` = 'ExpireDaysLeftBeforeShipment'  \n" +
                "	and isDeleted =0 ;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';  \n" +
                "	# Get AVL part list of CPN part  \n" +
                "    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart  \n" +
                "	FROM  component_cust_alias_rev_pn  \n" +
                "    WHERE refCPNPartID = pPartId  \n" +
                "    AND isDeleted = 0;  \n" +
                "	#Get Packaging Alias part list  \n" +
                "	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart  \n" +
                "	FROM component_packagingalias   a  \n" +
                "	WHERE a.aliasgroupID IN  \n" +
                "	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)  \n" +
                "	AND a.componentID <> pPartId  \n" +
                "	AND a.isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF(pExpireMaterial = 1) THEN  \n" +
                "		IF(pExpiredDay = 0) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');  \n" +
                "		END IF;  \n" +
                "	END IF;	                */  \n" +
                "  \n" +
                "#select    pPartId;  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "#select    vPackagingAliasPart;  \n" +
                "    IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');  \n" +
                "    END IF;  \n" +
                "#select    vCplAvlPart;  \n" +
                "    IF vCplAvlPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');  \n" +
                "    END IF;  \n" +
                "#select     vUMIDWhereClause;  \n" +
                "    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipDetId IS NOT NULL THEN  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );  \n" +
                "        IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');  \n" +
                "		END IF;  \n" +
                "		IF vCplAvlPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');  \n" +
                "		END IF;  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');  \n" +
                "	END IF;  \n" +
                "    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');  \n" +
                "	END IF;                      */  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"  \n" +
                "					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom,  \n" +
                "							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode,  \n" +
                "							packaginggroupID,	mfg,				packageQty,  \n" +
                "							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,  \n" +
                "							location,		warehouse,			department, 		        customerID,			receiveMaterialType,  \n" +
                "							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType,  \n" +
                "							customer,			pkgUnit,   		        orgPkgUnit,  \n" +
                "							cpn,				mfgAvailable, 		        customerConsign,  \n" +
                "							refCPNMFGPNID, 		        mfgPNDescription,		nickName,  \n" +
                "							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName,  \n" +
                "							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,  \n" +
                "							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse,  \n" +
                "							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment,  \n" +
                "							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt,  \n" +
                "							createdBy,		createdByName,			isinStk,			packingSlipId,  \n" +
                "							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,  \n" +
                "							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,  \n" +
                "							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,  \n" +
                "							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,  \n" +
                "									               externalPartPackage,		partPackage,			createdUserCode,  \n" +
                "							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,  \n" +
                "							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,  \n" +
                "							detailDescription ,reservedForCustomer,isEachUOM   ,isNearByExpiry  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,  \n" +
                "							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,  \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,  \n" +
                "							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,  \n" +
                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,		c.packageQty,  \n" +
                "							css.prefix umidPrefix,  \n" +
                "                            c.RoHSStatusID,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,  \n" +
                "							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,  \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,  \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "                            fun_getWarehouseIDByBinID(css.binID) warehouseID,  \n" +
                "                            fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN (css.cpn = 0) THEN 'No'  \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS cpn,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'  \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS mfgAvailable,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'  \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS customerConsign,  \n" +
                "							css.refCPNMFGPNID,  \n" +
                "							c.mfgPNDescription,			css.receiveMaterialType,  \n" +
                "                            css.spq,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN  \n" +
                "										'Purchased Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'WC' THEN  \n" +
                "										'Customer Consigned (with CPN) Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'WOC' THEN  \n" +
                "										'Customer Consigned (without CPN) Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'PR' THEN  \n" +
                "										'Purchased & Reserved Part'  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "  \n" +
                "							) displayReceiveMaterialType,  \n" +
                "                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,  \n" +
                "							css.stockInventoryType,  \n" +
                "							css.pcbPerArray,				css.nickName,					css.packaging,  \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId,  \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,  \n" +
                "							css.expiryDate,  \n" +
                "                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,  \n" +
                "							css.orgQty,					css.specialNote,				css.fromBin,  \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,  \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							css.createdAt createdAtFilter,  \n" +
                "							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,  \n" +
                "							css.isinStk,  \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.stockInventoryType in ('NI','SI') THEN  \n" +
                "										CONCAT('(', a.mfgCode, ') ', a.mfgName)  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "							) packingSupplierName,  \n" +
                "							a.packingSlipId,  \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,  \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) AS expiredStatus,  \n" +
                "							refRestrictUMIDId, 				  	isUMIDRestrict,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'  \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS UMIDRestricted,  \n" +
                "							c.restrictUsePermanently,						c.restrictUSEwithpermission,  \n" +
                "							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,  \n" +
                "							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,  \n" +
                "							c.partPackage externalPartPackage,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,  \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,  \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
                "							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,  \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,  \n" +
                "							c.detailDescription,  \n" +
                "                            (case when css.uom = -1 then true else false end) isEachUOM ,  \n" +
                "                            (if (css.expiryDate <= date_add(current_Date(),interval \", vExpireDaysLeftBeforeShipment , \" day) , 1 ,0)) isNearByExpiry  \n" +
                "					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId  \n" +
                "								FROM 		component_sid_stock_packing_detail cspd  \n" +
                "								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id  \n" +
                "							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)  \n" +
                "					WHERE 	(css.isdeleted is null or css.isdeleted = 0)\",  \n" +
                "								vUMIDWhereClause,\") As tempUMID  \n" +
                "				WHERE \", pWhereClause  \n" +
                "			);  \n" +
                "  \n" +
                "-- select @vFromSQLQuery;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 0-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5271,'2.00','V1','Sproc_GetUMIDListForCustomerPackingSlip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5271:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_generic_transmode_mst_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_generic_transmode_mst_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempTransactionModes as  \n" +
                "	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND  refGencTransModeID IN (',IDs,') LIMIT 1)');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempTransactionModes t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update generic_transmode_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempTransactionModes WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempTransactionModes t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempTransactionModes t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempTransactionModes;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveTransactionModesList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveTransactionModesList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pTransMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"  \n" +
                "            SELECT tm.*,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN (tm.isActive = 0) THEN 'Inactive'  \n" +
                "					WHEN (tm.isActive = 1) THEN 'Active'  \n" +
                "					ELSE ''  \n" +
                "					END  \n" +
                "				) AS `isActiveConvertedValue`,  \n" +
                "				(  \n" +
                "                CASE  \n" +
                "					WHEN (tm.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (tm.systemGenerated = 1) THEN 'Yes'  \n" +
                "					ELSE ''  \n" +
                "					END  \n" +
                "				) AS `systemGeneratedConvertedValue`,  \n" +
                "				ac.acct_name, ac.acct_id,  \n" +
                "				fun_getUserNameByID(tm.createdBy) createdbyvalue,  \n" +
                "				fun_getUserNameByID(tm.updatedBy) updatedbyvalue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(tm.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtvalue,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(tm.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtvalue,  \n" +
                "				fun_getRoleByID(tm.updateByRoleId) updatedbyRolevalue,  \n" +
                "				fun_getRoleByID(tm.createByRoleId) createdbyRolevalue  \n" +
                "			FROM generic_transmode_mst tm  \n" +
                "            left join acct_acctmst ac ON ac.acct_id = tm.ref_acctid and ac.isDeleted = 0  \n" +
                "            WHERE tm.isDeleted = 0 AND tm.modeType = '\",pTransMode,\"' \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL , displayOrder ASC , id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @tempQuery,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetCustomerPaymentDetForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5),  \n" +
                "	IN pFromdate DATE,  \n" +
                "	IN pTodate DATE,  \n" +
                "	IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	IF (pRequiredCount) THEN  \n" +
                "		SELECT COUNT(1) totalCount  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "		AND psip.isDeleted = 0;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT  \n" +
                "			psip.id,  \n" +
                "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
                "			psip.voidPaymentReason,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.refVoidedPaymentNumber,  \n" +
                "			psip.refVoidedPaymentId,  \n" +
                "			psip.paymentNumber,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			psip.paymentDate,  \n" +
                "			psip.accountReference,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "			invPayDetTemp.invoiceNumberList,  \n" +
                "			psip.remark  , psip.depositBatchNumber,  \n" +
                "			psip.isDeleted,  \n" +
                "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
                "				ELSE NULL END) transactionModeName,  \n" +
                "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
                "			cmRefundDetTemp.CMNumListAgainstRefund  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN generic_transmode_mst tm ON psip.refGencTransModeID = tm.id  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				      GROUP BY psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-09-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetSupplierPaymentDetailsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierPaymentDetailsForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "    IN pRefPaymentMode VARCHAR(5),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    IF (pRequiredCount) THEN  \n" +
                "		SELECT count(1) totalCount  \n" +
                "		  FROM packingslip_invoice_payment psip  \n" +
                "		 WHERE psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "           and psip.refPaymentMode = pRefPaymentMode  \n" +
                "           AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT psip.id,  \n" +
                "				psip.refPaymentMode,  \n" +
                "				psip.systemId,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.mfgcodeID,  \n" +
                "                fun_getMfgCodeAndNameByID(psip.mfgcodeID) supplierCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "				psip.paymentType,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				psip.bankName,  \n" +
                "				psip.bankAccountNo,  \n" +
                "				psip.bankAccountMasID,  \n" +
                "				psip.paymentDate,  \n" +
                "                psip.depositBatchNumber,  \n" +
                "                psip.offsetAmount,  \n" +
                "				psip.remark,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                CASE WHEN psip.isPaymentVoided = 1 THEN 'Voided'  \n" +
                "					when psip.isPaymentVoided = 0 THEN 'Paid' END isPaymentVoidedConvertedValue,  \n" +
                "				psip.voidPaymentReason,  \n" +
                "				(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy,  \n" +
                "                (CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "				psip.refVoidedPaymentId,  \n" +
                "				(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "					WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "				fun_getUserNameByID(psip.lockedBy) lockedBy,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                invPayDetTemp.creditMemoNumberList,  \n" +
                "				invPayDetTemp.debitMemoNumberList,  \n" +
                "                tm.modeName as transactionModeName  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "            LEFT JOIN generic_transmode_mst tm ON psip.refGencTransModeID = tm.id  \n" +
                "			LEFT JOIN (select psipd.refPayementid,  \n" +
                "								GROUP_CONCAT(ps.invoiceNumber SEPARATOR ', ') invoiceNumberList,  \n" +
                "								GROUP_CONCAT(ps.creditMemoNumber SEPARATOR ', ') creditMemoNumberList,  \n" +
                "								GROUP_CONCAT(ps.debitMemoNumber SEPARATOR ', ') debitMemoNumberList  \n" +
                "						  from packingslip_invoice_payment_det psipd  \n" +
                "						  join packing_slip_material_receive ps ON ps.id = psipd.refPackingslipInvoiceID  \n" +
                "						  group by psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "            and psip.refPaymentMode = IFNULL(pRefPaymentMode, psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-09-2021 *********************************** */
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5272,'2.00','V1',' Bug 37076: Transaction mode refund flow issues. & Task 37081: Provide Transaction mode pages Link in Customer Refund and Supplier Refund Pages. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5272:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, '') != IFNULL(NEW.badMfgPN, '') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, 0) != IFNULL(NEW.uomMismatchedStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, 0) != IFNULL(NEW.restrictUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, 0) != IFNULL(NEW.mismatchNumberOfRowsStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, 0) != IFNULL(NEW.isUnlockApprovedPart, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  # Mismatch Programming required step  \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "      # Part and Program ref des mapping required step  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    /*  \n" +
                "	# Mismatch Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCustpartRevStep IS NOT NULL AND (OLD.mismatchCustpartRevStep != NEW.mismatchCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "		IF OLD.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	# Mismatch CPN and Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND (OLD.mismatchCPNandCustpartRevStep != NEW.mismatchCPNandCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "		IF OLD.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- if New.org_mfgCode is null then  \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                "			-- end if;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "        # mismatch programming require step  \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # part program ref des mapping require step  \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "        # Mismatch Programming Statue step  \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "      /*  \n" +
                "        # Mismatch Custom Part Rev step  \n" +
                "        IF NEW.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		# Mismatch CPN and Custom Part Rev step  \n" +
                "        IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  */  \n" +
                "	 # MPN Mapping Pending in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                "	AND rl.duplicateCPNStep = 1  \n" +
                "    );  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 and currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MPN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						IF(currMFGPNID > 0 ) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MPN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MPN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pUserID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE totalCPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currIndex INT DEFAULT 0;  \n" +
                "	DECLARE currCPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE totalMFGPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currMFGPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE currLineID INT;  \n" +
                "	DECLARE currPartID INT;  \n" +
                "	DECLARE currMFGPNID INT;  \n" +
                "	DECLARE currCustPNID INT;  \n" +
                "	DECLARE countAlternatePart INT DEFAULT 0;  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "	DECLARE mfgPnIndex INT DEFAULT 0;  \n" +
                "	DECLARE currMFGPN TEXT;  \n" +
                "	DECLARE currCustMFGPNID INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom_list;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom_list (partId INT);  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMCPNResult AS  \n" +
                "	SELECT  rl.id id,  rl.custPNID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE partId = pPartID AND rl.isDeleted = 0 AND rl.custPNID IS NOT NULL;  \n" +
                "  \n" +
                "	-- SELECT * FROM existBOMCPNResult;  \n" +
                "	SELECT COUNT(1) INTO totalCPNCount FROM existBOMCPNResult;  \n" +
                "	IF totalCPNCount > 0 THEN  \n" +
                "		WHILE currCPNIndex < totalCPNCount DO  \n" +
                "		SELECT a.custPNID  \n" +
                "			INTO 	currCustPNID  \n" +
                "			FROM 	existBOMCPNResult a LIMIT currCPNIndex, 1;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS  \n" +
                "		SELECT id , refComponentID FROM component_cust_alias_rev_pn  \n" +
                "		WHERE refCPNPartID = currCustPNID AND isDeleted = 0 AND  \n" +
                "		refComponentID NOT IN (  \n" +
                "			SELECT rla.mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
                "			WHERE rla.partId = pPartID AND rla.rfqLineItemsID IN (  \n" +
                "				SELECT id FROM rfq_lineitems  \n" +
                "				WHERE partId = pPartID AND custPNID = currCustPNID AND isDeleted = 0  \n" +
                "				)  \n" +
                "			AND rla.isDeleted = 0);  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS  \n" +
                "		SELECT  rl.id id,  rl.partID  \n" +
                "		FROM rfq_lineitems AS rl  \n" +
                "		WHERE partId != pPartID AND rl.custPNID =  currCustPNID AND rl.isDeleted = 0 ;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO totalCount FROM existBOMResult;  \n" +
                "		IF totalCount > 0 THEN  \n" +
                "			WHILE currIndex < totalCount DO  \n" +
                "				SELECT  a.id,		a.partID  \n" +
                "				INTO 	currLineID	,currPartID  \n" +
                "				FROM 	existBOMResult a LIMIT currIndex, 1;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS existAlternateResult AS  \n" +
                "				SELECT id, mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
                "				WHERE rfqLineItemsID IN (  \n" +
                "					SELECT id FROM rfq_lineitems  \n" +
                "					WHERE partId = currPartID AND custPNID = currCustPNID  \n" +
                "					AND isDeleted = 0  \n" +
                "					)  \n" +
                "				AND mfgPNID IN (SELECT refComponentID FROM existCPNResult) AND isDeleted = 0;  \n" +
                "  \n" +
                "				SET countAlternatePart = 0;  \n" +
                "				SELECT COUNT(1) INTO countAlternatePart FROM existAlternateResult;  \n" +
                "  \n" +
                "				-- IF (countAlternatePart > 0) THEN  \n" +
                "				-- 	CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                "				-- 	UPDATE rfq_lineitems_alternatepart SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existAlternateResult);  \n" +
                "				-- END IF;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE existAlternateResult;  \n" +
                "				SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET currCPNIndex = currCPNIndex + 1;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "		CREATE TEMPORARY TABLE t_CustMFGPn(cpnID INT,  txt TEXT );  \n" +
                "		INSERT INTO t_CustMFGPn(cpnID, txt)  \n" +
                "		SELECT cpn.refCPNPartID, GROUP_CONCAT(c.mfgPN SEPARATOR ', ') FROM component_cust_alias_rev_pn cpn  \n" +
                "		JOIN component c ON c.id = cpn.refComponentID  \n" +
                "		WHERE cpn.deletedAt IS NULL AND cpn.id IN (SELECT id FROM existCPNResult) GROUP BY refCPNPartID;  \n" +
                "  \n" +
                "		/* add all mapping mfgPN history with internal version */  \n" +
                "		SELECT COUNT(*) FROM t_CustMFGPn INTO totMFGPN;  \n" +
                "  \n" +
                "		WHILE mfgPnIndex < totMFGPN DO  \n" +
                "  \n" +
                "		SELECT  a.txt,		a.cpnID  \n" +
                "		INTO 	currMFGPN	,currCustMFGPNID  \n" +
                "		FROM 	t_CustMFGPn a LIMIT mfgPnIndex, 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = currCustMFGPNID;  \n" +
                "		SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "  /*  \n" +
                "		INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,description, changeVersion,createdAt,createdBy)  \n" +
                "		VALUES 	(\"component\", currCustMFGPNID, NULL,NULL, currCustMFGPNID, \"MPN\",  \n" +
                "			NULL, NULL ,CONCAT(\"MFG PN \",currMFGPN, \" Deleted\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) , fun_DatetimetoUTCDateTime(),puserID);  \n" +
                "  \n" +
                "		UPDATE component  \n" +
                "		SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = currCustMFGPNID;  \n" +
                "  */  \n" +
                "		SET mfgPnIndex = mfgPnIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "  \n" +
                "		-- UPDATE component_cust_alias_rev_pn SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existCPNResult);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE t_CustMFGPn;  \n" +
                "		DROP TEMPORARY TABLE existBOMResult;  \n" +
                "		DROP TEMPORARY TABLE existCPNResult;  \n" +
                "  \n" +
                "		-- INSERT INTO temp_component_update_bom_list  \n" +
                "		-- values EXECUTE Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "  \n" +
                "		CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID,FALSE);  \n" +
                "		INSERT INTO temp_component_update_bom_list(partId) SELECT partId FROM temp_component_update_bom;  \n" +
                "		END WHILE;  \n" +
                "		SELECT DISTINCT * FROM temp_component_update_bom_list;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RemoveMPNFromCPNMapping`;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                "	IN prefCompID INT,  \n" +
                "	IN prefCPNID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT,  \n" +
                "    IN pDeleteRequest tinyint,  \n" +
                "    IN pDeleteMPNFrom tinyint,  \n" +
                "    IN preason varchar(1200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vLiveInternalVersion INT;  \n" +
                "DECLARE vLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE vInternalVersion VARCHAR(100);  \n" +
                "DECLARE vMFGPN VARCHAR(100);  \n" +
                "DECLARE subAssyType INT;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "    SET  subAssyType = 3;  \n" +
                "	# get Internal version format  \n" +
                "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "			IF vLiveInternalVersionMethod = \"P\" THEN  \n" +
                "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "			ELSE  \n" +
                "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;  \n" +
                "				ELSE  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component k WHERE k.id = prefCPNID;  \n" +
                "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "  	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "	SELECT  rl.partID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE rl.custPNID = prefCPNID AND rl.isDeleted = 0  \n" +
                "	GROUP BY rl.partID;  \n" +
                "  \n" +
                "		UPDATE component  \n" +
                "		SET  \n" +
                "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                "		WHERE id IN(  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM component c  \n" +
                "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "		  UNION ALL  \n" +
                "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM rfq_lineitems rlp  \n" +
                "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                "          INNER JOIN component cp ON cp.id = rlap.mfgPNID  \n" +
                "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "		)  \n" +
                "		SELECT DISTINCT partId FROM cte);  \n" +
                "  \n" +
                "		SELECT  j.mfgPN INTO vMFGPN FROM component j WHERE j.id = prefCompID;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,description, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MPN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                "        concat('Delete Request From: ',(case when pDeleteRequest = 1 then 'Internal Error' when pDeleteRequest = 2 then 'Customer Request' end), '<br/> Reason: ', preason),  \n" +
                "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "  \n" +
                "    UPDATE component  \n" +
                "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))  \n" +
                "    WHERE id = prefCPNID;  \n" +
                "  \n" +
                "	# remove CPN entry from CPN mapping  \n" +
                "        update component_cust_alias_rev_pn  \n" +
                "        set isdeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "        where refComponentID = prefCompID and refCPNPartID = prefCPNID and isdeleted = 0;  \n" +
                "  \n" +
                "	# Manage History for Change  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    if pDeleteMPNFrom = 1 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "        set rla.isMPNAddedinCPN = 0,  \n" +
                "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.updatedBy = pUserID,  \n" +
                "            rla.updateByRoleId = pRoleID  \n" +
                "        where rla.mfgPNID = prefCompID and rl.custPNID = prefCPNID and rla.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	elseif pDeleteMPNFrom = 2 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        Join  ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 )a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set rla.isDeleted = 1,  \n" +
                "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.deletedBy = pUserID,  \n" +
                "            rla.deleteByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount>1 and a.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		update rfq_lineitems_alternatepart rla  \n" +
                "        Join ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 ) a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set  \n" +
                "			rla.distributor = null, rla.distMfgCodeID = null, rla.distPN = null, rla.distMfgPNID = null, rla.mfgCode = null, rla.mfgCodeID = null,  \n" +
                "            rla.mfgPN = null, rla.mfgPNID = null, rla.description = null, rla.RoHSStatusID = null, rla.customerApproval = 'P',  \n" +
                "            rla.customerApprovalBy  = null, rla.customerApprovalDate = null, rla.badMfgPN = null, rla.userData1 = null, rla.userData2 = null,  \n" +
                "			rla.userData3 = null, rla.userData4 = null, rla.userData5 = null, rla.userData6 = null, rla.userData7 = null, rla.userData8 = null,  \n" +
                "            rla.userData9 = null, rla.userData10 = null, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount = 1 and rla.isdeleted = 0;  \n" +
                "  \n" +
                "	end if;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "Commit;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(  \n" +
                "IN prefCPNPartID INT,  \n" +
                "IN prefComponentIDs VARCHAR(5000),  \n" +
                "IN puserID int,  \n" +
                "IN pUserRoleID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pMFGPN VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;    */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );  \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );  \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;  \n" +
                "	SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* add all mapping mfgPN history with internal version */  \n" +
                "	SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;  \n" +
                "	WHILE i < totMFGPN DO  \n" +
                "	SET pMFGPN = NULL;  \n" +
                "	SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL  \n" +
                "	AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "						oldValue,newValue,changeVersion,createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "	VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MPN\",  \n" +
                "		NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), fun_DatetimetoUTCDateTime(),puserID,pUserRoleID,fun_DatetimetoUTCDateTime(),puserID,pUserRoleID);  \n" +
                "	SET i = i + 1;  \n" +
                "	END WHILE;  \n" +
                "	/* update component live internal version */  \n" +
                "	UPDATE component  \n" +
                "	SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = prefCPNPartID;  \n" +
                "	/* add all mapping mfgPN against custpn */  \n" +
                "	INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "	SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`,pUserRoleID , fun_DatetimetoUTCDateTime(),puserID,pUserRoleID  \n" +
                "	FROM temp_CustMFGPn ;  \n" +
                "	-- COMMIT;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAllParentPartInternalVersion`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAllParentPartInternalVersion`(  \n" +
                "    IN pPartId INT,  \n" +
                "    IN pTableName VARCHAR(50),  \n" +
                "    IN pUpdatedBy VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE lastAssemblyHistoryId INT;  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE parentPartsCount INT;  \n" +
                "	DECLARE currentPartId INT;  \n" +
                "	DECLARE parentPartId INT;  \n" +
                "	DECLARE description VARCHAR(200);  \n" +
                "	DECLARE parentPartLiveInternalVersion INT;  \n" +
                "	DECLARE parentMfgPN VARCHAR(100);  \n" +
                "	DECLARE parentLiveVersion VARCHAR(100);  \n" +
                "	DECLARE parentLineItemId INT;  \n" +
                "	DECLARE currentPartLiveInternalVersion INT;  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "  \n" +
                "	SET  subAssyType = 3;  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS TempAllParentParts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParentParts AS  \n" +
                "  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  0 AS rfqlineItemId, c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM component c  \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.id AS rfqlineItemId, rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT  rfqlineItemId, partId, childPartId, liveinternalversion FROM cte;  \n" +
                "all_parent_part_loop: LOOP  \n" +
                "	SELECT COUNT(1) INTO parentPartsCount FROM TempAllParentParts;  \n" +
                "	IF parentPartsCount = 0 THEN  \n" +
                "		LEAVE all_parent_part_loop;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT rfqlineItemId, partId, childPartId, liveInternalVersion INTO parentLineItemId, parentPartId, currentPartId, parentPartLiveInternalVersion  FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	IF currentPartId = parentPartId AND currentPartId = pPartId THEN  \n" +
                "		DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "		ITERATE  all_parent_part_loop;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT id INTO lastAssemblyHistoryId FROM rfq_assembly_history WHERE partId = currentPartId ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "	SET description = CONCAT(pCompanyName,'-',CAST((parentPartLiveInternalVersion-1) AS CHAR), ' to change ', pCompanyName,'-',CAST(parentPartLiveInternalVersion AS CHAR));  \n" +
                "  \n" +
                "	SELECT mfgPN, liveinternalversion  INTO parentMfgPN, currentPartLiveInternalVersion FROM component WHERE id = currentPartId;  \n" +
                "	SELECT liveVersion  INTO parentLiveVersion FROM component WHERE id = parentPartId;  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history  \n" +
                "	 (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 oldValue,newValue,changeVersion, description, refInternalHistoryID,  \n" +
                "	 createdAt, createdBy)  \n" +
                "	VALUES 	(pTableName, parentLineItemId, parentLineItemId, NULL, parentPartId, \"MPN\",  \n" +
                "	 CAST(parentMfgPN AS CHAR), CAST(parentMfgPN AS CHAR), parentLiveVersion, description, lastAssemblyHistoryId,  \n" +
                "	 fun_DatetimetoUTCDateTime(),pUpdatedBy);  \n" +
                "	 DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	END LOOP all_parent_part_loop;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5273,'2.00','V1','Bug 36948: QA Testing findings for User Story 36181: BOM New Validation and improvement Points:  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5273:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWorkorderEmployeeDetailsByEmpCode;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(  \n" +
                "    IN pcodeDigest VARCHAR(1000),  \n" +
                "    IN pisUserAdmin INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;  \n" +
                "DECLARE whereClause2 VARCHAR(255) ;  \n" +
                "DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "DECLARE vTimeZone VARCHAR(50);  \n" +
                "SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "	/************************ Save Employee Details in Temp Table ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (  \n" +
                "			employeeID INT,		firstName VARCHAR(255),		lastName VARCHAR(255),  \n" +
                "			profileImg VARCHAR(255),deptName VARCHAR(255),		titleName VARCHAR(255)  \n" +
                "	);  \n" +
                "	INSERT INTO temp_sproc_employeedetails  \n" +
                "	SELECT 	emp.id, 	emp.firstname, emp.lastname,  \n" +
                "		emp.profileimg, dep.deptName,  gc.gencCategoryName  \n" +
                "	FROM employees emp  \n" +
                "		LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.isDeleted=0 AND empdep.isdefault = 1)  \n" +
                "		LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.isDeleted=0  -- ?  \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.isDeleted=0)  -- ?  \n" +
                "	WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND emp.isDeleted=0;  \n" +
                "	/************************ Create Temp Table for Workorder Details ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (  \n" +
                "		woID INT,			woNumber VARCHAR(255),			woVersion VARCHAR(255),  \n" +
                "		buildQty INT,			woStatus INT,			isClusterApplied VARCHAR(255),  \n" +
                "		isStopWorkorder INT,		createdAt VARCHAR(255),  \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(50),  \n" +
                "		nickName VARCHAR(50),		liveVersion VARCHAR(100),		imageURL VARCHAR(1000),  \n" +
                "		documentPath VARCHAR(500),  	isCustom INT,  \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			woAllStandardsWithClass VARCHAR(5000),  \n" +
                "		poQty INT,			poNumber VARCHAR(1000), 		partID INT,  \n" +
                "		isAssigned INT, 		woSubStatus INT,			totalPOQty INT,  \n" +
                "		soPOQty VARCHAR(1000),		totalMRPQty INT,			soMRPQty VARCHAR(1000),  \n" +
                "		salesOrderNumber VARCHAR(1000),  \n" +
                "		lineID VARCHAR(1000),		salesOrderMstIDs VARCHAR(1000),		SOPOQtyValues VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/************************ save all workorder details in temp table for further use ************************************/  \n" +
                "	INSERT INTO temp_sproc_workorderdetails  \n" +
                "	SELECT 	wo.woID,		wo.woNumber,	 									wo.woVersion,  \n" +
                "		wo.buildQty,		wo.woStatus,										wo.isClusterApplied,  \n" +
                "		wo.isStopWorkorder,	fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,vTimeZone,vDateTimeDisplayFormat),  \n" +
                "		c.mfgPN, 		c.PIDCode, 										c.rev,  \n" +
                "		c.nickName,		c.liveVersion,										c.imageURL,  \n" +
                "		c.documentPath,  	c.isCustom,  \n" +
                "		rohs.name, 		rohs.rohsIcon,										NULL,  \n" +
                "		NULL,                   NULL,											wo.partID,  \n" +
                "		(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = wo.woID AND woemp.isDeleted=0  \n" +
                "			AND woemp.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)),  \n" +
                "					wo.woSubStatus  ,									vusalesorderdet.totalPOQty,  \n" +
                "		vusalesorderdet.POQtyValues soPOQty, vusalesorderdet.totalMRPQty,						vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "		-- CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,    vusalesorderdet.salesOrderMstIDs, 							vusalesorderdet.SOPOQtyValues  \n" +
                "	FROM workorder wo  \n" +
                "	INNER JOIN component c ON wo.partID = c.id  \n" +
                "	INNER JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id  \n" +
                "	  LEFT JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "	  LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "	WHERE c.isDeleted=0 AND rohs.isDeleted=0 AND wo.isDeleted=0 AND wo.woStatus IN (1, 6);    -- 1 - Published, --2 - Under Terminate  \n" +
                "  \n" +
                "  \n" +
                "	/************************ 1. Get all employee details ************************************/  \n" +
                "	SELECT * FROM temp_sproc_employeedetails;  \n" +
                "	/************************ 1. Get all employee details ************************************/  \n" +
                "  \n" +
                "	/************************ save all salesorder details in temp table for further use ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (  \n" +
                "			poQty INT,		refPONumber VARCHAR(10000), 		woID INT  \n" +
                "	);  \n" +
                "	INSERT INTO temp_sproc_workordersalesorderdetails  \n" +
                "	SELECT  \n" +
                "		SUM(poQty),  \n" +
                "		GROUP_CONCAT(fun_getPONumber(salesOrderDetailID)), -- GROUP_CONCAT(refPONumber),  \n" +
                "		wosd.woID  \n" +
                "	FROM workorder_salesorder_details wosd  \n" +
                "	WHERE wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)  \n" +
                "	AND wosd.isDeleted=0  \n" +
                "	GROUP BY wosd.woID;  \n" +
                "	/************************ save all certificate details in temp table for further use ************************************/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (  \n" +
                "		woAllStandardsWithClass VARCHAR(10000),		woID INT  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO temp_sproc_certificatedetails  \n" +
                "	SELECT GROUP_CONCAT(cs.fullName ,' ' ,  \n" +
                "			CASE WHEN wc.classIDs IS NULL THEN ''  \n" +
                "			ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))  \n" +
                "				FROM standard_class WHERE classID = wc.classIDs)  \n" +
                "			END  \n" +
                "			ORDER BY cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') AS woAllStandardsWithClass,  \n" +
                "		tempWO.woID  \n" +
                "	FROM temp_sproc_workorderdetails tempWO  \n" +
                "	INNER JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.isDeleted=0  \n" +
                "	INNER JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.isDeleted=0  \n" +
                "	GROUP BY tempWO.woID;  \n" +
                "  \n" +
                "	/************************ 2.1 Update details in workorder details from certificate tables ************************************/  \n" +
                "	UPDATE temp_sproc_workorderdetails tempWO1,  \n" +
                "	(SELECT * FROM temp_sproc_certificatedetails) AS result  \n" +
                "	SET tempWO1.woAllStandardsWithClass = result.woAllStandardsWithClass  \n" +
                "	WHERE tempWO1.woID = result.woID;  \n" +
                "	/************************ 2.2 Update details in workorder details from sales order tables ************************************/  \n" +
                "	UPDATE temp_sproc_workorderdetails tempWO1,  \n" +
                "	(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1  \n" +
                "	SET tempWO1.poQty = result1.poQty,  \n" +
                "	tempWO1.poNumber = result1.refPONumber  \n" +
                "	WHERE tempWO1.woID = result1.woID;  \n" +
                "	/************************ 2. Get all workroder list ************************************/  \n" +
                "	/************************ If user is not admin than whereclause ************************************/  \n" +
                "	IF pisUserAdmin = 1 THEN  \n" +
                "		SET whereClause1 = '';  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = ' AND isAssigned > 0';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"SELECT * FROM temp_sproc_workorderdetails where 1=1 \", whereClause1);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	/************************ 2. Get all workroder list ************************************/  \n" +
                "	/************************ 3. Get all active operation list ************************************/  \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			wte.woTransinoutID,  \n" +
                "			wte.woID,  \n" +
                "			wte.woOPID,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(wte.checkinTime,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') checkinTime,  \n" +
                "			wte.isPaused,  \n" +
                "			wtep.woTransemppausedID,  \n" +
                "			fun_getwoAvailableRackDetails(wte.woOPID,wte.woID) totalAvailable,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(wtep.pausedTime,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') pausedTime,  \n" +
                "			woop.opNumber,  \n" +
                "			woop.opName,  \n" +
                "			woop.opStatus,  \n" +
                "			woop.opVersion,  \n" +
                "			woop.isStopOperation,  \n" +
                "			woop.isTeamOperation  ,  \n" +
                "            (SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))  \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END  \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "				   FROM `workorder_certification` wc  \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID  \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `woop`.`woID`) AS `wocerti`  \n" +
                "		FROM workorder_trans_empinout wte  \n" +
                "		INNER JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.isDeleted=0  \n" +
                "		LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID AND wtep.resumeTime IS NULL AND wtep.isDeleted=0  \n" +
                "		WHERE wte.isDeleted=0 AND wte.checkoutTime IS NULL  \n" +
                "	 \", whereClause2, \" GROUP BY  \n" +
                "		wte.woTransinoutID,  \n" +
                "		wte.woID,  \n" +
                "		wte.woOPID,  \n" +
                "		wte.isPaused,  \n" +
                "		wtep.woTransemppausedID,  \n" +
                "		woop.opNumber,  \n" +
                "		woop.opName,  \n" +
                "		woop.opStatus,  \n" +
                "		woop.opVersion,  \n" +
                "		woop.isStopOperation,  \n" +
                "		woop.isTeamOperation\");  \n" +
                "	 /************************ 3. Get all active operation list ************************************/  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5274,'2.00','V1','Sproc_GetWorkorderEmployeeDetailsByEmpCode - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5274:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5275,'2.00','V1','Bug 37078: QA Testing issues for #36843: Kit Allocation shortage line: Give separate column for shortage unit and pin - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5275:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCPNExistBOMList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCPNExistBOMList`(  \n" +
                "        IN pPartID INT,  \n" +
                "	IN pCPNList TEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE currMFGCodeId INT DEFAULT 0;  \n" +
                "	DECLARE totalCPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currCPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE currCPN VARCHAR(100);  \n" +
                "	DECLARE currCustPNID INT;  \n" +
                "  \n" +
                "	SELECT mfgCodeId INTO currMFGCodeId FROM component WHERE id = pPartID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_ExistAssembly;  \n" +
                "	CREATE TEMPORARY TABLE temp_ExistAssembly(partID INT, pIDCode VARCHAR(100), cpn VARCHAR(100), custPNID int, componentIDs TEXT);  \n" +
                "	IF pCPNList IS NOT NULL THEN  \n" +
                "		/*Generate Dummy data from string to row */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS t_cpn;  \n" +
                "		CREATE TEMPORARY TABLE t_cpn( txt TEXT );  \n" +
                "		INSERT INTO t_cpn VALUES(pCPNList);  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_cpn;  \n" +
                "		CREATE TEMPORARY TABLE temp_cpn( val TEXT );  \n" +
                "  \n" +
                "		SET @SQL = CONCAT(\"insert into temp_cpn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_cpn), \",\", \"'),('\"),\"');\");  \n" +
                "		PREPARE stmt3 FROM @SQL;  \n" +
                "		EXECUTE stmt3;  \n" +
                "		/*Generate Dummy data from string to row */  \n" +
                "		SELECT COUNT(*) FROM temp_cpn INTO totalCPNCount;  \n" +
                "		IF(totalCPNCount > 0) THEN  \n" +
                "			SET currCPNIndex = 0 ;  \n" +
                "			WHILE currCPNIndex < totalCPNCount DO  \n" +
                "  				SELECT 	a.val  \n" +
                "				INTO 	currCPN  \n" +
                "				FROM 	temp_cpn a LIMIT currCPNIndex, 1;  \n" +
                "				IF currCPN IS NOT NULL AND currCPN != '' THEN  \n" +
                "					IF((SELECT COUNT(1) FROM component WHERE mfgPN = currCPN AND isDeleted = 0 AND mfgCodeId = currMFGCodeId) > 0) THEN  \n" +
                "						SELECT id INTO currCustPNID FROM component WHERE mfgPN = currCPN AND isDeleted = 0 AND mfgCodeId = currMFGCodeId;  \n" +
                "						-- select currCustPNID;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfq_lineitemList AS (  \n" +
                "						SELECT  rl.partID  \n" +
                "						FROM rfq_lineitems AS rl  \n" +
                "						WHERE partId != pPartID AND rl.custPNID = currCustPNID AND rl.isDeleted = 0);  \n" +
                "						INSERT INTO temp_ExistAssembly (partID, pIDCode, cpn, custPNID, componentIDs)  \n" +
                "						(SELECT c.id, c.PIDcode, currCPN, currCustPNID, (SELECT GROUP_CONCAT(refComponentID) FROM component_cust_alias_rev_pn WHERE refCPNPartID = currCustPNID AND isDeleted = 0) FROM component c WHERE c.id IN (SELECT rl.partID FROM temp_rfq_lineitemList rl) AND c.isDeleted = 0);  \n" +
                "						DROP TEMPORARY TABLE temp_rfq_lineitemList;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				SET currCPNIndex = currCPNIndex + 1;  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT DISTINCT * FROM temp_ExistAssembly;  \n" +
                "	DROP TEMPORARY TABLE temp_ExistAssembly;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5276,'2.00','V1','Bug 36948: QA Testing findings for User Story 36181: BOM New Validation and improvement Points:  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5276:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "ALTER TABLE component_sid_stock_packing_detail ADD COLUMN packingSlipQty decimal(16,6) NOT NULL;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5277,'2.00','V1','User Story 36899: UMID Creation based on Packing slip detail line and maintain reference - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5277:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_umid_creation_pending`;\n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`packingSlipID` AS `packingSlipID`,  \n" +
                "        FUN_GETPACKINGSLIPNUMBERBYID(`a`.`packingSlipID`) AS `packingSlipNumber`,  \n" +
                "        `a`.`packingSlipDetID` AS `packingSlipDetID`,  \n" +
                "        `a`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "        `a`.`packagingID` AS `packagingID`,  \n" +
                "        `a`.`BinID` AS `BinID`,  \n" +
                "        `a`.`warehouseID` AS `warehouseID`,  \n" +
                "        `a`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `a`.`partId` AS `PartId`,  \n" +
                "        `a`.`nickname` AS `nickname`,  \n" +
                "        SUM(`a`.`InQty`) AS `InQty`,  \n" +
                "        IFNULL(`a`.`UMIDCreatedQty`, 0) AS `UMIDCreatedQty`,  \n" +
                "        SUM(`a`.`returnQty`) AS `returnQty`,  \n" +
                "        ((SUM(IFNULL(`a`.`InQty`, 0)) - IFNULL(`a`.`UMIDCreatedQty`, 0)) - SUM(IFNULL(`a`.`returnQty`, 0))) AS `BalanceQty`,  \n" +
                "        `a`.`receivedStatus` AS `receivedStatus`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psd`.`packagingID` AS `packagingID`,  \n" +
                "                `psd`.`binID` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psd`.`partID` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                `psd`.`receivedQty` AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            `packing_slip_material_receive_det` `psd`  \n" +
                "        WHERE  \n" +
                "            (EXISTS( SELECT  \n" +
                "                    1  \n" +
                "                FROM  \n" +
                "                    `packing_slip_material_receive` `p`  \n" +
                "                WHERE  \n" +
                "                    ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)  \n" +
                "                        AND (`p`.`receiptType` = 'P')  \n" +
                "                        AND (`p`.`isDeleted` = 0)))  \n" +
                "                AND (`psd`.`binID` IS NOT NULL)  \n" +
                "                AND (`psd`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psds`.`refPackingSlipId` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psds`.`packagingId` AS `packagingID`,  \n" +
                "                `psds`.`binId` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psds`.`partId` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                `psds`.`qty` AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`  \n" +
                "        FROM  \n" +
                "            ((`packing_slip_material_receive_det_stock` `psds`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`psd`.`id` = `psds`.`refPackingSlipDetId`)))  \n" +
                "        JOIN `warehousemst` `w` ON (((`w`.`ID` = `psd`.`warehouseID`)  \n" +
                "            AND (`psd`.`refPackingSlipMaterialRecID` = `psds`.`refPackingSlipId`)  \n" +
                "            AND (`psd`.`packagingID` = `psds`.`packagingId`)  \n" +
                "            AND (`psd`.`binID` = `psds`.`binId`)  \n" +
                "            AND (`psd`.`partID` = `psds`.`partId`))))  \n" +
                "        WHERE  \n" +
                "            ((`psds`.`type` = 'PU')  \n" +
                "                AND (`psds`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`isDeleted` = 0))) `a`  \n" +
                "    GROUP BY `a`.`packingSlipID` , `a`.`packagingID` , `a`.`BinID` , `a`.`partId` , `a`.`receivedStatus` , `a`.`packingSlipDetID`;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.packingSlipDetID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	MAX(pds.id) stockId,  \n" +
                "			'PU' AS `type`,  \n" +
                "			'Pending UMID' AS `typeValue`,  \n" +
                "			NULL umidId,  \n" +
                "			NULL umid,  \n" +
                "			vu.PartId partId,  \n" +
                "			vu.packagingID packagingId,  \n" +
                "			NULL receiveMaterialType,  \n" +
                "			pd.receivedQty,  \n" +
                "            pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0) availableQty,  \n" +
                "			IFNULL(pds.qty,0) shipmentQty,  \n" +
                "			vu.BinID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            0 availableQtyAtRMA,  \n" +
                "            0 availableUnitAtRMA,  \n" +
                "            vu.receivedStatus  \n" +
                "	FROM 		vu_umid_creation_pending vu  \n" +
                "	LEFT JOIN 	(  \n" +
                "				SELECT 		refPackingSlipMaterialRecID, receivedQty, id AS packingSlipDetID,  \n" +
                "							umidCreatedQty, packagingID, partID , receivedStatus  \n" +
                "				FROM 		packing_slip_material_receive_det  \n" +
                "				WHERE 		isDeleted = 0  \n" +
                "				GROUP BY  	packingSlipDetID  \n" +
                "			) pd ON vu.packingSlipDetID = pd.packingSlipDetID  \n" +
                "	LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
                "						AND pds.refPackingSlipId = vu.packingSlipID  \n" +
                "						AND pds.packagingId = vu.packagingID  \n" +
                "						AND pds.partId = vu.PartId  \n" +
                "						AND pds.isDeleted = 0  \n" +
                "						AND pds.type = 'PU'  \n" +
                "						AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "	LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "	WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "				AND vu.packagingID = pPackagingId  \n" +
                "				AND vu.partID = pPartId  \n" +
                "				AND b.isDeleted = 0  \n" +
                "				AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "	GROUP BY vu.packingSlipDetID  \n" +
                "    having SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) > 0 or MAX(pds.id) is not null  \n" +
                "	UNION  ALL  \n" +
                "	SELECT 		cp.id stockId,  \n" +
                "			cp.type AS `type`,  \n" +
                "			'UMID' AS `typeValue`,  \n" +
                "			c.id umidId,  \n" +
                "			c.uid umid,  \n" +
                "			c.refcompid partId,  \n" +
                "			c.packaging packagingId,  \n" +
                "			c.receiveMaterialType,  \n" +
                "			pd.receivedQty receivedQty,  \n" +
                "			c.pkgQty availableQty,  \n" +
                "			cp.qty shipmentQty,  \n" +
                "			c.binID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            cp.availableQtyAtRMA,  \n" +
                "            cp.availableUnitAtRMA,  \n" +
                "            pd.receivedStatus  \n" +
                "	FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "	WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId      and cp.refRMADetailid = pRMADetailLineId  \n" +
                "				AND cp.type = 'U'  \n" +
                "				AND cp.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0  \n" +
                "				AND pd.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0  \n" +
                "	UNION  ALL  \n" +
                "	SELECT 		NULL stockId,  \n" +
                "			'U' AS `type`,  \n" +
                "			'UMID' AS `typeValue`,  \n" +
                "			c.id umidId,  \n" +
                "			c.uid umid,  \n" +
                "			c.refcompid partId,  \n" +
                "			c.packaging packagingId,  \n" +
                "			c.receiveMaterialType,  \n" +
                "			pd.receivedQty receivedQty,  \n" +
                "			c.pkgQty availableQty,  \n" +
                "			0 shipmentQty,  \n" +
                "			c.binID binId,  \n" +
                "			b.name binName,  \n" +
                "			b.WarehouseID,  \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "            c.pkgQty availableQtyAtRMA,  \n" +
                "            c.pkgUnit availableUnitAtRMA,  \n" +
                "            pd.receivedStatus  \n" +
                "	FROM 		component_sid_stock_packing_detail cp  \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "	WHERE 		c.pkgQty > 0  \n" +
                "				AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "				AND cp.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0  \n" +
                "				AND pd.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipDetId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging,css.stockInventoryType, css.woNumber  \n" +
                "				FROM 	component_sid_stock css  \n" +
                "			WHERE 	css.id = pId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.id, psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_PackingSlipDetId, v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "			FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = FALSE,  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) - (vOrgInitialQty - pOrgQty))  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				UPDATE 	component_sid_stock_packing_detail  \n" +
                "				SET 	packingSlipQty =  pOrgQty  \n" +
                "				WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	vu.packingSlipDetID = v_PackingSlipDetId;  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = FALSE,  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = TRUE  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							IF(vBalanceQty > 0 , vBalanceQty, vBalanceQty * -1) AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailableQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailablePins  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDPackingSlipDetilById`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDPackingSlipDetilById`(  \n" +
                "IN pUIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT 		CONCAT(mcm.mfgCode, ps.packingSlipNumber) AS cOfcCode , ps.id,  \n" +
                "				ps.packingSlipNumber AS packingSlipNumber  \n" +
                "	FROM 		component_sid_stock_packing_detail cspd  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "	INNER JOIN 	packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "	INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "	WHERE 		cspd.refComponentSidStockID = pUIDId  \n" +
                "	LIMIT 		1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5278,'2.00','V1','User Story 36899: UMID Creation based on Packing slip detail line and maintain reference - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5278:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021 *********************************** */
                /* **************************** Add Script Version -> 24-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5279,'2.00','V1',' updated lock customer payment feature name - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5279:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockCustomerPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockCustomerPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'RL';  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = 'RL';  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "		/* update all payments transaction to locked */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "		    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "		    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "		    updatedBy = v_newLockedBy  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "		AND lockStatus = v_oldLockStatusPMT  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "				/* update all payment dependent write off if any */  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = v_newLockedBy  \n" +
                "				WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "				AND refPaymentMode = 'WOFF'  \n" +
                "				AND lockStatus = v_oldLockStatusPMT  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			/* If dependent Refund then Lock (Check for all payment must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/*  \n" +
                "			SELECT 'refund start' ;  \n" +
                "			select * from tt_UI_CustInvoicePaymentList;  \n" +
                "			*/  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "				/*  \n" +
                "				select 'Refund payment master ids' ;  \n" +
                "				SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1;  \n" +
                "				select * from tt_refundPMTMasterIDs;  \n" +
                "				*/  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all payments contain in refund transaction that all locked or not */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "							FROM packingslip_invoice_payment  \n" +
                "							WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									)  \n" +
                "							AND lockStatus != 'LC' ;  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/*  \n" +
                "						select 'check any unlock PMT' ;  \n" +
                "						SELECT v_cntOfUnLockPMT;  \n" +
                "						*/  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "  \n" +
                "							-- select 'update refund';  \n" +
                "						END IF;  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CA','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "						 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "				SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "				    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    cps.updatedBy = v_newLockedBy  \n" +
                "				WHERE cps.paymentStatus = 'RE'  \n" +
                "				AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "				AND cps.isLocked = v_oldLockStatusInv  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
                "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "	SET v_PayRefundTblJoin = '';  \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,  \n" +
                "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText ,  \n" +
                "						IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) AS adjustmenPendingAmt , ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"  \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "		(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		invPayDetTemp.totDetLevelSelectedInvCount ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount ,  \n" +
                "					COUNT(1) AS totDetLevelSelectedInvCount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "			\", v_JoinWithCPSForCM ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,  \n" +
                "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"  \n" +
                "             AND psip.isDeleted = 0 \"  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		/* get total refunded amount till now  */  \n" +
                "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
                "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det  \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND isPaymentVoided = 0  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
                "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
                "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
                "							   END)  \n" +
                "						ELSE 'NA' END)  \n" +
                "					ELSE NULL END) ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				'NA',0, NULL,  NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							   ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8),  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255),  \n" +
                "	IN pIsMarkAsPaid TINYINT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE insertedRefundMstID INT;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTotSelectedPayOfCust > 0 AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "  \n" +
                "		/* get all customer payment > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.paymentAmount,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db  \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0  \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "             /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "	 -- select * from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "			SELECT cps.id AS custCreditMemoMstID,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID = cps.id  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount  \n" +
                "		FROM customer_packingslip AS cps  \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
                "					) THEN  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
                "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
                "			`isMarkAsPaid` , `status` , `subStatus` ,  \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
                "			pBillToName, pBillToAddress , pBillToAddress , pBillToName ,  \n" +
                "			pIsMarkAsPaid , 1 , 1 ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
                "			/* add selected refund payment details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status of defined payment */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "				psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
                "			/* add selected refund credit memo details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted CM */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "	/* Resp[3] - newly inserted refund master id for Refund Transaction  */  \n" +
                "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pDeleteCustPaymentDetList JSON,  \n" +
                "	IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255) ,  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pSubStatus INT,  \n" +
                "	IN pStatus INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
                "	IF(pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "		/* get/map all Customer Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustPaymentDetList_JT ;  \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */  \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy2 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details and lock status which are deleted (unselected from UI) */  \n" +
                "				UPDATE packingslip_invoice_payment psip  \n" +
                "					LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "					LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "						ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "					psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0  \n" +
                "				AND psip.isDeleted = 0 ;  \n" +
                "  			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustPaymentDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "  \n" +
                "			/* insert newly selected payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status which are newly created/updated */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "			       psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	/* customer credit memo refund cases */  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "				SELECT cps.id AS custCreditMemoMstID,  \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount  \n" +
                "			FROM customer_packingslip AS cps  \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustCMDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustCMtDetList_JT ;  \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) CM det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustCMDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected CM det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
                "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
                "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
                "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_CMPaymentDateWhereClause = '';  \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
                "			AND  \n" +
                "			(  \n" +
                "				EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_PaymentDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_CMDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totDetLevelSelectedCMCount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.totDetLevelSelectedPaymentCount  \n" +
                "				ELSE NULL END) AS totDetLevelSelectedPaymentCMCount ,  \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
                "			psip.offsetAmount ,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.status , psip.subStatus ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
                "			psip.isMarkAsPaid,  \n" +
                "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
                "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
                "			psip.lockStatus,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "				WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedPaymentCount  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedCMCount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5280,'2.00','V1',' lock/unlock customer payment related sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5280:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "UPDATE `page_detail` SET pageName='Predefined Invoice Approval Reason', menuName='Predefined Invoice Approval Reason', displayMenuName='Predefined Invoice Approval Reason' WHERE `pageName` = 'Invoice Approved Predefine Message';  \n" +
                /* **************************** Add Script Version -> 24-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5281,'2.00','V1',' Update page Name from Invoice Approved Predefine Message to Predefined Invoice Approval Reason - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5281:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('supplier_payment', 'Supplier Payment');  \n" +
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('supplier_refund', 'Supplier Refund');  \n" +
                /* **************************** Add Script Version -> 24-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5282,'2.00','V1','Bug 36944: User must not able to delete the Payment method if used in other transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5282:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-09-2021 *********************************** */
                "drop procedure if exists `Sproc_checkDelete_genericcategory`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
                "  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_workstation_groups\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentTermsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"document\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND fileGroupBy IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"shipping_method\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"payable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Payable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"receivable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Receivable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"inspection_mst\" else \"\" end as msg FROM inspection_mst WHERE isDeleted=0 AND partRequirementCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"P\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"RR\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "	     ');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempGenericCategory t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			  SELECT * FROM tempGenericCategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempGenericCategory t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "							   FROM tempGenericCategory t1  \n" +
                "								INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "								WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "								ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5283,'2.00','V1','Bug 36944: User must not able to delete the Payment method if used in other transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5283:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-09-2021 *********************************** */
                "ALTER TABLE `dataelement`  \n" +
                "ADD COLUMN `fieldWidth` INT NULL,  \n" +
                "ADD COLUMN `hideLabel` TINYINT(1) NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 25-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5284,'2.00','V1',' User Story 37007: Data Tracking Entities: Add new control field for Label - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5284:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-09-2021 *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipDetailByPackingSlipNumber`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100),  \n" +
                "	IN pMFGCodeId INT,  \n" +
                "	IN pCreditMemoType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		ErrorCode INT,  \n" +
                "		FullMFGCode VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	packing_slip_material_receive  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN  \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord  \n" +
                "		FROM 	packing_slip_material_receive  \n" +
                "		WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN (packingSlipModeStatus = 'D' OR packingSlipModeStatus = 'P') ELSE packingSlipModeStatus = 'D' END)  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN  \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);  \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "		ELSE  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode  \n" +
                "					FROM 	packing_slip_material_receive  \n" +
                "					WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "							AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "							AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'C' ELSE receiptType = 'I' END)  \n" +
                "							AND isDeleted = 0  \n" +
                "			) a;  \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN  \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	deletedAt IS NULL  \n" +
                "						AND refPackingSlipMaterialRecID IN (  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	packing_slip_material_receive  \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "									AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "									AND deletedAt IS NULL  \n" +
                "						);  \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "				ELSE  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "  \n" +
                "					-- pr.poNumber, pr.supplierSONumber,  \n" +
                "					SELECT 		pr.id, pr.mfgCodeID,  \n" +
                "							pr.poNumber, pr.poDate, pr.supplierSONumber, pom.poWorkingStatus, pr.soDate,  \n" +
                "							/*(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber ELSE null END) poNumber,  \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN pr.poDate ELSE NULL END) poDate, */  \n" +
                "							pr.packingSlipNumber, pr.packingSlipDate,  \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays,  \n" +
                "                            pr.refPurchaseOrderID  \n" +
                "					FROM 		packing_slip_material_receive pr  \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID  \n" +
                "                    LEFT JOIN	purchase_order_mst pom ON pom.id = pr.refPurchaseOrderID  \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID  \n" +
                "					WHERE 		pr.packingSlipNumber = pPackingSlipNumber  \n" +
                "								AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)  \n" +
                "								AND (CASE WHEN pCreditMemoType = 'RC' THEN pr.receiptType = 'R' ELSE pr.receiptType = 'P' END)  \n" +
                "								AND pr.isDeleted = 0;  \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID,  \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,  \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel,  \n" +
                "							p.receivedQty, 					p.packingSlipQty,  \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN (IFNULL(p.invoicePrice, 0) * IFNULL(p.packingSlipQty, 0) * -1) ELSE NULL END) extendedPrice,  \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID,  \n" +
                "							p.invoicePrice,					p.disputedPrice,					p.createdBy,  \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,  \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,  \n" +
                "							p.approveNote, 					p.otherCharges,  \n" +
                "							p.status, 					p.refCreditDebitInvoiceNo,  \n" +
                "							(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance,  \n" +
                "							(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,  \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,  \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,  \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "							sc.packagingID supplierPackagingId,  \n" +
                "							'Pending' invoiceVerificationStatus,  \n" +
                "							p.receivedStatus,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.receivedStatus = 'P' THEN 'Pending'  \n" +
                "									WHEN p.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "                                    WHEN p.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "									WHEN p.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) receivedStatusValue,  \n" +
                "							p.remark,  \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt  \n" +
                "					FROM		packing_slip_material_receive_det p  \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL  \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	packing_slip_material_receive  \n" +
                "								WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "										AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "										AND isDeleted = 0  \n" +
                "							)  \n" +
                "					AND 		p.isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);  \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5285,'2.00','V1','Bug 37166: Need to correct the status and place holders on Supplier Invoice page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5285:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-09-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5286,'2.00','V1','Bug 37166: Need to correct the status and place holders on Supplier Invoice page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5286:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSupplierRMADetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMADetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	psmr.receiptType = 'R' AND (psmrd.isDeleted = 0 AND psmr.isDeleted = 0);  \n" +
                "	ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, psmr.poNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.receiptDate  \n" +
                "				, psmr.refPackingSlipNumberForInvoice  \n" +
                "				, psmr.shippingMethodId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.shippingMethodId) shippingMethod  \n" +
                "				, psmr.carrierId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.carrierId) carrier  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, psmrd.packingSlipSerialNumber  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, (CASE WHEN psmrd.refPackingSlipIdForRma IS NULL THEN psmrd.refPackingSlipForRma ELSE fun_getPackingSlipNumberById(psmrd.refPackingSlipIdForRma) END) refPackingSlipNumber  \n" +
                "				, (CASE WHEN psmrd.refInvoiceIdForRma IS NULL THEN psmrd.refInvoiceForRma ELSE fun_getSupplierInvoiceNumberByID(psmrd.refInvoiceIdForRma) END) refInvoiceNumber  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "                , mfgMstdetail.mfgType AS mfrPnMfgType  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_getMfgCodeAndNameByID(mfgMst.id) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "                , psmrd.isDeleted  \n" +
                "                , psmr.remark AS rmaComment  \n" +
                "                , sc.mfgPN AS spn  \n" +
                "				, sc.id AS spnId  \n" +
                "                , fun_getMfgCodeAndNameByID(sc.mfgcodeID) AS supplierCode  \n" +
                "                , fun_getUOMByID(comp.uom) AS uom  \n" +
                "                , psmrd.packingSlipQty AS rmaQty  \n" +
                "                , psmrd.remark AS rmaLineComment  \n" +
                "                , fun_getUserNameByID(psmr.lockedBy) AS lockedBy  \n" +
                "                , fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,fun_getTimeZone(), fun_getDateTimeFormat()) lockedAt  \n" +
                "                , (case when psmr.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when psmr.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when psmr.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatus  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT JOIN 	component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "        LEFT JOIN	component sc ON sc.id = psmrd.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		WHERE      	psmr.receiptType = 'R'  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psmr.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_getMfgCodeAndNameByID(mfgMst.id) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(psmrd.orderedQty, 0) - IFNULL(SUM(psmrd.packingSlipQty),0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5287,'2.00','V1',' User Story 36046: Elastic Search Old data related regenerate is anything missing add newly added fields dont add amount price related any field - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5287:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-09-2021 *********************************** */
                "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                "  SELECT  \n" +
                "    `a`.`woid` AS `woid`,  \n" +
                "    `a`.`woNumber` AS `woNumber`,  \n" +
                "    `a`.`woVersion` AS `woVersion`,  \n" +
                "    `a`.`partID` AS `partID`,  \n" +
                "    `a`.`buildQty` AS `buildQty`,  \n" +
                "    `a`.`customerID` AS `customerID`,  \n" +
                "    IFNULL (SUM (`a`.`buildOverageQty`), 0) AS `buildOverageQty`,  \n" +
                "    IFNULL (SUM (`a`.`POQty`), 0) AS `poQty`,  \n" +
                "    IFNULL (SUM (`a`.`initialStockPoQty`), 0) AS `initialStockPoQty`,  \n" +
                "    IFNULL (SUM (`a`.`ShippedQty`), 0) AS `shippedQty`,  \n" +
                "    IFNULL (SUM (`a`.`ScrapQty`), 0) AS `scrapQty`,  \n" +
                "    IFNULL (SUM (`a`.`readytoShipQty`), 0) AS `readytoShipQty`,  \n" +
                "    IFNULL (SUM (`a`.`stockAdjustmentQty`), 0) AS `stockAdjustmentQty`,  \n" +
                "    IFNULL (  \n" +
                "      SUM (  \n" +
                "        `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      ),  \n" +
                "      0  \n" +
                "    ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "    SUM (`a`.`wipQty`) AS `wipQty`,  \n" +
                "    SUM (`a`.`firstOPtotalQty`) AS `firstOPtotalQty`  \n" +
                "  FROM  \n" +
                "    (SELECT  \n" +
                "      `wo`.`woID` AS `woid`,  \n" +
                "      `wo`.`woNumber` AS `woNumber`,  \n" +
                "      `wo`.`woVersion` AS `woVersion`,  \n" +
                "      `wo`.`partID` AS `partID`,  \n" +
                "      `wo`.`buildQty` AS `buildQty`,  \n" +
                "      `wo`.`customerID` AS `customerID`,  \n" +
                "      SUM (`wo`.`excessQty`) AS `buildOverageQty`,  \n" +
                "      IFNULL (SUM (`wsd`.`Poqty`), 0) AS `POQty`,  \n" +
                "      0 AS `initialStockPoQty`,  \n" +
                "      IFNULL (SUM (`scrp`.`ScrapQty`), 0) AS `ScrapQty`,  \n" +
                "      IFNULL (SUM (`sh`.`shippedqty`), 0) AS `ShippedQty`,  \n" +
                "      (  \n" +
                "        IFNULL (  \n" +
                "          SUM (  \n" +
                "            `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "          ),  \n" +
                "          0  \n" +
                "        ) - IFNULL (SUM (`sh`.`shippedqty`), 0)  \n" +
                "      ) AS `readytoShipQty`,  \n" +
                "      IFNULL (SUM (`res`.`openingstock`), 0) AS `stockAdjustmentQty`,  \n" +
                "      IFNULL (  \n" +
                "        SUM (  \n" +
                "          `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        ),  \n" +
                "        0  \n" +
                "      ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "      IFNULL (SUM (`fpq`.`firstOPtotalQty`), 0) AS `firstOPtotalQty`,  \n" +
                "      (  \n" +
                "        CASE  \n" +
                "          WHEN (  \n" +
                "            (  \n" +
                "              IFNULL (`wo`.`buildQty`, 0) - (  \n" +
                "                IFNULL (SUM (`scrp`.`ScrapQty`), 0) + IFNULL (  \n" +
                "                  SUM (  \n" +
                "                    `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "                  ),  \n" +
                "                  0  \n" +
                "                )  \n" +
                "              )  \n" +
                "            ) < 0  \n" +
                "          )  \n" +
                "          THEN 0  \n" +
                "          ELSE (  \n" +
                "            IFNULL (`wo`.`buildQty`, 0) - (  \n" +
                "              IFNULL (SUM (`scrp`.`ScrapQty`), 0) + IFNULL (  \n" +
                "                SUM (  \n" +
                "                  `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "                ),  \n" +
                "                0  \n" +
                "              )  \n" +
                "            )  \n" +
                "          )  \n" +
                "        END  \n" +
                "      ) AS `wipQty`  \n" +
                "    FROM  \n" +
                "      (  \n" +
                "        (  \n" +
                "          (  \n" +
                "            (  \n" +
                "              (  \n" +
                "                `workorder` `wo`  \n" +
                "                LEFT JOIN  \n" +
                "                  (SELECT  \n" +
                "                    `workorder_salesorder_details`.`woID` AS `woid`,  \n" +
                "                    SUM (  \n" +
                "                      `workorder_salesorder_details`.`poQty`  \n" +
                "                    ) AS `Poqty`  \n" +
                "                  FROM  \n" +
                "                    `workorder_salesorder_details`  \n" +
                "                  WHERE (  \n" +
                "                      `workorder_salesorder_details`.`isDeleted` = 0  \n" +
                "                    )  \n" +
                "                  GROUP BY `workorder_salesorder_details`.`woID`) `wsd`  \n" +
                "                  ON ((`wsd`.`woid` = `wo`.`woID`))  \n" +
                "              )  \n" +
                "              LEFT JOIN  \n" +
                "                (SELECT  \n" +
                "                  `wt`.`woID` AS `woid`,  \n" +
                "                  SUM (`wp`.`scrapQty`) AS `ScrapQty`  \n" +
                "                FROM  \n" +
                "                  (  \n" +
                "                    `workorder_trans` `wt`  \n" +
                "                    JOIN `workorder_trans_production` `wp`  \n" +
                "                      ON (  \n" +
                "                        (  \n" +
                "                          `wt`.`woTransID` = `wp`.`woTransID`  \n" +
                "                        )  \n" +
                "                      )  \n" +
                "                  )  \n" +
                "                WHERE (  \n" +
                "                    (`wt`.`isDeleted` = 0)  \n" +
                "                    AND (`wp`.`isDeleted` = 0)  \n" +
                "                  )  \n" +
                "                GROUP BY `wt`.`woID`) `scrp`  \n" +
                "                ON ((`scrp`.`woid` = `wo`.`woID`))  \n" +
                "            )  \n" +
                "            LEFT JOIN  \n" +
                "              (SELECT  \n" +
                "                `shippedassembly`.`workorderID` AS `workorderid`,  \n" +
                "                SUM (  \n" +
                "                  `shippedassembly`.`shippedqty`  \n" +
                "                ) AS `shippedqty`  \n" +
                "              FROM  \n" +
                "                `shippedassembly`  \n" +
                "              WHERE (  \n" +
                "                  `shippedassembly`.`isDeleted` = 0  \n" +
                "                )  \n" +
                "              GROUP BY `shippedassembly`.`workorderID`) `sh`  \n" +
                "              ON ((`sh`.`workorderid` = `wo`.`woID`))  \n" +
                "          )  \n" +
                "          LEFT JOIN  \n" +
                "            (SELECT  \n" +
                "              `astock`.`woID` AS `woid`,  \n" +
                "              IFNULL (  \n" +
                "                SUM (  \n" +
                "                  (  \n" +
                "                    CASE  \n" +
                "                      WHEN (`astock`.`type` = 'AS')  \n" +
                "                      THEN `astock`.`openingStock`  \n" +
                "                      ELSE 0  \n" +
                "                    END  \n" +
                "                  )  \n" +
                "                ),  \n" +
                "                0  \n" +
                "              ) AS `openingstock`,  \n" +
                "              IFNULL (SUM (`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "            FROM  \n" +
                "              `assemblystock` `astock`  \n" +
                "            WHERE (  \n" +
                "                (`astock`.`isDeleted` = 0)  \n" +
                "                AND (`astock`.`woID` IS NOT NULL)  \n" +
                "              )  \n" +
                "            GROUP BY `astock`.`woID`,  \n" +
                "              `astock`.`woNumber`,  \n" +
                "              `astock`.`partID`) `res`  \n" +
                "            ON ((`res`.`woid` = `wo`.`woID`))  \n" +
                "        )  \n" +
                "        LEFT JOIN  \n" +
                "          (SELECT  \n" +
                "            `workorder_trans`.`woID` AS `woID`,  \n" +
                "            SUM (  \n" +
                "              `workorder_trans_production`.`totalQty`  \n" +
                "            ) AS `firstOPtotalQty`  \n" +
                "          FROM  \n" +
                "            (  \n" +
                "              `workorder_trans_production`  \n" +
                "              JOIN `workorder_trans`  \n" +
                "                ON (  \n" +
                "                  (  \n" +
                "                    (  \n" +
                "                      `workorder_trans_production`.`woTransID` = `workorder_trans`.`woTransID`  \n" +
                "                    )  \n" +
                "                    AND `workorder_trans`.`opID` IN  \n" +
                "                    (SELECT  \n" +
                "                      `FUN_GETFIRSTOPERATIONID` (  \n" +
                "                        `workorder_trans`.`woID`  \n" +
                "                      ))  \n" +
                "                  )  \n" +
                "                )  \n" +
                "            )  \n" +
                "          WHERE (  \n" +
                "              (  \n" +
                "                `workorder_trans_production`.`isDeleted` = 0  \n" +
                "              )  \n" +
                "              AND (  \n" +
                "                `workorder_trans`.`isDeleted` = 0  \n" +
                "              )  \n" +
                "            )  \n" +
                "          GROUP BY `workorder_trans`.`woID`) `fpq`  \n" +
                "          ON ((`fpq`.`woID` = `wo`.`woID`))  \n" +
                "      )  \n" +
                "    WHERE (`wo`.`isDeleted` = 0)  \n" +
                "    GROUP BY `wo`.`woID`,  \n" +
                "      `wo`.`woNumber`,  \n" +
                "      `wo`.`woVersion`,  \n" +
                "      `wo`.`partID`,  \n" +
                "      `wo`.`buildQty`,  \n" +
                "      `wo`.`customerID`  \n" +
                "    UNION  \n" +
                "    ALL  \n" +
                "    SELECT  \n" +
                "      `a`.`woid` AS `woid`,  \n" +
                "      `a`.`woNumber` AS `woNumber`,  \n" +
                "      NULL AS `woVersion`,  \n" +
                "      `a`.`partID` AS `partID`,  \n" +
                "      0 AS `buildQty`,  \n" +
                "      NULL AS `customerID`,  \n" +
                "      0 AS `buildOverageQty`,  \n" +
                "      0 AS `POQty`,  \n" +
                "      MAX (`a`.`initialStockPoQty`) AS `initialStockPoQty`,  \n" +
                "      0 AS `ScrapQty`,  \n" +
                "      SUM (`a`.`ShippedQty`) AS `ShippedQty`,  \n" +
                "      (  \n" +
                "        SUM (  \n" +
                "          `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        ) - SUM (`a`.`ShippedQty`)  \n" +
                "      ) AS `readytoShipQty`,  \n" +
                "      SUM (`a`.`stockAdjustmentQty`) AS `stockAdjustmentQty`,  \n" +
                "      SUM (  \n" +
                "        `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "      0 AS `firstOPtotalQty`,  \n" +
                "      0 AS `wipQty`  \n" +
                "    FROM  \n" +
                "      (SELECT  \n" +
                "        `sh`.`workorderID` AS `woid`,  \n" +
                "        `sh`.`woNumber` AS `woNumber`,  \n" +
                "        `sh`.`partID` AS `partID`,  \n" +
                "        0 AS `initialStockPoQty`,  \n" +
                "        SUM (`sh`.`shippedqty`) AS `ShippedQty`,  \n" +
                "        0 AS `readytoShipQty`,  \n" +
                "        0 AS `stockAdjustmentQty`,  \n" +
                "        0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      FROM  \n" +
                "        `shippedassembly` `sh`  \n" +
                "      WHERE (  \n" +
                "          (`sh`.`isDeleted` = 0)  \n" +
                "          AND (`sh`.`workorderID` IS NULL)  \n" +
                "          AND (`sh`.`woNumber` IS NOT NULL)  \n" +
                "        )  \n" +
                "      GROUP BY `sh`.`woNumber`,  \n" +
                "        `sh`.`partID`  \n" +
                "      UNION  \n" +
                "      ALL  \n" +
                "      SELECT  \n" +
                "        `astock`.`woID` AS `woid`,  \n" +
                "        `astock`.`woNumber` AS `woNumber`,  \n" +
                "        `astock`.`partID` AS `partID`,  \n" +
                "        SUM (`astock`.`poQty`) AS `initialStockPoQty`,  \n" +
                "        0 AS `ShippedQty`,  \n" +
                "        0 AS `readytoShipQty`,  \n" +
                "        IFNULL (  \n" +
                "          SUM (  \n" +
                "            (  \n" +
                "              CASE  \n" +
                "                WHEN (`astock`.`type` = 'AS')  \n" +
                "                THEN `astock`.`openingStock`  \n" +
                "                ELSE 0  \n" +
                "              END  \n" +
                "            )  \n" +
                "          ),  \n" +
                "          0  \n" +
                "        ) AS `stockAdjustmentQty`,  \n" +
                "        IFNULL (SUM (`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      FROM  \n" +
                "        `assemblystock` `astock`  \n" +
                "      WHERE (  \n" +
                "          (`astock`.`isDeleted` = 0)  \n" +
                "          AND (`astock`.`woID` IS NULL)  \n" +
                "          AND (`astock`.`woNumber` IS NOT NULL)  \n" +
                "        )  \n" +
                "      GROUP BY `astock`.`woNumber`,  \n" +
                "        `astock`.`partID`) `a`  \n" +
                "    GROUP BY `a`.`woNumber`,  \n" +
                "      `a`.`partID`) `a`  \n" +
                "  GROUP BY `a`.`woid`,  \n" +
                "    `a`.`woNumber`,  \n" +
                "    `a`.`woVersion`,  \n" +
                "    `a`.`partID`,  \n" +
                "    `a`.`buildQty`,  \n" +
                "    `a`.`customerID` ;  \n" +
                /* **************************** Add Script Version -> 27-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5288,'2.00','V1',' Alter View vu_workorder_summary_stk changes done by dixit sir - VS  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5288:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "ALTER TABLE `entity`  \n" +
                "ADD COLUMN `displayName` VARCHAR(100) NULL,  \n" +
                "ADD COLUMN `jsonObjOfEnterprise` VARCHAR(500) NULL,  \n" +
                "ADD COLUMN `searchDisplayOrder` DECIMAL(10,5) NULL,  \n" +
                "ADD COLUMN `isDataEntity` TINYINT(1) NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5289,'2.00','V1',' New Field in Entity For Enterprise - Shubham '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5289:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "update entity set isDataEntity = 1;  \n" +

                "update entity set displayName=\"Credit Memos\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Credit Memos\\\",\\\"FunctionName\\\": \\\"managePackingSlipInElastic\\\",\\\"Type\\\": \\\"Credit Memos\\\",\\\"Parameter\\\": { \\\"receiptType\\\": \\\"C\\\" }, \\\"TypeID\\\":\\\"0755afa1-fc75-11e9-9712-a15f07c38448\\\",\\\"Title\\\":\\\"Credit Memo\\\",\\\"EntityPrefix\\\":\\\"PackingSlip_\\\"}\", searchDisplayOrder = \"15\" where entityID = -15;  \n" +
                "update entity set displayName=\"Customers\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Customers\\\",\\\"FunctionName\\\": \\\"manageMFGCodeDetailInElastic\\\",\\\"Type\\\": \\\"Customers\\\",\\\"Parameter\\\": { \\\"mfgType\\\": \\\"MFG\\\", \\\"isCustOrDisty\\\": true }, \\\"TypeID\\\":\\\"4c28077a-2696-464a-8ba8-915e3907acef\\\",\\\"Title\\\":\\\"Customer\\\",\\\"EntityPrefix\\\":\\\"MFGCode_\\\"}\", searchDisplayOrder = \"2\" where entityID = -2;  \n" +
                "update entity set displayName=\"Customer Invoices\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Customer Invoices\\\",\\\"FunctionName\\\": \\\"manageCustomerInvoiceInElastic\\\",\\\"Type\\\": \\\"Customer Invoices\\\",\\\"Parameter\\\": { \\\"transType\\\": \\\"I\\\" }, \\\"TypeID\\\":\\\"0dfeb850-f0cf-11f9-860e-97d2eb90d19b\\\",\\\"Title\\\":\\\"Customer Invoices\\\",\\\"EntityPrefix\\\":\\\"CustomerInvoice_\\\"}\", searchDisplayOrder = \"18\" where entityID = -18;  \n" +
                "update entity set displayName=\"Customer Packing Slip\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Customer Packing Slip\\\",\\\"FunctionName\\\": \\\"manageCustomerPackingSlipInElastic\\\",\\\"Type\\\": \\\"Customer Packing Slip\\\", \\\"TypeID\\\":\\\"0cfeb850-f0cf-11e9-860e-97d2eb80d19b\\\",\\\"Title\\\":\\\"Customer Packing Slip\\\",\\\"EntityPrefix\\\":\\\"CustomerPackingSlip_\\\"}\", searchDisplayOrder = \"17\" where entityID = -17;  \n" +
                "update entity set displayName=\"Debit Memos\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Debit Memos\\\",\\\"FunctionName\\\": \\\"managePackingSlipInElastic\\\",\\\"Type\\\": \\\"Debit Memos\\\",\\\"Parameter\\\": { \\\"receiptType\\\": \\\"D\\\" }, \\\"TypeID\\\":\\\"074f9520-fc75-11e9-9712-a15f07c38448\\\",\\\"Title\\\":\\\"Debit Memo\\\",\\\"EntityPrefix\\\":\\\"PackingSlip_\\\"}\", searchDisplayOrder = \"16\" where entityID = -16;  \n" +
                "update entity set displayName=\"Departments\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Departments\\\",\\\"FunctionName\\\": \\\"manageDepartmentDetailInElastic\\\",\\\"Type\\\": \\\"Departments\\\", \\\"TypeID\\\":\\\"ecd24ec7-9b82-4acd-bcf6-73f4ba5b7185\\\",\\\"Title\\\":\\\"Department\\\",\\\"EntityPrefix\\\":\\\"Department_\\\"}\", searchDisplayOrder = \"6\" where entityID = -6;  \n" +
                "update entity set displayName=\"Equipment, WorkStation & Samples\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Equipment, WorkStation & Samples\\\",\\\"FunctionName\\\": \\\"manageEquipmentWorkStationDetailInElastic\\\",\\\"Type\\\": \\\"Equipment, WorkStation & Samples\\\", \\\"TypeID\\\":\\\"af51d970-10ea-11ea-89c1-ef4fe4f88f7f\\\",\\\"Title\\\":\\\"Equipment, WorkStation & Samples\\\",\\\"EntityPrefix\\\":\\\"EquipmentWorkStationSamples_\\\"}\", searchDisplayOrder = \"3\" where entityID = -3;  \n" +
                "update entity set displayName=\"Manufacturers\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Manufacturers\\\",\\\"FunctionName\\\": \\\"manageMFGCodeDetailInElastic\\\",\\\"Type\\\": \\\"Manufacturers\\\",\\\"Parameter\\\": { \\\"mfgType\\\": \\\"MFG\\\", \\\"isCustOrDisty\\\": false }, \\\"TypeID\\\":\\\"57360a96-337a-4d8e-8dbb-5cafd47659d5\\\",\\\"Title\\\":\\\"Manufacturer\\\",\\\"EntityPrefix\\\":\\\"MFGCode_\\\"}\", searchDisplayOrder = \"21\" where entityID = -21;  \n" +
                "update entity set displayName=\"Operations\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Operations\\\",\\\"FunctionName\\\": \\\"manageOperationDetailInElastic\\\",\\\"Type\\\": \\\"Operations\\\", \\\"TypeID\\\":\\\"01083862-0ad1-11ea-881d-f30d45f0fdef\\\",\\\"Title\\\":\\\"Operations\\\",\\\"EntityPrefix\\\":\\\"Operation_\\\"}\", searchDisplayOrder = \"1\" where entityID = -1;  \n" +
                "update entity set displayName=\"Packing Slips\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Packing Slips\\\",\\\"FunctionName\\\": \\\"managePackingSlipInElastic\\\",\\\"Type\\\": \\\"Packing Slips\\\",\\\"Parameter\\\": { \\\"receiptType\\\": \\\"P\\\" } , \\\"TypeID\\\":\\\"0bfeb850-f0cf-11e9-850e-97d2e8b0d19b\\\",\\\"Title\\\":\\\"Packing Slip\\\",\\\"EntityPrefix\\\":\\\"PackingSlip_\\\"}\", searchDisplayOrder = \"14\" where entityID = -14;  \n" +
                "update entity set displayName=\"Parts\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Parts\\\",\\\"FunctionName\\\": \\\"managePartDetailInElastic\\\",\\\"Type\\\": \\\"Parts\\\", \\\"TypeID\\\":\\\"ea207cab-cbec-4191-b9f8-ec10d8f95f6c\\\",\\\"Title\\\":\\\"Part\\\",\\\"EntityPrefix\\\":\\\"Part_\\\"}\", searchDisplayOrder = \"9\" where entityID = -9;  \n" +
                "update entity set displayName=\"Personnel\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Personnel\\\",\\\"FunctionName\\\": \\\"managePersonalDetailInElastic\\\",\\\"Type\\\": \\\"Personnel\\\", \\\"TypeID\\\":\\\"08f1d7d0-fc93-11e9-baf7-25b577c97853\\\",\\\"Title\\\":\\\"Personnel\\\",\\\"EntityPrefix\\\":\\\"Personal_\\\"}\", searchDisplayOrder = \"5\" where entityID = -5;  \n" +
                "update entity set displayName=\"Purchase Order\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Purchase Order\\\",\\\"FunctionName\\\": \\\"managePurchaseOrderElastic\\\",\\\"Type\\\": \\\"Purchase Order\\\", \\\"TypeID\\\":\\\"0cfdb850-f1cf-11e9-860e-97d2kb80d10b\\\",\\\"Title\\\":\\\"Purchase Order\\\",\\\"EntityPrefix\\\":\\\"PurchaseOrder_\\\"}\", searchDisplayOrder = \"20\" where entityID = -20;  \n" +
                "update entity set displayName=\"RFQ\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"RFQ\\\",\\\"FunctionName\\\": \\\"manageRFQDetailInElastic\\\",\\\"Type\\\": \\\"RFQ\\\", \\\"TypeID\\\":\\\"ae8956ff-fda9-47e0-8d1f-bba8183128b3\\\",\\\"Title\\\":\\\"Quote Group\\\",\\\"EntityPrefix\\\":\\\"RFQ_\\\"}\", searchDisplayOrder = \"12\" where entityID = -12;  \n" +
                "update entity set displayName=\"Sales Orders\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Sales Orders\\\",\\\"FunctionName\\\": \\\"manageSalesOrderInElastic\\\",\\\"Type\\\": \\\"Sales Orders\\\", \\\"TypeID\\\":\\\"b26c9d09-b79e-4e9a-90ea-a3e104178287\\\",\\\"Title\\\":\\\"Sale Order\\\",\\\"EntityPrefix\\\":\\\"SalesOrderMst_\\\"}\", searchDisplayOrder = \"10\" where entityID = -10;  \n" +
                "update entity set displayName=\"Standards\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Standards\\\",\\\"FunctionName\\\": \\\"manageStandardsInElastic\\\",\\\"Type\\\": \\\"Standards\\\", \\\"TypeID\\\":\\\"852201b2-31ed-11ea-b74d-d90d9fe73c0a\\\",\\\"Title\\\":\\\"Standard\\\",\\\"EntityPrefix\\\":\\\"Standards_\\\"}\", searchDisplayOrder = \"4\" where entityID = -4;  \n" +
                "update entity set displayName=\"Suppliers\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Suppliers\\\",\\\"FunctionName\\\": \\\"manageMFGCodeDetailInElastic\\\",\\\"Type\\\": \\\"Suppliers\\\",\\\"Parameter\\\": { \\\"mfgType\\\": \\\"DIST\\\", \\\"isCustOrDisty\\\": true }, \\\"TypeID\\\":\\\"33bf0860-f668-11e9-9191-4f750c932bd5\\\",\\\"Title\\\":\\\"Supplier\\\",\\\"EntityPrefix\\\":\\\"MFGCode_\\\"}\", searchDisplayOrder = \"8\" where entityID = -8;  \n" +
                "update entity set displayName=\"Supplier Invoice\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Supplier Invoice\\\",\\\"FunctionName\\\": \\\"managePackingSlipInElastic\\\",\\\"Type\\\": \\\"Supplier Invoice\\\",\\\"Parameter\\\": { \\\"receiptType\\\": \\\"I\\\" }, \\\"TypeID\\\":\\\"76e1d9f1-d1a0-4317-b068-bff15d6c1193\\\",\\\"Title\\\":\\\"Supplier Invoice\\\",\\\"EntityPrefix\\\":\\\"PackingSlip_\\\"}\", searchDisplayOrder = \"13\" where entityID = -13;  \n" +
                "update entity set displayName=\"Supplier RMA\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Supplier RMA\\\",\\\"FunctionName\\\": \\\"manageSupplierRMAInElastic\\\",\\\"Type\\\": \\\"Supplier RMA\\\", \\\"TypeID\\\":\\\"62e8ac95-4dca-48f3-bb19-1dff16c3fef2\\\",\\\"Title\\\":\\\"Supplier RMA\\\",\\\"EntityPrefix\\\":\\\"SupplierRMA_\\\"}\", searchDisplayOrder = \"19\" where entityID = -19;  \n" +
                "update entity set displayName=\"UMIDs\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"UMIDs\\\",\\\"FunctionName\\\": \\\"manageUMIDDetailInElastic\\\",\\\"Type\\\": \\\"UMIDs\\\", \\\"TypeID\\\":\\\"3a91dbe0-f668-11e9-9191-4f750c932bd5\\\",\\\"Title\\\":\\\"UMIDs\\\",\\\"EntityPrefix\\\":\\\"UMID_\\\"}\", searchDisplayOrder = \"11\" where entityID = -11;  \n" +
                "update entity set displayName=\"Work Orders\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Work Orders\\\",\\\"FunctionName\\\": \\\"manageWorkOrderDetailInElastic\\\",\\\"Type\\\": \\\"Work Orders\\\", \\\"TypeID\\\":\\\"847d8090-eaad-11e9-8bd0-dfc45edd88a4\\\",\\\"Title\\\":\\\"Work Order\\\",\\\"EntityPrefix\\\":\\\"WorkOrder_\\\"}\", searchDisplayOrder = \"7\" where entityID = -7;  \n" +

                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-22,'Work Order Operations','Work Order Operations',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Work Order Operations', \"{\\\"EntityName\\\": \\\"Work Order Operations\\\",\\\"FunctionName\\\": \\\"manageWorkOrderOperationDetailInElastic\\\",\\\"Type\\\": \\\"Work Order Operations\\\",\\\"Parameter\\\": { \\\"IsDoDontCall\\\": false }, \\\"TypeID\\\":\\\"01083861-0ad1-11ea-881d-f30d45f0fdef\\\",\\\"Title\\\":\\\"Work Order Operation\\\",\\\"EntityPrefix\\\":\\\"WorkOrderOperation_\\\"}\",22);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-23,'Warehouses','Warehouses',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Warehouses', \"{\\\"EntityName\\\": \\\"Warehouses\\\",\\\"FunctionName\\\": \\\"manageWarehouseDetailInElastic\\\",\\\"Type\\\": \\\"Warehouses\\\", \\\"TypeID\\\":\\\"97250980-10ea-11ea-89c1-ef4fe4f88f7f\\\",\\\"Title\\\":\\\"Warehouse\\\",\\\"EntityPrefix\\\":\\\"Warehouse_\\\"}\",23);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-24,'Traveler','Traveler',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Traveler', \"{\\\"EntityName\\\": \\\"Traveler\\\",\\\"FunctionName\\\": \\\"manageTravelerDetailInElastic\\\",\\\"Type\\\": \\\"Traveler\\\", \\\"TypeID\\\":\\\"13e4a260-14d2-11ea-a596-d1a108f80f29\\\",\\\"Title\\\":\\\"Traveler\\\",\\\"EntityPrefix\\\":\\\"Traveler_\\\"}\",24);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-25,'Units of Measurement','Units of Measurement',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Units of Measurement', \"{\\\"EntityName\\\": \\\"Units of Measurement\\\",\\\"FunctionName\\\": \\\"manageUOMDetailInElastic\\\",\\\"Type\\\": \\\"Units of Measurement\\\", \\\"TypeID\\\":\\\"36ed05a1-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Unit of Measurement\\\",\\\"EntityPrefix\\\":\\\"UOM_\\\"}\",25);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-26,'Merger & Acquisitions','Merger & Acquisitions',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Merger & Acquisitions', \"{\\\"EntityName\\\": \\\"Merger & Acquisitions\\\",\\\"FunctionName\\\": \\\"manageMergerAcquisitionInElastic\\\",\\\"Type\\\": \\\"Merger & Acquisitions\\\", \\\"TypeID\\\":\\\"36ee3e20-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Merger & Acquisition\\\",\\\"EntityPrefix\\\":\\\"MergerAcquistion_\\\"}\",26);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-27,'Connector Types','Connector Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Connector Types', \"{\\\"EntityName\\\": \\\"Connector Types\\\",\\\"FunctionName\\\": \\\"manageConnectorTypesInElastic\\\",\\\"Type\\\": \\\"Connector Types\\\", \\\"TypeID\\\":\\\"2241f522-2c82-11ea-b754-a5482d387118\\\",\\\"Title\\\":\\\"Connector Type\\\",\\\"EntityPrefix\\\":\\\"ConnectorTypes_\\\"}\",27);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-28,'Part Statuses','Part Statuses',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Part Statuses', \"{\\\"EntityName\\\": \\\"Part Statuses\\\",\\\"FunctionName\\\": \\\"managePartStatusInElastic\\\",\\\"Type\\\": \\\"Part Statuses\\\", \\\"TypeID\\\":\\\"36ecde90-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Part Status\\\",\\\"EntityPrefix\\\":\\\"PartStatus_\\\"}\",28);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-29,'Mounting Groups','Mounting Groups',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Mounting Groups', \"{\\\"EntityName\\\": \\\"Mounting Groups\\\",\\\"FunctionName\\\": \\\"manageMountingGroupInElastic\\\",\\\"Type\\\": \\\"Mounting Groups\\\", \\\"TypeID\\\":\\\"36eda1e0-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Mounting Group\\\",\\\"EntityPrefix\\\":\\\"MountingGroup_\\\"}\",29);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-30,'Functional Types','Functional Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Functional Types', \"{\\\"EntityName\\\": \\\"Functional Types\\\",\\\"FunctionName\\\": \\\"manageFunctionalTypeInElastic\\\",\\\"Type\\\": \\\"Functional Types\\\", \\\"TypeID\\\":\\\"36ee6530-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Functional Type\\\",\\\"EntityPrefix\\\":\\\"FunctionalType_\\\"}\",30);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-31,'Mounting Types','Mounting Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Mounting Types', \"{\\\"EntityName\\\": \\\"Mounting Types\\\",\\\"FunctionName\\\": \\\"manageMountingTypesInElastic\\\",\\\"Type\\\": \\\"Mounting Types\\\", \\\"TypeID\\\":\\\"36ef76a1-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Mounting Type\\\",\\\"EntityPrefix\\\":\\\"MountingTypes_\\\"}\",31);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-32,'Cost Categories','Cost Categories',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Cost Categories', \"{\\\"EntityName\\\": \\\"Cost Categories\\\",\\\"FunctionName\\\": \\\"manageCostCategoriesInElastic\\\",\\\"Type\\\": \\\"Cost Categories\\\", \\\"TypeID\\\":\\\"36efebd0-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Cost Category\\\",\\\"EntityPrefix\\\":\\\"Cost Categories_\\\"}\",32);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-33,'Packaging Types','Packaging Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Packaging Types', \"{\\\"EntityName\\\": \\\"Packaging Types\\\",\\\"FunctionName\\\": \\\"managePackagingTypesInElastic\\\",\\\"Type\\\": \\\"Packaging Types\\\", \\\"TypeID\\\":\\\"36f08810-11d9-11ea-bd52-f7e9002048ba\\\",\\\"Title\\\":\\\"Packaging Type\\\",\\\"EntityPrefix\\\":\\\"PackagingTypes_\\\"}\",33);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-34,'Standards Categories','Standards Categories',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Standards Categories', \"{\\\"EntityName\\\": \\\"Standards Categories\\\",\\\"FunctionName\\\": \\\"manageStandardsCategoriesInElastic\\\",\\\"Type\\\": \\\"Standards Categories\\\", \\\"TypeID\\\":\\\"ad3484f0-31ea-11ea-bd13-9f3a55bf2bd2\\\",\\\"Title\\\":\\\"Standards Category\\\",\\\"EntityPrefix\\\":\\\"StandardsCategories_\\\"}\",34);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-35,'Kit Allocation','Kit Allocation',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Kit Allocation', \"{\\\"EntityName\\\": \\\"Kit Allocation\\\",\\\"FunctionName\\\": \\\"manageKitAllocationInElastic\\\",\\\"Type\\\": \\\"Kit Allocation\\\", \\\"TypeID\\\":\\\"2241f523-2c82-11ea-b754-a5482d387118\\\",\\\"Title\\\":\\\"Kit Allocation\\\",\\\"EntityPrefix\\\":\\\"KitAllocation_\\\"}\",35);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-36,'Work Order Operation Equipments','Work Order Operation Equipments',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Work Order Operation Equipments', \"{\\\"EntityName\\\": \\\"Work Order Operation Equipments\\\",\\\"FunctionName\\\": \\\"manageWOOperationEquipmentInElastic\\\",\\\"Type\\\": \\\"Work Order Operation Equipments\\\", \\\"TypeID\\\":\\\"4dd61f80-360b-11ea-b55c-535194e4f7a6\\\",\\\"Title\\\":\\\"Work Order Operation Equipment\\\",\\\"EntityPrefix\\\":\\\"WorkorderOperationEquipment_\\\"}\",36);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-37,'Work Order Operation Employees','Work Order Operation Employees',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Work Order Operation Employees', \"{\\\"EntityName\\\": \\\"Work Order Operation Employees\\\",\\\"FunctionName\\\": \\\"manageWOOperationEmployeeInElastic\\\",\\\"Type\\\": \\\"Work Order Operation Employees\\\", \\\"TypeID\\\":\\\"0b6dbfb0-35eb-11ea-9856-5ba01dcdfd76\\\",\\\"Title\\\":\\\"Work Order Operation Employee\\\",\\\"EntityPrefix\\\":\\\"WorkorderOperationEmployee_\\\"}\",37);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-38,'Work Order Operation Parts','Work Order Operation Parts',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Work Order Operation Parts', \"{\\\"EntityName\\\": \\\"Work Order Operation Parts\\\",\\\"FunctionName\\\": \\\"manageWOOperationPartInElastic\\\",\\\"Type\\\": \\\"Work Order Operation Parts\\\", \\\"TypeID\\\":\\\"15377b00-3c4c-11ea-8dfc-4b4e9199ae65\\\",\\\"Title\\\":\\\"Work Order Operation Part\\\",\\\"EntityPrefix\\\":\\\"WorkorderOperationPart_\\\"}\",38);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-39,'Work Order Change Requests','Work Order Change Requests',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Work Order Change Requests', \"{\\\"EntityName\\\": \\\"Work Order Change Requests\\\",\\\"FunctionName\\\": \\\"manageChangeRequestInElastic\\\",\\\"Type\\\": \\\"Work Order Change Requests\\\",\\\"Parameter\\\": { \\\"requestType\\\": \\\"I\\\" }, \\\"TypeID\\\":\\\"15381740-3c4c-11ea-8dfc-4b4e9199ae65\\\",\\\"Title\\\":\\\"Work Order Change Requests\\\",\\\"EntityPrefix\\\":\\\"ChangeRequest_\\\"}\",39);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-40,'Traveler Change Requests','Traveler Change Requests',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Traveler Change Requests', \"{\\\"EntityName\\\": \\\"Traveler Change Requests\\\",\\\"FunctionName\\\": \\\"manageChangeRequestInElastic\\\",\\\"Type\\\": \\\"Traveler Change Requests\\\",\\\"Parameter\\\": { \\\"requestType\\\": \\\"C\\\" }, \\\"TypeID\\\":\\\"153afd74-3c4c-11ea-8dfc-4b4e9199ae65\\\",\\\"Title\\\":\\\"Traveler Change Requests\\\",\\\"EntityPrefix\\\":\\\"ChangeRequest_\\\"}\",40);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-41,'Equipment, Workstation & Sample Types','Equipment, Workstation & Sample Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Equipment, Workstation & Sample Types', \"{\\\"EntityName\\\": \\\"Equipment, Workstation & Sample Types\\\",\\\"FunctionName\\\": \\\"manageEquipmentWorkstationTypesInElastic\\\",\\\"Type\\\": \\\"Equipment, Workstation & Sample Types\\\", \\\"TypeID\\\":\\\"0ab87e21-40db-11ea-9009-13377016b2a5\\\",\\\"Title\\\":\\\"Equipment, Workstation & Sample Type\\\",\\\"EntityPrefix\\\":\\\"EquipmentWorkstationSampleTypes_\\\"}\",41);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-42,'Equipment, Workstation & Sample Groups','Equipment, Workstation & Sample Groups',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Equipment, Workstation & Sample Groups', \"{\\\"EntityName\\\": \\\"Equipment, Workstation & Sample Groups\\\",\\\"FunctionName\\\": \\\"manageEquipmentWorkstationGroupsInElastic\\\",\\\"Type\\\": \\\"Equipment, Workstation & Sample Groups\\\", \\\"TypeID\\\":\\\"0ab8a532-40db-11ea-9009-13377016b2a5\\\",\\\"Title\\\":\\\"Equipment, Workstation & Sample Group\\\",\\\"EntityPrefix\\\":\\\"EquipmentWorkstationSampleGroups_\\\"}\",42);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-43,'Equipment, Workstation & Sample Ownerships','Equipment, Workstation & Sample Ownerships',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Equipment, Workstation & Sample Ownerships', \"{\\\"EntityName\\\": \\\"Equipment, Workstation & Sample Ownerships\\\",\\\"FunctionName\\\": \\\"manageEquipmentWorkstationOwnershipsInElastic\\\",\\\"Type\\\": \\\"Equipment, Workstation & Sample Ownerships\\\", \\\"TypeID\\\":\\\"32296280-4c02-11ea-a2e1-bd89f11e36da\\\",\\\"Title\\\":\\\"Equipment, Workstation & Sample Ownership\\\",\\\"EntityPrefix\\\":\\\"EquipmentWorkstationSampleOwnerships_\\\"}\",43);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-44,'Locations','Locations',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Locations', \"{\\\"EntityName\\\": \\\"Locations\\\",\\\"FunctionName\\\": \\\"manageLocationsInElastic\\\",\\\"Type\\\": \\\"Locations\\\", \\\"TypeID\\\":\\\"32296210-4c02-11ea-a2e1-bd89f11e36ab\\\",\\\"Title\\\":\\\"Location\\\",\\\"EntityPrefix\\\":\\\"Locations_\\\"}\",44);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-45,'ECO/DFM Categories','ECO/DFM Categories',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','ECO/DFM Categories', \"{\\\"EntityName\\\": \\\"ECO/DFM Categories\\\",\\\"FunctionName\\\": \\\"manageECODFMCategoryInElastic\\\",\\\"Type\\\": \\\"ECO/DFM Categories\\\", \\\"TypeID\\\":\\\"43596210-4c02-11ea-a2e1-bd89f11e36ab\\\",\\\"Title\\\":\\\"ECO/DFM Category\\\",\\\"EntityPrefix\\\":\\\"ECODFMCategory_\\\"}\",45);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-46,'ECO/DFM Category Attributes','ECO/DFM Category Attributes',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','ECO/DFM Category Attributes', \"{\\\"EntityName\\\": \\\"ECO/DFM Category Attributes\\\",\\\"FunctionName\\\": \\\"manageECODFMCategoryAttributesInElastic\\\",\\\"Type\\\": \\\"ECO/DFM Category Attributes\\\", \\\"TypeID\\\":\\\"43596210-4c02-11ea-a2e1-1234511e36ab\\\",\\\"Title\\\":\\\"ECO/DFM Category Attribute\\\",\\\"EntityPrefix\\\":\\\"ECODFMCategoryAttributes_\\\"}\",46);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-47,'ECO/DFM Types','ECO/DFM Types',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','ECO/DFM Types', \"{\\\"EntityName\\\": \\\"ECO/DFM Types\\\",\\\"FunctionName\\\": \\\"manageECODFMTypeInElastic\\\",\\\"Type\\\": \\\"ECO/DFM Types\\\", \\\"TypeID\\\":\\\"a3883d89-7b67-4639-95e9-39b174b3bb8b\\\",\\\"Title\\\":\\\"ECO/DFM Type\\\",\\\"EntityPrefix\\\":\\\"ECODFMType_\\\"}\",47);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-48,'Reserve Stock Requests','Reserve Stock Requests',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Reserve Stock Requests', \"{\\\"EntityName\\\": \\\"Reserve Stock Requests\\\",\\\"FunctionName\\\": \\\"manageReserveStockRequestInElastic\\\",\\\"Type\\\": \\\"Reserve Stock Requests\\\", \\\"TypeID\\\":\\\"0bfac98a-b07a-46a9-adcd-e1a5b5da48e1\\\",\\\"Title\\\":\\\"Reserve Stock Request\\\",\\\"EntityPrefix\\\":\\\"ReserveStockRequest_\\\"}\",48);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-49,'Request For Shipments','Request For Shipments',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Request For Shipments', \"{\\\"EntityName\\\": \\\"Request For Shipments\\\",\\\"FunctionName\\\": \\\"manageRequestForShipmentInElastic\\\",\\\"Type\\\": \\\"Request For Shipments\\\", \\\"TypeID\\\":\\\"80b3c668-97cc-4114-9ff1-be57377c5e03\\\",\\\"Title\\\":\\\"Request For Shipment\\\",\\\"EntityPrefix\\\":\\\"RequestForShipment_\\\"}\",49);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-51,'Defect Categories','Defect Categories',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Defect Categories', \"{\\\"EntityName\\\": \\\"Defect Categories\\\",\\\"FunctionName\\\": \\\"manageDefectCategoryDetailInElastic\\\",\\\"Type\\\": \\\"Defect Categories\\\", \\\"TypeID\\\":\\\"a2b916b8-0704-4f0c-9be6-e6f311802565\\\",\\\"Title\\\":\\\"Defect Category\\\",\\\"EntityPrefix\\\":\\\"DefectCategory_\\\"}\",51);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-52,'Create Form','Create Form',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Create Form', \"{\\\"EntityName\\\": \\\"Create Form\\\",\\\"FunctionName\\\": \\\"manageEntityDetailInElastic\\\",\\\"Type\\\": \\\"Create Form\\\", \\\"TypeID\\\":\\\"8c43c7a9-005d-4467-b4ba-6dcc5bb44ec6\\\",\\\"Title\\\":\\\"Create Form\\\",\\\"EntityPrefix\\\":\\\"Entity_\\\"}\",52);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-53,'Supplier Quote','Supplier Quote',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Supplier Quote', \"{\\\"EntityName\\\": \\\"Supplier Quote\\\",\\\"FunctionName\\\": \\\"manageSupplierQuoteInElastic\\\",\\\"Type\\\": \\\"Supplier Quote\\\", \\\"TypeID\\\":\\\"c2d39679-0a55-415e-a041-0956ffbf734c\\\",\\\"Title\\\":\\\"Supplier Quote\\\",\\\"EntityPrefix\\\":\\\"SupplierQuote_\\\"}\",53);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-54,'Calibration Details','Calibration Details',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Calibration Details', \"{\\\"EntityName\\\": \\\"Calibration Details\\\",\\\"FunctionName\\\": \\\"manageCalibrationDetailInElastic\\\",\\\"Type\\\": \\\"Calibration Details\\\", \\\"TypeID\\\":\\\"cdc7586f-bcc9-40f0-9d69-9eb7ba6ae651\\\",\\\"Title\\\":\\\"Calibration Details\\\",\\\"EntityPrefix\\\":\\\"CalibrationDetails_\\\"}\",54);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-55,'Chats','Chats',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Chats', \"{\\\"EntityName\\\": \\\"Chats\\\",\\\"FunctionName\\\": \\\"manageChatDetailInElastic\\\",\\\"Type\\\": \\\"Chats\\\", \\\"TypeID\\\":\\\"1c39fe50-f0cf-11e9-850e-97d2e8b0d19b\\\",\\\"Title\\\":\\\"Chat\\\",\\\"EntityPrefix\\\":\\\"Chat_\\\"}\",55);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-56,'Customer Payment','Customer Payment',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Customer Payment', \"{\\\"EntityName\\\": \\\"Customer Payment\\\",\\\"FunctionName\\\": \\\"manageCustomerPaymentInElastic\\\",\\\"Type\\\": \\\"Customer Payment\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"R\\\" }, \\\"TypeID\\\":\\\"e14f7142-cd6d-4dca-b062-05ee0cb9d919\\\",\\\"Title\\\":\\\"Customer Payment\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",56);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-57,'Chart of Accounts','Chart of Accounts',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Chart of Accounts', \"{\\\"EntityName\\\": \\\"Chart of Accounts\\\",\\\"FunctionName\\\": \\\"manageChartOfAccountsInElastic\\\",\\\"Type\\\": \\\"Chart of Accounts\\\", \\\"TypeID\\\":\\\"bee99ee1-af0a-48f4-b0a0-82b52d8c4c98\\\",\\\"Title\\\":\\\"Chart of Accounts\\\",\\\"EntityPrefix\\\":\\\"ChartOfAccounts_\\\"}\",57);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-58,'Account Type','Account Type',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Account Type', \"{\\\"EntityName\\\": \\\"Account Type\\\",\\\"FunctionName\\\": \\\"manageAccountTypeInElastic\\\",\\\"Type\\\": \\\"Account Type\\\", \\\"TypeID\\\":\\\"a6cf9fee-14d0-4f90-be64-fd55ea2e1608\\\",\\\"Title\\\":\\\"Account Type\\\",\\\"EntityPrefix\\\":\\\"AccountType_\\\"}\",58);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-59,'Payment Type Category','Payment Type Category',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Payment Type Category', \"{\\\"EntityName\\\": \\\"Payment Type Category\\\",\\\"FunctionName\\\": \\\"managePaymentTypeCategoryInElastic\\\",\\\"Type\\\": \\\"Payment Type Category\\\", \\\"TypeID\\\":\\\"7524f20a-8f17-4c3a-9829-c3f193eaa2b2\\\",\\\"Title\\\":\\\"Payment Type Category\\\",\\\"EntityPrefix\\\":\\\"PaymentTypeCategory_\\\"}\",59);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-60,'Applied Customer Credit Memo','Applied Customer Credit Memo',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Applied Customer Credit Memo', \"{\\\"EntityName\\\": \\\"Applied Customer Credit Memo\\\",\\\"FunctionName\\\": \\\"manageCustomerPaymentInElastic\\\",\\\"Type\\\": \\\"Applied Customer Credit Memo\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"CA\\\" }, \\\"TypeID\\\":\\\"53db7f17-ce4d-4d41-9814-3007a2a9192c\\\",\\\"Title\\\":\\\"Applied Customer Credit Memo\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",60);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-61,'Customer Credit Memo','Customer Credit Memo',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Customer Credit Memo', \"{\\\"EntityName\\\": \\\"Customer Credit Memo\\\",\\\"FunctionName\\\": \\\"manageCustomerInvoiceInElastic\\\",\\\"Type\\\": \\\"Customer Credit Memo\\\",\\\"Parameter\\\": { \\\"transType\\\": \\\"C\\\" }, \\\"TypeID\\\":\\\"9b3e5283-d121-472e-a612-c5e334665739\\\",\\\"Title\\\":\\\"Customer Credit Memo\\\",\\\"EntityPrefix\\\":\\\"CustomerInvoice_\\\"}\",61);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-62,'Customer Write Offs','Customer Write Offs',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Customer Write Offs', \"{\\\"EntityName\\\": \\\"Customer Write Offs\\\",\\\"FunctionName\\\": \\\"manageCustomerPaymentInElastic\\\",\\\"Type\\\": \\\"Customer Write Offs\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"WOFF\\\" }, \\\"TypeID\\\":\\\"7cac3670-ebe3-11eb-9a03-0242ac130003\\\",\\\"Title\\\":\\\"Customer Write Off\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",62);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-63,'Customer Refund','Customer Refund',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Customer Refund', \"{\\\"EntityName\\\": \\\"Customer Refund\\\",\\\"FunctionName\\\": \\\"manageCustomerPaymentInElastic\\\",\\\"Type\\\": \\\"Customer Refund\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"CR\\\" }, \\\"TypeID\\\":\\\"9f4cdb89-e4fb-4c0d-a2da-fa816b59773c\\\",\\\"Title\\\":\\\"Customer Refund\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",63);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-64,'Supplier Payments','Supplier Payments',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Supplier Payments', \"{\\\"EntityName\\\": \\\"Supplier Payments\\\",\\\"FunctionName\\\": \\\"manageSupplierPaymentAndRefundInElastic\\\",\\\"Type\\\": \\\"Supplier Payments\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"P\\\" }, \\\"TypeID\\\":\\\"a4c2264d-fa14-4e9b-8aff-5df89bbe5f08\\\",\\\"Title\\\":\\\"Supplier Payment\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",64);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-65,'Supplier Refunds','Supplier Refunds',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Supplier Refunds', \"{\\\"EntityName\\\": \\\"Supplier Refunds\\\",\\\"FunctionName\\\": \\\"manageSupplierPaymentAndRefundInElastic\\\",\\\"Type\\\": \\\"Supplier Refunds\\\",\\\"Parameter\\\": { \\\"refPaymentMode\\\": \\\"RR\\\" }, \\\"TypeID\\\":\\\"e8c183d9-3e99-4833-9a38-6333d049131e\\\",\\\"Title\\\":\\\"Supplier Refund\\\",\\\"EntityPrefix\\\":\\\"CustSuppPackingSlipInvoicePayment\\\"}\",65);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-66,'Payable Transaction Mode','Payable Transaction Mode',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Payable Transaction Mode', \"{\\\"EntityName\\\": \\\"Payable Transaction Mode\\\",\\\"FunctionName\\\": \\\"manageTransactionModesInElastic\\\",\\\"Type\\\": \\\"Payable Transaction Mode\\\",\\\"Parameter\\\": { \\\"modeType\\\": \\\"RP\\\" }, \\\"TypeID\\\":\\\"66eaef8f-bcf7-4e74-8c42-a8e9d1b1fa20\\\",\\\"Title\\\":\\\"Payable Transaction Mode\\\",\\\"EntityPrefix\\\":\\\"TransactionMode_\\\"}\",66);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-67,'Receivable Transaction Mode','Receivable Transaction Mode',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Receivable Transaction Mode', \"{\\\"EntityName\\\": \\\"Receivable Transaction Mode\\\",\\\"FunctionName\\\": \\\"manageTransactionModesInElastic\\\",\\\"Type\\\": \\\"Receivable Transaction Mode\\\",\\\"Parameter\\\": { \\\"modeType\\\": \\\"RR\\\" }, \\\"TypeID\\\":\\\"4b8dd9f5-fd29-49c9-a0e3-3ab3b05c9a55\\\",\\\"Title\\\":\\\"Receivable Transaction Mode\\\",\\\"EntityPrefix\\\":\\\"TransactionMode_\\\"}\",67);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-68,'Sales Order Detail','Sales Order Detail',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Sales Order Detail', \"{\\\"EntityName\\\": \\\"Sales Order Detail\\\",\\\"FunctionName\\\": \\\"manageSalesOrderDetailInElastic\\\",\\\"Type\\\": \\\"Sales Order Detail\\\", \\\"TypeID\\\":\\\"f16c9d09-b79f-4e9a-90ea-a3e104178207\\\",\\\"Title\\\":\\\"Sales Order Detail\\\",\\\"EntityPrefix\\\":\\\"SalesOrder_\\\"}\",68);  \n" +
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,  \n" +
                "`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`) values (-50,\"Work Order Operation Do's & Don'ts\",\"Work Order Operation Do's & Don'ts\",1,UTC_TIMESTAMP(),1,1,null,null,  \n" +
                "1,'2001-01-01 00:00:00',\"Work Order Operation Do's & Don'ts\", \"{ \\\"EntityName\\\": \\\"Work Order Operation Do's & Don'ts\\\",\\\"FunctionName\\\": \\\"manageWorkOrderOperationDetailInElastic\\\",  \n" +
                "\\\"Type\\\": \\\"Work Order Operation Do's & Don'ts\\\",\\\"Parameter\\\": { \\\"IsDoDontCall\\\": true }, \\\"TypeID\\\":\\\"51479b3e-1b2b-4117-9553-f02e4af98345\\\",\\\"Title\\\":  \n" +
                "\\\"Work Order Operation Do's & Don'ts\\\",\\\"EntityPrefix\\\":\\\"WorkOrderOperationDoDonts_\\\"}\",50);  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5290,'2.00','V1',' Default entry for system generate Entity - Shubham '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5290:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveEntities`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEntities`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pisUserSuperAdmin TINYINT,  \n" +
                "	IN ploginEmployeeID INT,  \n" +
                "	IN pisSystemGeneratedEntity TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "  \n" +
                "		/* if custom forms entity request and not super admin user than check access allowed */  \n" +
                "		IF(pisSystemGeneratedEntity = 0 AND pisUserSuperAdmin = 0 AND ploginEmployeeID IS NOT NULL) THEN  \n" +
                "			SET @temp_Sproc_RetrieveEntities = CONCAT(\"  \n" +
                "				SELECT entityID,entityName,remark,isActive,systemGenerated,columnView,entityStatus,  \n" +
                "					fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(createdBy) createdby,  \n" +
                "					fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    (CASE WHEN (systemGenerated = 0) THEN 'No'  \n" +
                "						WHEN (systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "					fun_getEntityStatusNameByID(entityStatus) AS `entityStatusText`  \n" +
                "				FROM `entity`  \n" +
                "				WHERE `deletedAt` IS NULL   and isDataEntity = 1  \n" +
                "				AND `createdBy` = (SELECT id FROM users WHERE deletedAt IS NULL  \n" +
                "							AND employeeID = \", ploginEmployeeID , \")  \n" +
                "				\");  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrieveEntities = CONCAT(\"  \n" +
                "				SELECT entityID,entityName,remark,isActive,systemGenerated,columnView,entityStatus,  \n" +
                "					fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(createdBy) createdby,  \n" +
                "					fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    (CASE WHEN (systemGenerated = 0) THEN 'No'  \n" +
                "						WHEN (systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "					fun_getEntityStatusNameByID(entityStatus) AS `entityStatusText`  \n" +
                "				FROM `entity`  \n" +
                "				WHERE `deletedAt` IS NULL and isDataEntity = 1  \n" +
                "				\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY entityName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEntities,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEntities,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEntitiesForEnterprise`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEntitiesForEnterprise`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		SET @temp_Sproc_GetEntitiesForEnterprise = CONCAT(\"  \n" +
                "				SELECT entityID,entityName,remark,isActive,systemGenerated,columnView,entityStatus,displayName,jsonObjOfEnterprise,searchDisplayOrder,  \n" +
                "					fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(createdBy) createdby,  \n" +
                "					fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    (CASE WHEN (systemGenerated = 0) THEN 'No'  \n" +
                "						WHEN (systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "					fun_getEntityStatusNameByID(entityStatus) AS `entityStatusText`  \n" +
                "				FROM `entity`  \n" +
                "				WHERE `deletedAt` IS NULL  \n" +
                "				AND entityID < 0  \n" +
                "				\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY searchDisplayOrder ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetEntitiesForEnterprise,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetEntitiesForEnterprise,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5291,'2.00','V1',' SP for fetch Entiry - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5291:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,  \n" +
                " `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES ('Allow to Lock/Unlock Customer Write Offs', 1, 0, fun_DatetimetoUTCDateTime(),  \n" +
                " 1, fun_DatetimetoUTCDateTime(), 1, 1) ;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5292,'2.00','V1',' feature_mst entry for customer write off - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5292:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockCustomerPaymentTransaction` ;  \n" +
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "		/* update all payments transaction to locked */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "		    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "		    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "		    updatedBy = v_newLockedBy  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "		AND lockStatus = v_oldLockStatusPMT  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					/* update all payment dependent write off if any */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND lockStatus = v_oldLockStatusPMT  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "					/* update all direct lock/unlock write off */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE id = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			/* If dependent Refund then Lock (Check for all payment must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all payments contain in refund transaction that all locked or not */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "							FROM packingslip_invoice_payment  \n" +
                "							WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									)  \n" +
                "							AND lockStatus != 'LC' ;  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CA','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "						 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "				SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "				    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    cps.updatedBy = v_newLockedBy  \n" +
                "				WHERE cps.paymentStatus = 'RE'  \n" +
                "				AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "				AND cps.isLocked = v_oldLockStatusInv  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pRefundStatus VARCHAR(5),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			SET vLockStatusToBe = 'NA' ;  \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "					SET vLockStatusToBe = 'RL' ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							 ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		/* get total refunded amount till now  */  \n" +
                "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
                "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det  \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND isPaymentVoided = 0  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
                "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
                "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
                "							   END)  \n" +
                "						ELSE 'NA' END)  \n" +
                "					ELSE NULL END) ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							   ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5293,'2.00','V1',' customer write off lock/unlock sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5293:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "ALTER TABLE salesordermst ADD COLUMN poRevisionDate DATE;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5294,'2.00','V1',' PO revision poRevisionDate - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5294:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCopySalesOrderAssyMismatch` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCopySalesOrderAssyMismatch`(  \n" +
                "		IN pSOID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE vIndex INT;  \n" +
                "	DECLARE vcount INT;  \n" +
                "	DECLARE vMfgPN VARCHAR(255);  \n" +
                "	DECLARE vmfgcodeID INT;  \n" +
                "	DECLARE vmfgPartID INT;  \n" +
                "	DECLARE vnewmfgPartID INT;  \n" +
                "	DECLARE vCurrentVersion VARCHAR(50);  \n" +
                "	DECLARE vNewVersion VARCHAR(50);  \n" +
                "	DECLARE vcurrPIDCode VARCHAR(255);  \n" +
                "	DECLARE vnewPIDCode VARCHAR(255);  \n" +
                "	DECLARE visMismatch TINYINT DEFAULT FALSE;  \n" +
                "	DECLARE vcurrRohsName VARCHAR(255);  \n" +
                "	DECLARE vnewRohsName VARCHAR(255);  \n" +
                "	DECLARE vcurrRohsIcon VARCHAR(255);  \n" +
                "	DECLARE vnewRohsIcon VARCHAR(255);  \n" +
                "	DECLARE vcurrAssyPN VARCHAR(255);  \n" +
                "	CREATE TEMPORARY TABLE  tempTableAssyList  \n" +
                "          (  \n" +
                "		currPartID INT,  \n" +
                "		newPartID INT,  \n" +
                "		mfgPN VARCHAR(255),  \n" +
                "		currPidCode VARCHAR(255),  \n" +
                "		newPidCode VARCHAR(255),  \n" +
                "		currRohs VARCHAR(255),  \n" +
                "		newRohs VARCHAR(255),  \n" +
                "		currRohsIcon VARCHAR(255),  \n" +
                "		newRohsIcon VARCHAR(255),  \n" +
                "		isMismatch TINYINT  \n" +
                "	   );  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempCopySalesOrder AS  \n" +
                "  \n" +
                "		SELECT sod.id,row_number() over (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID,c.mfgPN,c.mfgcodeID,c.rev,c.PIDCode,rr.name,rr.rohsIcon,c.custAssyPN FROM salesorderdet sod  \n" +
                "			JOIN component c ON c.id = sod.partID AND c.partStatus != -3  \n" +
                "			JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID  AND rr.isdeleted=0  \n" +
                "			WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 AND c.iscustom=1;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO vcount FROM tempCopySalesOrder;  \n" +
                "			SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "				SELECT partID,mfgPN,mfgcodeID,rev,PIDCode,`name`,rohsIcon,custAssyPN INTO vmfgPartID,vMfgPN,vmfgcodeID,vCurrentVersion,vcurrPIDCode,vcurrRohsName,vcurrRohsIcon,vcurrAssyPN FROM tempCopySalesOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "			        SELECT c.id,c.rev,c.PIDCode,rr.`name`,rr.rohsIcon INTO vnewmfgPartID,vNewVersion,vnewPIDCode,vnewRohsName,vnewRohsIcon  \n" +
                "			        FROM component c JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID  AND rr.isdeleted=0 WHERE c.custAssyPN=vcurrAssyPN AND c.mfgcodeID=vmfgcodeID AND c.isdeleted=0 ORDER BY c.createdAt DESC LIMIT 1;  \n" +
                "  \n" +
                "			          IF(IFNULL(vNewVersion,0)!=IFNULL(vCurrentVersion,0))THEN  \n" +
                "			           SET visMismatch=TRUE;  \n" +
                "			          END IF;  \n" +
                "  \n" +
                "			          INSERT INTO tempTableAssyList(currPartID,newPartID,mfgPN,currPidCode,newPidCode,currRohs,newRohs,currRohsIcon,newRohsIcon,isMismatch)VALUES  \n" +
                "			          (vmfgPartID,vnewmfgPartID,vMfgPN,vcurrPIDCode,vnewPIDCode,vcurrRohsName,vnewRohsName,vcurrRohsIcon,vnewRohsIcon,visMismatch);  \n" +
                "			  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "  \n" +
                "			  SELECT * FROM tempTableAssyList;  \n" +
                "  \n" +
                "			  DROP TEMPORARY TABLE IF EXISTS tempTableAssyList;  \n" +
                "  \n" +
                "			 DROP TEMPORARY TABLE IF EXISTS tempCopySalesOrder;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveDuplicateSalesOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicateSalesOrder`(  \n" +
                "		IN pSOID INT,  \n" +
                "		IN pSONumber VARCHAR(100),  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN pSODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT,  \n" +
                "		IN ppoRevision VARCHAR(8),  \n" +
                "		IN ppoRevisionDate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewSOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vsalesIndex INT;  \n" +
                "		 DECLARE vsalescount INT;  \n" +
                "		 DECLARE vOldSalesOrderDetID INT;  \n" +
                "		 DECLARE vNewSalesOrderDetID INT;  \n" +
                "		 DECLARE vOldSalesCommissionID INT;  \n" +
                "		 DECLARE vNewSalesCommissionID INT;  \n" +
                "		 DECLARE vPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM salesordermst WHERE id=pSOID;  \n" +
                "			-- insert sales order header detail  \n" +
                "		INSERT INTO salesordermst(salesOrderNumber,poNumber,poDate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,revision,termsID,`status`,createdBy,  \n" +
                "		updatedBy,soDate,revisionChangeNote,documentPath,createByRoleId,updateByRoleId,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,serialNumber,carrierID,carrierAccountNumber,  \n" +
                "		poRevision,isBlanketPO,isLegacyPO,isRmaPO,shippingComment,poRevisionDate)  \n" +
                "		SELECT pSONumber,pPONumber,pPODate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,'00',termsID,0,puserID,  \n" +
                "		 puserID,pSODate,'',documentPath,puserRoleID,puserRoleID,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,pSerialNumber,carrierID,carrierAccountNumber,  \n" +
                "		 ppoRevision,isBlanketPO,isLegacyPO,isRmaPO,shippingComment,ppoRevisionDate FROM salesordermst WHERE id=pSOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewSOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesOrder AS  \n" +
                "  \n" +
                "				SELECT sod.id,row_number() over (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID FROM salesorderdet sod  \n" +
                "					JOIN component c ON c.id = sod.partID AND c.partStatus != -3  \n" +
                "					WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 ORDER BY sod.partCategory DESC;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempSalesOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old sales order detail id  \n" +
                "				SELECT id,partID INTO vOldSalesOrderDetID,vPartID FROM tempSalesOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new sales order detail  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,qty,price,shippingQty,remark,puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialTentitiveDocDate, vOldPODate) DAY),prcNumberofWeek,isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialDueDate, vOldPODate) DAY),  \n" +
                "			  partID,0,tentativeBuild,uom,lineID,puserRoleID,puserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,1,  \n" +
                "			  1,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType FROM salesorderdet WHERE id=vOldSalesOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,sod.qty,sod.price,sod.shippingQty,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=sod.partID AND im.requiementType='C' AND cid.category='S' AND im.isdeleted=0),puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialTentitiveDocDate, vOldPODate) DAY),sod.prcNumberofWeek,sod.isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialDueDate, vOldPODate) DAY),  \n" +
                "			   sod.partID,0,sod.tentativeBuild,sod.uom,sod.lineID,puserRoleID,puserRoleID,sod.refRFQGroupID,sod.refRFQQtyTurnTimeID,sod.salesCommissionTo,sod.custPOLineNumber,sod.partCategory,1,  \n" +
                "			   1,c.mfgPNDescription,sod.quoteNumber,(SELECT GROUP_CONCAT(arc.comment SEPARATOR '  \n" +
                "	')  FROM assembly_revision_comments arc  \n" +
                "			   WHERE arc.partID=sod.partID AND arc.isdeleted=0),sod.quoteFrom,sod.refAssyQtyTurnTimeID,sod.assyQtyTurnTimeText,sod.isCustomerConsign,sod.originalPOQty,sod.frequency,sod.frequencyType FROM salesorderdet sod JOIN component c ON c.id=sod.partID  \n" +
                "			 WHERE sod.id=vOldSalesOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewSalesOrderDetID;  \n" +
                "  \n" +
                "			  -- to save release details  \n" +
                "				  INSERT INTO salesshippingmst (sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,priority,createdBy,updatedBy,  \n" +
                "		 releaseNotes,promisedShipDate,createByRoleId,updateByRoleId,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		 revisedRequestedDockDate,revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip)  \n" +
                "  \n" +
                "		SELECT vNewSalesOrderDetID,qty,unitMeaser,DATE_ADD( pPODate, INTERVAL DATEDIFF(shippingDate, vOldPODate) DAY),shippingMethodID,shippingAddressID,description,priority,puserID,puserID,  \n" +
                "		releaseNotes, DATE_ADD( pPODate, INTERVAL DATEDIFF(promisedShipDate, vOldPODate) DAY),puserRoleID,puserRoleID,releaseNumber,DATE_ADD( pPODate, INTERVAL DATEDIFF(requestedDockDate, vOldPODate) DAY),carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		  DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedDockDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedShipDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedPromisedDate, vOldPODate) DAY),isAgreeToShip  \n" +
                "		FROM  \n" +
                "		salesshippingmst  \n" +
                "		WHERE sDetID= vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  vNewSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,puserID,puserID,puserRoleID,puserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "			            -- sales commission details  \n" +
                "			            CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesCommissionDetails AS  \n" +
                "  \n" +
                "				SELECT id,row_number() over (PARTITION BY refSalesOrderDetID) rowNumber FROM salesorderdet_commission_attribute_mstdet  \n" +
                "					WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SELECT COUNT(1) INTO vsalescount FROM tempSalesCommissionDetails;  \n" +
                "  \n" +
                "				      SET vsalesIndex=1;  \n" +
                "  \n" +
                "				      WHILE(vsalesIndex <= vsalescount) DO  \n" +
                "				      SELECT id INTO vOldSalesCommissionID FROM tempSalesCommissionDetails WHERE rowNumber=(vsalesIndex);  \n" +
                "  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute_mstdet(refSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,createdBy,updatedBy,createByRoleId,updateByRoleId,rfqAssyID)  \n" +
                "  \n" +
                "				        SELECT vNewSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,puserID,puserID,puserRoleID,puserRoleID,rfqAssyID FROM salesorderdet_commission_attribute_mstdet  \n" +
                "				        WHERE id=vOldSalesCommissionID;  \n" +
                "  \n" +
                "				        SELECT LAST_INSERT_ID() INTO vNewSalesCommissionID;  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,refSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,createdBy,updatedBy,  \n" +
                "				        createByRoleId,updateByRoleId,category,partID,refComponentSalesPriceBreakID,org_unitPrice)  \n" +
                "				        SELECT vNewSalesOrderDetID,vNewSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,puserID,puserID,  \n" +
                "				        puserRoleID,puserRoleID,category,partID,refComponentSalesPriceBreakID,org_unitPrice FROM salesorderdet_commission_attribute  \n" +
                "				        WHERE refSalesCommissionID=vNewSalesCommissionID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SET vsalesIndex  =vsalesIndex+1;  \n" +
                "				      END WHILE;  \n" +
                "                                  -- end sales commission  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "                       				-- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		     -- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempNewOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=vNewSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		   CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherChargesDet AS  \n" +
                "                       		   SELECT * FROM tempOtherCharges;  \n" +
                "  \n" +
                "				UPDATE salesorderdet AS sd ,tempOtherCharges AS b  \n" +
                "				SET sd.refSODetID=(SELECT tno.sdetid FROM tempNewOtherCharges tno WHERE tno.lineID IN (SELECT sdd.lineID FROM tempOtherChargesDet sdd WHERE sdd.sdetid=b.refSODetID))  \n" +
                "				WHERE sd.lineID=b.lineID AND sd.refSalesOrderID=vNewSOID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID IS NOT NULL AND sd.refSalesOrderID=vNewSOID;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=vNewSOID);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherCharges;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempSalesCommissionDetails;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS   tempSalesOrder;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempOtherChargesDet;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempNewOtherCharges;  \n" +
                "			  SELECT   vNewSOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5295,'2.00','V1',' Alter procedure Sproc_GetCopySalesOrderAssyMismatch '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5295:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "    SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_getMfgCodeAndNameByID(mfgMst.id) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(SUM(psmrd.orderedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0) - IFNULL(SUM(psmrd.packingSlipQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5296,'2.00','V1',' Update Sproc_GetPackingSlipDetailForElastic SP - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5296:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "alter table rfq_lineitems_alternatepart  \n" +
                "add column mismatchCustpartRevStep  tinyint default 1;  \n" +
                "  \n" +
                "alter table rfq_lineitems_alternatepart  \n" +
                "add column mismatchCPNandCustpartRevStep tinyint default 1;  \n" +
                "  \n" +
                "alter table rfq_lineitems_alternatepart_history  \n" +
                "add column mismatchCustpartRevStep tinyint default 1;  \n" +
                "  \n" +
                "alter table rfq_lineitems_alternatepart_history  \n" +
                "add column mismatchCPNandCustpartRevStep tinyint default 1;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO `rfq_lineitems_errorcode`  \n" +
                "(`logicID`, `errorCode`, `errorColor`, `description`, `systemVariable`, `createdBy`, `createdAt`,  \n" +
                "`updatedBy`, `updatedAt`, `isDeleted`, `displayName`, `org_description`,  \n" +
                "`notes`, `narrative`, `isExternalIssue`, `displayOrder`, `isResearchStatus`, `isAssemblyLevelError`,  \n" +
                "`createByRoleId`, `updateByRoleId`, `isAllowToEngrApproved`)  \n" +
                "VALUES  \n" +
                "(86, 'MISMATCHCUSTPARTREV', '#b92dab', '<% MFR %> <% MPN %> Rev is mismatched among with alternate parts. Approve it from part processing menu', '<% MPN %>,<% MFR %>', 1, utc_timestamp(),  \n" +
                "1, utc_timestamp(), 0, 'Mismatch Custom Part Rev', '<% MFR %> <% MPN %> Rev is mismatched among with alternate parts. Approve it from part processing menu',  \n" +
                "null, null, 0, 86, 1, 0,  \n" +
                "1, 1, 1);  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode`  \n" +
                "(`logicID`, `errorCode`, `errorColor`, `description`, `systemVariable`, `createdBy`, `createdAt`,  \n" +
                "`updatedBy`, `updatedAt`, `isDeleted`, `displayName`, `org_description`,  \n" +
                "`notes`, `narrative`, `isExternalIssue`, `displayOrder`, `isResearchStatus`, `isAssemblyLevelError`,  \n" +
                "`createByRoleId`, `updateByRoleId`, `isAllowToEngrApproved`)  \n" +
                "VALUES  \n" +
                "(87, 'MISMATCHCPNANDCUSTPARTREV', '#b92d7b', '<% MFR %> <% MPN %> Rev is mismatched among with CPN <% CPN %> <% CPN Rev %>. Approve it from part processing menu', '<% MFR %>,<% MPN %>,<% CPN %>,<% CPN Rev %>', 1, utc_timestamp(),  \n" +
                "1, utc_timestamp(), 0, 'Mismatch CPN and Custom Part Rev', '<% MFR %> <% MPN %> Rev is mismatched among with CPN <% CPN %> <% CPN Rev %>. Approve it from part processing menu',  \n" +
                "null, null, 0, 87, 1, 0,  \n" +
                "1, 1, 1);  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "update rfq_lineitems_errorcode  \n" +
                "set isDeleted = 1,  \n" +
                "deletedBy = 1,  \n" +
                "deleteByRoleId = 1,  \n" +
                "deletedAt = utc_timestamp()  \n" +
                "where errorCode = 'DUPLICATECPN';  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5297,'2.00','V1','User Story 36767: BOM CPN new cases need to handle  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5297:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCategoryIDs LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy DNP Qty'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program REF DES'  \n" +
                "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA REF DES Change'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA REF DES Change'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 85) THEN 'MPN not Mapped in CPN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 86) THEN 'Mismatch Custom Part Rev'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 87) THEN 'Mismatch CPN and Custom Part Rev'  \n" +
                "		ELSE '' END) AS `logicName`,errorCode, errorColor,  \n" +
                "        fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		description, systemVariable,logicID, displayName, org_description,  \n" +
                "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,  \n" +
                "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,  \n" +
                "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'  \n" +
                "		WHEN (`isExternalIssue` = 1) THEN 'Yes'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isExternalIssueValue`,  \n" +
                "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'  \n" +
                "		WHEN (`isResearchStatus` = 1) THEN 'Yes'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isResearchStatusValue`,  \n" +
                "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'  \n" +
                "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isAssemblyLevelErrorValue`,  \n" +
                "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'  \n" +
                "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'  \n" +
                "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isAllowToEngrApprovedValue`,  \n" +
                "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping  \n" +
                "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount  \n" +
                "		FROM `rfq_lineitems_errorcode`  \n" +
                "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                "IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                "        ELSE 'N/A' END) AS programingStatus,  \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                " a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                "a.isObsoleteLine,  \n" +
                "a.customerApprovalForQPAREFDESStep,  \n" +
                "a.customerApprovalForBuyStep,  \n" +
                "a.customerApprovalForPopulateStep,  \n" +
                "a.dnpQPARefDesStep,  \n" +
                "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                "a.customerApprovalForDNPBuyStep,  \n" +
                "a.customerApprovalCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                "ac.description AS additionalComment,  \n" +
                "ac.id AS additionalCommentId,  \n" +
                "a.programmingMappingPendingRefdesCount,  \n" +
                "a.refDesigCount,  \n" +
                "a.dnpDesigCount  \n" +
                "FROM rfq_lineitems a  \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                "  \n" +
                "SELECT b.id,  \n" +
                "b.lineID,  \n" +
                "b.cust_lineID,  \n" +
                "b.qpa,  \n" +
                "b.refDesig,  \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                "a.mfgCodeID,  \n" +
                "mcm.acquisitionDetail,  \n" +
                "a.mfgPN,  \n" +
                "a.mfgPNID,  \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                "a.distMfgCodeID,  \n" +
                "a.distPN,  \n" +
                "a.distMfgPNID,  \n" +
                "b.custPN,  \n" +
                "b.custPNID,  \n" +
                "b.isCustPN,  \n" +
                "b.uomID,  \n" +
                "b.programingStatus,  \n" +
                "b.substitutesAllow,  \n" +
                "b.allocatedInKit,  \n" +
                "a.description descriptionAlternate,  \n" +
                "b.description,  \n" +
                "b.numOfPosition,  \n" +
                "b.numOfRows,  \n" +
                "b.customerRev,  \n" +
                "b.isCustPNProgrammingRequire,  \n" +
                "b.customerDescription,  \n" +
                "b.customerPartDesc,  \n" +
                "b.isInstall,  \n" +
                "b.isPurchase,  \n" +
                "b.isNotRequiredKitAllocation,  \n" +
                "b.isSupplierToBuy,  \n" +
                "b.dnpQty,  \n" +
                "b.dnpDesig,  \n" +
                "a.id AS rfqAlternatePartID,  \n" +
                "b.qpaDesignatorStep,  \n" +
                "b.restrictCPNUseWithPermissionStep,  \n" +
                "b.restrictCPNUsePermanentlyStep,  \n" +
                "b.restrictCPNUseInBOMStep,  \n" +
                "b.requireMountingTypeStep,  \n" +
                "b.requireFunctionalTypeStep,  \n" +
                "b.requireMountingTypeError,  \n" +
                "b.requireFunctionalTypeError,  \n" +
                "b.isBuyDNPQty,  \n" +
                "b.isObsoleteLine,  \n" +
                "b.customerApprovalForQPAREFDESStep,  \n" +
                "b.customerApprovalForBuyStep,  \n" +
                "b.customerApprovalForPopulateStep,  \n" +
                "b.dnpQPARefDesStep,  \n" +
                "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                "b.customerApprovalForDNPBuyStep,  \n" +
                "b.customerApprovalCPN,  \n" +
                "b.qpaCustomerApprovalComment,  \n" +
                "b.dnpqpaCustomerApprovalComment,  \n" +
                "b.buyCustomerApprovalComment,  \n" +
                "b.buyDNPCustomerApprovalComment,  \n" +
                "b.populateCustomerApprovalComment,  \n" +
                "b.cpnCustomerApprovalComment,  \n" +
                "b.isCustomerApprovedQPA,  \n" +
                "b.isCustomerApprovedBuy,  \n" +
                "b.isCustomerApprovedDNPQPA,  \n" +
                "b.isCustomerApprovedBuyDNP,  \n" +
                "b.isCustomerApprovedPopulate,  \n" +
                "b.isCustomerApprovedCPN,  \n" +
                "b.kitAllocationNotRequiredComment,  \n" +
                "b.isNotRequiredKitAllocationApproved,  \n" +
                "a.mfgVerificationStep,  \n" +
                "a.mfgDistMappingStep,  \n" +
                "a.mfgCodeStep,  \n" +
                "a.customerApproval,  \n" +
                "a.isCustomerUnAppoval,  \n" +
                "a.org_mfgCode,  \n" +
                "a.org_mfgPN,  \n" +
                "a.org_distributor,  \n" +
                "a.org_distPN,  \n" +
                "a.distVerificationStep,  \n" +
                "a.distCodeStep,  \n" +
                "a.getMFGPNStep,  \n" +
                "a.obsoletePartStep,  \n" +
                "a.mfgGoodPartMappingStep,  \n" +
                "a.mfgPNStep,  \n" +
                "a.distPNStep,  \n" +
                "a.badMfgPN,  \n" +
                "a.distGoodPartMappingStep,  \n" +
                "a.nonRohsStep,  \n" +
                "a.epoxyStep,  \n" +
                "a.invalidConnectorTypeStep,  \n" +
                "a.duplicateMPNInSameLineStep,  \n" +
                "a.mismatchMountingTypeStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.restrictUseWithPermissionStep,  \n" +
                "a.restrictUsePermanentlyStep,  \n" +
                "a.partPinIsLessthenBOMPinStep,  \n" +
                "a.mismatchRequiredProgrammingStep,  \n" +
                "a.mappingPartProgramStep,  \n" +
                "a.exportControlledStep,  \n" +
                "a.tbdPartStep,  \n" +
                "a.userData1,  \n" +
                "a.userData2,  \n" +
                "a.userData3,  \n" +
                "a.userData4,  \n" +
                "a.userData5,  \n" +
                "a.userData6,  \n" +
                "a.userData7,  \n" +
                "a.userData8,  \n" +
                "a.userData9,  \n" +
                "a.userData10,  \n" +
                "a.pickupPadRequiredStep,  \n" +
                "a.matingPartRquiredStep,  \n" +
                "a.suggestedGoodPartStep,  \n" +
                "a.suggestedGoodDistPartStep,  \n" +
                "a.driverToolsRequiredStep,  \n" +
                "a.functionalTestingRequiredStep,  \n" +
                "a.mismatchCustomPartStep,  \n" +
                "a.mismatchValueStep,  \n" +
                "a.approvedMountingType,  \n" +
                "a.mismatchPackageStep,  \n" +
                "a.mismatchPowerStep,  \n" +
                "a.mismatchToleranceStep,  \n" +
                "a.mismatchTempratureStep,  \n" +
                "a.mismatchNumberOfRowsStep,  \n" +
                "a.uomMismatchedStep,  \n" +
                "a.programingRequiredStep,  \n" +
                "a.mismatchProgrammingStatusStep,  \n" +
                "a.mismatchColorStep,  \n" +
                "a.restrictUseInBOMStep,  \n" +
                "a.restrictUseInBOMWithPermissionStep,  \n" +
                "a.restrictUseInBOMExcludingAliasStep,  \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "a.restrictUseExcludingAliasStep,  \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "a.unknownPartStep,  \n" +
                "a.defaultInvalidMFRStep,  \n" +
                "a.isUnlockApprovedPart,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnPart.partTypeName  \n" +
                "ELSE  \n" +
                "part.partTypeName END) AS parttypeID,  \n" +
                "a.parttypeID AS functionalID,  \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnMount.name  \n" +
                "ELSE  \n" +
                "mount.name END) AS mountingtypeID,  \n" +
                "a.mountingtypeID AS mountingID,  \n" +
                "cat.categoryname partcategoryID,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                "CASE WHEN  \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                "THEN 1 ELSE 0 END isObsolete,  \n" +
                "co.PIDCode,  \n" +
                "co.mfgPNDescription,  \n" +
                "co.pitch,  \n" +
                "co.noOfRows,  \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                "co.value,  \n" +
                "co.tolerance,  \n" +
                "co.voltage,  \n" +
                "co.isCustom,  \n" +
                "co.packaging,  \n" +
                "co.deviceMarking,  \n" +
                "co.powerRating,  \n" +
                "co.minOperatingTemp,  \n" +
                "co.maxOperatingTemp,  \n" +
                "co.connecterTypeID,  \n" +
                "co.driverToolRequired,  \n" +
                "co.matingPartRquired,  \n" +
                "co.pickupPadRequired,  \n" +
                "co.programingRequired,  \n" +
                "co.dataSheetLink,  \n" +
                "co.isCPN,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                "co.isTemperatureSensitive,  \n" +
                "co.noOfPosition AS componentLead,  \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                "co.createdBy,  \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                "co.color,  \n" +
                "co.uom AS partUOMID,  \n" +
                "co.serialNumber,  \n" +
                "CASE WHEN  \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                "b.additionalComment ,  \n" +
                "b.additionalCommentId,  \n" +
                "a.suggestedByApplicationMsg,  \n" +
                "a.suggestedByApplicationStep,  \n" +
                "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                "a.mismatchPitchStep,  \n" +
                "b.programmingMappingPendingRefdesCount,  \n" +
                "b.refDesigCount,  \n" +
                "b.dnpDesigCount,co.feature ,  \n" +
                "a.mismatchCustpartRevStep,  \n" +
                "a.mismatchCPNandCustpartRevStep  \n" +
                "FROM rfq_lineitems_alternatepart a  \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id  \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP PROCEDURE If EXISTS `Sproc_CopyAssyBOMQuote_WitoutTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote_WitoutTransaction`(  \n" +
                "	IN poldAssyID INT,  \n" +
                "	IN pnewAssyID INT,  \n" +
                "	IN UserID INT,  \n" +
                "	IN pIsBOM TINYINT,  \n" +
                "	IN pIsExistingRFQ TINYINT,  \n" +
                "	IN pFromCustomerID INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pRfqFormID INT,  \n" +
                "	IN pCustomerApprovalComment TEXT,  \n" +
                "	IN pIsCopyPricing TINYINT,  \n" +
                "	IN pfromRFQAssyID INT,  \n" +
                "	IN pEmployeeID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pCount INT;  \n" +
                "DECLARE pToRFQAssyID INT;  \n" +
                "DECLARE pRFQTypeID INT;  \n" +
                "DECLARE pRFQInDate DATETIME;  \n" +
                "DECLARE pRFQDueDate DATETIME;  \n" +
                "DECLARE pQuoteDateDiff INT;  \n" +
                "DECLARE pToAssemblyLineCount INT;  \n" +
                "DECLARE pisBOMVarified TINYINT;  \n" +
                "DECLARE pisReadyForPricing TINYINT;  \n" +
                "DECLARE vRFQID INT;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pToAssemblyLineCount FROM rfq_lineitems WHERE partID = pnewAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "    IF pIsBOM OR pToAssemblyLineCount = 0 THEN  \n" +
                "		INSERT INTO `rfq_lineitems` (`lineID`,	`qpa`,	`refDesig`,	`custPN`,  \n" +
                "					`custPNID`,	`uomID`,	`description`,	`isInstall`,	`isPurchase`, `isNotRequiredKitAllocation`,  \n" +
                "					`createdBy`,	`createdAt`,  \n" +
                "					`customerRev`,	`customerDescription`,	`numOfPosition`, `dnpQty`,		`dnpDesig`,  \n" +
                "					`org_lineID`,	`org_qpa`,	`org_refDesig`,	`org_custPN`,		`org_uomName`,  \n" +
                "					`org_isInstall`, `org_isPurchase`,			`org_customerRev`,  \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,  \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,  \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	 `partID`,		`requireMountingTypeStep`,  \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus`,`substitutesAllow`,`org_substitutesAllow`,  \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,  \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,  \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`,  \n" +
                "                    `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`,  \n" +
                "                    `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`)  \n" +
                "		SELECT 	`lineID`, 	`qpa`, 	`refDesig`, 	`custPN`,  \n" +
                "					`custPNID`, 	`uomID`, 	`description`, 	`isInstall`, 	`isPurchase`,	`isNotRequiredKitAllocation`,  \n" +
                "					 UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					`customerRev`, 	`customerDescription`, 	`numOfPosition`,  \n" +
                "					`dnpQty`, 		`dnpDesig`, `org_lineID`, 	`org_qpa`, 	`org_refDesig`, `org_custPN`, 		`org_uomName`,  \n" +
                "					`org_isInstall`, `org_isPurchase`, 			`org_customerRev`,  \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,  \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,  \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "					 pnewAssyID `partID`,	`requireMountingTypeStep`,  \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus` ,`substitutesAllow`,`org_substitutesAllow`,  \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,  \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,  \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`,  \n" +
                "                    `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `createByRoleId`,  \n" +
                "                    `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`  \n" +
                "		FROM rfq_lineitems WHERE partID = poldAssyID AND IFNULL(isDeleted,0) = 0;  \n" +
                "  \n" +
                "		INSERT INTO `rfq_lineitems_alternatepart` (	`rfqLineItemsID`,	`distributor`,	`distMfgCodeID`,	`distPN`,  \n" +
                "							`distMfgPNID`,		`mfgCode`,	`mfgCodeID`,		`mfgPN`,  \n" +
                "							`mfgPNID`,		`description`,	 `RoHSStatusID`,  `createdBy`,		`createdAt`,	`mfgVerificationStep`,  \n" +
                "							`mfgDistMappingStep`,	`mfgCodeStep`,	`distVerificationStep`,	`distCodeStep`,  \n" +
                "							`getMFGPNStep`,		`obsoletePartStep`,			`mfgGoodPartMappingStep`,  \n" +
                "							`mfgPNStep`,		`distPNStep`,	`org_mfgCode`,  \n" +
                "							`org_mfgPN`,		`org_distributor`,`org_distPN`,		`badMfgPN`,  \n" +
                "							`distGoodPartMappingStep`,		`nonRohsStep`,		`epoxyStep`,  \n" +
                "							`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,  \n" +
                "							`parttypeID`,		`mountingtypeID`,`partcategoryID`,	`partID`,  \n" +
                "							`userData1`,            `userData2`,	`userData3`,		`userData4`,  \n" +
                "							`userData5`,		`userData6`,	`userData7`,		`userData8`,  \n" +
                "							`userData9`,		`userData10`,	`mismatchMountingTypeStep`,  \n" +
                "							`mismatchFunctionalCategoryStep`,	`restrictUseWithPermissionStep`,  \n" +
                "							`restrictUsePermanentlyStep`,		`pickupPadRequiredStep`,  \n" +
                "							`matingPartRquiredStep`,		`driverToolsRequiredStep`,  \n" +
                "							`functionalTestingRequiredStep`,	`mismatchValueStep`,  \n" +
                "							`mismatchPackageStep`,			`mismatchToleranceStep`,  \n" +
                "							`mismatchTempratureStep`,		`mismatchPowerStep`,  \n" +
                "							`uomMismatchedStep`,  \n" +
                "							`programingRequiredStep`,	        `mismatchColorStep`, 	`customerApproval`,  \n" +
                "							`customerApprovalBy`, `customerApprovalDate`,`isCustomerUnAppoval`,`customerUnAppovalBy`,`customerUnAppovalDate`,  \n" +
                "							`restrictUseInBOMStep`,`mismatchNumberOfRowsStep`,`partPinIsLessthenBOMPinStep`,`tbdPartStep`,`exportControlledStep`,`restrictUseInBOMWithPermissionStep`,  \n" +
                "							`isUnlockApprovedPart`,`unknownPartStep`, `defaultInvalidMFRStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "                            `restrictUseExcludingAliasStep`, `restrictUseExcludingAliasWithPermissionStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `approvedMountingType`,  \n" +
                "                            `mismatchRequiredProgrammingStep`,`mappingPartProgramStep`, `suggestedByApplicationMsg`,`suggestedByApplicationStep`,  \n" +
                "                            `suggestedGoodPartStep`,`suggestedGoodDistPartStep`, `mismatchCustomPartStep`, `mismatchCustpartRevStep`, `mismatchCPNandCustpartRevStep`)  \n" +
                "		SELECT 			rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, 	ra.`distPN`,  \n" +
                "							ra.`distMfgPNID`, 	ra.`mfgCode`, 	ra.`mfgCodeID`, 	ra.`mfgPN`,  \n" +
                "							ra.`mfgPNID`,		ra.`description`,  	ra.`RoHSStatusID`,  \n" +
                "							UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`,	ra.`mfgVerificationStep`,  \n" +
                "							ra.`mfgDistMappingStep`,ra.`mfgCodeStep`,ra.`distVerificationStep`,ra.`distCodeStep`,  \n" +
                "							ra.`getMFGPNStep`, 	ra.`obsoletePartStep`, 			ra.`mfgGoodPartMappingStep`,  \n" +
                "							ra.`mfgPNStep`, 	ra.`distPNStep`, ra.`org_mfgCode`,  \n" +
                "							ra.`org_mfgPN`,		ra.`org_distributor`,ra.`org_distPN`,	ra.`badMfgPN`,  \n" +
                "							ra.`distGoodPartMappingStep`,		ra.`nonRohsStep`,		ra.`epoxyStep`,  \n" +
                "							ra.`invalidConnectorTypeStep`,ra.`duplicateMPNInSameLineStep`,  \n" +
                "							ra.`parttypeID`,		ra.`mountingtypeID`,ra.`partcategoryID`,	pnewAssyID `partID`,  \n" +
                "							ra.`userData1`,         ra.`userData2`,	ra.`userData3`,		ra.`userData4`,  \n" +
                "							ra.`userData5`,		ra.`userData6`,	ra.`userData7`,		ra.`userData8`,  \n" +
                "							ra.`userData9`,		ra.`userData10`,	ra.`mismatchMountingTypeStep`,  \n" +
                "							ra.`mismatchFunctionalCategoryStep`,	ra.`restrictUseWithPermissionStep`,  \n" +
                "							ra.`restrictUsePermanentlyStep`,	ra.`pickupPadRequiredStep`,  \n" +
                "							ra.`matingPartRquiredStep`,		ra.`driverToolsRequiredStep`,  \n" +
                "							ra.`functionalTestingRequiredStep`,	ra.`mismatchValueStep`,  \n" +
                "							ra.`mismatchPackageStep`,		ra.`mismatchToleranceStep`,  \n" +
                "							ra.`mismatchTempratureStep`,		ra.`mismatchPowerStep`,  \n" +
                "							ra.`uomMismatchedStep`,  \n" +
                "							ra.`programingRequiredStep`,	        ra.`mismatchColorStep`,	ra.`customerApproval`,  \n" +
                "							ra.`customerApprovalBy`, 		ra.`customerApprovalDate`,ra.`isCustomerUnAppoval`,ra.`customerUnAppovalBy`,ra.`customerUnAppovalDate`,  \n" +
                "							ra.`restrictUseInBOMStep`,ra.`mismatchNumberOfRowsStep`,ra.`partPinIsLessthenBOMPinStep`,ra.`tbdPartStep`,ra.`exportControlledStep`,ra.`restrictUseInBOMWithPermissionStep`,  \n" +
                "							ra.`isUnlockApprovedPart`,ra.`unknownPartStep`, ra.`defaultInvalidMFRStep`, ra.`restrictUseInBOMExcludingAliasStep`, ra.`restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "                            ra.`restrictUseExcludingAliasStep`, ra.`restrictUseExcludingAliasWithPermissionStep`, ra.`createByRoleId`, ra.`updateByRoleId`, ra.`deleteByRoleId`, ra.`approvedMountingType`,  \n" +
                "                            ra.`mismatchRequiredProgrammingStep`, ra.`mappingPartProgramStep`, ra.`suggestedByApplicationMsg`, ra.`suggestedByApplicationStep`,  \n" +
                "                            ra.`suggestedGoodPartStep`,ra.`suggestedGoodDistPartStep`,ra.`mismatchCustomPartStep`, ra.`mismatchCustpartRevStep`, ra.`mismatchCPNandCustpartRevStep`  \n" +
                "			FROM rfq_lineitems_alternatepart ra  \n" +
                "			JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE ra.partID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		 /* Copy Additional comment form Old BOM to New generated Assembly*/  \n" +
                "			INSERT INTO rfq_lineitems_additional_comment  \n" +
                "			(`lineID`,`description`,`rfqLineItemID`,`createdBy`,`createdAt`,`partID`)  \n" +
                "				SELECT rlc.lineID, rlc.description, rl.id `rfqLineItemID`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pnewAssyID `partID`  \n" +
                "				FROM rfq_lineitems_additional_comment rlc  \n" +
                "				JOIN rfq_lineitems ral ON ral.id = rlc.rfqLineItemID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "				JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "				WHERE rlc.partID = poldAssyID AND IFNULL(rlc.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		 /* Copy Approval comment for line level errors */  \n" +
                "			INSERT INTO rfq_lineitems_approval_comment  \n" +
                "			(`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`, `createdBy`,`createdAt`, `errorCode`,  \n" +
                "			`rfqLineItemsID`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "			SELECT rac.comment,rac.`approvalBy`,rac.`approvalDate`, rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,  \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode, rl.id `rfqLineItemsID`,  \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`  \n" +
                "			FROM rfq_lineitems_approval_comment rac  \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rac.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "	   /* Copy Approval comment for Alternete part level errors */  \n" +
                "			INSERT INTO `rfq_lineitems_approval_comment`  \n" +
                "			(`rfqLineItemsAlternatePartID`,`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`,  `createdBy`,`createdAt`,  \n" +
                "			`errorCode`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "			SELECT  rl.id `rfqLineItemsAlternatePartID`, rac.comment,rac.`approvalBy`,rac.`approvalDate`,  \n" +
                "					rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,  \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode,  \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`  \n" +
                "			FROM rfq_lineitems_approval_comment rac  \n" +
                "			JOIN rfq_lineitems_alternatepart ral ON ral.id = rac.rfqLineItemsAlternatePartID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems_alternatepart rl ON rl.partID = pnewAssyID AND rl.mfgPNID = ral.mfgPNID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;  \n" +
                "		   -- Have to add Part assembly relation entry manage  \n" +
                "		   CALL Sproc_CreatePartAssyBomRelationshipForAllParent (pnewAssyID, UserID);  \n" +
                "   END IF;  \n" +
                "  \n" +
                "	IF IFNULL(pIsBOM,FALSE) != TRUE THEN  \n" +
                "	   	IF IFNULL(pIsExistingRFQ ,0) = 0 THEN  \n" +
                "        SELECT salesCommissionTo INTO @salesCommissionTo FROM rfqforms WHERE id = (SELECT rfqrefID FROM rfq_assemblies WHERE id = pfromRFQAssyID);  \n" +
                "			INSERT INTO `rfqforms`(	`customerId`,`employeeID`,`isActive`,`quoteNote`,`createdBy`,`createdAt`,`updatedBy`,`salesCommissionTo`)  \n" +
                "					VALUES (pCustomerID, pEmployeeID, TRUE, \"\", UserID, fun_DatetimetoUTCDateTime(),UserID,@salesCommissionTo);  \n" +
                "			SELECT LAST_INSERT_ID() INTO pRfqFormID;  \n" +
                "		END IF;  \n" +
                "		IF (SELECT COUNT(1) FROM rfqType WHERE `name` = 'Repeat') = 0 THEN  \n" +
                "			INSERT INTO rfqType (`name`, `description`, `isActive`,`createdBy`,`createdAt`,`updatedBy`)  \n" +
                "				VALUES ('Repeat', 'Repeat Assembly', TRUE, UserID, fun_DatetimetoUTCDateTime(),UserID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO pRFQTypeID;  \n" +
                "		ELSE  \n" +
                "		       SELECT id INTO pRFQTypeID FROM rfqType WHERE `name` = 'Repeat';  \n" +
                "		END IF;  \n" +
                "		SELECT quoteInDate, quoteDueDate INTO pRFQInDate , pRFQDueDate  \n" +
                "			FROM rfq_assemblies  \n" +
                "		WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		SELECT DATEDIFF(pRFQDueDate, pRFQInDate) INTO pQuoteDateDiff;  \n" +
                "  \n" +
                "    /* Copy RFQ Assembly detail */  \n" +
                "		INSERT INTO `rfq_assemblies`  \n" +
                "        (`rfqrefID`,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,  \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,`createdBy`,`createdAt`,`updatedBy`,  \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`,`status`,`isBOMVerified`,`isReadyForPricing`,  \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`,`isSummaryComplete`,  \n" +
                "				`repeatExpectedQty`,`repeatFrequency`,`quoteFinalStatus`,`bomStatus`,`jobTypeID`,  \n" +
                "				`RFQTypeID`,`partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,  \n" +
                "				`additionalRequirement`,`quoteInDate`, `quoteDueDate`,  \n" +
                "				`copyRefRfqId`,`copyConfirmationDescription`,`quotePriority`)  \n" +
                "		SELECT pRfqFormID `rfqrefID` ,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,  \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`, UserID `updatedBy`,  \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`, 1 ,`isBOMVerified`,`isReadyForPricing`,  \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`, 0 ,  \n" +
                "				`repeatExpectedQty`,`repeatFrequency`, 1 ,`bomStatus`,`jobTypeID`,  \n" +
                "				pRFQTypeID `RFQTypeID`,pnewAssyID `partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,  \n" +
                "				`additionalRequirement`,fun_DatetimetoUTCDateTime() `quoteInDate`,DATE_ADD(fun_DatetimetoUTCDateTime(), INTERVAL pQuoteDateDiff DAY) `quoteDueDate`,  \n" +
                "				pfromRFQAssyID `copyRefRfqId`, pCustomerApprovalComment `copyConfirmationDescription`, `quotePriority`  \n" +
                "		FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		SELECT LAST_INSERT_ID() INTO pToRFQAssyID;  \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity detail */  \n" +
                "		INSERT INTO `rfq_assy_quantity`(`rfqAssyID`, `requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,  \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,  \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,  \n" +
                "				`createdBy`,`createdAt`,`quantityType`)  \n" +
                "		SELECT pToRFQAssyID `rfqAssyID`,`requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,  \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,  \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,  \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,`quantityType`  \n" +
                "		FROM rfq_assy_quantity WHERE rfqAssyID = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0  \n" +
                "        AND rfqPriceGroupId IS NULL AND rfqPriceGroupDetailId IS NULL;  \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity turn time detail */  \n" +
                "        INSERT INTO `rfq_assy_quantity_turn_time`(`rfqAssyQtyID`,`turnTime`,`unitOfTime`,`createdBy`,`createdAt`)  \n" +
                "		SELECT rq.`Id`, rqt.`turnTime`, rqt.`unitOfTime`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "		FROM rfq_assy_quantity_turn_time rqt  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0 AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL  \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;  \n" +
                "	/* Copy RFQ Assembly Quantity Price selection setting from part costing */  \n" +
                "        INSERT INTO rfq_assy_quantity_price_selection_setting  \n" +
                "        (`qtyID`,	`stock`,	`price`, `isCheckRequiredQty`,	`isLeadTime`, `createdBy`,	`createdAt`,	`remark`,  \n" +
                "			`stockPercentage`,	`packagingID`,`settingType`,`leadTime`)  \n" +
                "		SELECT rq.`Id` `qtyID`, rqt.`stock`, rqt.`price`,  \n" +
                "				rqt.`isCheckRequiredQty`,	rqt.`isLeadTime`,  \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rqt.`remark`,  \n" +
                "				rqt.`stockPercentage`,	rqt.`packagingID`, rqt.`settingType`,rqt.`leadTime`  \n" +
                "		FROM rfq_assy_quantity_price_selection_setting rqt  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.qtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID =  pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;  \n" +
                "	# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                "		(`lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `rfqLineItemID`, `uomID`,  \n" +
                "		 `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`,  \n" +
                "		`numOfPosition`,`consolidatedLineItemIDs`, `refDesig`,`numOfRows`,`consolidatedpartlineID`,`isqpaMismatch`,`restrictCPNUseInBOMStep`,`restrictCPNUsePermanentlyStep`,`restrictCPNUseWithPermissionStep`,`custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
                "		SELECT  rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, pToRFQAssyID `rfqAssyID`,  \n" +
                "				rcl.`rfqLineItemID`, rcl.`uomID`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,  \n" +
                "					rcl.`qpa`,fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`numOfPosition`,  \n" +
                "					fun_getconsolidatedlineitems(rcl.id,pfromRFQAssyID,pnewAssyID, poldAssyID) `consolidatedLineItemIDs` ,  \n" +
                "					rcl.`refDesig`,rcl.`numOfRows`,rcl.`consolidatedpartlineID`,rcl.`isqpaMismatch`,rcl.`restrictCPNUseInBOMStep`,rcl.`restrictCPNUsePermanentlyStep`,rcl.`restrictCPNUseWithPermissionStep`,rcl.`custPNID`,  \n" +
                "                    rcl.`consolidateRestrictPartDetail`,rcl.`consolidatedPartWithFlagDetail`  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "		WHERE rcl.rfqAssyID = pfromRFQAssyID AND rcl.deletedAt IS NULL;  \n" +
                "  \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`, `customerApproval`,isdeleted,deletedAt,deletedBy,  \n" +
                "                    `restrictUseInBOMStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`restrictUseInBOMWithPermissionStep`,  \n" +
                "                    `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "					`restrictUseInBOMExcludingAliasStep`,`restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`,`mismatchMountingTypeStep`)  \n" +
                "		SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`, UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, rap.`mfgCodeID`,  \n" +
                "				com.PIDCode `PIDCode` , rap.`customerApproval`, rcl.isdeleted, rcl.deletedAt, rcl.deletedBy,rap.`restrictUseInBOMStep`,  \n" +
                "                rap.`restrictUseWithPermissionStep`,rap.`restrictUsePermanentlyStep`,rap.`restrictUseInBOMWithPermissionStep`,  \n" +
                "                rap.`restrictUseExcludingAliasStep`,rap.`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "				rap.`restrictUseInBOMExcludingAliasStep`,rap.`restrictUseInBOMExcludingAliasWithPermissionStep`,rap.`approvedMountingType`,rap.`mismatchMountingTypeStep`  \n" +
                "		FROM rfq_lineitems_alternatepart rap  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
                "		JOIN component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0  \n" +
                "		WHERE rcl.rfqAssyId = pToRFQAssyID  \n" +
                "		GROUP BY rap.mfgPNID, rap.rfqLineItemsID;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS result;  \n" +
                "			CREATE TEMPORARY TABLE result  \n" +
                "			SELECT rcl.lineID, raq.requestQty, rcl.qpa, rcl.rfqLineItemID, rlq.*  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rlq  \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = pfromRFQAssyID  \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID  \n" +
                "			WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = pfromRFQAssyID;  \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly  \n" +
                "  					DROP TEMPORARY TABLE IF EXISTS mapping;  \n" +
                "					CREATE TEMPORARY TABLE mapping  \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b  \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),  \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b  \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty  \n" +
                "					FROM rfq_assy_quantity a  \n" +
                "					WHERE a.rfqAssyID = pToRFQAssyID;  \n" +
                "  \n" +
                "    # copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`,  \n" +
                "					`pricingSuppliers`, `apiLead`,`componentID`,`packaging`,`rfqQtySupplierID`,  \n" +
                "					`quoteQty`,`pricenotselectreason`,`availableInternalStock`,`availableInternalStockTimeStamp`,  \n" +
                "					`isBomUpdate`,`LOAprice`,`quoteQtyEach`, `unitEachPrice`,`supplierEachStcok`)  \n" +
                "					SELECT rq.id `qtyID`, R.finalPrice `finalPrice`, cl.id `consolidateID`,  \n" +
                "					fun_DatetimetoUTCDateTime() `createdAt`, UserID `createdBy`, R.unitPrice `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`,  \n" +
                "					R.`pricingSuppliers`,R.`apiLead`,R.`componentID`,R.`packaging`,R.`rfqQtySupplierID`,  \n" +
                "					R.`quoteQty`,R.`pricenotselectreason`,R.`availableInternalStock`,R.`availableInternalStockTimeStamp`,  \n" +
                "					R.`isBomUpdate`,R.`LOAprice` ,R.`quoteQtyEach`, R.`unitEachPrice`,R.`supplierEachStcok`  \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id AND clq.isDeleted = 0  \n" +
                "					LEFT JOIN result R ON R.rfqLineItemID = cl.rfqLineItemID  \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty  \n" +
                "					WHERE cl.rfqAssyID = pToRFQAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty;  \n" +
                "  \n" +
                "		# Start Labor details	copy  \n" +
                "		INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
                "				    (`rfqAssyID`, `partID`, `subAssyID`, `perBuildQty`, `bomInternalVersion`,  \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,  \n" +
                "				     `originalQPA`, `isMismatchQPA`, `parPartID`, `level`, `isInstall`,  \n" +
                "				     `createByRoleId`, `updateByRoleId`)  \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`, rl.`partID`, rl.`subAssyID`, rl.`perBuildQty`, rl.`bomInternalVersion`,  \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					rl.`originalQPA`, rl.`isMismatchQPA`, rl.`parPartID`, rl.`level`, rl.`isInstall`,  \n" +
                "					rl.`createByRoleId`, rl.`updateByRoleId` FROM rfq_labor_assy_qpa_detail rl  \n" +
                "				WHERE rl.rfqAssyID = pfromRFQAssyID AND rl.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
                "				    (`rfqAssyID`, `partID`, `mountingTypeID`, `lineCount`,  \n" +
                "				     `totalQPA`, `isDeleted`, `createdBy`,  \n" +
                "				     `createdAt`, `subAssyID`,  \n" +
                "				     `isInstall`, `createByRoleId`, `updateByRoleId`)  \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`,rlm.`partID`, rlm.`mountingTypeID`, rlm.`lineCount`,  \n" +
                "				     rlm.`totalQPA`, 0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rlm.`subAssyID`,  \n" +
                "				     rlm.`isInstall`, rlm.`createByRoleId`, rlm.`updateByRoleId`  \n" +
                "				FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlm  \n" +
                "				WHERE rlm.rfqAssyID = pfromRFQAssyID AND rlm.isDeleted = 0;  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
                "				    (`rfqAssyQtyID`, `rfqAssyBOMMountingID`, `price`, `perAssyPrice`,  \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,  \n" +
                "				     `isPricePending`, `overHeadPrice`, `overHeadAssyPrice`)  \n" +
                "			SELECT rq.id `rfqAssyQtyID`, lmc.id `rfqAssyBOMMountingID`,  rlc.`price`, rlc.`perAssyPrice`,  \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					rlc.`isPricePending`, rlc.`overHeadPrice`, rlc.`overHeadAssyPrice`  \n" +
                "					FROM rfq_assy_qtywise_bom_laborcosting_detail rlc  \n" +
                "					JOIN rfq_assy_quantity raq ON raq.id = rlc.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL  \n" +
                "					LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lm ON lm.id = rlc.rfqAssyBOMMountingID AND lm.rfqAssyID = pfromRFQAssyID AND IFNULL(lm.isDeleted,0) = 0  AND lm.mountingTypeID IS NOT NULL  \n" +
                "					LEFT JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lmc ON lmc.mountingTypeID = lm.mountingTypeID AND lmc.rfqAssyID = pToRFQAssyID AND IFNULL(lmc.isDeleted,0) = 0 AND lmc.mountingTypeID IS NOT NULL  \n" +
                "					WHERE IFNULL(rlc.isDeleted, 0) = 0;  \n" +
                "		# End Labor details copy  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;  \n" +
                "  \n" +
                "					SELECT liveVersion INTO @internalVerion  \n" +
                "                    FROM component  \n" +
                "                    WHERE id = pnewAssyID;  \n" +
                "  \n" +
                "					UPDATE rfq_assemblies SET  partCostingBOMInternalVersion = @internalVerion  \n" +
                "                    WHERE  id = pToRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SELECT pToRFQAssyID;  \n" +
                "    IF IFNULL(pIsBOM,FALSE) != TRUE THEN  \n" +
                "		SELECT rfqrefID INTO vRFQID FROM rfq_assemblies WHERE id = pToRFQAssyID;  \n" +
                "		CALL Sproc_CopyRFQAssyDocFolderToNewRFQAssy(pfromRFQAssyID,pToRFQAssyID,UserID);  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pfromRFQAssyID, 1);  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pToRFQAssyID, 1);  \n" +
                "        CALL Sproc_CreateCostSummaryEntry (vRFQID,UserID,pRoleID);  \n" +
                "    END IF;  \n" +
                "	-- SELECT * FROM rfq_lineitems WHERE partID = pnewAssyID AND isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteSubmittedSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteSubmittedSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE vrfqSubmittedQuoteID INT;  \n" +
                "	DECLARE vPartID INT;  \n" +
                "	DECLARE vMiscData LongText;  \n" +
                "  \n" +
                "			select max(id) into vrfqSubmittedQuoteID  from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;  \n" +
                "			SELECT partID into vPartID FROM rfq_assemblies WHERE id = prfqAssyID;  \n" +
                "  \n" +
                "		-- insert quote summary details  \n" +
                "			INSERT INTO `rfq_assy_quote_submitted_assydetail`  \n" +
                "			(`refSubmittedQuoteID`, `rfqAssyID`, `qty`, `turnTime`, `turnType`, `materialCost`, `materialLeadTime`, `laborCost`, `laborLeadTime`,  \n" +
                "			`additionalCost`, `customItemLeadTime`, `unitPrice`, `totalLeadTime`, `extendedCost`, `excessMaterialCost`, `additionalCostDetail`, `nreDays`, `nreCost`,  \n" +
                "			`toolingCost`, `toolingDays`, `nretoolingdescription`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`,`priceGroup`,`rfqPriceGroupId`,`allCost`,`allDays`)  \n" +
                "			SELECT sb.id `refSubmittedQuoteID`, qo.rfqAssyID `rfqAssyID`, requestedQty `qty`, turntime `turnTime`, timeType `turnType`,  \n" +
                "			qo.materialCost, qo.materialDays AS materialLeadTime,  \n" +
                "			qo.laborCost, qo.laborDays AS laborLeadTime,  \n" +
                "			(IFNULL(qo.overheadUnitPrice,0) + fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead')) additionalCost,  \n" +
                "			(IFNULL(qo.overheadDay,0) + fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead'))`customItemLeadTime`,  \n" +
                "			(qo.materialCost + qo.laborCost + IFNULL(qo.overheadUnitPrice,0) + IFNULL(qo.allCost,0) +fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead')) `unitPrice`,  \n" +
                "			(qo.materialDays+  \n" +
                "			(CASE WHEN (qo.laborDays>fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead'))  \n" +
                "			THEN qo.laborDays  \n" +
                "			ELSE fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead') END  \n" +
                "			)) `totalLeadTime`,  \n" +
                "			(qo.requestedQty *( qo.materialCost +qo.laborCost + IFNULL(qo.overheadUnitPrice,0) + IFNULL(qo.allCost,0) + fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead'))) extendedCost,  \n" +
                "			qo.excessQtyTotalPrice `excessMaterialCost`, NULL, qo.nreDays, qo.nreCost , qo.toolingCost, qo.toolingDays,  \n" +
                "			fun_getNREToolingCostDescriptionbyQuoteID(qo.id, qo.rfqAssyID) AS nretoolingdescription, pUserID `createdBy`, fun_DatetimetoUTCDateTime(),pUserID `updatedBy`,fun_DatetimetoUTCDateTime(),  \n" +
                "			rpg.`name`,rpg.id, qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quotations qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			LEFT JOIN rfq_price_group rpg ON rpg.id = qo.rfqPriceGroupID  \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID and refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "  \n" +
                "		-- insert standards details from component standard details to rfq assy standard detail  \n" +
                "			INSERT INTO `rfq_assy_standard_class_detail`  \n" +
                "			(`refSubmittedQuoteID`, `standardID`, `standardClassIDs`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`)  \n" +
                "			SELECT vrfqSubmittedQuoteID, certificateStandardID `standardID`,ClassID `standardClassIDs`,  \n" +
                "			pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
                "			FROM component_standard_details csd  \n" +
                "			WHERE deletedAt IS NULL AND componentID = vPartID;  \n" +
                "  \n" +
                "		-- Insert Price Group detail from rfq price group to submitted pricegroup history  \n" +
                "			INSERT INTO `rfq_assy_submitted_price_group_detail`  \n" +
                "			(`refSubmittedQuoteID`,`rfqPriceGroupId`,`name`,`refRFQID`,`rfqAssyID`,`qty`,`turnTime`,`unitOfTime`,  \n" +
                "			`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "			SELECT vrfqSubmittedQuoteID, rpg.id, rpg.name, ra.rfqrefID AS refRFQID, ra.id AS rfqAssyID, rpgd.qty, rpgd.turnTime, rpgd.unitOfTime,  \n" +
                "			pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() `updatedAt`,pRoleID `createByRoleId`,pRoleID `updateByRoleId`  \n" +
                "			FROM rfq_assemblies ra  \n" +
                "			JOIN rfq_price_group rpg ON rpg.refRFQID = ra.rfqrefID AND rpg.isDeleted =0  \n" +
                "			LEFT JOIN rfq_price_group_detail rpgd ON rpgd.rfqPriceGroupID = rpg.id AND rpgd.rfqAssyID = ra.id AND rpgd.isDeleted = 0  \n" +
                "			JOIN component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE ra.rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID) AND ra.isDeleted = 0  \n" +
                "			ORDER BY rpg.id;  \n" +
                "  \n" +
                "		-- Copy rfq_lineitems data for BOM history  \n" +
                "			INSERT INTO `rfq_lineitems_history`  \n" +
                "			(`refSubmittedQuoteID`,`rfqAssyID`,`lineID`,`qpa`,`refDesig`,`custPN`,`custPNID`,`uomID`,`description`,`isInstall`,`isPurchase`,`isNotRequiredKitAllocation`,  \n" +
                "			`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`customerRev`,`customerDescription`,`numOfPosition`,`dnpQty`,`dnpDesig`,`org_lineID`,`org_qpa`,  \n" +
                "			`org_refDesig`,`org_custPN`,`org_uomName`,`org_isInstall`,`org_isPurchase`,`org_customerRev`,`org_customerDescription`,`org_numOfPosition`,  \n" +
                "			`qpaDesignatorStep`,`customerPartDesc`,`org_customerPartDesc`,`mergeLines`,`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "			`partID`,`requireMountingTypeStep`,`requireFunctionalTypeStep`,`programingStatus`,`refDesigCount`,`isObsoleteLine`,`cust_lineID`, `dnpDesigCount`)  \n" +
                "			SELECT vrfqSubmittedQuoteID `refSubmittedQuoteID`, prfqAssyID `rfqAssyID`,`lineID`,`qpa`,`refDesig`,  \n" +
                "			`custPN`,`custPNID`,`uomID`,`description`,`isInstall`,`isPurchase`,`isNotRequiredKitAllocation`,  \n" +
                "            `isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`customerRev`,`customerDescription`,`numOfPosition`, `dnpQty`,`dnpDesig`,`org_lineID`,`org_qpa`,  \n" +
                "			`org_refDesig`,`org_custPN`,`org_uomName`,`org_isInstall`,`org_isPurchase`,`org_customerRev`,`org_customerDescription`,`org_numOfPosition`,  \n" +
                "			`qpaDesignatorStep`,`customerPartDesc`,`org_customerPartDesc`,`mergeLines`,`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "			`partID`,`requireMountingTypeStep`,`requireFunctionalTypeStep`,`programingStatus`,`refDesigCount`,`isObsoleteLine`,`cust_lineID`, `dnpDesigCount`  \n" +
                "			 FROM rfq_lineitems rl  \n" +
                "			 WHERE partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = vPartID AND isDeleted = 0) and rl.isdeleted = 0;  \n" +
                "  \n" +
                "		-- Copy rfq_lineitems_alternatepart data for BOM history  \n" +
                "			INSERT INTO `rfq_lineitems_alternatepart_history`  \n" +
                "			(`rfqLineItemsID`,`distributor`,`distMfgCodeID`,`distPN`,`distMfgPNID`,`mfgCode`,`mfgCodeID`,`mfgPN`,`mfgPNID`,`description`,  \n" +
                "			`RoHSStatusID`,`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`refSubmittedQuoteID`,`mfgVerificationStep`,`mfgDistMappingStep`,`mfgCodeStep`,`distVerificationStep`,`distCodeStep`,`getMFGPNStep`,`obsoletePartStep`,  \n" +
                "			`mfgGoodPartMappingStep`,`rfqAssyID`,`mfgPNStep`,`distPNStep`,`customerApproval`,`customerApprovalBy`,`customerApprovalDate`,`org_mfgCode`,  \n" +
                "			`org_mfgPN`,`org_distributor`,`org_distPN`,`badMfgPN`,`distGoodPartMappingStep`,`nonRohsStep`,`epoxyStep`,  \n" +
                "			`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,`parttypeID`,`mountingtypeID`,`partcategoryID`,`partID`,`userData1`,`userData2`,  \n" +
                "			`userData3`,`userData4`,`userData5`,`userData6`,`userData7`,`userData8`,`userData9`,`userData10`,`mismatchMountingTypeStep`,  \n" +
                "			`mismatchFunctionalCategoryStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`pickupPadRequiredStep`,`matingPartRquiredStep`,  \n" +
                "			`driverToolsRequiredStep`,`functionalTestingRequiredStep`,`mismatchValueStep`,`mismatchPackageStep`,`mismatchToleranceStep`,`mismatchTempratureStep`,  \n" +
                "			`mismatchPowerStep`,`uomMismatchedStep`,`programingRequiredStep`,`mismatchColorStep`,`isCustomerUnAppoval`,`customerUnAppovalBy`,  \n" +
                "			`customerUnAppovalDate`,`restrictUseInBOMStep`,`approvedMountingType`,`mismatchRequiredProgrammingStep`,`mappingPartProgramStep`,  \n" +
                "            `suggestedByApplicationMsg`, `suggestedByApplicationStep`,`mismatchProgrammingStatusStep`, `mismatchCustpartRevStep`, `mismatchCPNandCustpartRevStep`)  \n" +
                "			SELECT  \n" +
                "			(  \n" +
                "				SELECT id FROM rfq_lineitems_history  \n" +
                "				WHERE partID = rl.partID AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = vrfqSubmittedQuoteID and lineID = rl.lineID order by id desc limit 1  \n" +
                "			) `rfqLineItemsID`, rla.`distributor`,rla.`distMfgCodeID`,rla.`distPN`,rla.`distMfgPNID`,rla.`mfgCode`,rla.`mfgCodeID`,rla.`mfgPN`,rla.`mfgPNID`,rla.`description`,  \n" +
                "			rla.`RoHSStatusID`,rla.`isDeleted`,rla.`createdBy`,rla.`createdAt`,rla.`updatedBy`,rla.`updatedAt`,rla.`deletedBy`,  \n" +
                "			rla.`deletedAt`,vrfqSubmittedQuoteID `refSubmittedQuoteID`,rla.`mfgVerificationStep`,rla.`mfgDistMappingStep`,  \n" +
                "			rla.`mfgCodeStep`,rla.`distVerificationStep`,rla.`distCodeStep`,rla.`getMFGPNStep`,rla.`obsoletePartStep`,  \n" +
                "			rla.`mfgGoodPartMappingStep`, prfqAssyID `rfqAssyID`,rla.`mfgPNStep`,rla.`distPNStep`,rla.`customerApproval`,rla.`customerApprovalBy`,rla.`customerApprovalDate`,rla.`org_mfgCode`,  \n" +
                "			rla.`org_mfgPN`,rla.`org_distributor`,rla.`org_distPN`,rla.`badMfgPN`,rla.`distGoodPartMappingStep`,rla.`nonRohsStep`,rla.`epoxyStep`,  \n" +
                "			rla.`invalidConnectorTypeStep`,rla.`duplicateMPNInSameLineStep`,rla.`parttypeID`,rla.`mountingtypeID`,rla.`partcategoryID`,rla.`partID`,rla.`userData1`,rla.`userData2`,  \n" +
                "			rla.`userData3`,rla.`userData4`,rla.`userData5`,rla.`userData6`,rla.`userData7`,rla.`userData8`,rla.`userData9`,rla.`userData10`,rla.`mismatchMountingTypeStep`,  \n" +
                "			rla.`mismatchFunctionalCategoryStep`,rla.`restrictUseWithPermissionStep`,rla.`restrictUsePermanentlyStep`,rla.`pickupPadRequiredStep`,rla.`matingPartRquiredStep`,  \n" +
                "			rla.`driverToolsRequiredStep`,rla.`functionalTestingRequiredStep`,rla.`mismatchValueStep`,rla.`mismatchPackageStep`,rla.`mismatchToleranceStep`,rla.`mismatchTempratureStep`,  \n" +
                "			rla.`mismatchPowerStep`,rla.`uomMismatchedStep`,rla.`programingRequiredStep`,rla.`mismatchColorStep`,rla.`isCustomerUnAppoval`,rla.`customerUnAppovalBy`,  \n" +
                "			rla.`customerUnAppovalDate`,rla.`restrictUseInBOMStep`, rla.`approvedMountingType`, rla.`mismatchRequiredProgrammingStep`, rla.`mappingPartProgramStep`,  \n" +
                "            rla.`suggestedByApplicationMsg`, rla.`suggestedByApplicationStep` , rla.`mismatchProgrammingStatusStep`, rla.`mismatchCustpartRevStep`, rla.`mismatchCPNandCustpartRevStep`  \n" +
                "			FROM rfq_lineitems_alternatepart rla  \n" +
                "			JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "			WHERE rla.partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = vPartID AND isDeleted = 0) and rla.isDeleted = 0;  \n" +
                "  \n" +
                "		-- Copy part_sub_assy_relationship data for BOM history  \n" +
                "            INSERT INTO `rfq_assywise_part_sub_assy_relationship_history`  \n" +
                "			(`rfqAssyID`,`partID`,`prPerPartID`,`refSubmittedQuoteID`,`lineitemID`,`prPartLineItemID`,`level`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`)  \n" +
                "			SELECT prfqAssyID rfqAssyID, a.partID, a.prPerPartID, vrfqSubmittedQuoteID,  \n" +
                "			(  \n" +
                "				SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart_history a  \n" +
                "				WHERE mfgPNID = prPerPartID AND partID = (SELECT partID FROM rfq_lineitems WHERE id = a.lineitemID) AND refSubmittedQuoteID = vrfqSubmittedQuoteID  \n" +
                "			) lineitemID,  \n" +
                "			(  \n" +
                "				SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart_history a  \n" +
                "				WHERE mfgPNID = (SELECT partID FROM rfq_lineitems WHERE id = a.lineitemID)  \n" +
                "				AND partID = (SELECT partID FROM rfq_lineitems WHERE id = a.prPartLineItemID) AND refSubmittedQuoteID = vrfqSubmittedQuoteID  \n" +
                "			) prPartLineItemID,  \n" +
                "			a.level, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`  \n" +
                "            FROM part_sub_assy_relationship a  \n" +
                "            WHERE partId = vPartID and isDeleted = 0;  \n" +
                "  \n" +
                "		-- Prepare String for RFQ MISC tab data for history  \n" +
                "			SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') into vMiscData  \n" +
                "			FROM (  \n" +
                "					SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "					FROM (  \n" +
                "							SELECT refTransID,(CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "							CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "							FROM dataelement_transactionvalues  \n" +
                "							WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID)  \n" +
                "					) dataelementForms  \n" +
                "					GROUP BY subFormName  \n" +
                "			) a;  \n" +
                "  \n" +
                "	-- Update Assembly status  \n" +
                "	    UPDATE rfq_assemblies_quotation_submitted raqs  \n" +
                "        SET  \n" +
                "        raqs.BOMIssues = fun_getQuoteSubjectToFollowing(prfqAssyID),  \n" +
                "        raqs.RFQMISCData = vMiscData  \n" +
                "        WHERE raqs.id = vrfqSubmittedQuoteID;  \n" +
                "  \n" +
                "	-- Update Assembly status  \n" +
                "	    UPDATE rfq_assemblies SET `STATUS` = 2, `quoteFinalStatus` = 3 WHERE `id` = prfqAssyID;  \n" +
                "  \n" +
                "	-- insert quote is subject to following detail  \n" +
                "		CALL Sproc_CreateQuoteIsSubjetToFollowingDetails(prfqAssyID,pUserID);  \n" +
                "	-- select Last inserted data  \n" +
                "		SELECT * FROM rfq_assy_standard_class_detail WHERE refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "		SELECT * FROM rfq_assy_quote_submitted_assydetail WHERE rfqAssyID = prfqAssyID AND refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "Declare pisMPNAddedinCPN tinyint;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID , rla.isMPNAddedinCPN  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0  \n" +
                "    );  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc, a.isMPNAddedinCPN  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc, pisMPNAddedinCPN  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 and pisMPNAddedinCPN = 1 and currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MPN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						IF(currMFGPNID > 0 and pisMPNAddedinCPN = 1) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MPN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 and pisMPNAddedinCPN = 1 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MPN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5298,'2.00','V1','User Story 36767: BOM CPN new cases need to handle  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5298:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(  \n" +
                " pPartID INT  \n" +
                "	) RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE pValidCount INT;  \n" +
                "	DECLARE pTotalCount INT;  \n" +
                "	DECLARE pProgress INT;  \n" +
                "	SET pProgress = 0;  \n" +
                "	-- pTotal count  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l  \n" +
                "	WHERE l.partID = pPartID AND  \n" +
                "	l.isDeleted = 0;  \n" +
                "  \n" +
                "	 -- p valid count  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (  \n" +
                "			SELECT  l.id AS lineID,  \n" +
                "				max(CASE  \n" +
                "					WHEN  \n" +
                "						IFNULL(l.qpaDesignatorStep,1) = 1 AND  \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND  \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND  \n" +
                "						IFNULL(l.dnpQPARefDesStep,1) = 1 AND  \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND  \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND  \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND  \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND  \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND  \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND  \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND  \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND  \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND  \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND  \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND  \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND  \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND  \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND  \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND  \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND  \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND  \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND  \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND  \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND  \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND  \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND  \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND  \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND  \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1)  \n" +
                "then 1 else 0 end)  \n" +
                " AND  \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1)  \n" +
                "then 1 else 0 end)  \n" +
                " AND  \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND  \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND  \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND  \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND  \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND  \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND  \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND  \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND  \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND  \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND  \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND  \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND  \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND  \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND  \n" +
                "						IFNULL(p.programingRequiredStep,1) = 1     AND  \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND  \n" +
                "						p.restrictUseInBOMStep = 0   AND  \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND  \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND  \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND  \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND  \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND  \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND  \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND  \n" +
                "                        (case when ifnull(mismatchCPNandCustpartRevStep,1) = 1 or (ifnull(mismatchCPNandCustpartRevStep,1) = 0 and IFNULL(p.customerApproval, 'A')  = 'A') then 1 else 0 end) and  \n" +
                "						(CASE WHEN  (ifnull(mismatchCustpartRevStep,1) = 1 OR ( ifnull(mismatchCustpartRevStep,1) = 0 and IFNULL(p.mismatchMountingTypeStep,0) = 0 and IFNULL(p.mismatchFunctionalCategoryStep,0) = 0))  \n" +
                "							THEN 1 ELSE 0 END) and  \n" +
                "						p.mappingPartProgramStep = 1   AND  \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END  \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END  \n" +
                "					THEN 1  \n" +
                "					ELSE 0  \n" +
                "				END) AS ProgressCount  \n" +
                "				FROM rfq_lineitems l  \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID  \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL  \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1  \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0  \n" +
                "				GROUP BY l.lineID  \n" +
                "		) AS b  \n" +
                "		WHERE b.ProgressCount=1;  \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN  \n" +
                "		SET pProgress = 0;  \n" +
                "	ELSE  \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);  \n" +
                "	END IF;  \n" +
                "	RETURN pProgress;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBOMLineCleanStatus`;  \n" +
                "CREATE FUNCTION `fun_getBOMLineCleanStatus`(  \n" +
                "	pLineId INT  \n" +
                ") RETURNS tinyint  \n" +
                "BEGIN  \n" +
                "	DECLARE v_LineCleanStatus TINYINT;  \n" +
                "	SELECT 	MAX(a.ProgressCount) INTO v_LineCleanStatus FROM (  \n" +
                "	SELECT  	l.id AS lineID, p.id,  \n" +
                "			CASE  \n" +
                "				WHEN  \n" +
                "					IFNULL(l.qpaDesignatorStep,0) = 1 AND  \n" +
                "					IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND  \n" +
                "					IFNULL(l.customerApprovalForBuyStep,1) = 1 AND  \n" +
                "					IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND  \n" +
                "					IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND  \n" +
                "					IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND  \n" +
                "					IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND  \n" +
                "					IFNULL(l.requireFunctionalTypeStep,0) = 1 AND  \n" +
                "					IFNULL(l.requireMountingTypeStep,0) = 1 AND  \n" +
                "					IFNULL(p.mfgVerificationStep,0) = 1 AND  \n" +
                "					IFNULL(p.mfgDistMappingStep,0) = 1 AND  \n" +
                "					IFNULL(p.mfgCodeStep,0) = 1 AND  \n" +
                "					IFNULL(p.distVerificationStep,0) = 1 AND  \n" +
                "					IFNULL(p.distCodeStep,0) = 1 AND  \n" +
                "					IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND  \n" +
                "					IFNULL(p.mfgPNStep,0) = 1 AND  \n" +
                "					IFNULL(p.distPNStep,0) = 1 AND  \n" +
                "					IFNULL(p.distGoodPartMappingStep,0) = 1 AND  \n" +
                "					IFNULL(p.nonRohsStep,0) = 1 AND  \n" +
                "					IFNULL(p.epoxyStep,0) = 1  AND  \n" +
                "					IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND  \n" +
                "					IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND  \n" +
                "					IFNULL(p.obsoletePartStep,0) = 1   AND  \n" +
                "					IFNULL(p.mismatchMountingTypeStep,0) = 1   AND  \n" +
                "					IFNULL(p.invalidConnectorTypeStep,0) = 1   AND  \n" +
                "					IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND  \n" +
                "					IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND  \n" +
                "					IFNULL(p.tbdPartStep,0) = 1   AND  \n" +
                "					IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND  \n" +
                "					IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND  \n" +
                "					IFNULL(p.pickupPadRequiredStep,0) = 1   AND  \n" +
                "					IFNULL(p.matingPartRquiredStep,0) = 1    AND  \n" +
                "					IFNULL(p.driverToolsRequiredStep,0) = 1   AND  \n" +
                "					IFNULL(p.functionalTestingRequiredStep,0) = 1    AND  \n" +
                "					IFNULL(p.uomMismatchedStep,0) = 1   AND  \n" +
                "					IFNULL(p.programingRequiredStep,0) = 1     AND  \n" +
                "					IFNULL(p.restrictUseInBOMStep, 0) = 0   AND  \n" +
                "					-- IFNULL(p.restrictUseInBOMWithPermissionStep, 0) = 0   AND  \n" +
                "					IFNULL(p.customerApproval, 'A') != 'P'  AND  \n" +
                "					CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL) OR ((l.qpa IS NULL OR l.qpa = 0) AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END  \n" +
                "				THEN 1  \n" +
                "				ELSE 0  \n" +
                "			END AS ProgressCount  \n" +
                "	FROM 		rfq_lineitems_alternatepart p  \n" +
                "	LEFT OUTER JOIN rfq_lineitems l ON p.rfqLineItemsID = l.id  \n" +
                "	WHERE 		l.isDeleted = 0 AND p.isDeleted = 0  \n" +
                "					AND p.mfgCodeID IS NOT NULL  \n" +
                "					AND p.mfgPNID IS NOT NULL  \n" +
                "					AND l.lineID IS NOT NULL  \n" +
                "					AND p.id = pLineId) AS a  \n" +
                "	GROUP BY 	a.lineID;  \n" +
                "  \n" +
                "	RETURN v_LineCleanStatus;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBOMLineCleanStatusErrorCategoryWise`;  \n" +
                "CREATE FUNCTION `fun_getBOMLineCleanStatusErrorCategoryWise`(  \n" +
                "	pLineItemAlternatePartId INT,  \n" +
                "	pLineItemId INT,  \n" +
                "	pRefUMID INT,  \n" +
                "	pAssyId INT,  \n" +
                "	pErrorCategoryId INT  \n" +
                ") RETURNS tinyint  \n" +
                "BEGIN  \n" +
                "	DECLARE v_LineCleanStatus TINYINT;  \n" +
                "	DECLARE v_CategoryIds VARCHAR(10000);  \n" +
                "	DECLARE v_LineItemAlternatePartId VARCHAR(10000);  \n" +
                "	DECLARE v_CPNLineItemAlternatePartId VARCHAR(10000);  \n" +
                "	DECLARE v_MfrPnId INT;  \n" +
                "	DECLARE v_MfrPkgAliesIds VARCHAR(1000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise AS  \n" +
                "	SELECT 		err.id, err.logicID, err.errorCode  \n" +
                "	FROM 		rfq_error_code_category_mapping map  \n" +
                "	INNER JOIN 	rfq_lineitems_errorcode err ON err.id = map.errorCodeId AND err.isDeleted = 0  \n" +
                "	WHERE 		map.isDeleted = 0 AND map.categoryID = pErrorCategoryId;  \n" +
                "  \n" +
                "	IF (pErrorCategoryId = 2) THEN  \n" +
                "		IF ((SELECT COUNT(1) FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise WHERE logicID = 12 AND errorCode = 'CA') = 0) THEN  \n" +
                "			INSERT INTO temp_fun_getBOMLineCleanStatusErrorCategoryWise (id, logicID, errorCode)  \n" +
                "			SELECT 		err.id, err.logicID, err.errorCode  \n" +
                "			FROM 		rfq_lineitems_errorcode err  \n" +
                "			WHERE 		err.isDeleted = 0  \n" +
                "						AND err.logicID = 12  \n" +
                "						AND err.errorCode = 'CA';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(logicID) INTO v_CategoryIds FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise;  \n" +
                "  \n" +
                "	IF (pLineItemAlternatePartId IS NULL AND (pLineItemId IS NOT NULL AND pRefUMID IS NOT NULL AND pAssyId IS NOT NULL)) THEN  \n" +
                "		SELECT 	refcompid INTO v_MfrPnId  \n" +
                "		FROM 	component_sid_stock  \n" +
                "		WHERE 	id = pRefUMID AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT 		GROUP_CONCAT(IFNULL(cp.id, c.id)) INTO v_MfrPkgAliesIds  \n" +
                "		FROM 		component c  \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "		WHERE 		c.id = v_MfrPnId  \n" +
                "					AND c.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT 	GROUP_CONCAT(id) INTO v_LineItemAlternatePartId  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	rfq_lineitems_alternatepart  \n" +
                "				WHERE 	isDeleted = 0  \n" +
                "						AND rfqLineItemsID = pLineItemId  \n" +
                "						AND partID = pAssyId  \n" +
                "						AND FIND_IN_SET(mfgPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
                "				UNION  \n" +
                "				SELECT 	id  \n" +
                "				FROM  	rfq_lineitems_alternatepart a  \n" +
                "				WHERE 	a.isDeleted = 0  \n" +
                "						AND a.partID = pAssyId  \n" +
                "						AND EXISTS (  \n" +
                "							SELECT 	1  \n" +
                "							FROM 	rfq_lineitems b  \n" +
                "							WHERE 	b.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(custPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
                "									AND b.id = a.rfqLineItemsID  \n" +
                "						)  \n" +
                "		) a;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		MAX(a.ProgressCount) INTO v_LineCleanStatus FROM (  \n" +
                "				SELECT  	l.id AS lineID, p.id,  \n" +
                "						CASE  \n" +
                "							WHEN  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('1', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('2', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mfgCodeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('3', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mfgVerificationStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('4', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.distVerificationStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('5', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mfgDistMappingStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								/*CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('6', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND*/  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('7', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mfgGoodPartMappingStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('8', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.obsoletePartStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('9', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mfgPNStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('10', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('11', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.distPNStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('12', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.customerApproval, 'A') != 'P'  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('13', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.distGoodPartMappingStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								/*CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('14', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND*/  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('15', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.nonRohsStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('16', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.epoxyStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('17', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('18', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('20', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('21', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.duplicateMPNInSameLineStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('22', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.matingPartRquiredStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('23', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.driverToolsRequiredStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('24', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.pickupPadRequiredStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('25', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.restrictUseWithPermissionStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('26', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.restrictUsePermanentlyStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('27', v_CategoryIds)) > 0  \n" +
                "										THEN  \n" +
                "                                        (case when IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(p.approvedMountingType,0) = 1 then  \n" +
                "                                        1 else IFNULL(p.mismatchMountingTypeStep,0) = 1  end)  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('28', v_CategoryIds)) > 0  \n" +
                "                                    then  \n" +
                "                                     (case when IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(p.approvedMountingType,0) = 1 then  \n" +
                "                                     1 else IFNULL(p.mismatchMountingTypeStep,0) = 1 end)  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								/*CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('32', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND*/  \n" +
                "								/*CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('33', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND*/  \n" +
                "								/*CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('34', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.duplicateCPNStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND   */  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('35', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.functionalTestingRequiredStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('36', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('37', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('39', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.uomMismatchedStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('40', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.programingRequiredStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('50', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.restrictUseInBOMStep, 0) = 0  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('51', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('52', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.customerApprovalForBuyStep,1) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('53', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.customerApprovalForPopulateStep,1) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('54', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.mismatchNumberOfRowsStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('55', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('56', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.tbdPartStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('57', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('58', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('59', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('60', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.exportControlledStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('61', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.restrictUseInBOMWithPermissionStep, 0) = 0  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('62', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(p.unknownPartStep,0) = 1  \n" +
                "									ELSE 1  \n" +
                "								END  \n" +
                "								/*AND  \n" +
                "								CASE  \n" +
                "									WHEN (SELECT FIND_IN_SET('63', v_CategoryIds)) > 0  \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0  \n" +
                "									ELSE 1  \n" +
                "								END*/  \n" +
                "							THEN 1  \n" +
                "							ELSE 0  \n" +
                "						END AS ProgressCount  \n" +
                "				FROM 		rfq_lineitems_alternatepart p  \n" +
                "				LEFT OUTER JOIN rfq_lineitems l ON p.rfqLineItemsID = l.id  \n" +
                "				WHERE 		l.isDeleted = 0 AND p.isDeleted = 0  \n" +
                "								AND p.mfgCodeID IS NOT NULL  \n" +
                "								AND p.mfgPNID IS NOT NULL  \n" +
                "								AND l.lineID IS NOT NULL  \n" +
                "								AND FIND_IN_SET(p.id, IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId))  \n" +
                "								-- AND p.id = IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId)  \n" +
                "			) AS a  \n" +
                "	GROUP BY 	a.lineID;  \n" +
                "  \n" +
                "	RETURN v_LineCleanStatus;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5299,'2.00','V1','User Story 36767: BOM CPN new cases need to handle  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5299:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Kit Allocation not Required\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
                "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  /*  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 2 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of QPA or REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 3 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Buy: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 4 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Populate: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 18 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of DNP Qty REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "		SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 17 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of Buy DNP Qty: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "        	INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, '') != IFNULL(NEW.badMfgPN, '') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, 0) != IFNULL(NEW.uomMismatchedStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, 0) != IFNULL(NEW.restrictUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, 0) != IFNULL(NEW.mismatchNumberOfRowsStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, 0) != IFNULL(NEW.isUnlockApprovedPart, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  # Mismatch Programming required step  \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "      # Part and Program ref des mapping required step  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# Mismatch Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCustpartRevStep IS NOT NULL AND (OLD.mismatchCustpartRevStep != NEW.mismatchCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "		IF OLD.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	# Mismatch CPN and Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND (OLD.mismatchCPNandCustpartRevStep != NEW.mismatchCPNandCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "		IF OLD.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- if New.org_mfgCode is null then  \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                "			-- end if;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "        # mismatch programming require step  \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # part program ref des mapping require step  \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "        # Mismatch Programming Statue step  \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Mismatch Custom Part Rev step  \n" +
                "        IF NEW.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		# Mismatch CPN and Custom Part Rev step  \n" +
                "        IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	 # MPN Mapping Pending in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5300,'2.00','V1','User Story 36767: BOM CPN new cases need to handle  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5300:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "UPDATE feature_mst  \n" +
                "SET featureName = 'Allow to Lock/Unlock Customer Payment' ,  \n" +
                "	updatedBy = 1,  updateByRoleId = 1, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE featureName = 'Allow to Lock Customer Payment' ;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5301,'2.00','V1',' updated lock customer payment feature name - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5301:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "drop procedure if exists `Sproc_PackingSlipDetailElasticSearchRemoveIds`;  \n" +
                "CREATE PROCEDURE `Sproc_PackingSlipDetailElasticSearchRemoveIds`(  \n" +
                "IN pIDs VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQl1 = CONCAT('select id from packing_slip_material_receive_det where refPackingSlipMaterialRecID in(', pIDs,')');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_checkDelete_supplier_invoice_and_memo`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_invoice_and_memo`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMemoIds varchar(1000);  \n" +
                "    DECLARE vLineIds varchar(1000);  \n" +
                "    DECLARE vCount int;  \n" +
                "    DECLARE vCountLock int;  \n" +
                "    DECLARE vCountHalt int;  \n" +
                "  \n" +
                "    DROP temporary table if exists tempPackingSlipMst;  \n" +
                "    CREATE TEMPORARY TABLE tempPackingSlipMst(  \n" +
                "		cnt int,  \n" +
                "        msg varchar(500)  \n" +
                "    );  \n" +
                "  \n" +
                "	/*getting credit/debit memo ids from selected rows*/  \n" +
                "	select GROUP_CONCAT(a.id), count(1), sum(case when a.lockstatus = 'LC' then 1 else 0 end)  \n" +
                "      into vMemoIds, vCount, vCountLock  \n" +
                "	  from packing_slip_material_receive a  \n" +
                "	 where find_in_set(a.id, IDs)  \n" +
                "	   and a.receiptType in ('C','D');  \n" +
                "  \n" +
                "	select count(1) into vCountHalt  \n" +
                "	 from holdunholdtrans a  \n" +
                "	where status = 'H'  \n" +
                "	  and find_in_set(a.refTransId, IDs)  \n" +
                "	  and refType in ('SINV','SCM','SDM');  \n" +
                "  \n" +
                "	if vCountLock = 0 and vCountHalt = 0 then  \n" +
                "		/*deleting credit/debit memo before deleting invoice*/  \n" +
                "		if vCount > 0 then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_memo('packing_slip_material_receive_memo', vMemoIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "		end if;  \n" +
                "	else  \n" +
                "		if vCountLock != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountLock, 'TRANSACTION_LOCKED');  \n" +
                "		elseif vCountHalt != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountHalt, 'TRANSACTION_HALTED');  \n" +
                "        end if;  \n" +
                "	end if;  \n" +
                "	/*checking credit/debit memo created from selected invoices*/  \n" +
                "	select count(1) into vCount  \n" +
                "	  from packing_slip_material_receive_det a  \n" +
                "	 where a.isdeleted = 0  \n" +
                "	 and a.refPackingSlipDetId is not null  \n" +
                "	 and exists (select 1 from packing_slip_material_receive p where p.id = a.refPackingSlipMaterialRecID and p.receiptType in ('C','D') and p.isDeleted=0)  \n" +
                "	 and exists (select 1  \n" +
                "				  from packing_slip_material_receive_det d  \n" +
                "				 where d.id = a.refPackingSlipDetId  \n" +
                "				   and exists (select 1 from packing_slip_material_receive p  \n" +
                "								where p.id = d.refPackingSlipMaterialRecID  \n" +
                "								  and p.receiptType = 'I'  \n" +
                "								  and find_in_set(p.id, IDs)  \n" +
                "								  and p.isDeleted = 0)  \n" +
                "				   and d.isDeleted = 0);  \n" +
                "  \n" +
                "    if vCount = 0 then  \n" +
                "		/*get detail line ids to delete lines first*/  \n" +
                "		select GROUP_CONCAT(a.id) into vLineIds  \n" +
                "		  from packing_slip_material_receive_det a  \n" +
                "		 where a.isdeleted = 0  \n" +
                "		   and find_in_set(a.refPackingSlipMaterialRecID, IDs);  \n" +
                "		if vLineIds is not null and vLineIds != '' then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_det('packing_slip_material_receive_det', vLineIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "        end if;  \n" +
                "	else  \n" +
                "		insert into tempPackingSlipMst(cnt, msg)  \n" +
                "        values (vCount, 'CM_DM_CREATED');  \n" +
                "    end if;  \n" +
                "	IF(countList = FALSE) THEN  \n" +
                "		IF (SELECT ifnull(SUM(t.cnt),0) FROM tempPackingSlipMst t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update packing_slip_material_receive set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update packing_slip_material_receive set `status` = \"W\", refPackingSlipNumberForInvoice = NULL where refPackingSlipNumberForInvoice in(',IDs,') and isDeleted = 0');  \n" +
                "			PREPARE stmt2 FROM @SQL2;  \n" +
                "			EXECUTE stmt2;  \n" +
                "  \n" +
                "			SELECT * FROM tempPackingSlipMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempPackingSlipMst t/* having SUM(t.cnt) > 0*/;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT 		t1.cnt, t1.cnt as TotalCount,  \n" +
                "					ifnull(t2.display_page_name,t1.msg) AS msg,  \n" +
                "                    ifnull(t2.display_page_name,t1.msg) as Message  \n" +
                "		FROM 		tempPackingSlipMst t1  \n" +
                "		left JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE 		IFNULL(cnt,0) > 0  \n" +
                "					AND msg IS NOT NULL  \n" +
                "					AND msg != \"\"  \n" +
                "		ORDER BY 	t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP temporary table if exists tempPackingSlipMst;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5302,'2.00','V1','Bug 37224: While Delete Supplier Invoice, CM, DM and RMA Enterprise search data not removing - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5302:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MPN',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SPN',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Description',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCB Per Array',CAST(OLD.pcbPerArray AS CHAR),  \n" +
                "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Internal Ref#',CAST(OLD.internalRef AS CHAR),  \n" +
                "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Total Release',CAST(OLD.totalRelease AS CHAR),  \n" +
                "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Qty',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Price',CAST(OLD.price AS CHAR),  \n" +
                "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Comment',CAST(OLD.lineComment AS CHAR),  \n" +
                "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Supplier Quote#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
                "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Packaging',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
                "       CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'RoHS Requirement',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
                "       CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalLineComment AS CHAR),  \n" +
                "       CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       END;  \n" +
                /* **************************** add script version -> 29-09-2021 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (5303,'2.00','v1',' User Story 37197: Global Changes for Packing Slip and Purchase Order page - Jay '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;
        case 5303:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		left JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		left join component sc on sc.id=pod.supplierPartID  \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "		WHERE pod.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when pom.poWorkingStatus=\"C\" then \"C\" when pom.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  c.custAssyPN,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.orgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "		SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				psmr.id packingSlipId  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "		WHERE pom.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(pom.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** add script version -> 29-09-2021 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (5304,'2.00','v1',' User Story 37197: Global Changes for Packing Slip and Purchase Order page - Jay '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;
        case 5304:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-09-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \"AND isPaymentVoided=0 AND paymentNumber \",CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = '\", pPaymentNumber ,\"' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            pip.paymentNumber,  \n" +
                "                            pipd.isPaymentVoided  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "					LEFT JOIN packingslip_invoice_payment_det pipd ON pipd.refPackingslipInvoiceID = p.refPackingSlipNumberForInvoice AND pipd.isDeleted = 0  \n" +
                "					LEFT JOIN packingslip_invoice_payment pip ON pip.id = pipd.refPayementid AND pip.isDeleted = 0  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 29-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5305,'2.00','V1','Performance Inprovement of Supplier Packing Slip list SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5305:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN ppartID INT,  \n" +
                "	IN puserID INT,  \n" +
                "    IN pBOMVersion VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                " DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                "  \n" +
                "  START TRANSACTION;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "# consoliadte select  \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS tempconsolidate;  \n" +
                "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS  \n" +
                "		 SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "  /* call SP for generate consolidated data in temp_Sproc_CreateRfqConsolidateLineItem temporary table */  \n" +
                "        call Sproc_CreateConsolidateDataForPart(prfqAssyID, ppartID);  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        SET  \n" +
                "        cl.isDeleted = TRUE,  \n" +
                "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.deletedBy = puserID  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        and not exists (  \n" +
                "			select  1 from (  \n" +
                "				select rcl.id from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "				Inner JOIN temp_Sproc_CreateRfqConsolidateLineItem R ON R.rfqAssyIDORrefSalesOrderdetID = rcl.rfqAssyID AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and R.category <> 3  \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  \n" +
                "				AND rcl.isDeleted = 0  \n" +
                "			)a where a.id = cl.id  \n" +
                "        );  \n" +
                "  \n" +
                "# insert Consolidated lineItems  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                "        (`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`rfqLineItemID`,`uomID`,  \n" +
                "        `qpa`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`numOfPosition`,`isMultiple`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`,`isqpaMismatch`,  \n" +
                "        `restrictCPNUseInBOMStep`, `restrictCPNUsePermanentlyStep`, `restrictCPNUseWithPermissionStep`, `custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
                "        SELECT R.`lineID`,R.`isInstall`,R.`isPurchaseWithDNP`,prfqAssyID `rfqAssyID`,  \n" +
                "        R.`rfqLineItemsID`,R.`uomID`, R.`qpa`, fun_DatetimetoUTCDateTime() `createdAt`, puserID `createdBy`, fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
                "        puserID `updatedBy`, R.`numOfPosition`,(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`,  \n" +
                "        R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`,R.`isqpaMismatch`, R.`restrictCPNUseInBOMStep`, R.`restrictCPNUsePermanentlyStep`,  \n" +
                "        R.`restrictCPNUseWithPermissionStep`, R.`custPNID`,R.`consolidateRestrictPartDetail`, R.`consolidatedPartWithFlagDetail`  \n" +
                "        FROM temp_Sproc_CreateRfqConsolidateLineItem R  \n" +
                "        LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = prfqAssyID  \n" +
                "        AND cl.rfqAssyID = R.rfqAssyIDORrefSalesOrderdetID AND cl.isDeleted = 0  \n" +
                "        WHERE cl.id IS NULL and R.category <> 3;  \n" +
                "# insert Consolidated lineItems Quentity  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                "        (`qtyID`,`consolidateID`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
                "        SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`,rq.rfqPriceGroupId ,rq.rfqPriceGroupDetailId  \n" +
                "        FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT qpa,consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem where category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id  IS NOT NULL  \n" +
                "		) rcl  \n" +
                "        SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.unitPrice= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty=(CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.qpa <> Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
                "        AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT numOfPosition, consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem where category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT cl.id ,ifnull(cl.numOfPosition,0) as numOfPosition, cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "            WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id IS NOT NULL  \n" +
                "		) rcl  \n" +
                "        SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.unitPrice= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty=(CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice = (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.isDeleted = 0  \n" +
                "        AND IFNULL(rcl.numOfPosition,0)  <> Rs.numOfPosition;  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT consolidatedLineItemIDs, consolidateRestrictPartDetail FROM temp_Sproc_CreateRfqConsolidateLineItem where category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT rl.id, rl.consolidatedLineItemIDs, rl.consolidateRestrictPartDetail  \n" +
                "            FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "            WHERE rl.rfqAssyID = prfqAssyID AND rl.isDeleted = 0  \n" +
                "		) rcl  \n" +
                "         SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.isBomUpdate=(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN 0  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN 1 ELSE 0 END),  \n" +
                "        rq.unitPrice= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice =(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
                "        AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# Update Consilidated LineItems  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl,  \n" +
                "        (  \n" +
                "			SELECT isInstall, isPurchaseWithDNP, numOfPosition, rfqLineItemsID, qpa, uomID, consolidatedrefDesig, lineID, consolidatedLineItemIDs,  \n" +
                "				   consolidatedpartlineID, consolidateRestrictPartDetail, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep,  \n" +
                "                   custPNID, isqpaMismatch, consolidatedPartWithFlagDetail  \n" +
                "			FROM temp_Sproc_CreateRfqConsolidateLineItem where category <> 3  \n" +
                "		) R  \n" +
                "        SET  \n" +
                "        cl.isInstall = R.isInstall ,  \n" +
                "        cl.isPurchase = R.isPurchaseWithDNP,  \n" +
                "        cl.numOfPosition = R.numOfPosition,  \n" +
                "        cl.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
                "        cl.qpa = R.qpa,  \n" +
                "        cl.uomID = R.uomID,  \n" +
                "        cl.refDesig = R.consolidatedrefDesig,  \n" +
                "        cl.lineID = R.lineID,  \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,  \n" +
                "        cl.consolidateRestrictPartDetail = R.consolidateRestrictPartDetail,  \n" +
                "        cl.updatedBy = puserID,  \n" +
                "        cl.restrictCPNUseWithPermissionStep = R.restrictCPNUseWithPermissionStep,  \n" +
                "        cl.restrictCPNUsePermanentlyStep = R.restrictCPNUsePermanentlyStep,  \n" +
                "        cl.restrictCPNUseInBOMStep = R.restrictCPNUseInBOMStep,  \n" +
                "        cl.custPNID = R.custPNID,  \n" +
                "        cl.isqpaMismatch = R.isqpaMismatch,  \n" +
                "        cl.consolidatedPartWithFlagDetail = R.consolidatedPartWithFlagDetail  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.id  IS NOT NULL  \n" +
                "        AND cl.isDeleted = 0;  \n" +
                "  \n" +
                "# Update Consilidated LineItems alternate part  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla,  \n" +
                "		(select cl.id `consolidateID`, ap.`mfgPNID`, min(ap.`customerApproval`) customerApproval,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0) restrictUseInBOMStep, IFNULL(ap.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,IFNULL(ap.restrictUseWithPermissionStep,1)restrictUseWithPermissionStep,  \n" +
                "				IFNULL(ap.restrictUsePermanentlyStep,1)restrictUsePermanentlyStep,IFNULL(ap.restrictUseExcludingAliasStep,1)restrictUseExcludingAliasStep,  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1)restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0)restrictUseInBOMExcludingAliasStep,  \n" +
                "				IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0)restrictUseInBOMExcludingAliasWithPermissionStep, IFNULL(ap.approvedMountingType,0)approvedMountingType,  \n" +
                "				IFNULL(ap.mismatchMountingTypeStep,1)mismatchMountingTypeStep,  \n" +
                "                IFNULL(ap.mismatchFunctionalCategoryStep,1)mismatchFunctionalCategoryStep  \n" +
                "		from rfq_lineitems_alternatepart ap  \n" +
                "		join (  \n" +
                "			select rcl.id, rcl.consolidatedLineItemIDs  \n" +
                "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "			join rfq_lineitems rl on rl.id = rcl.rfqLineItemID and rl.isdeleted = 0  \n" +
                "			where rcl.rfqAssyID = prfqAssyID  and rcl.isdeleted = 0  \n" +
                "		) cl on FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
                "		where ap.isdeleted = 0 AND cap.consolidateID IS not NULL  \n" +
                "		group by cl.id, ap.`mfgPNID`, IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
                "		)b  \n" +
                "		SET  \n" +
                "			cla.customerApproval = b.customerApproval,  \n" +
                "			cla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			cla.updatedBy = puserID,  \n" +
                "			cla.restrictUseInBOMStep =  b.restrictUseInBOMStep,  \n" +
                "			cla.restrictUseInBOMWithPermissionStep = b.restrictUseInBOMWithPermissionStep,  \n" +
                "			cla.restrictUseWithPermissionStep = b.restrictUseWithPermissionStep,  \n" +
                "			cla.restrictUsePermanentlyStep = b.restrictUsePermanentlyStep,  \n" +
                "			cla.restrictUseExcludingAliasStep =  b.restrictUseExcludingAliasStep,  \n" +
                "			cla.restrictUseExcludingAliasWithPermissionStep = b.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "			cla.restrictUseInBOMExcludingAliasStep = b.restrictUseInBOMExcludingAliasStep,  \n" +
                "			cla.restrictUseInBOMExcludingAliasWithPermissionStep = b.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			cla.approvedMountingType = b.approvedMountingType,  \n" +
                "			cla.mismatchMountingTypeStep = b.mismatchMountingTypeStep,  \n" +
                "			cla.mismatchFunctionalCategoryStep = b.mismatchFunctionalCategoryStep  \n" +
                "		WHERE cla.consolidateID = b.consolidateID and  cla.mfgPNID = b.mfgPNID AND  cla.isDeleted = 0;  \n" +
                "# delete from consolidated Alternatepart if lineItem removed  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "        WHERE exists (select 1 from rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id = cap.consolidateID  AND cl.isDeleted = 1)  \n" +
                "        and cap.isdeleted = 0;  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap,  \n" +
                "			(  \n" +
                "				select distinct (rcla.id) capID from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "				inner join rfq_consolidated_mfgpn_lineitem_alternate rcla on rcla.consolidateID = rcl.id and rcla.isdeleted = 0  \n" +
                "				Inner join rfq_lineitems_alternatepart rla on rla.mfgPNID = rcla.mfgPNID and FIND_IN_SET(rla.rfqLineitemsID,rcl.consolidatedLineItemIDs) and rla.isdeleted = 1  \n" +
                "				where rcl.rfqAssyID = prfqAssyID and rcl.isdeleted = 0  \n" +
                "            )as rcap  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "        WHERE cap.id = rcap.capID and cap.isdeleted = 0;  \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity  if rfq Quantity remove  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id,rfqAssyID FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND q.isDeleted = 1 ) rq  \n" +
                "        SET  \n" +
                "        cq.isDeleted = TRUE,  \n" +
                "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.deletedBy = puserID  \n" +
                "        WHERE cq.qtyID = rq.id AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "  \n" +
                "# delete Consolidated lineitem Quantity if Consolidate lineitem remove  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND isDeleted = 1 ) rcl  \n" +
                "        SET  \n" +
                "        cq.isDeleted = TRUE,  \n" +
                "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.deletedBy = puserID  \n" +
                "        WHERE cq.consolidateID = rcl.id AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# delete Consolidate lineItems  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        SET  \n" +
                "        cl.isDeleted = TRUE,  \n" +
                "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.deletedBy = puserID  \n" +
                "        WHERE  cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        and not exists (select 1 from temp_Sproc_CreateRfqConsolidateLineItem tcd where  tcd.rfqLineItemsID = cl.rfqLineItemID and tcd.category <> 3);  \n" +
                "  \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                "        (`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`customerApproval`,  \n" +
                "        `restrictUseInBOMStep`, `restrictUseInBOMWithPermissionStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,  \n" +
                "        `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`, `mismatchMountingTypeStep`,`mismatchFunctionalCategoryStep`)  \n" +
                "        select ap.`mfgPN`, cl.id `consolidateID`, ap.`mfgPNID`,ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) as `PIDCode`,  \n" +
                "		puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`, min(ap.`customerApproval`),  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
                "		from rfq_lineitems_alternatepart ap  \n" +
                "		join (  \n" +
                "			select rcl.id, rcl.consolidatedLineItemIDs  \n" +
                "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "			join rfq_lineitems rl on rl.id = rcl.rfqLineItemID and rl.isdeleted = 0  \n" +
                "			where rcl.rfqAssyID = prfqAssyID  and rcl.isdeleted = 0  \n" +
                "		) cl on FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
                "		where ifnull(ap.mfgGoodPartMappingStep,1) = 1 and ifnull(ap.suggestedGoodPartStep,1) = 1 and ifnull(ap.distGoodPartMappingStep,1) = 1 and ifnull(ap.suggestedGoodDistPartStep,1) = 1 and ap.isdeleted = 0 AND cap.consolidateID IS NULL  \n" +
                "		group by cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "		WHERE cap.consolidateID = rcl.id  \n" +
                "        AND cap.id NOT IN (  \n" +
                "			select capid from(  \n" +
                "				SELECT  DISTINCT(rcap.id) as capid  \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "				Inner Join rfq_consolidated_mfgpn_lineitem_alternate rcap on rcap.consolidateID = cl.id and rcap.isdeleted = 0  \n" +
                "				join rfq_lineitems_alternatepart ap on ap.mfgPNID = rcap.mfgPNID and FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs) and ap.isdeleted = 0  \n" +
                "				where cl.rfqAssyID = prfqAssyID and cl.isdeleted = 0  \n" +
                "            ) rcap  \n" +
                "		);  \n" +
                "  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove  \n" +
                "       UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 ) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID = (rcl.id) and not exists  \n" +
                "         (select 1 from rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgPNID = cq.componentID and consolidateid = rcl.id AND isDeleted = 0 and approvedMountingType = 1)  \n" +
                "        AND cq.isDeleted= 0;  \n" +
                "  \n" +
                " # remove pricing if selected alternate part remove  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "       (SELECT rcla.consolidateID , count(1) alternateline FROM rfq_consolidated_mfgpn_lineitem_alternate rcla  \n" +
                "       where rcla.consolidateID in (SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0)  \n" +
                "       and approvedMountingType = 1 and rcla.isdeleted = 0) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID = (rcl.consolidateID)  \n" +
                "        and (case when rcl.alternateline > 0 then  \n" +
                "			cq.componentID not in (select mfgPNID from rfq_consolidated_mfgpn_lineitem_alternate WHERE consolidateid = rcl.consolidateID AND isDeleted = 0 and approvedMountingType = 1)  \n" +
                "		else 1=1 end)  \n" +
                "        AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# remove pricing for Change is buy  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        AND (cl.isPurchase = 0 OR restrictCPNUseInBOMStep = 1 OR restrictCPNUsePermanentlyStep = 0 OR restrictCPNUseWithPermissionStep= 0)) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID IN(rcl.id) AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# Delete summary details if exists  \n" +
                "		UPDATE `rfq_assy_quotations` rq ,  \n" +
                "			( SELECT rq.qtyID,rl.requestQty,(SUM(rq.unitPrice * ra.qpa * IFNULL(ra.numOfPosition,1))) AS TotalExtendedPrice  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity rl ON rl.id = rq.qtyID and rl.isDeleted = 0  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem ra ON ra.id = rq.consolidateID AND ra.isdeleted = 0  \n" +
                "				WHERE  rl.rfqAssyid = prfqAssyID AND ra.isPurchase = 1 and rq.isDeleted = 0  \n" +
                "				GROUP BY rq.qtyID, rl.requestQty  \n" +
                "			) qtychange  \n" +
                "        SET  \n" +
                "        rq.`unitPrice` = (CASE WHEN CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2) THEN 0 ELSE CONVERT(rq.unitPrice, DECIMAL(10,2)) END),  \n" +
                "        rq.`updatedBy` = puserID,  \n" +
                "        rq.`updatedAt` = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rq.rfqAssyID = prfqAssyID AND rq.rfqAssyQtyID = qtychange.qtyID AND  CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2)  \n" +
                "        AND rq.refSubmittedQuoteID IS NULL AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq assembly pricing status  \n" +
                "  \n" +
                "        UPDATE rfq_assemblies  \n" +
                "        SET isReadyForPricing = TRUE,  \n" +
                "        partCostingBOMInternalVersion = pBOMVersion,  \n" +
                "        updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        updatedBy = puserID  \n" +
                "        WHERE id = prfqAssyID and isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq assembly pricing status  \n" +
                "  \n" +
                "        UPDATE rfq_lineitem_autopricingstatus rlas  \n" +
                "        SET `status` = NULL  \n" +
                "        WHERE rlas.rfqAssyID = prfqAssyID  \n" +
                "        and exists (SELECT id FROM tempconsolidate tc WHERE tc.id = rlas.consolidateID  \n" +
                "        and not exists (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.id = tc.id and rl.rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
                "--        AND rlas.consolidateID IN (SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
                "  \n" +
                "#==================================  \n" +
                "/*  Submit Data for Labor Costing */  \n" +
                "#==================================  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS laborResult;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS laborResult AS  \n" +
                "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, id AS parPartID, id AS subAssyID, 1 AS perBuildQty, liveVersion AS BOMinternalversion, 0 isMismatchQPA,1 originalQPA, 0 LEVEL,0 isInstall  \n" +
                "        FROM component WHERE id = ppartID AND isDeleted = 0  \n" +
                "        UNION  \n" +
                "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, partID AS parPartID, mfgPNID AS subAssyID, QPA1 AS perBuildQty, liveVersion BOMinternalversion,  \n" +
                "        (CASE WHEN actualQPA != actualDesgCount THEN 1 ELSE 0 END) isMismatchQPA, (CASE WHEN actualQPA >= actualDesgCount THEN actualQPA ELSE actualDesgCount END) originalQPA, LEVEL, isInstall  \n" +
                "        FROM leveldata  \n" +
                "        WHERE category = 3;  \n" +
                "  \n" +
                "#  delete Labor assy Qty detail when line item removed from assy BOM  \n" +
                "  \n" +
                "        UPDATE rfq_labor_assy_qpa_detail rla  \n" +
                "        SET  \n" +
                "        rla.isDeleted = 1,  \n" +
                "        rla.deletedBy = puserID,  \n" +
                "        rla.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rla.partID = ppartID AND rla.rfqAssyID = prfqAssyID AND rla.isDeleted  = 0  \n" +
                "        AND NOT EXISTS(SELECT 1 FROM laborResult lr WHERE lr.subAssyID = rla.subAssyID AND lr.parPartID = rla.parPartID  \n" +
                "        AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND rla.level = lr.level);  \n" +
                "# Insert Data in to rfq_labor_assy_qpa_detail table for  \n" +
                "        INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
                "        (`rfqAssyID`,`partID`,`parPartID`,`subAssyID`,`level`,`perBuildQty`,`bomInternalVersion`, `originalQPA`, `isMismatchQPA`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
                "		SELECT rfqAssyID, partID, parPartID,subAssyID,LEVEL ,perBuildQty, BOMinternalversion, originalQPA, isMismatchQPA, puserID `createdBy`, puserID `updatedBy`,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()  \n" +
                "		FROM laborResult lr  \n" +
                "		WHERE NOT EXISTS(SELECT 1 FROM rfq_labor_assy_qpa_detail rla WHERE rla.isDeleted = 0 AND lr.subAssyID = rla.subAssyID  \n" +
                "		AND lr.parPartID = rla.parPartID AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND lr.level = rla.level);  \n" +
                "  \n" +
                "# Update Data in rfq_labor_assy_qpa_detail table updated record  \n" +
                "		UPDATE rfq_labor_assy_qpa_detail rlaqd,  \n" +
                "        (SELECT parPartID, subAssyID, level, perBuildQty, bomInternalVersion, originalQPA, isMismatchQPA, isInstall  \n" +
                "        FROM laborResult) lr  \n" +
                "        SET  \n" +
                "        rlaqd.perBuildQty = lr.perBuildQty,  \n" +
                "        rlaqd.bomInternalVersion = lr.bomInternalVersion,  \n" +
                "        rlaqd.originalQPA = lr.originalQPA,  \n" +
                "        rlaqd.isMismatchQPA = lr.isMismatchQPA,  \n" +
                "        rlaqd.isInstall = lr.isInstall,  \n" +
                "        updatedBy = puserID,  \n" +
                "        updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rlaqd.rfqAssyID = prfqAssyID AND rlaqd.partID = ppartID AND lr.parPartID = rlaqd.parPartID AND lr.subAssyID = rlaqd.subAssyID AND lr.level = rlaqd.level AND rlaqd.isDeleted = 0  \n" +
                "        AND (rlaqd.perBuildQty != lr.perBuildQty OR rlaqd.bomInternalVersion != lr.bomInternalVersion OR rlaqd.originalQPA != lr.originalQPA OR rlaqd.isMismatchQPA != lr.isMismatchQPA OR rlaqd.isInstall != lr.isInstall);  \n" +
                "# create temporary table for mounting type wise detail  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS assyBOMMountingTypeDet;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS assyBOMMountingTypeDet AS  \n" +
                "		select prfqAssyID `rfqAssyID`, partID as parPartID, mountingTypeID, `mountingType`,`lineCount`,`totalQPA`,null `subAssyID`, isInstall as `isInstall`  \n" +
                "		from (  \n" +
                "			(  \n" +
                "				SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) as mountingType, mountingTypeID, partID, isinstall  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					select rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
                "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				) a  \n" +
                "				INNER JOIN  \n" +
                "				(  \n" +
                "					SELECT 	rl.id,  \n" +
                "					case when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  then  \n" +
                "							max(com.mountingtypeID)  \n" +
                "						else (SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1)  end  as mountingTypeID  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "					LEFT JOIN component com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) and com.isGoodPart <> 2  \n" +
                "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "					and ifnull(ra.mfgGoodPartMappingStep,1) = 1 and ifnull(ra.suggestedGoodPartStep,1) = 1 and ifnull(ra.distGoodPartMappingStep,1) = 1 and ifnull(ra.suggestedGoodDistPartStep,1) = 1  \n" +
                "					AND rl.isDeleted = 0  AND com.category != 3 and com.isGoodPart <> 2   AND (IFNULL(ra.mismatchMountingTypeStep,0) = 1 OR ra.approvedMountingType = 1)  \n" +
                "					GROUP BY rl.id  \n" +
                "                    having ifnull(max(com.mountingtypeID),-100) = ifnull(min(com.mountingtypeID),-100) or (ifnull(max(com.mountingtypeID),-100) != ifnull(min(com.mountingtypeID),-100) and MAX(ifnull(ra.approvedMountingType,0)) = 1)  \n" +
                "				) b on a.id = b.id  \n" +
                "				GROUP BY a.partID , b.mountingTypeID  \n" +
                "				)  \n" +
                "				union  \n" +
                "				(SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) as mountingType, mountingTypeID, partID,isinstall  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					select rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
                "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				) a  \n" +
                "				INNER JOIN  \n" +
                "				(  \n" +
                "					SELECT 	rl.id,  \n" +
                "					(SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1) as mountingTypeID  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "					LEFT JOIN component com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) and com.isGoodPart <> 2  \n" +
                "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "                    and ifnull(ra.mfgGoodPartMappingStep,1) = 1 and ifnull(ra.suggestedGoodPartStep,1) = 1 and ifnull(ra.distGoodPartMappingStep,1) = 1 and ifnull(ra.suggestedGoodDistPartStep,1) = 1  \n" +
                "					AND rl.isDeleted = 0  AND com.category != 3 and com.isGoodPart <> 2  \n" +
                "					GROUP BY rl.id  \n" +
                "					having ifnull(max(com.mountingtypeID),-100) != ifnull(min(com.mountingtypeID),-100) and MAX(ifnull(ra.approvedMountingType,0)) != 1  \n" +
                "				) b on a.id = b.id  \n" +
                "				GROUP BY a.partID , b.mountingTypeID)  \n" +
                "			)a  \n" +
                "			UNION  \n" +
                "			(  \n" +
                "				SELECT rfqAssyID as `rfqAssyID`,parPartID, NULL `mountingTypeID`, null mountingType, 1 as `lineCount`,originalQPA as `totalQPA`,subAssyID as `subAssyID`, isInstall as `isInstall`  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					SELECT rfqAssyID, parPartID, originalQPA,subAssyID,isInstall  \n" +
                "					FROM rfq_labor_assy_qpa_detail lr  \n" +
                "					WHERE lr.isDeleted = 0 AND lr.parpartId != lr.subAssyId AND lr.rfqAssyID = prfqAssyID  \n" +
                "				)b  \n" +
                "			);  \n" +
                "  \n" +
                "# delete assy Labor Mounting type wise Qty detail when line item removed from assy BOM  \n" +
                "# Note: -100 value is set for null value for mountingtypeID join purpose(in case of mounting type mismatch)  \n" +
                "  		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
                "        SET  \n" +
                "        rlmd.isDeleted = 1,  \n" +
                "        rlmd.deletedBy = puserID,  \n" +
                "        rlmd.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rlmd.isDeleted = 0 AND rlmd.rfqAssyID = prfqAssyID  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM assyBOMMountingTypeDet amd  \n" +
                "        WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100)));  \n" +
                "# Insert Data for assy Labor Mounting type wise Qty detail for new added data.  \n" +
                "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
                "        (`rfqAssyID`,`partID`,`subAssyID`,`mountingTypeID`,`lineCount`,`totalQPA`, `isInstall`, `createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
                "        SELECT rfqAssyID,parPartID,subAssyID,mountingtypeID,lineCount,totalQPA, isInstall, puserID `createdBy`,puserID `updatedBy`, fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
                "		FROM assyBOMMountingTypeDet amd  \n" +
                "		WHERE NOT EXISTS(SELECT 1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
                "		WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100) ));  \n" +
                "  \n" +
                "  \n" +
                "# Update Data for assy Labor Mounting type wise QPA detail for Updated line item when QPA and line count change.  \n" +
                "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
                "		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd,  \n" +
                "        (SELECT lineCount,totalQPA,isInstall,mountingtypeID,subAssyID,parPartID FROM assyBOMMountingTypeDet) amd  \n" +
                "        SET  \n" +
                "        rlmd.lineCount = amd.lineCount,  \n" +
                "        rlmd.totalQPA = amd.totalQPA,  \n" +
                "        rlmd.isInstall = amd.isInstall,  \n" +
                "        rlmd.updatedby = puserID,  \n" +
                "        rlmd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE  rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100))  \n" +
                "        AND (IFNULL(rlmd.lineCount,0) != IFNULL(amd.lineCount,0) OR IFNULL(rlmd.totalQPA,0) != IFNULL(amd.totalQPA,0) OR IFNULL(rlmd.isInstall,0) != IFNULL(amd.isInstall,1));  \n" +
                "  \n" +
                "# delete data from labor costing detail table if mounting type data deleted  \n" +
                "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
                "        SET  \n" +
                "        raql.isDeleted = 1,  \n" +
                "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.deletedBy = puserID  \n" +
                "        WHERE EXISTS (SELECT  1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
                "        WHERE ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 1 AND ramd.rfqAssyID = prfqAssyID)  \n" +
                "        and raql.isDeleted = 0;  \n" +
                "# delete data from labor costing detail table if rfq assy quantity data deleted  \n" +
                "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
                "        SET  \n" +
                "        raql.isDeleted = 1,  \n" +
                "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.deletedBy = puserID  \n" +
                "        WHERE EXISTS (SELECT  1 FROM rfq_assy_quantity raq  \n" +
                "        WHERE raq.id = raql.rfqAssyQtyID AND raq.isDeleted = 1 AND raq.rfqAssyID = prfqAssyID)  \n" +
                "        and raql.isDeleted = 0;  \n" +
                "  \n" +
                "# Insert New Data which are added in rfq_assy_labor_bom_mountingtype_qpa_detail and not in labor costing detail table  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
                "        (`rfqAssyQtyID`,`rfqAssyBOMMountingID`,`price`,`perAssyPrice`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
                "        SELECT raq.id `rfqAssyQtyID`,ramd.id `rfqAssyBOMMountingID`,0 `price`,0 `perAssyPrice`,puserID `createdBy`,puserID `updatedBy`,  \n" +
                "        fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`,raq.rfqPriceGroupId,raq.rfqPriceGroupDetailId  \n" +
                "        FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
                "        JOIN rfq_assy_quantity raq ON ramd.rfqAssyID = raq.rfqAssyID AND raq.rfqAssyId = prfqAssyID AND raq.isDeleted = 0  \n" +
                "        WHERE ramd.rfqAssyId = prfqAssyID  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM rfq_assy_qtywise_bom_laborcosting_detail raql WHERE raql.rfqAssyBOMMountingID = ramd.id AND raql.isDeleted = 0 AND raql.rfqAssyQtyID = raq.id)  \n" +
                "		AND ramd.isDeleted = 0;  \n" +
                "  \n" +
                "# update labor costing detail if there is any change in Mounting type wise QPA for update per assy price detail  \n" +
                "        UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql,  \n" +
                "        (SELECT id,totalQPA,lineCount,mountingTypeID,partID,subAssyID FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd WHERE ramd.isDeleted = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.subAssyID IS NULL) ralmd,  \n" +
                "        (SELECT id FROM rfq_assy_quantity WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID) raq  \n" +
                "        SET  \n" +
                "        raql.perAssyPrice = CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6)),  \n" +
                "        raql.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.updatedBy = puserID  \n" +
                "        WHERE ralmd.id = raql.rfqAssyBOMMountingID AND raq.id = raql.rfqAssyQtyID AND raql.isDeleted = 0 AND ralmd.subAssyID IS NULL  \n" +
                "        AND raql.perAssyPrice != CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6));  \n" +
                "# update Sub Assembly price based on qpa change  \n" +
                "		CALL `Sproc_getAllAssyLaborDetails`(NULL,prfqAssyID);  \n" +
                "  \n" +
                "#==================================  \n" +
                "/* End for Submit Data for Labor Costing */  \n" +
                "#==================================  \n" +
                "  \n" +
                "    -- Create consolidate qty for price group wise on same assembly,  \n" +
                "		CALL Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ(prfqAssyID,puserID);  \n" +
                "   COMMIT;  \n" +
                "    SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0);  \n" +
                "  \n" +
                "  \n" +
                "/*  UNION  \n" +
                "	SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "    LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,fun_DatetimetoUTCDateTime())<120) AND (TIMESTAMPDIFF(SECOND, rq.createdAt,fun_DatetimetoUTCDateTime())>120);  \n" +
                "*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                "    DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5306,'2.00','V1','Consolidate Data Issue in Labor Cost  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5306:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "    SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgCode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(SUM(psmrd.orderedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0) - IFNULL(SUM(psmrd.packingSlipQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSupplierRMADetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMADetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	psmr.receiptType = 'R' AND (psmrd.isDeleted = 0 AND psmr.isDeleted = 0);  \n" +
                "	ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, psmr.poNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.receiptDate  \n" +
                "				, psmr.refPackingSlipNumberForInvoice  \n" +
                "				, psmr.shippingMethodId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.shippingMethodId) shippingMethod  \n" +
                "				, psmr.carrierId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.carrierId) carrier  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, psmrd.packingSlipSerialNumber  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, (CASE WHEN psmrd.refPackingSlipIdForRma IS NULL THEN psmrd.refPackingSlipForRma ELSE fun_getPackingSlipNumberById(psmrd.refPackingSlipIdForRma) END) refPackingSlipNumber  \n" +
                "				, (CASE WHEN psmrd.refInvoiceIdForRma IS NULL THEN psmrd.refInvoiceForRma ELSE fun_getSupplierInvoiceNumberByID(psmrd.refInvoiceIdForRma) END) refInvoiceNumber  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "                , mfgMstdetail.mfgType AS mfrPnMfgType  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgcode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "                , psmrd.isDeleted  \n" +
                "                , psmr.remark AS rmaComment  \n" +
                "                , sc.mfgPN AS spn  \n" +
                "				, sc.id AS spnId  \n" +
                "                , fun_GetFormattedMfgCode(mfgMstdetail.mfgcode, mfgMstdetail.mfgName, vMfgCodeFormat) AS supplierCode  \n" +
                "                , fun_getUOMByID(comp.uom) AS uom  \n" +
                "                , psmrd.packingSlipQty AS rmaQty  \n" +
                "                , psmrd.remark AS rmaLineComment  \n" +
                "                , fun_getUserNameByID(psmr.lockedBy) AS lockedBy  \n" +
                "                , fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, fun_getDateTimeFormat()) lockedAt  \n" +
                "                , (case when psmr.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when psmr.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when psmr.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatus  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.isDeleted = false AND psmr.isDeleted = false  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT JOIN 	component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.isDeleted = false  \n" +
                "        LEFT JOIN	component sc ON sc.id = psmrd.refSupplierPartId AND sc.isDeleted = false AND sc.mfgType = 'DIST'  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND mfgMst.isDeleted = FALSE  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE  \n" +
                "		WHERE      	psmr.receiptType = 'R'  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psmr.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5307,'2.00','V1','Code Review Request 37188: User Story 36046: Elastic Search Old data related regenerate is anything missing add newly added fields dont add amount price related any field - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5307:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
                "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
                "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
                "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5308,'2.00','V1',' Alter procedure Sproc_GetSalesorderList - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5308:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "ALTER TABLE salesorderdet ADD COLUMN releaseLevelComment VARCHAR(1000);  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5309,'2.00','V1',' Add new SO field - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5309:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 shp.shippedQty  \n" +
                "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
                "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5310,'2.00','V1',' User Story 37270: Implement Sales Order Changes Suggested by JV - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5310:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RemoveSPNPartByMfgID`;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveSPNPartByMfgID`(  \n" +
                "IN pIDs VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQl1 = CONCAT('select id from component where refSupplierMfgpnComponentID in(', pIDs,')');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;  \n" +
                "END;  \n" +

                "DROP function IF EXISTS `fun_GetFormattedMfgCode`;  \n" +
                "CREATE FUNCTION `fun_GetFormattedMfgCode`(  \n" +
                "	pMfgCode varchar(255),  \n" +
                "    pMfgName varchar(255),  \n" +
                "    pFormateType INT  \n" +
                ") RETURNS varchar(550) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pMfgCodeName VARCHAR(550);  \n" +
                "    /*1 - Display Code first,2 - Only Name,3 - Only Code, Default - Code Last*/  \n" +
                "	SELECT (CASE WHEN pFormateType = 1 THEN  \n" +
                "			concat('(', pMfgCode, ') ', pMfgName)  \n" +
                "         WHEN pFormateType = 2 THEN  \n" +
                "			pMfgName  \n" +
                "		 WHEN pFormateType = 3 THEN  \n" +
                "			pMfgCode  \n" +
                "		ELSE  \n" +
                "			concat(pMfgName,' (', pMfgCode, ')')  \n" +
                "		END) INTO pMfgCodeName;  \n" +
                "RETURN pMfgCodeName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5311,'2.00','V1',' Bug 37235: PM: Deleted Parts should not be show in Enterprise Search - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5311:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "DROP function IF EXISTS `fun_GetFormattedMfgCode`;  \n" +
                "CREATE FUNCTION `fun_GetFormattedMfgCode`(  \n" +
                "	pMfgCode varchar(255),  \n" +
                "    pMfgName varchar(255),  \n" +
                "    pFormateType INT  \n" +
                ") RETURNS varchar(550) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pMfgCodeName VARCHAR(550);  \n" +
                "    /*1 - Display Code first,2 - Only Name,3 - Only Code, Default - Code Last*/  \n" +
                "	SELECT (CASE WHEN pFormateType = 1 THEN  \n" +
                "			concat('(', pMfgCode, ') ', pMfgName)  \n" +
                "         WHEN pFormateType = 2 THEN  \n" +
                "			pMfgName  \n" +
                "		 WHEN pFormateType = 3 THEN  \n" +
                "			pMfgCode  \n" +
                "		ELSE  \n" +
                "			concat(pMfgName,' (', pMfgCode, ')')  \n" +
                "		END) INTO pMfgCodeName;  \n" +
                "RETURN pMfgCodeName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5312,'2.00','V1',' Bug 37235: PM: Deleted Parts should not be show in Enterprise Search - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5312:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_validateScanUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "	DECLARE temp_wo_sub_status INT ;  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired,woSubStatus  \n" +
                "    INTO flag_kit_allocation_not_required_wo  , temp_wo_sub_status  \n" +
                "    FROM workorder wo  \n" +
                "    WHERE wo.woID = pwoID  \n" +
                "    AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "	#CHeck Only SMT Part allowed  in case of missing material status  \n" +
                "	IF (temp_wo_sub_status = 9 AND (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "			WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "										WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "            AND rla.partID =   ppartID  \n" +
                "			AND rla.isDeleted = 0) > 0 ) THEN  \n" +
                "		 SET result = fun_checkAndInsertError('UMID051', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "  \n" +
                "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;                */  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "    ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "-- select 'line 109', flag_tempLineCount,flag_kit_allocation_not_required_wo ,pisVerify,prfqLineItemsID,psaveUMIDDetails;  \n" +
                "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
                "			SET result = 0;  \n" +
                "        ELSEIF flag_kit_allocation_not_required_wo = 1 AND pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0  THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSE  \n" +
                "			-- need to check from here  \n" +
                "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
                "			-- Check placement tracking with more than one BOM line item for same part  \n" +
                "			IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0)) THEN  \n" +
                "-- select 'Line 119';  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
                "-- select 'Line 122';  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
                "-- select 'Line 125';  \n" +
                "				SET result = 0;  \n" +
                "			ELSE  \n" +
                "-- select 'Line 128';  \n" +
                "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "						SET uidVerified = 1;  \n" +
                "					ELSE  \n" +
                "						SET uidVerified = 0;  \n" +
                "						SET result = 0;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "						SET result = 0;  \n" +
                "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						-- check verification required  \n" +
                "						-- than verification require than check from which page scan/verify  \n" +
                "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                "							-- Take confirmation  \n" +
                "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "							-- if scan option selected than check for already scanned in flow first  \n" +
                "							-- if not scanned than add as verified umid directly  \n" +
                "							IF(pisVerify <> 1) THEN  \n" +
                "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "								WHERE transactionType='U'  \n" +
                "								AND refsidid = temp_umid_stock_id  \n" +
                "								AND mfgPNID=temp_umid_comp_id  \n" +
                "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "								AND woOPID = pwoOpID  \n" +
                "								AND employeeID=pemployeeId;  \n" +
                "  \n" +
                "								-- if already scanned than give message  \n" +
                "								-- else add as verified umid directly  \n" +
                "								IF(temp_feeder_transID > 0) THEN  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- VERIFIED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								-- if already scanned than verify same umid for history  \n" +
                "								-- if not scanned yet than give message  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
                "                         /*ELSE  \n" +
                "							-- verification require than check from which page/popup  \n" +
                "							-- if from scan popup than add umid as scanned new record  \n" +
                "							-- else check for verify flow  \n" +
                "							IF (pisVerify <> 1) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
                "  \n" +
                "								-- SCANNED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF; */  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5313	,'2.00','V1',' Sproc_validateScanUMIDOnly - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5313:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,  \n" +
                " `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES ('Allow to Lock/Unlock Customer Refund', 1, 0, fun_DatetimetoUTCDateTime(),  \n" +
                " 1, fun_DatetimetoUTCDateTime(), 1, 1) ;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5314,'2.00','V1',' lock/unlock feature master entry for customer refund - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5314:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id	, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		/* update all payments transaction to locked/unlocked */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "		    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "		    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "		    updatedBy = v_newLockedBy  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "		AND lockStatus = v_oldLockStatusPMT  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					/* update all payment dependent write off if any */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND lockStatus = v_oldLockStatusPMT  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "					/* update all direct lock/unlock write off */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE id = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "								ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CA','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "						 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "				SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "				    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    cps.updatedBy = v_newLockedBy  \n" +
                "				WHERE cps.paymentStatus = 'RE'  \n" +
                "				AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "				AND cps.isLocked = v_oldLockStatusInv  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5315,'2.00','V1',' Sproc_LockUnlockCustPaymentTransaction sp - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5315:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					pd.receivedQty,  \n" +
                "					pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0) availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 		refPackingSlipMaterialRecID, receivedQty, id AS packingSlipDetID,  \n" +
                "									umidCreatedQty, packagingID, partID , receivedStatus  \n" +
                "						FROM 		packing_slip_material_receive_det  \n" +
                "						WHERE 		isDeleted = 0  \n" +
                "						GROUP BY  	packingSlipDetID  \n" +
                "					) pd ON vu.packingSlipDetID = pd.packingSlipDetID  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
                "								AND pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "						AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.packingSlipDetID  \n" +
                "			having SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 01-10-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* left join filter */  \n" +
                "	IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCodeID, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId, packingSlipNumber)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND(((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND(((cssh.scrappedUnit/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5316,'2.00','V1',' Bug 37173: Qa Testing issues for #36899: UMID Creation based on packing slip detail line and maintain reference - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5316:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-09-2021 *********************************** */
                "ALTER TABLE `dataelement`  \n" +
                "CHANGE COLUMN `hideLabel` `isHideLabel` TINYINT(1) NULL DEFAULT '0' ;  \n" +
                /* **************************** Add Script Version -> 30-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5317,'2.00','V1',' Code Review: User Story 37007: Data Tracking Entities: Add new control field for Label - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5317:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_genericcategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
                "  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_workstation_groups\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentTermsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"document\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND fileGroupBy IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"shipping_method\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"payable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Payable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"receivable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Receivable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"inspection_mst\" else \"\" end as msg FROM inspection_mst WHERE isDeleted=0 AND partRequirementCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"P\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"RR\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE isDeleted=0 AND barcodeSeparatorID IN(',IDs,') LIMIT 1)  \n" +
                "	     ');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempGenericCategory t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			  SELECT * FROM tempGenericCategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempGenericCategory t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "							   FROM tempGenericCategory t1  \n" +
                "								INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "								WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "								ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "    DROP TEMPORARY TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                "SELECT `a`.`woid` AS `woid`,`a`.`woNumber` AS `woNumber`,`a`.`woVersion` AS `woVersion`,`a`.`partID` AS `partID`,`a`.`buildQty` AS `buildQty`,`a`.`customerID` AS `customerID`,IFNULL(SUM(`a`.`buildOverageQty`),0) AS `buildOverageQty`,IFNULL(SUM(`a`.`POQty`),0) AS `poQty`,IFNULL(SUM(`a`.`initialStockPoQty`),0) AS `initialStockPoQty`,IFNULL(SUM(`a`.`ShippedQty`),0) AS `shippedQty`,IFNULL(SUM(`a`.`ScrapQty`),0) AS `scrapQty`,IFNULL(SUM(`a`.`readytoShipQty`),0) - IFNULL(SUM(`a`.`stockAdjustmentQty`),0) AS `readytoShipQty`,IFNULL(SUM(`a`.`readytoShipQty`),0) AS `readytoShipQtyWithStockAdjustment`,IFNULL(SUM(`a`.`stockAdjustmentQty`),0) AS `stockAdjustmentQty`,IFNULL(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`),0) AS `stockAdjustmentQtyWithFinalAdjustment`,SUM(`a`.`wipQty`) AS `wipQty`,SUM(`a`.`firstOPtotalQty`) AS `firstOPtotalQty` FROM (SELECT `wo`.`woID` AS `woid`,`wo`.`woNumber` AS `woNumber`,`wo`.`woVersion` AS `woVersion`,`wo`.`partID` AS `partID`,`wo`.`buildQty` AS `buildQty`,`wo`.`customerID` AS `customerID`,SUM(`wo`.`excessQty`) AS `buildOverageQty`,IFNULL(SUM(`wsd`.`Poqty`),0) AS `POQty`,0 AS `initialStockPoQty`,IFNULL(SUM(`scrp`.`ScrapQty`),0) AS `ScrapQty`,IFNULL(SUM(`sh`.`shippedqty`),0) AS `ShippedQty`,(IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0) - IFNULL(SUM(`sh`.`shippedqty`),0)) AS `readytoShipQty`,IFNULL(SUM(`res`.`openingstock`),0) AS `stockAdjustmentQty`,IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0) AS `stockAdjustmentQtyWithFinalAdjustment`,IFNULL(SUM(`fpq`.`firstOPtotalQty`),0) AS `firstOPtotalQty`,(CASE WHEN ((IFNULL(`wo`.`buildQty`,0) - (IFNULL(SUM(`scrp`.`ScrapQty`),0) + IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0))) < 0) THEN 0 ELSE (IFNULL(`wo`.`buildQty`,0) - (IFNULL(SUM(`scrp`.`ScrapQty`),0) + IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0))) END) AS `wipQty` FROM (((((`workorder` `wo` LEFT JOIN (SELECT `workorder_salesorder_details`.`woID` AS `woid`,SUM(`workorder_salesorder_details`.`poQty`) AS `Poqty` FROM `workorder_salesorder_details` WHERE (`workorder_salesorder_details`.`isDeleted` = 0) GROUP BY `workorder_salesorder_details`.`woID`) `wsd` ON((`wsd`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `wt`.`woID` AS `woid`,SUM(`wp`.`scrapQty`) AS `ScrapQty` FROM (`workorder_trans` `wt` JOIN `workorder_trans_production` `wp` ON((`wt`.`woTransID` = `wp`.`woTransID`))) WHERE ((`wt`.`isDeleted` = 0) AND (`wp`.`isDeleted` = 0)) GROUP BY `wt`.`woID`) `scrp` ON((`scrp`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `shippedassembly`.`workorderID` AS `workorderid`,SUM(`shippedassembly`.`shippedqty`) AS `shippedqty` FROM `shippedassembly` WHERE (`shippedassembly`.`isDeleted` = 0) GROUP BY `shippedassembly`.`workorderID`) `sh` ON((`sh`.`workorderid` = `wo`.`woID`))) LEFT JOIN (SELECT `astock`.`woID` AS `woid`,IFNULL(SUM((CASE WHEN (`astock`.`type` = 'AS') THEN `astock`.`openingStock` ELSE 0 END)),0) AS `openingstock`,IFNULL(SUM(`astock`.`openingStock`),0) AS `stockAdjustmentQtyWithFinalAdjustment` FROM `assemblystock` `astock` WHERE ((`astock`.`isDeleted` = 0) AND (`astock`.`woID` IS NOT NULL)) GROUP BY `astock`.`woID`,`astock`.`woNumber`,`astock`.`partID`) `res` ON((`res`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `workorder_trans`.`woID` AS `woID`,SUM(`workorder_trans_production`.`totalQty`) AS `firstOPtotalQty` FROM (`workorder_trans_production` JOIN `workorder_trans` ON(((`workorder_trans_production`.`woTransID` = `workorder_trans`.`woTransID`) AND `workorder_trans`.`opID` IN (SELECT `FUN_GETFIRSTOPERATIONID`(`workorder_trans`.`woID`))))) WHERE ((`workorder_trans_production`.`isDeleted` = 0) AND (`workorder_trans`.`isDeleted` = 0)) GROUP BY `workorder_trans`.`woID`) `fpq` ON((`fpq`.`woID` = `wo`.`woID`))) WHERE (`wo`.`isDeleted` = 0) GROUP BY `wo`.`woID`,`wo`.`woNumber`,`wo`.`woVersion`,`wo`.`partID`,`wo`.`buildQty`,`wo`.`customerID` UNION ALL SELECT `a`.`woid` AS `woid`,`a`.`woNumber` AS `woNumber`,NULL AS `woVersion`,`a`.`partID` AS `partID`,0 AS `buildQty`,NULL AS `customerID`,0 AS `buildOverageQty`,0 AS `POQty`,MAX(`a`.`initialStockPoQty`) AS `initialStockPoQty`,0 AS `ScrapQty`,SUM(`a`.`ShippedQty`) AS `ShippedQty`,(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`) - SUM(`a`.`ShippedQty`)) AS `readytoShipQty`,SUM(`a`.`stockAdjustmentQty`) AS `stockAdjustmentQty`,SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`) AS `stockAdjustmentQtyWithFinalAdjustment`,0 AS `firstOPtotalQty`,0 AS `wipQty` FROM (SELECT `sh`.`workorderID` AS `woid`,`sh`.`woNumber` AS `woNumber`,`sh`.`partID` AS `partID`,0 AS `initialStockPoQty`,SUM(`sh`.`shippedqty`) AS `ShippedQty`,0 AS `readytoShipQty`,0 AS `stockAdjustmentQty`,0 AS `stockAdjustmentQtyWithFinalAdjustment` FROM `shippedassembly` `sh` WHERE ((`sh`.`isDeleted` = 0) AND (`sh`.`workorderID` IS NULL) AND (`sh`.`woNumber` IS NOT NULL)) GROUP BY `sh`.`woNumber`,`sh`.`partID` UNION ALL SELECT `astock`.`woID` AS `woid`,`astock`.`woNumber` AS `woNumber`,`astock`.`partID` AS `partID`,SUM(`astock`.`poQty`) AS `initialStockPoQty`,0 AS `ShippedQty`,0 AS `readytoShipQty`,IFNULL(SUM((CASE WHEN (`astock`.`type` = 'AS') THEN `astock`.`openingStock` ELSE 0 END)),0) AS `stockAdjustmentQty`,IFNULL(SUM(`astock`.`openingStock`),0) AS `stockAdjustmentQtyWithFinalAdjustment` FROM `assemblystock` `astock` WHERE ((`astock`.`isDeleted` = 0) AND (`astock`.`woID` IS NULL) AND (`astock`.`woNumber` IS NOT NULL)) GROUP BY `astock`.`woNumber`,`astock`.`partID`) `a` GROUP BY `a`.`woNumber`,`a`.`partID`) `a` GROUP BY `a`.`woid`,`a`.`woNumber`,`a`.`woVersion`,`a`.`partID`,`a`.`buildQty`,`a`.`customerID`;  \n" +
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblySummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySummaryDetails`(  \n" +
                "	IN pPartID INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "     SELECT  \n" +
                "	partID,  \n" +
                "	SUM(readytoShipQty) readytoShipQty,  \n" +
                "	SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "	SUM(wipQty) wipQty,  \n" +
                "	SUM(excessFreetoUseQty) excessFreetoUseQty,  \n" +
                "	SUM(poQty) poQty,  \n" +
                "	SUM(shippedQty) shippedQty,  \n" +
                "	SUM(backOrderQty) backOrderQty  \n" +
                "	FROM(  \n" +
                "		SELECT  \n" +
                "			ka.partId partID,  \n" +
                "			0 readytoShipQty,  \n" +
                "			0 stockAdjustmentQty,  \n" +
                "			0 wipQty,  \n" +
                "			0 excessFreetoUseQty,  \n" +
                "			SUM(vu_ssr.`PO Qty`) poQty,  \n" +
                "			SUM(vu_ssr.`Shipped Qty`) shippedQty,  \n" +
                "			SUM((CASE WHEN (ka.perAssyBuildQty IS NULL OR ka.perAssyBuildQty = 0) THEN  \n" +
                "				(vu_ssr.`PO Qty` - vu_ssr.`Shipped Qty`)  \n" +
                "			ELSE  \n" +
                "				((ka.perAssyBuildQty * vu_ssr.`PO Qty`) - vu_ssr.`Shipped Qty`)  \n" +
                "			END)) AS backOrderQty,  \n" +
                "			ka.perAssyBuildQty AS qpa  \n" +
                "		 FROM vu_salesorder_shipped_report vu_ssr  \n" +
                "		 INNER JOIN kit_allocation_assy_detail ka  \n" +
                "			ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId` AND ka.isDeleted=0  \n" +
                "		WHERE ka.partID = pPartID  \n" +
                "		GROUP BY ka.partID  \n" +
                "		UNION ALL  \n" +
                "		SELECT  \n" +
                "			partID,  \n" +
                "			SUM(readytoShipQty) readytoShipQty,  \n" +
                "			SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "			SUM(wipQty) wipQty,  \n" +
                "			SUM((CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty  \n" +
                "				ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END)) AS excessFreetoUseQty,  \n" +
                "			0 poQty,  \n" +
                "			0 shippedQty,  \n" +
                "			0 backOrderQty,  \n" +
                "			1 qpa  \n" +
                "		FROM vu_workorder_summary_stk vu_wss  \n" +
                "		WHERE partID = pPartID  \n" +
                "		GROUP BY partID) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5318,'2.00','V1','Resolved Delete case and View Summary Stock Changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5318:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* left join filter */  \n" +
                "	IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomClassID, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCodeID, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId, packingSlipNumber)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_DatetimetoUTCDateTime() AND (fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "DROP VIEW  IF EXISTS `vu_material_consumption_scrapped_det`;  \n" +
                "CREATE VIEW `vu_material_consumption_scrapped_det` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `kitallocationId`,  \n" +
                "        `sdm`.`id` AS `refSalesOrderId`,  \n" +
                "        `sdm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sdm`.`soDate` AS `sodate`,  \n" +
                "        `sdm`.`poNumber` AS `ponumber`,  \n" +
                "        `sdm`.`revision` AS `revision`,  \n" +
                "        `sdd`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `sdd`.`kitNumber` AS `kitNumber`,  \n" +
                "        `sdd`.`kitQty` AS `kitQty`,  \n" +
                "        `cassy`.`id` AS `assypartid`,  \n" +
                "        `cassy`.`mfgPN` AS `assyPN`,  \n" +
                "        `cassy`.`mfgcodeID` AS `custid`,  \n" +
                "        `cassy`.`PIDCode` AS `AssyID`,  \n" +
                "        `cassy`.`nickName` AS `nickName`,  \n" +
                "        `b`.`id` AS `id`,  \n" +
                "        `b`.`mfgPN` AS `mfgPN`,  \n" +
                "        `b`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `b`.`PIDCode` AS `PIDCode`,  \n" +
                "        `b`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `b`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `b`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `css`.`id` AS `umidid`,  \n" +
                "        `css`.`uid` AS `umid`,  \n" +
                "        `css`.`costCategoryID` AS `costcategoryid`,  \n" +
                "        `css`.`packaging` AS `packaging`,  \n" +
                "        `css`.`orgPkgUnit` AS `orgPkgUnit`,  \n" +
                "        `a`.`STATUS` AS `status`,  \n" +
                "        `a`.`returnDate` AS `returndate`,  \n" +
                "        `a`.`allocatedQty` AS `allocatedqty`,  \n" +
                "        `a`.`allocatedUnit` AS `allocatedunit`,  \n" +
                "        `a`.`allocatedUOM` AS `allocateduom`,  \n" +
                "        `a`.`consumeQty` AS `consumeqty`,  \n" +
                "        `a`.`consumeUnit` AS `consumeunit`,  \n" +
                "        `a`.`scrapExpiredQty` AS `scrapExpiredqty`,  \n" +
                "        `a`.`scrapExpiredUnit` AS `scrapExpiredunit`,  \n" +
                "        `a`.`scrapExpiredUOM` AS `scrapexpireduom`,  \n" +
                "        `a`.`componentSIDStockHistoryID` AS `componentSIDStockHistoryID`,  \n" +
                "        ((CASE  \n" +
                "            WHEN ((`a`.`consumeQty` - `a`.`allocatedQty`) < 0) THEN 0  \n" +
                "            ELSE (`a`.`consumeQty` - `a`.`allocatedQty`)  \n" +
                "        END) + `a`.`scrapExpiredQty`) AS `scrappedQty`,  \n" +
                "        ((CASE  \n" +
                "            WHEN ((`a`.`consumeUnit` - `a`.`allocatedUnit`) < 0) THEN 0  \n" +
                "            ELSE (`a`.`consumeUnit` - `a`.`allocatedUnit`)  \n" +
                "        END) + `a`.`scrapExpiredUnit`) AS `scrappedunit`  \n" +
                "    FROM  \n" +
                "        (((((`kit_allocation` `a`  \n" +
                "        JOIN `component_sid_stock` `css` ON ((`a`.`refUIDId` = `css`.`id`)))  \n" +
                "        JOIN `component` `b` ON ((`css`.`refcompid` = `b`.`id`)))  \n" +
                "        JOIN `component` `cassy` ON ((`a`.`assyID` = `cassy`.`id`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON ((`a`.`refSalesOrderDetID` = `sdd`.`id`)))  \n" +
                "        JOIN `salesordermst` `sdm` ON ((`sdd`.`refSalesOrderID` = `sdm`.`id`)))  \n" +
                "    WHERE  \n" +
                "        (`a`.`STATUS` = 'R');  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentKitScrappedQty`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentKitScrappedQty`(  \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	vu.id as partId,  \n" +
                "			vu.poNumber,  \n" +
                "			vu.salesOrderNumber,  \n" +
                "			vu.kitNumber,  \n" +
                "			vu.refSalesOrderId,  \n" +
                "			vu.AssyID,  \n" +
                "			vu.assyPN,  \n" +
                "			vu.assypartid,  \n" +
                "			vu.umidid,  \n" +
                "			vu.scrappedUnit,  \n" +
                "			SUM(((vu.scrappedUnit/vu.orgPkgUnit) * 100)) perScrapQty  \n" +
                "			FROM vu_material_consumption_scrapped_det vu  \n" +
                "	WHERE 1 = 1 AND (CASE WHEN pPartID IS NOT NULL THEN vu.id = pPartID ELSE 1 = 1 IS NULL END)  \n" +
                "	GROUP BY vu.refSalesOrderId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "DROP function IF EXISTS `fun_getConsolidateLineMFGPNWithPackagingforkit`;  \n" +
                "CREATE FUNCTION `fun_getConsolidateLineMFGPNWithPackagingforkit`(  \n" +
                "  pIsPackaging TINYINT,  \n" +
                "  PrefSalesOrderDetid INT,  \n" +
                "  pCustomerID INT  \n" +
                "	) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result TEXT;  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT  CONCAT('(SELECT  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0),''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\" )  \n" +
                "			FROM  \n" +
                "			( select z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep,  \n" +
                "                         z.leadTime  \n" +
                "						  from  \n" +
                "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload,  \n" +
                "                                    IFNULL(d.leadTime,c.leadTime) AS leadTime  \n" +
                "									FROM kit_allocation_consolidate_line_alternatepart  al  \n" +
                " 									JOIN kit_allocation_consolidate_line_detail l ON  l.id = al.kitConsolidateID  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_consolidate_line_alternatepart x  \n" +
                " 													where  x.kitConsolidateID  =  al.kitConsolidateID  \n" +
                " 															 and x.mfgpnid = d.id  and x.isdeleted = 0 and al.isdeleted = 0  \n" +
                " 															 and d.id != c.id)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', PrefSalesOrderDetid,'  \n" +
                "									AND l.id = a.id  AND al.isDeleted = 0 AND c.isGoodPart = 1',  \n" +
                "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by  z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "					) a  \n" +
                "  		) AS mfgPN')  INTO @result;  \n" +
                "	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5319,'2.00','V1',' User Story 33849: Implement Scrapped material concept into UMID/PART level - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5319:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_salesordermst;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	-- delete sales order master if reference ID is not null  \n" +
                "	-- refernece ID is equal to salesOrderDetID  \n" +
                "	IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_salesorder_details\" else \"\" end as msg FROM workorder_salesorder_details WHERE deletedAt IS NULL AND salesOrderDetailID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE type=\"OS\" and isDeleted = 0 AND refSalesOrderDetID IN(',IDs,') LIMIT 1)  \n" +
                "			  UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where deletedAt IS NULL AND refSODetID IN(',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						ka.updatedBy = ', deletedBy ,',  \n" +
                "						ka.updateByRoleId = ', pRoleID ,',  \n" +
                "						ka.`status` = \"D\",  \n" +
                "						ka.remark = \"Auto Deallocated from ReCalculation\"  \n" +
                "					WHERE 	ka.refSalesOrderDetID IN (', IDs ,')  \n" +
                "							AND ka.`status` = \"A\"  \n" +
                "				');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('  \n" +
                "					UPDATE 	salesorder_plan_detailsmst  \n" +
                "					SET 	isDeleted = ', 1 ,',  \n" +
                "						deletedAt = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						deletedBy = ', deletedBy ,'  \n" +
                "					WHERE 	salesOrderDetID IN (', IDs ,')  \n" +
                "							AND isDeleted = 0  \n" +
                "				');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update salesshippingmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where sDetID  IN(',IDs,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update salesorderdet set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id IN(',IDs,')) and deletedAt is NULL');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete sales order mst */  \n" +
                "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "					FROM salesordermst  \n" +
                "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "				SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "				/* [E] - Add Time line log for delete sales order mst */  \n" +
                "  \n" +
                "				SELECT * FROM tempSalesOrderMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSalesOrderMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempSalesOrderMst;  \n" +
                "	ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "		SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "			FROM salesordermst  \n" +
                "		WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "		SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\"' deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "		/* [E] - Add Time line log for delete sales order mst */  \n" +
                "		-- Added for sales order master record delete  \n" +
                "		SET @SQl5 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "		PREPARE stmt5 FROM @SQl5;  \n" +
                "		EXECUTE stmt5;  \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM salesordermst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5320,'2.00','V1','Sproc_checkDelete_salesordermst - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5320:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetActiveSalesOrderDetailList;  \n" +
                "CREATE PROCEDURE `Sproc_GetActiveSalesOrderDetailList`(  \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN pWOID INT(11),  \n" +
                "	IN pCustomerID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	SET whereClause = \"AND co.category = 3 AND co.deletedAt IS NULL\";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "	 	SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.mfgcodeID in(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(sm.customerID=\",pCustomerID,\" or sm.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT  	sd.id id,  \n" +
                "				sd.refSalesOrderID refSalesOrderID,  \n" +
                "				sd.qty qty,  \n" +
                "				sd.price price,  \n" +
                "				sd.mrpQty mrpQty,  \n" +
                "				sd.shippingQty shippingQty,  \n" +
                "				sd.remark remark,  \n" +
                "				sd.isHotJob isHotJob,  \n" +
                "				sd.partID partID,  \n" +
                "				sd.lineID lineID,  \n" +
                "				sd.isCancle isCancle,  \n" +
                "				sm.salesOrderNumber salesOrderNumber,  \n" +
                "				sm.poNumber poNumber,  \n" +
                "				sm.poDate poDate,  \n" +
                "				sm.customerID customerID,  \n" +
                "				sm.revision revision,  \n" +
                "				sm.status `status`,  \n" +
                "				sm.soDate soDate,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName` ,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	sd.partID = \",pPartID,\" THEN  \n" +
                "								1  \n" +
                "						ELSE  \n" +
                "								2  \n" +
                "					END  \n" +
                "				) AS AssyType,  \n" +
                "				(  \n" +
                "					SELECT perAssyBuildQty  \n" +
                "					FROM 	kit_allocation_assy_detail  \n" +
                "					WHERE 	refSalesorderdetid = sd.id  \n" +
                "							AND partId = \",pPartID,\"  \n" +
                "							AND isDeleted = 0  \n" +
                "				) AS qpaa,  \n" +
                "				(  \n" +
                "					CASE 	WHEN 	\",IFNULL(pWOID,0),\" = 0 THEN 0  \n" +
                "						ELSE 	(  \n" +
                "								SELECT 	IFNULL(SUM(wsd.poQty),0) - IFNULL(SUM(wsd.scrapQty),0)  \n" +
                "								FROM 	workorder_salesorder_details wsd  \n" +
                "								WHERE 	wsd.salesOrderDetailID = sd.id  \n" +
                "										AND wsd.parentPartID = sd.partID  \n" +
                "										AND wsd.deletedAt IS NULL  \n" +
                "										AND IFNULL(wsd.isDeleted,0)= 0  \n" +
                "										AND wsd.woID <> \",IFNULL(pWOID,0),\"  \n" +
                "							)  \n" +
                "					END  \n" +
                "				) AS totalAssignedQty , astk.initialStockCount  \n" +
                "		FROM 		salesorderdet sd  \n" +
                "		LEFT JOIN 	salesordermst sm ON (sm.id = sd.refSalesOrderID AND sm.deletedAt IS NULL AND IFNULL(sm.isDeleted,0)=0)  \n" +
                "		LEFT JOIN 	component co ON sd.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "		LEFT JOIN 	rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		LEFT JOIN 	mfgcodemst mfg ON co.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "        LEFT JOIN	vu_salesorder_updatedlist_report vsur ON sd.id = vsur.SalesOrderDetailId  \n" +
                "        LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE 		sd.isDeleted =0  \n" +
                "					AND sd.partCategory=3  \n" +
                "					AND IFNULL(sd.isCancle,0) = 0  \n" +
                "					AND sd.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\")\",  \n" +
                "                    \"AND sd.salesOrderDetStatus = 1 \", whereClause,'  \n" +
                "		order by 	co.PIDCode  \n" +
                "	');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5321,'2.00','V1','Sproc_GetActiveSalesOrderDetailList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5321:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAllAssemblyBySearch;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllAssemblyBySearch`(  \n" +
                "	IN pSearch VARCHAR(100),  \n" +
                "	IN pId INT(11),  \n" +
                "	IN pIsActiveAssembliy TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	 SELECT *  \n" +
                "     FROM (  \n" +
                "				SELECT 	com.id,  	com.mfgPN, 		com.PIDCode,	com.mfgPNDescription, m.id as mfgCodeID,  \n" +
                "						CONCAT('(', m.mfgCode, ') ', com.mfgPN) mfgPNWithMfgCode ,  \n" +
                "                        CONCAT('(', m.mfgCode, ') ', m.mfgName) As mfgCodewithName ,  \n" +
                "                        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) mfgCodeFormated,  \n" +
                "						com.nickName , m.mfgCode , r.rohsIcon , r.name ,  \n" +
                "                        concat(com.PIDCode ,' | ',com.mfgPN) SearchPIDMfgPN  \n" +
                "				FROM 	COMPONENT com  \n" +
                "				INNER JOIN mfgCodemst m ON com.mfgcodeID = m.id  AND m.isDeleted = 0 AND m.mfgType = 'MFG'  \n" +
                "                JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
                "				WHERE 	com.id = IFNULL(pId, com.id)  \n" +
                "				AND 	com.category = 3  \n" +
                "				AND 	com.isDeleted = 0  \n" +
                "				AND  	(CASE WHEN pIsActiveAssembliy = TRUE THEN  \n" +
                "								com.partStatus = 1  /*Active*/  \n" +
                "							WHEN pIsActiveAssembliy = FALSE THEN  \n" +
                "								com.partStatus != 1 /*Inactive (other than active consider as inactive)*/  \n" +
                "							ELSE 1 = 1 END)  \n" +
                "	) AS a  \n" +
                "	WHERE (CASE WHEN pSearch IS NULL THEN 1 = 1  \n" +
                "			ELSE (mfgPNWithMfgCode LIKE CONCAT('%', pSearch , '%') OR PIDCode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "			END)  \n" +
                "	ORDER BY mfgPNWithMfgCode;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5322,'2.00','V1','Sproc_GetAllAssemblyBySearch - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5322:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyStock;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pStockType VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" Select ass.id ,ass.openingdate,  \n" +
                "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
                "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
                "            ass.mfgCodeFormated, ass.mfgCodeID,  \n" +
                "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.woID, ass.serialNo,  \n" +
                "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
                "			ass.parentWarehouse,  \n" +
                "			ass.systemGeneratedsss,ass.typestock,  \n" +
                "			ass.dateCode, ifnull(ass.dateCodeFormat, wo.dateCodeFormat) dateCodeFormat,  \n" +
                "			ass.updatedby,ass.createdby,  \n" +
                "			ass.createdbyRole, ass.updatedbyRole,  \n" +
                "			ass.createdAt, ass.updatedAt,  \n" +
                "			ass.qtyBox,  \n" +
                "            ifnull(ass.poQty, SUM(`wsd`.`poQty`)) AS `totalPOQty`,  \n" +
                "			ifnull(ass.poNumber, GROUP_CONCAT(`so`.`poNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `poNumber`,  \n" +
                "			ifnull(ass.soNumber, GROUP_CONCAT(`so`.`salesOrderNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `salesOrderNumber`,  \n" +
                "            ass.refSalesOrderDetID , ass.soID , ass.isLegacyPO , ass.isLegacyPOText,  \n" +
                "            ass.isPOAdded, ass.isPOAddedText  \n" +
                "			from (SELECT s.id, s.openingdate,  \n" +
                "				c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,  \n" +
                "				c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") mfgCodeFormated,  \n" +
                "				ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,  \n" +
                "				s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,  \n" +
                "				fun_getDepartmentNameByBinID(s.binID) parentWarehouse,  \n" +
                "				(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,  \n" +
                "				fun_getStockType(s.type) typestock,  \n" +
                "				s.dateCode,s.dateCodeFormat,  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "				fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "				  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox,  \n" +
                "				   s.poQty,s.poNumber,s.soNumber,  \n" +
                "				  s.type,s.woID ,s.refSalesOrderDetID , s.refSalesOrderID soID, legcySO.isLegacyPO,  \n" +
                "                  fun_getIntToText(ifnull(legcySO.isLegacyPO,0)) isLegacyPOText,  \n" +
                "                  s.isPOAdded ,  \n" +
                "                  c.mfgCodeID,  \n" +
                "                  fun_getIntToText(ifnull(s.isPOAdded,0)) isPOAddedText  \n" +
                "			FROM assemblystock s  \n" +
                "			JOIN component c ON c.id = s.partID AND c.category = 3  \n" +
                "            INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  AND m.isDeleted = 0 AND m.mfgType = 'MFG'  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "            LEFT JOIN salesordermst legcySO on legcySO.id = s.refSalesOrderID and legcySO.isDeleted = 0  \n" +
                "			WHERE s.isdeleted = 0  \n" +
                "		) ass  \n" +
                "        LEFT JOIN workorder_salesorder_details wsd ON wsd.woID = ass.woID and wsd.partID = ass.partID and wsd.isDeleted = 0  \n" +
                "        LEFT JOIN workorder wo ON wo.woID = ass.woID and wo.isDeleted = 0  \n" +
                "        LEFT JOIN salesorderdet sod ON sod.id = wsd.salesOrderDetailID and wsd.partID = sod.partID and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst so ON so.id = sod.refSalesOrderID and so.isDeleted = 0  \n" +
                "        where FIND_IN_SET(ass.type,'\",pStockType,\"')  \n" +
                "        group by ass.id ,ass.openingdate,  \n" +
                "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
                "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
                "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.serialNo,  \n" +
                "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
                "			ass.parentWarehouse,  \n" +
                "			ass.systemGeneratedsss,ass.typestock,  \n" +
                "			ass.dateCode,ass.dateCodeFormat,  \n" +
                "			ass.updatedby,ass.createdby,  \n" +
                "			ass.createdbyRole, ass.updatedbyRole,  \n" +
                "			ass.createdAt, ass.updatedAt,  \n" +
                "			ass.qtyBox\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5323,'2.00','V1','Sproc_GetAssemblyStock - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5323:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyStockDetailByID;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(  \n" +
                "	IN passyStockID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		SELECT s.id,s.openingStock,s.openingdate,  \n" +
                "			s.woNumber,s.serialNo,s.partID,s.`type`,  \n" +
                "			s.whID,s.binID,  s.dateCode, s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,  \n" +
                "			(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID  \n" +
                "				AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty,  \n" +
                "		    s.refSalesOrderDetID,s.refSalesOrderID,s.isPOAdded  ,  \n" +
                "            som.isLegacyPO,  \n" +
                "            som.poRevision  \n" +
                "		FROM assemblystock s  \n" +
                "        LEFT JOIN salesordermst som  ON som.id = s.refSalesOrderID and som.isDeleted  =0  \n" +
                "		WHERE s.id=passyStockID  \n" +
                "		AND s.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5324,'2.00','V1','Sproc_GetAssyStockDetailByID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5324:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS sproc_getLegacySalesOrderList  ;  \n" +
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderDetailByPartId  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderDetailByPartId`(  \n" +
                "	pPartId INT,  \n" +
                "    pSearchPO Varchar(2000),  \n" +
                "    pSalesOrderDetId INT,  \n" +
                "    pIncludeCompleted INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = concat(\"SELECT CONCAT(so.poNumber,' | ', lineID) SOPONumber,  \n" +
                "			so.salesOrderNumber soNumber,  \n" +
                "			so.poNumber,  \n" +
                "            so.customerId,  \n" +
                "            sod.id salesOrderDetID,  \n" +
                "            sod.partId,  \n" +
                "            sum(if(so.isLegacyPO = 1 ,sod.qty,sod.originalPOQty)) originalPOQty,  \n" +
                "            sum(if(so.isLegacyPO = 1 ,sod.originalPOQty,sod.qty)) POQty,  \n" +
                "            so.isLegacyPO,  \n" +
                "            so.id salesOrderID ,  \n" +
                "            sod.salesOrderDetStatus ,  \n" +
                "            sod.lineID,  \n" +
                "            so.poRevision  \n" +
                "		FROM Salesordermst so  \n" +
                "		JOIN Salesorderdet sod on sod.refSalesOrderID = so.id and sod.isDeleted = 0  \n" +
                "		WHERE so.isDeleted = 0  \n" +
                "		AND so.status = 1  \n" +
                "        AND sod.isCancle = 0  \n" +
                "        AND not exists (select 1 from workorder_salesorder_details wsd where wsd.salesOrderDetailID = sod.id and wsd.isDeleted = 0 and parentPartID = sod.partId )  \n" +
                "		AND sod.partId = \", pPartID ,  \n" +
                "	  \" AND (so.salesOrderNumber like '%\", pSearchPO ,\"%' or so.poNumber like '%\", pSearchPO ,\"%' )\"  \n" +
                "    );  \n" +
                "  \n" +
                "    IF pIncludeCompleted IS NOT NULL THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = concat(@temp_sproc_getLegacySalesOrderList , \" and sod.salesOrderDetStatus in (1,2)\");  \n" +
                "    ELSE  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = concat(@temp_sproc_getLegacySalesOrderList , \" and sod.salesOrderDetStatus = 1\");  \n" +
                "    END IF;  \n" +
                "  -- SELECT  @temp_sproc_getLegacySalesOrderList;  \n" +
                "    IF(pSalesOrderDetId IS NOT NULL) THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" and sod.id = \",pSalesOrderDetId);  \n" +
                "    END IF;  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" group by so.salesOrderNumber, so.poNumber,  \n" +
                "										so.customerId,sod.id,sod.partId,so.isLegacyPO,so.id\");  \n" +
                "    SET @temp_sproc_getLegacySalesOrderList = CONCAT(\" SELECT * FROM ( \",@temp_sproc_getLegacySalesOrderList,\" ) c\");  \n" +
                "    PREPARE query1 FROM @temp_sproc_getLegacySalesOrderList;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5325,'2.00','V1','Sproc_GetSalesOrderDetailByPartId - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5325:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\"FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5326,'2.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5326:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5327,'2.00','V1','Sproc_GetSOPIDList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5327:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021 *********************************** */
                "update page_detail set menuName = 'Manage Parts Requirement & Comments' where pageRoute = 'app.component.managecomponent.comments';  \n" +
                "update page_detail set menuName = 'Manage Track Data' where pageRoute = 'app.component.managecomponent.datafields';  \n" +
                "update page_detail set menuName = 'Manage Parts Supplier Pricing History' where pageRoute = 'app.component.managecomponent.pricinghistory';  \n" +
                "update page_detail set menuName = 'Manage Part ECO/DFM' where pageRoute = 'app.component.managecomponent.dfm';  \n" +
                "update page_detail set menuName = 'Manage Parts CALL Supplier API' where pageRoute = 'app.component.managecomponent.supplierapiresponse';  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5328,'2.00','V1',' User Story 37261: Apply PM changes given by Client - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5328:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblySummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySummaryDetails`(  \n" +
                "	IN pPartID INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "     SELECT  \n" +
                "	partID,  \n" +
                "	SUM(readytoShipQty) readytoShipQty,  \n" +
                "	SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "	SUM(wipQty) wipQty,  \n" +
                "	SUM(excessFreetoUseQty) excessFreetoUseQty,  \n" +
                "	SUM(poQty) poQty,  \n" +
                "	SUM(shippedQty) shippedQty,  \n" +
                "	SUM(backOrderQty) backOrderQty  \n" +
                "	FROM(  \n" +
                "		SELECT  \n" +
                "			vu_ssr.partId partID,  \n" +
                "			0 readytoShipQty,  \n" +
                "			0 stockAdjustmentQty,  \n" +
                "			0 wipQty,  \n" +
                "			0 excessFreetoUseQty,  \n" +
                "			SUM(vu_ssr.`PO Qty`) poQty,  \n" +
                "			SUM(vu_ssr.`Shipped Qty`) shippedQty,  \n" +
                "			SUM((CASE WHEN (ka.perAssyBuildQty IS NULL OR ka.perAssyBuildQty = 0) THEN  \n" +
                "				(vu_ssr.`PO Qty` - vu_ssr.`Shipped Qty`)  \n" +
                "			ELSE  \n" +
                "				((ka.perAssyBuildQty * vu_ssr.`PO Qty`) - vu_ssr.`Shipped Qty`)  \n" +
                "			END)) AS backOrderQty,  \n" +
                "			ka.perAssyBuildQty AS qpa  \n" +
                "		 FROM vu_salesorder_shipped_report vu_ssr  \n" +
                "		 LEFT JOIN kit_allocation_assy_detail ka  \n" +
                "			ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId` AND ka.isDeleted=0  \n" +
                "		WHERE vu_ssr.partID = pPartID  \n" +
                "		GROUP BY vu_ssr.partID  \n" +
                "		UNION ALL  \n" +
                "		SELECT  \n" +
                "			partID,  \n" +
                "			SUM(readytoShipQty) readytoShipQty,  \n" +
                "			SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "			SUM(wipQty) wipQty,  \n" +
                "			SUM((CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty  \n" +
                "				ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END)) AS excessFreetoUseQty,  \n" +
                "			0 poQty,  \n" +
                "			0 shippedQty,  \n" +
                "			0 backOrderQty,  \n" +
                "			1 qpa  \n" +
                "		FROM vu_workorder_summary_stk vu_wss  \n" +
                "		WHERE partID = pPartID  \n" +
                "		GROUP BY partID) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5329,'2.00','V1',' Kit condition managed - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5329:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "update systemconfigrations  \n" +
                "set `values` =30  \n" +
                "where `key`='ExpireDaysLeftBeforeShipment' and isDeleted = 0;  \n" +

                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5330,'2.00','V1','Update Default  value of ExpireDaysLeftBeforeShipment   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5330:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "alter table shippedassembly add  expireDaysLeftBeforeShipment int ;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5331,'2.00','V1','Add New column shippedassembly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5331:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAlreadyShippedAssembly;  \n" +
                "CREATE PROCEDURE `Sproc_GetAlreadyShippedAssembly`(  \n" +
                "	IN pcustomerPackingSlipDetID INT,  \n" +
                "	IN pshippingId   INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempshippAssy AS  \n" +
                "       SELECT  \n" +
                "       sa.shippedqty AS selectedActualQty,  \n" +
                "       sa.shippedqty AS opStock,  \n" +
                "           sa.workorderID AS woID,  \n" +
                "                sa.woOPID AS lastWOOPID,  \n" +
                "                sa.woNumber,  \n" +
                "                sa.partID,  \n" +
                "               sa.shippedqty availableQty,  \n" +
                "               sa.shippedqty actualAvalilableQty,  \n" +
                "               c.PIDCode AS assyID,  \n" +
                "              c.mfgPN,  \n" +
                "              sa.shippedqty selectedQty,  \n" +
                "              rr.name AS rohsName,  \n" +
                "              rr.rohsIcon,  \n" +
                "              w.buildQty,  \n" +
                "            c.PIDCode AS binName,  \n" +
                "            (SELECT b.id FROM  binmst b WHERE b.name=c.PIDCode LIMIT 1) AS binID,  \n" +
                "            GROUP_CONCAT(DISTINCT sm.salesorderNumber) AS soNumbers,  \n" +
                "            GROUP_CONCAT(DISTINCT sm.poNumber) AS poNumbers,  \n" +
                "             fun_getStockType(sa.stockType) stockTypeName,  \n" +
                "            sa.stockType,  \n" +
                "            sa.refsidid ,  \n" +
                "            (SELECT uid FROM component_sid_stock WHERE isDeleted = 0 AND id = sa.refsidid) AS UMID   ,  \n" +
                "            sa.expireDaysLeftBeforeShipment,  \n" +
                "            (if (css.expiryDate <= date_add(current_Date(),interval sa.expireDaysLeftBeforeShipment day) , 1 ,0)) isNearByExpiry  \n" +
                "	FROM shippedassembly sa  \n" +
                "		JOIN component c   ON sa.partID=c.id  \n" +
                "		JOIN rfq_rohsmst rr ON c.rohsStatusID=rr.id AND rr.isdeleted=0  \n" +
                "		LEFT JOIN workorder w ON w.woID=sa.workorderID AND w.isdeleted=0  \n" +
                "		LEFT JOIN workorder_salesorder_details wsd   ON wsd.woId=w.woID  \n" +
                "		LEFT JOIN salesorderdet sd  ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3  \n" +
                "		LEFT JOIN salesordermst sm  ON sm.id=sd.refSalesOrderID  \n" +
                "        LEFT JOIN component_sid_stock css on css.id = sa.refsidid and css.isDeleted = 0  \n" +
                "	WHERE sa.refCustPackingSlipDetID=pcustomerPackingSlipDetID  \n" +
                "	AND sa.isdeleted=0 AND CASE WHEN pshippingId IS NOT NULL THEN  sa.shippingId=pshippingId ELSE 1=1 END  \n" +
                "	GROUP BY sa.shippedqty, sa.workorderID, sa.woOPID,sa.woNumber, sa.partID,  \n" +
                "		c.PIDCode, c.mfgPN,rr.name, rr.rohsIcon, w.buildQty,sa.stockType, sa.refsidid  ;  \n" +
                "SELECT *,fun_getWarehouseNameByBinID(binID) warehouseName,fun_getDepartmentNameByBinID(binID)departmentName FROM tempshippAssy;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempshippAssy;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5332,'2.00','V1','Sproc_GetAlreadyShippedAssembly  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5332:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetUMIDListForCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pPackingSlipDetId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vUMIDWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
                "	DECLARE vExpireDaysLeftBeforeShipment INT ;  \n" +
                "  \n" +
                "	select `values` into vExpireDaysLeftBeforeShipment  \n" +
                "	from systemconfigrations  \n" +
                "	where `key` = 'ExpireDaysLeftBeforeShipment'  \n" +
                "	and isDeleted =0 ;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';  \n" +
                "	# Get AVL part list of CPN part  \n" +
                "    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart  \n" +
                "	FROM  component_cust_alias_rev_pn  \n" +
                "    WHERE refCPNPartID = pPartId  \n" +
                "    AND isDeleted = 0;  \n" +
                "	#Get Packaging Alias part list  \n" +
                "	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart  \n" +
                "	FROM component_packagingalias   a  \n" +
                "	WHERE a.aliasgroupID IN  \n" +
                "	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)  \n" +
                "	AND a.componentID <> pPartId  \n" +
                "	AND a.isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF(pExpireMaterial = 1) THEN  \n" +
                "		IF(pExpiredDay = 0) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');  \n" +
                "		END IF;  \n" +
                "	END IF;	                */  \n" +
                "  \n" +
                "#select    pPartId;  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "#select    vPackagingAliasPart;  \n" +
                "    IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');  \n" +
                "    END IF;  \n" +
                "#select    vCplAvlPart;  \n" +
                "    IF vCplAvlPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');  \n" +
                "    END IF;  \n" +
                "#select     vUMIDWhereClause;  \n" +
                "    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipDetId IS NOT NULL THEN  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );  \n" +
                "        IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');  \n" +
                "		END IF;  \n" +
                "		IF vCplAvlPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');  \n" +
                "		END IF;  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');  \n" +
                "	END IF;  \n" +
                "    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');  \n" +
                "	END IF;                      */  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"  \n" +
                "					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom,  \n" +
                "							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode,  \n" +
                "							packaginggroupID,	mfg,				packageQty,  \n" +
                "							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,  \n" +
                "							location,		warehouse,			department, 		        customerID,			receiveMaterialType,  \n" +
                "							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType,  \n" +
                "							customer,			pkgUnit,   		        orgPkgUnit,  \n" +
                "							cpn,				mfgAvailable, 		        customerConsign,  \n" +
                "							refCPNMFGPNID, 		        mfgPNDescription,		nickName,  \n" +
                "							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName,  \n" +
                "							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,  \n" +
                "							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse,  \n" +
                "							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment,  \n" +
                "							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt,  \n" +
                "							createdBy,		createdByName,			isinStk,			packingSlipId,  \n" +
                "							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,  \n" +
                "							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,  \n" +
                "							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,  \n" +
                "							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,  \n" +
                "									               externalPartPackage,		partPackage,			createdUserCode,  \n" +
                "							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,  \n" +
                "							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,  \n" +
                "							detailDescription ,reservedForCustomer,isEachUOM ,\",vExpireDaysLeftBeforeShipment,\" as expireDaysLeftBeforeShipmentFromKey,  \n" +
                "                            (if (expiryDate <= date_add(current_Date(),interval \",vExpireDaysLeftBeforeShipment,\" day) , 1 ,0)) isNearByExpiry  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,  \n" +
                "							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,  \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,  \n" +
                "							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,  \n" +
                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,		c.packageQty,  \n" +
                "							css.prefix umidPrefix,  \n" +
                "                            c.RoHSStatusID,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,  \n" +
                "							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,  \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,  \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "                            fun_getWarehouseIDByBinID(css.binID) warehouseID,  \n" +
                "                            fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN (css.cpn = 0) THEN 'No'  \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS cpn,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'  \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS mfgAvailable,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'  \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS customerConsign,  \n" +
                "							css.refCPNMFGPNID,  \n" +
                "							c.mfgPNDescription,			css.receiveMaterialType,  \n" +
                "                            css.spq,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN  \n" +
                "										'Purchased Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'WC' THEN  \n" +
                "										'Customer Consigned (with CPN) Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'WOC' THEN  \n" +
                "										'Customer Consigned (without CPN) Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'PR' THEN  \n" +
                "										'Purchased & Reserved Part'  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "  \n" +
                "							) displayReceiveMaterialType,  \n" +
                "                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,  \n" +
                "							css.stockInventoryType,  \n" +
                "							css.pcbPerArray,				css.nickName,					css.packaging,  \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId,  \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,  \n" +
                "							css.expiryDate,  \n" +
                "                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,  \n" +
                "							css.orgQty,					css.specialNote,				css.fromBin,  \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,  \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							css.createdAt createdAtFilter,  \n" +
                "							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,  \n" +
                "							css.isinStk,  \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.stockInventoryType in ('NI','SI') THEN  \n" +
                "										CONCAT('(', a.mfgCode, ') ', a.mfgName)  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "							) packingSupplierName,  \n" +
                "							a.packingSlipId,  \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,  \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) AS expiredStatus,  \n" +
                "							refRestrictUMIDId, 				  	isUMIDRestrict,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'  \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS UMIDRestricted,  \n" +
                "							c.restrictUsePermanently,						c.restrictUSEwithpermission,  \n" +
                "							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,  \n" +
                "							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,  \n" +
                "							c.partPackage externalPartPackage,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,  \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,  \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
                "							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,  \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,  \n" +
                "							c.detailDescription,  \n" +
                "                            (case when css.uom = -1 then true else false end) isEachUOM  \n" +
                "					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId  \n" +
                "								FROM 		component_sid_stock_packing_detail cspd  \n" +
                "								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id  \n" +
                "							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)  \n" +
                "					WHERE 	(css.isdeleted is null or css.isdeleted = 0)\",  \n" +
                "								vUMIDWhereClause,\") As tempUMID  \n" +
                "				WHERE \", pWhereClause  \n" +
                "			);  \n" +
                "  \n" +
                "-- select @vFromSQLQuery;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5333,'2.00','V1','Sproc_GetUMIDListForCustomerPackingSlip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5333:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveShippedAssemblyDetFromPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_SaveShippedAssemblyDetFromPackingSlip`(  \n" +
                "	IN pShipAssyList JSON,  \n" +
                "	IN pIsConfirmationTakenForDeallocateUMID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pRefCustPackingSlipDetID INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pShippedNotes TEXT,  \n" +
                "	IN pShippingId INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDZeroOut VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDConsumed VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100),  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50) ,  \n" +
                "    IN pIsComponentStock TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totUIShipAssy INT DEFAULT 0;  \n" +
                "	DECLARE lv_sa_woNumber VARCHAR(20);  \n" +
                "	DECLARE lv_sa_refsidid INT;  \n" +
                "	DECLARE lv_sa_pkid INT;  \n" +
                "	DECLARE lv_sa_umid VARCHAR(20);  \n" +
                "	DECLARE lv_sa_shippedqty INT;  \n" +
                "	DECLARE lv_db_sa_shippedqty INT;  \n" +
                "	DECLARE lv_cpsd_refSalesorderDetid INT;  \n" +
                "	DECLARE lv_uomIDOfAssy INT;  \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
                "  \n" +
                "	# Get AVL part list of CPN part  \n" +
                "    select group_concat(refComponentID) into vCplAvlPart  \n" +
                "	from  component_cust_alias_rev_pn  \n" +
                "    where refCPNPartID = pPartID  \n" +
                "    and isDeleted = 0;  \n" +
                "	#Get Packaging Alias part list  \n" +
                "	select group_concat(a.componentID) into vPackagingAliasPart  \n" +
                "	from component_packagingalias   a  \n" +
                "	where a.aliasgroupID in  \n" +
                "	(select b.aliasgroupID from component_packagingalias b where b.componentID = pPartId)  \n" +
                "	and a.componentID <> pPartID  \n" +
                "	and a.isDeleted = 0;  \n" +
                "  \n" +
                "	/* get/map all ship assembly list passed from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pShipAssyList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`shippedqty` INT PATH \"$.shippedqty\",  \n" +
                "				`woOPID` INT PATH \"$.woOPID\" ,  \n" +
                "				`workorderID` INT PATH \"$.workorderID\",  \n" +
                "				`partID` INT PATH \"$.partID\",  \n" +
                "				`woNumber` VARCHAR(20) PATH \"$.woNumber\",  \n" +
                "				`stockType` VARCHAR(10) PATH \"$.stockType\",  \n" +
                "				`refsidid` INT PATH \"$.refsidid\" ,  \n" +
                "				`originalQty` INT PATH \"$.originalQty\" ,  \n" +
                "				`UMID` VARCHAR(20) PATH \"$.UMID\"  ,  \n" +
                "                `shippedUom` INT PATH \"$.shippedUom\" ,  \n" +
                "                `expireDaysLeftBeforeShipment` INT PATH \"$.expireDaysLeftBeforeShipment\"  \n" +
                "			)  \n" +
                "		) AS ShipAssy_JT;  \n" +
                "  \n" +
                "	SELECT uom INTO lv_uomIDOfAssy  \n" +
                "		FROM component  \n" +
                "		WHERE id = pPartID ;  \n" +
                "  \n" +
                "	/* get all ship assembly/stock list available in data base */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;  \n" +
                "    IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS  \n" +
                "			SELECT 0 opStock,  \n" +
                "			null woID,  \n" +
                "			null woNumber,  \n" +
                "			null assyID,  \n" +
                "			css.pkgQty availableQty,  \n" +
                "			css.pkgQty actualAvalilableQty,  \n" +
                "			css.refcompid partID,  \n" +
                "			null stockType,  \n" +
                "			null stockTypeName,  \n" +
                "			css.orgQty buildQty,  \n" +
                "			css.uid UMID,  \n" +
                "			css.id refsidid  \n" +
                "			FROM  component_sid_stock  css  \n" +
                "			WHERE ( css.refcompid = pPartID or find_in_set(css.refcompid,vPackagingAliasPart ) or find_in_set(css.refcompid,vCplAvlPart) )  \n" +
                "            and css.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS  \n" +
                "			SELECT vucp.opStock,  \n" +
                "			vucp.woID,  \n" +
                "			vucp.woNumber,  \n" +
                "			vucp.assyID,  \n" +
                "			vucp.availableQty,  \n" +
                "			#get available qty - shipped qty only, no need to deduct package qty of work order again  \n" +
                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,  \n" +
                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,  \n" +
                "			vucp.actualAvalilableQty,  \n" +
                "			vucp.partID,  \n" +
                "			-- vucp.selectedQty,  \n" +
                "			vucp.stockType,  \n" +
                "			vucp.stockTypeName,  \n" +
                "					w.buildQty,  \n" +
                "					NULL AS UMID,  \n" +
                "			NULL AS refsidid  \n" +
                "					FROM  vu_customer_packing_slip_qty  vucp  \n" +
                "				LEFT JOIN workorder w ON w.woID=vucp.woID AND w.isDeleted = 0  \n" +
                "				LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID AND wsd.isDeleted = 0  \n" +
                "				LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3 AND sd.isDeleted = 0  \n" +
                "				-- LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID  \n" +
                "			WHERE vucp.partID=pPartID  \n" +
                "			GROUP BY vucp.opStock,  \n" +
                "			vucp.woID,  \n" +
                "			vucp.lastWOOPID,  \n" +
                "			vucp.woNumber,  \n" +
                "			vucp.assyID,  \n" +
                "			vucp.availableQty,  \n" +
                "			vucp.actualAvalilableQty,  \n" +
                "			vucp.partID,  \n" +
                "			vucp.rohsIcon,  \n" +
                "			vucp.rohsName,  \n" +
                "			vucp.mfgPN,  \n" +
                "			vucp.selectedQty,  \n" +
                "			vucp.warehouseName,  \n" +
                "			vucp.binName,  \n" +
                "			vucp.binID,  \n" +
                "			vucp.totalUMIDCount,  \n" +
                "			vucp.departmentName,  \n" +
                "			vucp.stockType,  \n" +
                "			vucp.stockTypeName,  \n" +
                "			w.buildQty,w.dateCode  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT SUM(css.orgQty) AS opStock,  \n" +
                "				css.woID,  \n" +
                "				css.woNumber,  \n" +
                "				 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,  \n" +
                "				SUM(`css`.`pkgQty`)  AS `availableQty` ,  \n" +
                "				SUM(`css`.`pkgQty`) AS actualAvalilableQty,  \n" +
                "				css.refcompid partID,  \n" +
                "				-- 0 AS selectedQty,  \n" +
                "				'US' AS stockType,  \n" +
                "				'UMID Stock' AS stockTypeName,  \n" +
                "				wo.buildQty,  \n" +
                "				css.uid AS UMID,  \n" +
                "				css.id AS refsidid  \n" +
                "			FROM component_sid_stock css  \n" +
                "				LEFT JOIN workorder wo ON wo.woID=css.woID  \n" +
                "				LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID  \n" +
                "			WHERE  css.refcompid = pPartID  \n" +
                "			AND css.stockInventoryType in('SI', 'AI')  \n" +
                "			AND IFNULL(css.pkgQty,0) > 0  \n" +
                "			AND css.isDeleted = 0  \n" +
                "			GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,  \n" +
                "					vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,  \n" +
                "					css.uid, css.id, wo.dateCode  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get all added shipped asembly details for ref customer packing slip det */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet AS  \n" +
                "	SELECT 	id, partID, workorderID, shippedqty, customerID,  \n" +
                "			refCustPackingSlipDetID, woNumber, stockType, refsidid  \n" +
                "	FROM 	shippedassembly  \n" +
                "	WHERE 	refCustPackingSlipDetID = pRefCustPackingSlipDetID  \n" +
                "	AND 	isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* get all not available qty count (ship specific from UI but total not available in db)  */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UINotAvailableQtyShipList AS  \n" +
                "	SELECT  tsal.shippedqty,  \n" +
                "		tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,  \n" +
                "		tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock  \n" +
                "	FROM temp_UIShipAssyList tsal  \n" +
                "		JOIN temp_DBAvailableAssyStockList tdaasl  \n" +
                "			ON (tsal.woNumber = tdaasl.woNumber AND tsal.refsidid <=> tdaasl.refsidid)  \n" +
                "		LEFT JOIN temp_DB_ShipAssyList_Of_RefCustPSDet tdsarcps  \n" +
                "			ON (tsal.woNumber = tdsarcps.woNumber AND tsal.refsidid <=> tdsarcps.refsidid)  \n" +
                "	WHERE (tdaasl.availableQty - (IFNULL(tsal.shippedqty,0) - IFNULL(tdsarcps.shippedqty,0))) < 0  ;  \n" +
                "  \n" +
                "  \n" +
                "	/* if all ship qty from UI is available (available in db to ship)  */  \n" +
                "	IF ((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) = 0) THEN  \n" +
                "  #select pIsConfirmationTakenForDeallocateUMID;  \n" +
                "		/***************** UMID: kit deallocation confirmation *******************/  \n" +
                "		IF(pIsConfirmationTakenForDeallocateUMID = 0) THEN  \n" +
                "			IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS  \n" +
                "					SELECT tusal.shippedqty,  \n" +
                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,  \n" +
                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock  \n" +
                "					FROM temp_UIShipAssyList tusal  \n" +
                "						JOIN temp_DBAvailableAssyStockList tdaasl  ON tusal.refsidid <=> tdaasl.refsidid  \n" +
                "					WHERE tusal.refsidid IS NOT NULL  \n" +
                "					AND tusal.UMID IS NOT NULL  \n" +
                "                    AND tusal.shippedqty > 0  \n" +
                "					AND tusal.shippedqty > (  \n" +
                "							(SELECT SUM(pkgQty) FROM component_sid_stock  \n" +
                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */  \n" +
                "							   -  \n" +
                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))  \n" +
                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')  \n" +
                "								GROUP BY uid) /* allocated_stock_umid */  \n" +
                "							   )  ;  \n" +
                "			ELSE  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS  \n" +
                "					SELECT tusal.shippedqty,  \n" +
                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,  \n" +
                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock  \n" +
                "					FROM temp_UIShipAssyList tusal  \n" +
                "						JOIN temp_DBAvailableAssyStockList tdaasl  \n" +
                "							ON (tusal.woNumber = tdaasl.woNumber AND tusal.refsidid <=> tdaasl.refsidid)  \n" +
                "					WHERE tusal.refsidid IS NOT NULL  \n" +
                "					AND tusal.UMID IS NOT NULL  \n" +
                "					AND tusal.shippedqty > (  \n" +
                "							(SELECT SUM(pkgQty) FROM component_sid_stock  \n" +
                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */  \n" +
                "							   -  \n" +
                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))  \n" +
                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')  \n" +
                "								GROUP BY uid) /* allocated_stock_umid */  \n" +
                "							   )  ;  \n" +
                "            END IF;  \n" +
                "		ELSE  \n" +
                "			/* set up default temp table if not created */  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS  \n" +
                "				SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if confirmation already taken or no any confirmation list then go for create/update */  \n" +
                "		IF(pIsConfirmationTakenForDeallocateUMID = 1 OR  \n" +
                "			(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) = 0) THEN  \n" +
                "  \n" +
                "			/*****************  create/update shipped assebly table     *******************/  \n" +
                "  \n" +
                "			/* get all UMID details for ref customer packing slip det */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS  \n" +
                "			SELECT 	csd.id,			csd.uid,		csd.refcompid,  \n" +
                "				csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "				csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "				csd.pkgUnit,		csd.uom,		csd.createdAt  \n" +
                "			FROM 	component_sid_stock   csd  \n" +
                "				JOIN 	binmst b ON csd.binID = b.id  \n" +
                "				JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList WHERE refsidid IS NOT NULL AND UMID IS NOT NULL)  \n" +
                "			AND 	csd.isdeleted = 0 ;  \n" +
                "  \n" +
                "			/* get required customer_packingslip_details */  \n" +
                "			SELECT refSalesorderDetid INTO lv_cpsd_refSalesorderDetid  \n" +
                "			FROM customer_packingslip_det  \n" +
                "			WHERE id = pRefCustPackingSlipDetID AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totUIShipAssy FROM temp_UIShipAssyList ;  \n" +
                "			SET i=0;  \n" +
                "  #select totUIShipAssy;  \n" +
                "  \n" +
                "			temp_UIShipAssyListLoop: WHILE i < totUIShipAssy DO  \n" +
                "  \n" +
                "				SET lv_sa_woNumber = NULL;  \n" +
                "				SET lv_sa_refsidid = NULL;  \n" +
                "				SET lv_sa_umid = NULL;  \n" +
                "				SET lv_sa_shippedqty = 0;  \n" +
                "  \n" +
                "				SELECT woNumber, refsidid, umid, shippedqty  \n" +
                "					INTO lv_sa_woNumber , lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty  \n" +
                "				FROM temp_UIShipAssyList LIMIT i,1 ;  \n" +
                "  \n" +
                "  #select 'Line 261';  \n" +
                "				SET lv_sa_pkid = NULL;  \n" +
                "				SET lv_db_sa_shippedqty = NULL;  \n" +
                "  \n" +
                "				/* get id from db data if exists in shipped assembly table */  \n" +
                "                /* in case of component stock  there will be no stock */  \n" +
                "				SELECT id,shippedqty INTO lv_sa_pkid , lv_db_sa_shippedqty  \n" +
                "				FROM (  \n" +
                "					SELECT id , shippedqty  \n" +
                "					FROM temp_DB_ShipAssyList_Of_RefCustPSDet  \n" +
                "					WHERE (partID = pPartID or find_in_set(partID,vPackagingAliasPart ) or find_in_set(partID,vCplAvlPart) )  \n" +
                "					AND case when pIsComponentStock = 1 then 1=1 else woNumber = lv_sa_woNumber  end  \n" +
                "					AND refCustPackingSlipDetID = pRefCustPackingSlipDetID  \n" +
                "					AND (CASE WHEN lv_sa_refsidid IS NULL THEN refsidid IS NULL  \n" +
                "						ELSE refsidid = lv_sa_refsidid END)  \n" +
                "					UNION  \n" +
                "					SELECT NULL AS id , 0 AS shippedqty  \n" +
                "					LIMIT 1  \n" +
                "				) tdbsa ;  \n" +
                "				/* shipped qty from UI =  db value then no change so no need to process */  \n" +
                "				IF(IFNULL(lv_sa_shippedqty,0) = IFNULL(lv_db_sa_shippedqty,0)) THEN  \n" +
                "					SET i = i + 1;  \n" +
                "					ITERATE temp_UIShipAssyListLoop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  #select  'line 286',lv_sa_shippedqty, lv_db_sa_shippedqty,lv_uomIDOfAssy;  \n" +
                "				IF(lv_sa_umid IS NOT NULL) THEN  \n" +
                "				/* if change stock from UMID then check consume/adjustment UMID case */  \n" +
                "					CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,  \n" +
                "						lv_sa_shippedqty, lv_db_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,  \n" +
                "						pActionPerformedForUMIDZeroOut, pActionPerformedForUMIDConsumed, pActionPerformedForUMIDAdjust,  \n" +
                "						lv_cpsd_refSalesorderDetid, pPartID,lv_uomIDOfAssy, pUserID, pUserRoleID);  \n" +
                "				END IF;  \n" +
                "  #select lv_sa_pkid;  \n" +
                "				IF(lv_sa_pkid IS NULL OR lv_sa_pkid = '') THEN  \n" +
                "					/* create new entry of shippedassembly */  \n" +
                "					INSERT INTO shippedassembly(`partID`,`workorderID`,`shippingId`,`shippedqty`,  \n" +
                "						`customerID`,`woOPID`,`shippedNotes`,`refCustPackingSlipDetID`,  \n" +
                "						`woNumber`,`stockType`,`refsidid`,`originalQty`,  \n" +
                "						`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`shippedUom`,`expireDaysLeftBeforeShipment`)  \n" +
                "					SELECT partID, workorderID, pShippingId, shippedqty,  \n" +
                "						pCustomerID, woOPID, pShippedNotes, pRefCustPackingSlipDetID,  \n" +
                "						woNumber, stockType, refsidid, originalQty,  \n" +
                "						pUserID, pUserID, pUserRoleID, pUserRoleID,shippedUOM,expireDaysLeftBeforeShipment  \n" +
                "					FROM temp_UIShipAssyList  \n" +
                "					LIMIT i,1 ;  \n" +
                "  \n" +
                "  \n" +
                "				ELSE  \n" +
                "					/* update exists entry of shippedassembly */  \n" +
                "					UPDATE shippedassembly salo  \n" +
                "						JOIN (SELECT lv_sa_pkid AS id, shippedqty  \n" +
                "								FROM temp_UIShipAssyList LIMIT i,1) tsali  \n" +
                "						ON salo.id = tsali.id  \n" +
                "					SET salo.shippedqty = tsali.shippedqty,  \n" +
                "						salo.shippingId = pShippingId,  \n" +
                "						salo.updatedBy = pUserID,  \n" +
                "						salo.updateByRoleId = pUserRoleID ,  \n" +
                "						salo.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE salo.id = lv_sa_pkid ;  \n" +
                "  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET i = i + 1;  \n" +
                "			END WHILE temp_UIShipAssyListLoop;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS  \n" +
                "		SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) > 0 OR  \n" +
                "		(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all ship list > not available qty(mismatch qty)  */  \n" +
                "	SELECT * FROM temp_UINotAvailableQtyShipList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all ship list > confirmation required for deallocate kit  */  \n" +
                "	SELECT * FROM temp_UMID_Confirmation_Require_ShipAssyList ;  \n" +
                "  \n" +
                "	/*  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList ;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list ;  \n" +
                "  	*/  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5334,'2.00','V1','Sproc_SaveShippedAssemblyDetFromPackingSlip  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5334:
            allDbChangesArray.push(
                /* **************************** New Script -> 0-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\"FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 0-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5335,'2.00','V1','Sproc_GetSalesorderList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5335:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
                "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
                "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
                "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN  \n" +
                "                ((`a`.`salesOrderDetStatus` = 1)  \n" +
                "                    OR (`a`.`salesOrderDetailId` IS NULL))  \n" +
                "            THEN  \n" +
                "                'In Progress'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        a.poRevisionDate AS poRevisionDate,  \n" +
                "        a.releaseLevelComment AS releaseLevelComment  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                sm.poRevisionDate AS poRevisionDate,  \n" +
                "                a.releaseLevelComment AS releaseLevelComment,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\"FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5336,'2.00','V1',' Alter Proceduer Sproc_GetSalesOrderSummaryList- Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5336:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_genericcategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
                "  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_workstation_groups\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentTermsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"document\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND fileGroupBy IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"shipping_method\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"payable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Payable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"receivable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Receivable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"inspection_mst\" else \"\" end as msg FROM inspection_mst WHERE isDeleted=0 AND partRequirementCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"P\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"RR\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE isDeleted=0 AND barcodeSeparatorID IN(',IDs,') LIMIT 1)  \n" +
                "	     ');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempGenericCategory t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			  SELECT * FROM tempGenericCategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempGenericCategory t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "							   FROM tempGenericCategory t1  \n" +
                "								INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "								WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "								ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "    DROP TEMPORARY TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5337,'2.00','V1','Delete Condition reviewed - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5337:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                vups.poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		left JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		left join component sc on sc.id=pod.supplierPartID  \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.partType=4 and a.poWorkingStatus=\"C\" then \"C\" else ifnull(a.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.poWorkingStatus=\"C\" then \"C\" when a.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5338,'2.00','V1',' User Story 37205: PO Improvement Points: Suggested by client - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5338:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.isCustOrDisty=1 THEN 'Company' ELSE 'Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),  \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(FORMAT(OLD.displayOrder, 5) AS CHAR), CAST(FORMAT(NEW.displayOrder, 5) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5339,'2.00','V1',' Bug 35728: Customer MFR master : Display order set on one of the MFR is auto applied on same name customer and showing record on wrong place. - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5339:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedPackingSlipDetailBySoDetID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cinv.id AS custID  \n" +
                "	FROM 	customer_packingslip_det cpd  \n" +
                "	JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "	WHERE   cpd.refsalesorderdetid=psalesorderDetID AND cpd.shippingId=IFNULL(preleaseLineId,cpd.shippingId) AND  cpd.isdeleted = 0  \n" +
                "	AND     cp.transType = 'P';  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5340,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5340:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "	IN pId VARCHAR(1000),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' sd.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "                sd.kitNumber\");  \n" +
                "  \n" +
                "			IF(pId IS NULL OR pId = '') THEN  \n" +
                "				SET pWhereClause = ' 1=1 ' ;  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (\", pId , \")\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5341,'2.00','V1',' Bug 37200: Refactor - Should not show Kit allocation result if UMID is deallocated from Count Material Pop-up in Enterprise Search - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5341:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\"FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5342,'2.00','V1',' Alter Procedure Sproc_GetSalesorderList - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5342:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetComponentKitScrappedQty`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentKitScrappedQty`(  \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT a.*,  \n" +
                "			((a.scrappedUnit/a.orgPkgUnit) * 100) perScrapQty  \n" +
                "	FROM  \n" +
                "		(SELECT  \n" +
                "				vu.id as partId,  \n" +
                "				vu.poNumber,  \n" +
                "				vu.salesOrderNumber,  \n" +
                "				vu.kitNumber,  \n" +
                "				vu.refSalesOrderId,  \n" +
                "				vu.AssyID,  \n" +
                "				vu.assyPN,  \n" +
                "				vu.assypartid,  \n" +
                "				vu.umidid,  \n" +
                "                vu.orgPkgUnit,  \n" +
                "				SUM(vu.scrappedunit - vu.scrapExpiredUnit) AS scrappedUnit  \n" +
                "				FROM vu_material_consumption_scrapped_det vu  \n" +
                "		WHERE 	vu.scrappedunit > 0 AND (CASE WHEN pPartID IS NOT NULL THEN vu.id = pPartID ELSE 1 = 1 IS NULL END)  \n" +
                "		GROUP BY vu.refSalesOrderId  \n" +
                "	) AS a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-10-2021 ************************** */
                "DROP VIEW IF EXISTS `vu_material_consumption_scrapped_det`;  \n" +
                "CREATE VIEW `vu_material_consumption_scrapped_det` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `kitallocationId`,  \n" +
                "        `sdm`.`id` AS `refSalesOrderId`,  \n" +
                "        `sdm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sdm`.`soDate` AS `sodate`,  \n" +
                "        `sdm`.`poNumber` AS `ponumber`,  \n" +
                "        `sdm`.`revision` AS `revision`,  \n" +
                "        `sdd`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `sdd`.`kitNumber` AS `kitNumber`,  \n" +
                "        `sdd`.`kitQty` AS `kitQty`,  \n" +
                "        `cassy`.`id` AS `assypartid`,  \n" +
                "        `cassy`.`mfgPN` AS `assyPN`,  \n" +
                "        `cassy`.`mfgcodeID` AS `custid`,  \n" +
                "        `cassy`.`PIDCode` AS `AssyID`,  \n" +
                "        `cassy`.`nickName` AS `nickName`,  \n" +
                "        `b`.`id` AS `id`,  \n" +
                "        `b`.`mfgPN` AS `mfgPN`,  \n" +
                "        `b`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `b`.`PIDCode` AS `PIDCode`,  \n" +
                "        `b`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `b`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `b`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `css`.`id` AS `umidid`,  \n" +
                "        `css`.`uid` AS `umid`,  \n" +
                "        `css`.`costCategoryID` AS `costcategoryid`,  \n" +
                "        `css`.`packaging` AS `packaging`,  \n" +
                "        `css`.`orgPkgUnit` AS `orgPkgUnit`,  \n" +
                "        `a`.`STATUS` AS `status`,  \n" +
                "        `a`.`returnDate` AS `returndate`,  \n" +
                "        IFNULL(`a`.`allocatedQty`, 0) AS `allocatedqty`,  \n" +
                "        IFNULL(`a`.`allocatedUnit`, 0) AS `allocatedunit`,  \n" +
                "        `a`.`allocatedUOM` AS `allocateduom`,  \n" +
                "        IFNULL(`a`.`consumeQty`, 0) AS `consumeqty`,  \n" +
                "        IFNULL(`a`.`consumeUnit`, 0) AS `consumeunit`,  \n" +
                "        IFNULL(`a`.`scrapExpiredQty`, 0) AS `scrapExpiredqty`,  \n" +
                "        IFNULL(`a`.`scrapExpiredUnit`, 0) AS `scrapExpiredunit`,  \n" +
                "        `a`.`scrapExpiredUOM` AS `scrapexpireduom`,  \n" +
                "        `a`.`componentSIDStockHistoryID` AS `componentSIDStockHistoryID`,  \n" +
                "        ((CASE  \n" +
                "            WHEN ((IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0)) < 0) THEN 0  \n" +
                "            ELSE (IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0))  \n" +
                "        END) + IFNULL(`a`.`scrapExpiredQty`, 0)) AS `scrappedQty`,  \n" +
                "        ((CASE  \n" +
                "            WHEN ((IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0)) < 0) THEN 0  \n" +
                "            ELSE (IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0))  \n" +
                "        END) + IFNULL(`a`.`scrapExpiredUnit`, 0)) AS `scrappedunit`  \n" +
                "    FROM  \n" +
                "        (((((`kit_allocation` `a`  \n" +
                "        JOIN `component_sid_stock` `css` ON ((`a`.`refUIDId` = `css`.`id`)))  \n" +
                "        JOIN `component` `b` ON ((`css`.`refcompid` = `b`.`id`)))  \n" +
                "        JOIN `component` `cassy` ON ((`a`.`assyID` = `cassy`.`id`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON ((`a`.`refSalesOrderDetID` = `sdd`.`id`)))  \n" +
                "        JOIN `salesordermst` `sdm` ON ((`sdd`.`refSalesOrderID` = `sdm`.`id`)))  \n" +
                "    WHERE  \n" +
                "        ((`a`.`STATUS` = 'R')  \n" +
                "            AND (`css`.`isDeleted` = 0));  \n" +
                /* **************************** Add Script Version -> 04-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5343,'2.00','V1',' Task 37396: Regression Testing CP [04-01-2021] - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5343:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWOHeaderDisplayDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pwoOPID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT(11) ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgNameFormat;  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` ,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "            `woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "            `woop`.`isNoClean` AS `opNoClean`,  \n" +
                "            `woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "            wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "            fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE deletedAt IS NULL  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE deletedAt IS NULL  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE deletedAt IS NULL  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE deletedAt IS NULL AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5344,'2.00','V1','Sproc_GetWOHeaderDisplayDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5344:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateWorkorderAndPublish;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoStatus INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(5000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                "	block1: BEGIN  \n" +
                "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE current_isLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPID INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE current_opname VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE current_woopid VARCHAR(500) DEFAULT '';  \n" +
                "  \n" +
                "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;  \n" +
                "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';  \n" +
                "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';  \n" +
                "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "  \n" +
                "		DECLARE err TINYINT  DEFAULT 0;  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "		-- 2 declare the cursor operation  \n" +
                "		DECLARE operation_cursor CURSOR FOR  \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "  \n" +
                "		-- get first operation work order  \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get last operation work order  \n" +
                "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get inspection process type id  \n" +
                "		SET InspectionOperationTypeID := 0;  \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "		-- get Assembly Clean Type  \n" +
                "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'  \n" +
                "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "                    ELSE ''  \n" +
                "               END INTO assyCleanType  \n" +
                "        FROM component comst  \n" +
                "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );  \n" +
                "		-- open the cursor  \n" +
                "		OPEN operation_cursor;  \n" +
                "  \n" +
                "		 -- start looping  \n" +
                "		operation_loop: LOOP  \n" +
                "  \n" +
                "			-- read the name from next row into the variables  \n" +
                "			FETCH operation_cursor INTO current_opnumber;  \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,  \n" +
                "			-- close the cursor and exit the loop if it has.  \n" +
                "			IF exit_loop THEN  \n" +
                "				 CLOSE operation_cursor;  \n" +
                "				 LEAVE operation_loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET current_opname:= '';  \n" +
                "			SET current_woopid:= 0;  \n" +
                "			SET current_operationTypeID:= 0;  \n" +
                "			SET current_qtyControl:= 0;  \n" +
                "			SET current_isTrackBySerialNo:= 0;  \n" +
                "			SET current_isLoopOperation:= 0;  \n" +
                "			SET current_refLoopWOOPNumber:= 0;  \n" +
                "			SET current_isIssueQty:= 0;  \n" +
                "			SET current_refLoopWOOPID:= 0;  \n" +
                "  \n" +
                "			-- get opname and woopid from operation number  \n" +
                "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,  \n" +
                "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,  \n" +
                "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,  \n" +
                "			  curWOOP.refLoopWOOPID  \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,  \n" +
                "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,  \n" +
                "			current_refLoopWOOPNumber ,  \n" +
                "			current_refLoopWOOPID  \n" +
                "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber  \n" +
                "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;  \n" +
                "			-- get previous operation of rework operation  \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo  \n" +
                "				WHERE opnumber < current_opnumber  \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF first_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF last_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                "			SET IsInspectionProcess:=0;  \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInspectionProcess := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "			SET IsInValidReworkOperation:=0;  \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "			SET IsInValidIsTrackBySerialNo:=0;  \n" +
                "  \n" +
                "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidIsTrackBySerialNo := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidIsTrackBySerialNo  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/  \n" +
                "			SET IsInValidIsLoopOperation:=0;  \n" +
                "			IF (current_isLoopOperation = 1) THEN  \n" +
                "				SET next_opnumber:= 0;  \n" +
                "				-- get next operation of inspection operation  \n" +
                "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                "					WHERE opnumber > current_opnumber  \n" +
                "					AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "				IF(current_qtyControl = 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if next operation is rework than not allow  \n" +
                "				ELSEIF(next_opnumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber = next_opnumber  \n" +
                "							AND isRework=1) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if found previous operation than check operation is inspection process or not  \n" +
                "				ELSEIF(current_refLoopWOOPNumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber <> current_refLoopWOOPNumber  \n" +
                "							AND opNumber <> current_opnumber  \n" +
                "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- check refLoopWOOPID added or not  \n" +
                "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0  \n" +
                "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL  \n" +
                "						AND woOPID = current_refLoopWOOPID) = 0  \n" +
                "					) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "			SET found_in_paralleloperation:= 0;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                "			) AND woopid=current_woopid;  \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not  \n" +
                "			IF current_previousopnumber > 0 THEN  \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process  \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;  \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process  \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                "					IF(current_isLoopOperation = 1) THEN  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                "		END LOOP operation_loop;  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "		block2: BEGIN  \n" +
                "			-- 1 get list of inspection operation in workorder  \n" +
                "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;  \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation  \n" +
                "			DECLARE inspection_cursor CURSOR FOR  \n" +
                "			SELECT opnumber FROM workorder_operation  \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                "			AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN inspection_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			inspection_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_inspection_loop THEN  \n" +
                "					 CLOSE inspection_cursor;  \n" +
                "					 LEAVE inspection_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET temp_opname:= '';  \n" +
                "				SET temp_woopid:= 0;  \n" +
                "				SET temp_isRework:= 0;  \n" +
                "				SET temp_qtyControl:= 0;  \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl  \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber  \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "				SET IsReworkInspectionOperation:= 0;  \n" +
                "				IF (temp_isRework = 1) THEN  \n" +
                "					SET IsReworkInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "				SET IsInValidInspectionOperation:= 0;  \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN  \n" +
                "					SET IsInValidInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                "				SET IsParallelClusterOperation:= 0;  \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation  \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL  \n" +
                "				 			AND clusterid IN (  \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL  \n" +
                "								AND woid=pwoid AND isparelleloperation=1  \n" +
                "				 	)  \n" +
                "				);  \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                "					SET c_checkopnumber:= 0;  \n" +
                "					-- get next operation of inspection operation  \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo  \n" +
                "						WHERE opnumber > c_opnumber  \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not  \n" +
                "					IF c_checkopnumber > 0 THEN  \n" +
                "						SET c_reworkopnumber:= 0;  \n" +
                "						-- set checked operation number if found as rework process  \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                "						AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process  \n" +
                "						IF c_reworkopnumber = 0 THEN  \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "			END LOOP inspection_loop;  \n" +
                "		END block2;  \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "		block3: BEGIN  \n" +
                "			-- 1 get list of cluster in workorder  \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';  \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster  \n" +
                "			DECLARE cluster_cursor CURSOR FOR  \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN cluster_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			cluster_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_cluster_loop THEN  \n" +
                "					 CLOSE cluster_cursor;  \n" +
                "					 LEAVE cluster_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN  \n" +
                "					SET temp_clustername:= '';  \n" +
                "					SET temp_isParellelOperation:= 0;  \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN  \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "						SET IsReworkParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "						SET IsPregrorammingParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "						SET found_mismatchoperations:= 0;  \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						ELSE  \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "							IF (found_mismatchoperations = 1) THEN  \n" +
                "								SET found_operationTypeID:= 0;  \n" +
                "								SET cluster_maxOpNumber:= 0;  \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                "									SET next_operation_to_cluster_is_loopoperation:= 0;  \n" +
                "  \n" +
                "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber > cluster_maxOpNumber);  \n" +
                "  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "						END IF;  \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "					END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                "					SET current_minopnumber:= 0;  \n" +
                "					SET current_maxopnumber:= 0;  \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation  \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                "					SET found_invalidsequenceoperation:= 0;  \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid  \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE  \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                "					ORDER BY opnumber;  \n" +
                "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                "				END IF;  \n" +
                "			END LOOP cluster_loop;  \n" +
                "		END block3;  \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "		block4: BEGIN  \n" +
                "  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;  \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_operation_count INT DEFAULT 0;  \n" +
                "-- 			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;  \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_name VARCHAR(500);  \n" +
                "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_assembly_part_not_added INT DEFAULT 0;  \n" +
                "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);  \n" +
                "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_rework_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_rework_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "			SET found_invalid_is_loop_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_loop_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_inspection_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "			SET found_invalid_is_track_by_serialno_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE  \n" +
                "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_track_by_serialno_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "			SET check_workorder_isrevised:= 0;  \n" +
                "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                "			IF check_workorder_isrevised > 0 THEN  \n" +
                "				SET first_OpTypeID:=0;  \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "			SET preprogramming_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                "			IF preprogramming_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			-- SET certificate_standard_count:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards  \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND  \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                "			-- IF certificate_standard_count > 0 THEN  \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                "			-- END IF;  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			SET invalid_wo_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation  \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;  \n" +
                "			IF invalid_wo_count > 0 THEN  \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');  \n" +
                "			END IF;  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "			SET move_to_stock_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;  \n" +
                "			IF move_to_stock_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');  \n" +
                "			ELSE  \n" +
                "				IF move_to_stock_operation_count = 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');  \n" +
                "				ELSE  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "					IF(last_opnumber <> move_to_stock_op_number) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					IF(move_to_stock_is_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "			SET allow_final_serialno_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;  \n" +
                "			IF allow_final_serialno_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('More than one operations configured with \"Serial# Mapping\". <br/>Only one operation with \"Serial# Mapping\" is allowed.');  \n" +
                "			ELSE  \n" +
                "				IF allow_final_serialno_operation_count <> 0 THEN  \n" +
                "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl  \n" +
                "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_qtyControl = 0) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_move_to_stock_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_move_to_stock_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "			-- SET found_assembly_part_not_added:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart  \n" +
                "			--   WHERE rfqLineItemsID  \n" +
                "			-- 	IN (SELECT id FROM rfq_lineitems  \n" +
                "			-- 		WHERE partID  \n" +
                "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "			-- 		AND deletedAt IS NULL)  \n" +
                "			-- 			AND mountingTypeID  \n" +
                "			-- 			IN (  \n" +
                "			-- 				SELECT rfqMountingTypeID  \n" +
                "			-- 				FROM component_logicalgroup_detail cld  \n" +
                "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "			-- 				IN (  \n" +
                "			-- 					SELECT id  \n" +
                "			-- 					FROM component_logicalgroup  \n" +
                "			-- 					WHERE `name`  \n" +
                "			-- 					IN ('Supplies','Materials','Tools')  \n" +
                "			-- 					AND deletedAt IS NULL  \n" +
                "			-- 				)  \n" +
                "			-- 			)  \n" +
                "			-- 			AND deletedAt IS NULL  \n" +
                "			-- 			AND mfgPNID  \n" +
                "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			SET found_assembly_part_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools  \n" +
                "			WHERE refComponentID IN (SELECT id FROM component WHERE id  \n" +
                "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "												AND mountingTypeID  IN (SELECT rfqMountingTypeID  \n" +
                "														FROM component_logicalgroup_detail cld  \n" +
                "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "														IN (SELECT id  \n" +
                "														FROM component_logicalgroup  \n" +
                "														WHERE `name` IN ('Supplies','Materials','Tools')  \n" +
                "														AND deletedAt IS NULL)  \n" +
                "													)) AND deletedAt IS NULL  \n" +
                "							) AND deletedAt IS NULL AND driverToolRequired=1  \n" +
                "						) AND deletedAt IS NULL AND componentID  \n" +
                "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_part_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "			SET found_assembly_equipment_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_equipment_not_added  \n" +
                "			FROM component_functionaltestingequipment  \n" +
                "			WHERE refComponentID  \n" +
                "			IN (SELECT id FROM component WHERE id  \n" +
                "				IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "					WHERE rfqLineItemsID  \n" +
                "					IN (  \n" +
                "						SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "						IN(  \n" +
                "							SELECT partID FROM workorder WHERE woID=pwoID  \n" +
                "						)  \n" +
                "					) AND deletedAt IS NULL  \n" +
                "				) AND deletedAt IS NULL AND functionalTestingRequired=1  \n" +
                "			) AND deletedAt IS NULL  AND eqpID  \n" +
                "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_equipment_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isAllowMissingPartQty` =  1  \n" +
                "			AND woop.deletedAt IS NULL  \n" +
                "			ORDER BY opNumber DESC LIMIT 1;  \n" +
                "  \n" +
                "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isRework` =  1  \n" +
                "			AND woop.deletedAt IS NULL ;  \n" +
                "  \n" +
                "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND  \n" +
                "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0  \n" +
                "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN  \n" +
                "  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".  \n" +
                "							So after this operation, any one operation must be rework.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems  \n" +
                "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)  \n" +
                "			AND programingStatus = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation  \n" +
                "			WHERE woID = pwoID  \n" +
                "			AND isPreProgrammingComponent = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');  \n" +
                "			END IF;  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "  \n" +
                "  \n" +
                "		END block4;  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "		block5: BEGIN  \n" +
                "        	DECLARE v_IsAllowSerialMappingWOId INT;  \n" +
                "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);  \n" +
                "			DECLARE v_CountMFRSR INT;  \n" +
                "			IF allow_final_serialno_operation_count <= 2 THEN  \n" +
                "				SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId  \n" +
                "				,v_IsAllowSerialMappingOperationName FROM  \n" +
                "				workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;  \n" +
                "				IF(v_IsAllowSerialMappingWOId IS NOT NULL)  \n" +
                "				THEN  \n" +
                "					SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;  \n" +
                "					IF v_CountMFRSR = 0 THEN  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "            END IF;  \n" +
                "		END block5;  \n" +
                "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 6 - Check cleaning type of operation againse Assembly cleaning type ****************************************************/  \n" +
                "        block6: BEGIN  \n" +
                "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,  \n" +
                "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt  \n" +
                "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp  \n" +
                "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;  \n" +
                "			IF assyCleanType = '' THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF	assyCleanType = 'NC' THEN  \n" +
                "				SET err = 0;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'WS' THEN  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'BOTH' THEN  \n" +
                "				-- Check Both Operation Available Then allow  \n" +
                "				-- Check NoClean and WaterSolubale Both Operation Allow  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';  \n" +
                "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "        END block6;  \n" +
                "		/**************************************** end - case 6 - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "        block7: BEGIN  \n" +
                "			DECLARE vBOMRefDesigList,vWoOpRefDesigList TEXT;  \n" +
                "			DECLARE startPos, endPos, maxLength INT ;  \n" +
                "            DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "            DECLARE itemRefDesg varchar(500);  \n" +
                "            DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "  \n" +
                "            SELECT  Group_Concat(rl.refDesig) INTO vBOMRefDesigList  \n" +
                "            From rfq_lineitems rl  \n" +
                "            LEFT JOIN part_sub_assy_relationship psub  ON rl.partID = psub.prPerPartID  and psub.isDeleted = 0  \n" +
                "            LEFT JOIN workorder wo  ON wo.partID = psub.partID and wo.isDeleted = 0  \n" +
                "            Where rl.isDeleted = 0  \n" +
                "            And wo.woID = pWoID;  \n" +
                "  \n" +
                "			IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            SELECT  Group_Concat(wor.refDesig) INTO vWoOpRefDesigList  \n" +
                "            From workorder_operation_refDesig wor  \n" +
                "            Where wor.isDeleted = 0  \n" +
                "            AND wor.woID = pWoId;  \n" +
                "  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL OR  vWoOpRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vWoOpRefDesigList) into vWoOpRefDesigList;  \n" +
                "            END IF;  \n" +
                "			SET startPos = 1;  \n" +
                "            SET maxLength = Length(vWoOpRefDesigList);  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL THEN  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vWoOpRefDesigList,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						IF(INSTR(vBOMRefDesigList,itemRefDesg) = 0) THEN  \n" +
                "							SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "							IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                "								SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "            IF vInvalidCount > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ( concat('Invalid REF DES found in one of Operation(s). <br/> <b>',vInvalidList,'</b>'));  \n" +
                "            END IF;  \n" +
                "        END block7;  \n" +
                "        /**************************************** end - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "		SELECT errorText FROM temp_operation_error;  \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/  \n" +
                "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN  \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5345,'2.00','V1','Sproc_ValidateWorkorderAndPublish  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5345:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021  ********************************* */
                "DROP TRIGGER IF EXISTS `Trg_BU_warehousemst`;  \n" +
                "CREATE TRIGGER `Trg_BU_warehousemst` BEFORE UPDATE ON `warehousemst` FOR EACH ROW IF (  \n" +
                "		OLD.Name != NEW.Name OR  \n" +
                "		IFNULL(OLD.Description, '') != NEW.Description OR  \n" +
                "		IFNULL(OLD.nickname, '') != NEW.nickname OR  \n" +
                "		OLD.parentWHID != NEW.parentWHID OR  \n" +
                "		OLD.isActive != NEW.isActive OR  \n" +
                "		OLD.isPermanentWH != NEW.isPermanentWH OR  \n" +
                "		OLD.isDepartment != NEW.isDepartment OR  \n" +
                "		OLD.id != NEW.id OR  \n" +
                "		IFNULL(OLD.uniqueCartID, '') != NEW.uniqueCartID OR  \n" +
                "		IFNULL(OLD.scanWH, '') != NEW.scanWH OR  \n" +
                "		IFNULL(OLD.scanBin, '') != NEW.scanBin OR  \n" +
                "		OLD.allMovableBin != NEW.allMovableBin OR  \n" +
                "		IFNULL(OLD.userAccessMode, '') != NEW.userAccessMode OR  \n" +
                "		OLD.refEqpID != NEW.refEqpID OR  \n" +
                "		IFNULL(OLD.domain, '') != NEW.domain OR  \n" +
                "		IFNULL(OLD.cartMfr, '') != NEW.cartMfr OR  \n" +
                "		IFNULL(OLD.cartMachineName, '') != NEW.cartMachineName OR  \n" +
                "		IFNULL(OLD.warehouseType, '') != NEW.warehouseType OR  \n" +
                "		OLD.isCartOnline != NEW.isCartOnline  \n" +
                "	) THEN  \n" +
                "		INSERT INTO warehousemst_history(  \n" +
                "			NAME, 			Description, 		nickname,			parentWHID,  \n" +
                "			isActive, 		isPermanentWH, 		isDepartment,			refWHID,  \n" +
                "			createdBy,      	createdAt,		uniqueCartID,			scanWH,  \n" +
                "			scanBin,		allMovableBin,		userAccessMode,			refEqpID,  \n" +
                "			domain,			cartMfr, 		cartMachineName,		warehouseType,  \n" +
                "			isCartOnline,		updatedBy,		updatedAt,			createByRoleId,  \n" +
                "			updateByRoleId )  \n" +
                "		VALUES(  \n" +
                "			OLD.Name,			OLD.Description,		OLD.nickname,			OLD.parentWHID,  \n" +
                "			OLD.isActive,		OLD.isPermanentWH,		OLD.isDepartment,		OLD.id,  \n" +
                "			OLD.createdBy,  	OLD.createdAt,			OLD.uniqueCartID,		OLD.scanWH,  \n" +
                "			OLD.scanBin,		OLD.allMovableBin,		OLD.userAccessMode,		OLD.refEqpID,  \n" +
                "			OLD.domain,			OLD.cartMfr,			OLD.cartMachineName, 	OLD.warehouseType,  \n" +
                "			OLD.isCartOnline,	OLD.updatedBy,			fun_DatetimetoUTCDateTime(),			OLD.createByRoleId,  \n" +
                "			OLD.updateByRoleId);  \n" +
                "	END IF;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 ************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_binmst`;  \n" +
                "CREATE TRIGGER `Trg_BU_binmst` BEFORE UPDATE ON `binmst` FOR EACH ROW IF (  \n" +
                "		OLD.Name != NEW.Name OR  \n" +
                "		IFNULL(OLD.Description, '') != NEW.Description OR  \n" +
                "		OLD.WarehouseID != NEW.WarehouseID OR  \n" +
                "		(SELECT parentWHID FROM warehousemst WHERE id =  OLD.WarehouseID) != (SELECT parentWHID FROM warehousemst WHERE id =  NEW.WarehouseID) OR  \n" +
                "		IFNULL(OLD.nickname, '') != NEW.nickname OR  \n" +
                "		OLD.isActive != NEW.isActive OR  \n" +
                "		OLD.isPermanentBin != NEW.isPermanentBin OR  \n" +
                "		OLD.id != NEW.id OR  \n" +
                "		OLD.isRandom != NEW.isRandom OR  \n" +
                "		IFNULL(OLD.prefix, '') != NEW.prefix OR  \n" +
                "		IFNULL(OLD.suffix, '') != NEW.suffix  \n" +
                "	) THEN  \n" +
                "		INSERT INTO binmst_history(  \n" +
                "			NAME, 				Description, 		WarehouseID, 			parentWarehouseID,  \n" +
                "			nickname,  			isActive, 			isPermanentBin, 		systemGenerated,  \n" +
                "			refBinID, 			createdBy,  		createdAt, 			    isRandom,  \n" +
                "			prefix,				suffix,				createByRoleId,			updateByRoleId,  \n" +
                "			updatedBy,  		updatedAt)  \n" +
                "		VALUES(  \n" +
                "			OLD.Name,			OLD.Description,	OLD.WarehouseID,		(SELECT parentWHID FROM warehousemst WHERE id =  OLD.WarehouseID),  \n" +
                "			OLD.nickname,  		OLD.isActive,		OLD.isPermanentBin,		OLD.systemGenerated,  \n" +
                "			OLD.id,				OLD.createdBy,		OLD.createdAt,         	OLD.isRandom,  \n" +
                "			OLD.prefix,			OLD.suffix, 		OLD.createByRoleId,		OLD.updateByRoleId,  \n" +
                "			OLD.updatedBy,  	fun_DatetimetoUTCDateTime());  \n" +
                "	END IF;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5346,'2.00','V1',' Bug 36648: Warehouse History is not showing current information of User who updates details of the Warehouse - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5346:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetComponentKitScrappedQty`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentKitScrappedQty`(  \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT a.*,  \n" +
                "			((a.scrappedUnit/a.orgPkgUnit) * 100) perScrapQty  \n" +
                "	FROM  \n" +
                "		(SELECT  \n" +
                "				vu.id as partId,  \n" +
                "				vu.poNumber,  \n" +
                "				vu.salesOrderNumber,  \n" +
                "				vu.kitNumber,  \n" +
                "				vu.refSalesOrderId,  \n" +
                "				vu.AssyID,  \n" +
                "				vu.assyPN,  \n" +
                "				vu.assypartid,  \n" +
                "				vu.umidid,  \n" +
                "               vu.orgPkgUnit,  \n" +
                "				SUM(vu.scrappedunit) AS scrappedUnit  \n" +
                "				FROM vu_material_consumption_scrapped_det vu  \n" +
                "		WHERE 	vu.scrappedunit > 0 AND (CASE WHEN pPartID IS NOT NULL THEN vu.id = pPartID ELSE 1 = 1 IS NULL END)  \n" +
                "		GROUP BY vu.refSalesOrderId  \n" +
                "	) AS a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5347,'2.00','V1',' Bug 37419: In case of Scrapped material, Scrapped percentage should be count in chart at part master detail page - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5347:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetGenericFoldersById`;  \n" +
                "CREATE PROCEDURE `Sproc_GetGenericFoldersById`(  \n" +
                "	IN pRefParentId INT,  \n" +
                "	IN pEntityId VARCHAR(10000),  \n" +
                "	IN pRefTransId VARCHAR(10000),  \n" +
                "	IN pGencFileOwnerType VARCHAR(10000),  \n" +
                "	IN pIsTraveler TINYINT,  \n" +
                "	IN pfileGroupByIds VARCHAR(10000),  \n" +
                "	IN pExtraEntityListString LONGTEXT,  \n" +
                "    IN pAccessLevel INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE whereClauseFolder VARCHAR(10000);  \n" +
                "	DECLARE whereClauseFiles VARCHAR(10000);  \n" +
                "	DECLARE whereClauseEntityFile VARCHAR(10000);  \n" +
                "	DECLARE whereClauseEntityFolder VARCHAR(10000);  \n" +
                "	DECLARE whereClauseExtraEntityFile LONGTEXT;  \n" +
                "	DECLARE whereClauseExtraEntityFolder LONGTEXT;  \n" +
                "	DECLARE whereClauseFileGroupById VARCHAR(10000);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SET v_TimeZone = fun_getTimeZone() ;  \n" +
                "	SET v_DateTimeDisplayFormat = fun_getDateTimeFormat() ;  \n" +
                "	-- SET pEntityId = IFNULL(pEntityId,0);  \n" +
                "	SET pRefParentId = IFNULL(pRefParentId,0);  \n" +
                "  \n" +
                "	SET whereClauseExtraEntityFolder = '';  \n" +
                "	SET whereClauseExtraEntityFile = '';  \n" +
                "  \n" +
                "	IF(pEntityId IS NULL OR pEntityId = '' ) THEN  \n" +
                "		SET whereClauseEntityFile = CONCAT(\"gfile.entityID IS NULL \");  \n" +
                "		SET whereClauseEntityFolder = CONCAT(\" gf.entityID IS NULL \");  \n" +
                "	ELSE  \n" +
                "		SET whereClauseEntityFile = CONCAT(\"(gfile.entityID IN (\",pEntityId,\") OR gfile.entityID IS NULL )\");  \n" +
                "		SET whereClauseEntityFolder = CONCAT(\" (gf.entityID IN (\",pEntityId,\") OR gf.entityID IS NULL )\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pExtraEntityListString IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Extra_Entity_List;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Extra_Entity_List AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pExtraEntityListString,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				entityId INT PATH \"$.entityId\",  \n" +
                "				entityName VARCHAR(50) PATH \"$.entityName\",  \n" +
                "				refTransId longtext PATH \"$.refTransId\",  \n" +
                "				fileGroupBy longtext PATH \"$.fileGroupBy\"  \n" +
                "			)  \n" +
                "		) AS Extra_Entity_JT;  \n" +
                "  \n" +
                "		SELECT 	GROUP_CONCAT(CONCAT(\" OR (gfile.entityID = \", entityId ,\"  \n" +
                "				AND gfile.refTransID IN (\", refTransId ,\")  \n" +
                "				AND gfile.gencFileOwnerType = '\", entityName ,\"'  \n" +
                "				AND gfile.fileGroupBy IN (\", fileGroupBy ,\"))  \n" +
                "			\") SEPARATOR ''),  \n" +
                "			GROUP_CONCAT(CONCAT(\" OR (gf.entityID = \", entityId ,\"  \n" +
                "				AND gf.refTransID IN (\", refTransId ,\")  \n" +
                "				AND gf.gencFileOwnerType = '\", entityName ,\"')  \n" +
                "			\") SEPARATOR '')  \n" +
                "		INTO 	whereClauseExtraEntityFile, whereClauseExtraEntityFolder  \n" +
                "		FROM 	temp_Extra_Entity_List;  \n" +
                "	END IF;  \n" +
                "	IF (pfileGroupByIds IS NOT NULL) THEN  \n" +
                "		SET whereClauseFileGroupById = CONCAT(' gfile.fileGroupBy IN (', pfileGroupByIds ,') ');  \n" +
                "	ELSE  \n" +
                "		SET whereClauseFileGroupById = ' 1=1 ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET whereClauseFolder = CONCAT( \" AND  \n" +
                "					(  \n" +
                "						(  \n" +
                "							\" ,whereClauseEntityFolder , \"  \n" +
                "							AND gf.refTransID IN (\", pRefTransId,\")  \n" +
                "							AND gf.gencFileOwnerType IN (\", pGencFileOwnerType ,\")  \n" +
                "                            AND gf.isDeleted = 0 AND gf.isRecycle = 0  \n" +
                "						) \", whereClauseExtraEntityFolder ,\"  \n" +
                "					)\");  \n" +
                "  \n" +
                "	SET whereClauseFiles = CONCAT(\" AND  \n" +
                "			(  \n" +
                "				(  \n" +
                "					\",whereClauseEntityFile,\"  \n" +
                "					AND gfile.refTransID IN (\", pRefTransId,\")  \n" +
                "					AND gfile.gencFileOwnerType IN (\", pGencFileOwnerType ,\")  \n" +
                "					AND \", whereClauseFileGroupById ,\"  \n" +
                "                    AND gfile.isDeleted = 0 AND gfile.isRecycle = 0  \n" +
                "				) \", whereClauseExtraEntityFile ,\"  \n" +
                "  \n" +
                "			)\");  \n" +
                "	-- if traveler page than get data of operation, workorder, workorder operation  \n" +
                "	IF (pIsTraveler = 1) THEN  \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR  \n" +
                "				((IFNULL(gf.entityID,0) = -7  \n" +
                "				AND gf.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID IN (\", pRefTransId,\") AND isDeleted = 0 )  \n" +
                "				AND gf.gencFileOwnerType = 'workorder') AND IFNULL(gf.refParentId,0) = \",pRefParentId,\" AND gf.isDeleted = 0 AND gf.isRecycle = 0)  \n" +
                "				\");  \n" +
                "  \n" +
                "  \n" +
                "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" OR  \n" +
                "				((IFNULL(gfile.entityID,0) = -7  \n" +
                "				AND gfile.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID IN (\", pRefTransId,\") AND isDeleted = 0 )  \n" +
                "				AND gfile.gencFileOwnerType = 'workorder')  \n" +
                "				AND IFNULL(gfile.refParentId,0) = \",pRefParentId,\"  \n" +
                "				AND \", whereClauseFileGroupById ,\"  \n" +
                "				AND gfile.isDeleted = 0 AND gfile.isRecycle = 0)  \n" +
                "				\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* IF(pfileGroupByIds IS NOT NULL) THEN  \n" +
                "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" AND gfile.fileGroupBy IN (\",pfileGroupByIds,\")\");  \n" +
                "	 END IF; */  \n" +
                "  \n" +
                "    /* Get Count of File added into Current Entity record */  \n" +
                "	select fun_GetTotalDocumentCountByRefId(pRefTransId,pEntityId,pAccessLevel)  as TotalFileCount;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		(  \n" +
                "			SELECT  \n" +
                "				gf.gencFolderName,  \n" +
                "				gf.gencFolderID,  \n" +
                "				gf.entityID,  \n" +
                "				gf.refTransID,  \n" +
                "				gf.gencFileOwnerType,  \n" +
                "				gf.roleId,  \n" +
                "				(SELECT CONCAT(firstName, ' ' , lastName) FROM users WHERE id = gf.createdBy) AS folderModifiedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(gf.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') folderCreatedAt,  \n" +
                "				gf.refParentId AS folderParentID,  \n" +
                "				'' fileParentID,  \n" +
                "				'' gencFileID,  \n" +
                "				'' gencFileName,  \n" +
                "				'' gencOriginalName,  \n" +
                "				'' gencFileDescription,  \n" +
                "				'' gencFileExtension,  \n" +
                "				'' gencFileType,  \n" +
                "				'' tags,  \n" +
                "				'' genFilePath,  \n" +
                "				'' isDefault,  \n" +
                "				'' fileTransID,  \n" +
                "				'' fileEntityID,  \n" +
                "				'' fileOwnerType,  \n" +
                "				'' isShared,  \n" +
                "				'' fileGroupBy,  \n" +
                "				'' fileGroupName,  \n" +
                "				'' fileModifiedBy,  \n" +
                "				'' fileCreatedAt,  \n" +
                "				'' fileSize ,  \n" +
                "				'' isDisable,  \n" +
                "				'' disableBy ,  \n" +
                "				'' disableOn ,  \n" +
                "				gf.refCopyGencFileOwnerType  \n" +
                "			FROM generic_folder AS gf  \n" +
                "			WHERE IFNULL(gf.refParentId,0) = \",pRefParentId,\"  \n" +
                "				AND gf.isRecycle = 0  \n" +
                "				AND gf.isDeleted = 0 \", whereClauseFolder,\"  \n" +
                "		)  \n" +
                "		UNION  \n" +
                "		(  \n" +
                "			SELECT  \n" +
                "			'' gencFolderName,  \n" +
                "			'' gencFolderID,  \n" +
                "			'' entityID,  \n" +
                "			'' refTransID,  \n" +
                "			'' gencFileOwnerType,  \n" +
                "			'' roleId,  \n" +
                "			'' AS folderModifiedBy,  \n" +
                "			'' AS folderCreatedAt,  \n" +
                "			''  AS folderParentID,  \n" +
                "			gfile.refParentId AS fileParentID,  \n" +
                "			gfile.gencFileID,  \n" +
                "			gfile.gencFileName,  \n" +
                "			gfile.gencOriginalName,  \n" +
                "			gfile.gencFileDescription,  \n" +
                "			gfile.gencFileExtension,  \n" +
                "			gfile.gencFileType,  \n" +
                "			gfile.tags,  \n" +
                "			gfile.genFilePath,  \n" +
                "			gfile.isDefault,  \n" +
                "			gfile.refTransID AS fileTransID,  \n" +
                "			gfile.entityID AS fileEntityID,  \n" +
                "			gfile.gencFileOwnerType AS fileOwnerType,  \n" +
                "			gfile.isShared,  \n" +
                "			gfile.fileGroupBy,  \n" +
                "			(select gencCategoryName  from genericcategory  where gencCategoryID= gfile.fileGroupBy) fileGroupName,  \n" +
                "			(SELECT CONCAT(firstName , ' ',  lastName) FROM users WHERE id = gfile.createdBy) AS fileModifiedBy,  \n" +
                "            fun_ApplyCommonDateTimeFormatByParaValue(gfile.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') fileCreatedAt,  \n" +
                "			gfile.fileSize,  \n" +
                "			gfile.isDisable ,  \n" +
                "			(SELECT CONCAT(firstName , ' ',  lastName) FROM users WHERE id = gfile.disableBy) AS disableBy ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(gfile.disableOn ,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') disableOn ,  \n" +
                "			gfile.refCopyGencFileOwnerType  \n" +
                "			FROM genericfiles AS gfile  \n" +
                "			WHERE IFNULL(gfile.refParentId,0) = \",pRefParentId,\"  \n" +
                "            AND gfile.isRecycle = 0  \n" +
                "			AND gfile.isDeleted = 0 \", whereClauseFiles,\"  \n" +
                "		)\"  \n" +
                "	);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5348,'2.00','V1','Bug 37310: In WO While moving the document in recycle then recycled document is not displays at traveler page. - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5348:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "CALL sproc_Utility_UpdateIconInPageDetail('Manage Receiving Material','t-icons-umid-management add-icon');  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5349,'2.00','V1',' Task 37422: Update UMID Management icon in navigation menu to add icon - Ritul '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5349:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedPackingSlipDetailBySoDetID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cinv.id AS custID  \n" +
                "	FROM 	customer_packingslip_det cpd  \n" +
                "	JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "	WHERE   cpd.refsalesorderdetid=psalesorderDetID AND IFNULL(cpd.shippingId,0)=IFNULL(preleaseLineId,0) AND  cpd.isdeleted = 0  \n" +
                "	AND     cp.transType = 'P';  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5350,'2.00','V1',' Sproc_GetShippedPackingSlipDetailBySoDetID Procedure-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5350:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustPNListFromPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustPNListFromPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pCPN TEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @cpnresult = CONCAT('SELECT c.id, c.mfgPN, c.mfgcodeID, c.RoHSStatusID,  cpn.refCPNPartID,  \n" +
                "	(SELECT mfgCode FROM mfgCodemst WHERE id = c.mfgcodeID) AS mfgCode,  \n" +
                "	r.name AS RoHSName, r.rohsIcon  \n" +
                "	FROM component_cust_alias_rev_pn cpn  \n" +
                "	JOIN component c ON c.id = cpn.refComponentID  \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "	WHERE cpn.refCPNPartID IN (  \n" +
                "		SELECT id FROM component WHERE mfgCodeID = (  \n" +
                "			SELECT mfgCodeID FROM component WHERE id =', pPartID ,'  \n" +
                "			)  AND mfgPn REGEXP ''(^|[[:space:]])',pCPN,'([[:space:]]|$)''  AND isDeleted = 0  \n" +
                "			)  \n" +
                "	AND cpn.isDeleted = 0;');  \n" +
                "  \n" +
                "	PREPARE cpnresult1 FROM @cpnresult;  \n" +
                "	EXECUTE cpnresult1;  \n" +
                "	DEALLOCATE PREPARE cpnresult1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5351,'2.00','V1','Bug 37427: BOM: Wrong validation message is showing for CPN/Rev mismatched on SAVE action (Dev Server) , Showing SQL Syntax Error  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5351:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID; \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5352,'2.00','V1',' Bug 34974: Purchase Order: While deleting the PO line where one of the release line is manually closed system is showing message related to Packing Slip is created - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5352:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "CALL sproc_Utility_UpdateIconInPageDetail('Predefined Invoice Approval Reason', 't-icons-invoice-message approve-icon');  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5353,'2.00','V1',' icon update of Predefined Invoice Approval Reason - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5353:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedPackingSlipDetailBySoDetID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "	SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "	FROM 	customer_packingslip_det cpd  \n" +
                "	JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "	WHERE   cpd.refsalesorderdetid=psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "	AND     cp.transType = 'P';  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "	FROM 	customer_packingslip_det cpd  \n" +
                "	JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "	WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "	AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5354,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5354:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCategoryIDs LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MFR PN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy DNP Qty'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program REF DES'  \n" +
                "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA REF DES Change'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA REF DES Change'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 85) THEN 'MPN not Mapped in CPN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 86) THEN 'Mismatch Custom Part Rev'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 87) THEN 'Mismatch CPN and Custom Part Rev'  \n" +
                "		ELSE '' END) AS `logicName`,errorCode, errorColor,  \n" +
                "        fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		description, systemVariable,logicID, displayName, org_description,  \n" +
                "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,  \n" +
                "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,  \n" +
                "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'  \n" +
                "		WHEN (`isExternalIssue` = 1) THEN 'Yes'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isExternalIssueValue`,  \n" +
                "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'  \n" +
                "		WHEN (`isResearchStatus` = 1) THEN 'Yes'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isResearchStatusValue`,  \n" +
                "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'  \n" +
                "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isAssemblyLevelErrorValue`,  \n" +
                "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'  \n" +
                "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'  \n" +
                "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'  \n" +
                "		ELSE ''  \n" +
                "		END) AS `isAllowToEngrApprovedValue`,  \n" +
                "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping  \n" +
                "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount  \n" +
                "		FROM `rfq_lineitems_errorcode`  \n" +
                "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5355,'2.00','V1','Bug 37427: BOM: Wrong validation message is showing for CPN/Rev mismatched on SAVE action (Dev Server) , Showing SQL Syntax Error  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5355:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "UPDATE feature_mst  \n" +
                "SET featureName = 'Allow to Lock/Unlock Customer Credit Memo' ,  \n" +
                "	updatedBy = 1,  updateByRoleId = 1, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE featureName = 'Allow to Lock Customer Credit Memo' ;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5356,'2.00','V1','  update feature  entry for customer credit memo - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5356:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any locked/unlocked invoice/CM there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "	AND isLocked = v_newLockStatusInvCM  \n" +
                "	AND transType = pTransType  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF (pIsLockTransaction = 1 AND pTransType = 'C') THEN  \n" +
                "		/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "			RE-Full Credit Applied or NP-No Pending Credit */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND paymentStatus NOT IN ('RE','NP')  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	ELSE  \n" +
                "		SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "		IF (pTransType = 'C') THEN  \n" +
                "  \n" +
                "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "			UPDATE customer_packingslip  \n" +
                "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = pTransType  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all applied CM transaction to locked/unlocked */  \n" +
                "			UPDATE packingslip_invoice_payment  \n" +
                "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND refPaymentMode = 'CA'  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "				ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "								ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate  \n" +
                "  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	-- select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerRefund`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pCreditMemoTransType VARCHAR(255),  \n" +
                "	IN pRefPaymentMode VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
                "	IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
                "  \n" +
                "		SELECT * FROM (  \n" +
                "			SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,  \n" +
                "				cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "				cps.isLocked ,  \n" +
                "				psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount ,  \n" +
                "			     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo  \n" +
                "					FROM customer_packingslip cps  \n" +
                "			LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id AND psipd.isPaymentVoided = 0  \n" +
                "						AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "			WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "			AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2  \n" +
                "			) tempCrditMemoList  \n" +
                "		WHERE (  \n" +
                "			( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0  \n" +
                "					 /* get all peding for refund */  \n" +
                "		    ) ;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		/* update customer payment case */  \n" +
                "		SELECT isPaymentVoided INTO v_isRefundPaymentVoided  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (v_isRefundPaymentVoided = 0) THEN  \n" +
                "				SELECT * FROM (  \n" +
                "					SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,  \n" +
                "						cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "						cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "						cps.isLocked ,  \n" +
                "						psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "						IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "						 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "								AND isPaymentVoided = 0  \n" +
                "								AND isDeleted = 0  \n" +
                "						) totalRefundIssuedAmount ,  \n" +
                "						(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "							WHERE refCustCreditMemoID = cps.id  \n" +
                "							AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo  \n" +
                "							FROM customer_packingslip cps  \n" +
                "					LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0  \n" +
                "								AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "					WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "					AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2  \n" +
                "					) tempCrditMemoList  \n" +
                "				WHERE  \n" +
                "					(  \n" +
                "						(IFNULL(tempCrditMemoList.paymentAmountForSelectedCM,0) > 0)  \n" +
                "										 /* get  paid CM*/  \n" +
                "					)  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "  \n" +
                "				SELECT * FROM (  \n" +
                "						SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,  \n" +
                "							cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "							cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "							cps.isLocked ,  \n" +
                "							psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "							IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "							 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "									AND isPaymentVoided = 0  \n" +
                "									AND isDeleted = 0  \n" +
                "						    ) totalRefundIssuedAmount ,  \n" +
                "						     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "								WHERE refCustCreditMemoID = cps.id  \n" +
                "								AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo  \n" +
                "								FROM customer_packingslip cps  \n" +
                "						LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0  \n" +
                "									AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID  \n" +
                "								WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1  \n" +
                "								AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 AND cps.id NOT IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det  \n" +
                "												WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0  \n" +
                "												AND isDeleted = 0 GROUP BY refPayementid)  \n" +
                "					) tempCrditMemoList  \n" +
                "				WHERE (  \n" +
                "						( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0  \n" +
                "								 /* get all peding for refund */  \n" +
                "					)  \n" +
                "			    ;  \n" +
                "  \n" +
                "		ELSEIF(v_isRefundPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "			SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,  \n" +
                "				cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "				cps.isLocked ,  \n" +
                "				psipd.paymentAmount AS paymentAmountForSelectedCM ,  \n" +
                "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,  \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "				) totalRefundIssuedAmount ,  \n" +
                "				(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.refPayementid = pCustRefundMstID  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.`status` = 2  \n" +
                "			AND cps.transType = pCreditMemoTransType  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			 ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(  \n" +
                "IN pCustomerID INT,  \n" +
                "IN pCustRefundMstID INT,  \n" +
                "IN pRefPaymentMode VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
                "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
                "	SELECT *  \n" +
                "	FROM (  \n" +
                "		SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
                "                psip.paymentNumber,  \n" +
                "                (CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isLockedTrans ,  \n" +
                "                psip.systemId ,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    )  AS totalRefundIssuedAmount ,  \n" +
                "				psip.paymentAmount AS totalPaymentAmount,  \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "                    (SELECT `comment`  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) `comment`,  \n" +
                "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) paymentAmountForSelectedPayment  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		LEFT JOIN (SELECT psipd.refPayementid,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "				     WHERE psipd.isDeleted = 0  \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "                     ON psip.id = payDetTemp.refPayementid  \n" +
                "             WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
                "             AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "             )  tempPay  \n" +
                "		WHERE  \n" +
                "			(  \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
                "						 /* get all peding to refund */  \n" +
                "			)  \n" +
                "		;  \n" +
                "ELSE  \n" +
                "  \n" +
                "	/* update customer payment case */  \n" +
                "  \n" +
                "	SELECT isPaymentVoided INTO v_isRefundPaymentVoided  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id = pCustRefundMstID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	IF(v_isRefundPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "		SELECT *  \n" +
                "		FROM (  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "						(SELECT id  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) AS paymentDetMstID ,  \n" +
                "			psip.paymentNumber,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isLockedTrans ,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate,  \n" +
                "		       psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) AS totalRefundIssuedAmount ,  \n" +
                "					psip.paymentAmount AS totalPaymentAmount,  \n" +
                "					IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "			(SELECT `comment`  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) `comment`,  \n" +
                "			    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) paymentAmountForSelectedPayment  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  \n" +
                "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "					    FROM packingslip_invoice_payment_det psipd  \n" +
                "					     WHERE psipd.isDeleted = 0  \n" +
                "						 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "						ON psip.id = payDetTemp.refPayementid  \n" +
                "			WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			)  tempPay  \n" +
                "			WHERE  \n" +
                "				(  \n" +
                "					(tempPay.paymentAmountForSelectedPayment > 0)  \n" +
                "									 /* get all paid */  \n" +
                "				)  \n" +
                "  \n" +
                "			UNION  \n" +
                "  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,  \n" +
                "				psip.paymentNumber,  \n" +
                "				(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isLockedTrans ,  \n" +
                "				psip.systemId ,  \n" +
                "				psip.paymentDate,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "						(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    )  AS totalRefundIssuedAmount ,  \n" +
                "						psip.paymentAmount AS totalPaymentAmount,  \n" +
                "						IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,  \n" +
                "				(SELECT `comment`  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    ) `comment`,  \n" +
                "				    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0  \n" +
                "				    ) paymentAmountForSelectedPayment  \n" +
                "				FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,  \n" +
                "							IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount  \n" +
                "						    FROM packingslip_invoice_payment_det psipd  \n" +
                "						     WHERE psipd.isDeleted = 0  \n" +
                "							 GROUP BY psipd.refPayementid ) payDetTemp  \n" +
                "				     ON psip.id = payDetTemp.refPayementid  \n" +
                "			     WHERE psip.isMarkForRefund = 1  \n" +
                "			     AND psip.mfgcodeID = pCustomerID  \n" +
                "			     AND psip.isDeleted = 0  \n" +
                "			     AND psip.isPaymentVoided = 0  \n" +
                "			     AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			     AND psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0  \n" +
                "										AND isDeleted = 0 GROUP BY refPayementid)  \n" +
                "			) tempPay  \n" +
                "  \n" +
                "			WHERE  \n" +
                "			(  \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0  \n" +
                "						 /* get all peding to refund  */  \n" +
                "			)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF(v_isRefundPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "  \n" +
                "			SELECT psipt.id AS paymentMstID,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				psipt.paymentNumber,  \n" +
                "				(CASE WHEN psipt.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isLockedTrans ,  \n" +
                "				psipt.systemId ,  \n" +
                "				psipt.paymentDate,  \n" +
                "				psipt.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(paymentAmount),0) FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundPaymentID = psipt.id AND isPaymentVoided = 0 AND isDeleted = 0) AS totalRefundIssuedAmount ,  \n" +
                "				psipt.paymentAmount AS totalPaymentAmount,  \n" +
                "				(SELECT IFNULL(SUM(paymentAmount),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refPayementid = psipt.id AND isPaymentVoided = 0 AND isDeleted = 0) AS paidPaymentAmount ,  \n" +
                "				psipd.`comment` AS `comment` ,  \n" +
                "				IFNULL(SUM(psipd.paymentAmount),0)  AS paymentAmountForSelectedPayment  \n" +
                "			FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "			WHERE psipd.refPayementid = pCustRefundMstID  \n" +
                "			AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "			AND psipd.isDeleted = 0  ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(  \n" +
                "	IN pVoidCustPaymentMstID INT,  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vRefCustCreditMemoMstID INT;  \n" +
                "	DECLARE vRefGencTransModeID INT;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'R' OR pRefPaymentModeOfInvPayment = 'CA' OR pRefPaymentModeOfInvPayment = 'WOFF') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "			SELECT refCustPackingslipInvoiceID  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = pVoidCustPaymentMstID  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS  \n" +
                "			SELECT refCustPackingslipInvoiceID  \n" +
                "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;  \n" +
                "  \n" +
                "  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "				 FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0  \n" +
                "				GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "			 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "		SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "						cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "						cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "					   ELSE cps.paymentStatus END  \n" +
                "					) ,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if Applied Credit Memo void then change Credit Memo payment status */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN  \n" +
                "  \n" +
                "		SELECT refCustCreditMemoID INTO vRefCustCreditMemoMstID  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pVoidCustPaymentMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "		SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "					   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "					   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "								(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "					   ELSE cps.paymentStatus END  \n" +
                "					) ,  \n" +
                "			cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
                "			cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = vRefCustCreditMemoMstID  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Update payment or credit memo payment status in case of customer refund voided */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CR') THEN  \n" +
                "  \n" +
                "		SELECT refGencTransModeID INTO vRefGencTransModeID  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pVoidCustPaymentMstID ;  \n" +
                "  \n" +
                "		IF (vRefGencTransModeID = -9) THEN  /* Customer Payment Refund */  \n" +
                "			/* update refund payment status  */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				lockStatus =  'NA',  \n" +
                "				lockedAt = NULL ,  \n" +
                "				lockedBy = NULL ,  \n" +
                "				lockedByRoleId = NULL ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSEIF (vRefGencTransModeID = -6) THEN  /* Credit Memo Refund */  \n" +
                "			/* update customer credit memo - payment status and refund status  */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "						FROM packingslip_invoice_payment  \n" +
                "						WHERE refCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "					 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < totalAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = totalAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "						     ELSE 'NA' END),  \n" +
                "				cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
                "				cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pRefundStatus VARCHAR(5),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SET vLockStatusToBe = 'NA' ;  \n" +
                "				IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "					IF ((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "									FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "						SET vLockStatusToBe = 'RL' ;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SET vLockStatusToBe = NULL ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							 ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
                "	IN pCustCreditMemoMstID INT ,  \n" +
                "	IN pCustomerPaymentMstID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.totalAmount ,  cps.agreedRefundAmt ,  \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
                "			psip.paymentNumber , psip.lockStatus,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
                "	FROM customer_packingslip AS cps  \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
                "	WHERE cps.id = pCustCreditMemoMstID  \n" +
                "	AND cps.isDeleted = 0  \n" +
                "		;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id	, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		/* update all payments transaction to locked/unlocked */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "		    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "		    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "		    updatedBy = v_newLockedBy  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "		AND lockStatus = v_oldLockStatusPMT  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					/* update all payment dependent write off if any */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
                "							 , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "					/* update all direct lock/unlock write off */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE id = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
                "							  lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "								ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "						 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "				SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "				    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    cps.updatedBy = v_newLockedBy  \n" +
                "				WHERE cps.paymentStatus = 'RE'  \n" +
                "				AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "				AND cps.isLocked = v_oldLockStatusInv  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 05-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5357,'2.00','V1',' lock/unlock customer credit memo SPS - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5357:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pPayementID INT,  \n" +
                "	IN pInvoiceTransType VARCHAR(5),  \n" +
                "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT ,  \n" +
                "	IN pIsExcludeZeroValueInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_isPaymentVoided TINYINT ;  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_paymentTermsID INT;  \n" +
                "	DECLARE v_custTermsDays INT;  \n" +
                "	SET v_custTermsDays = NULL;  \n" +
                "  \n" +
                "	SET v_isPaymentVoided = 0;  \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	/* below fun_ApplyCommonDateFormatByParaValue not working with date as it consider date 00:00:00 so date is less than 1  \n" +
                "		so below that CONVERT_TZ manual code added */  \n" +
                "	-- SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "	SELECT CAST(CONVERT_TZ(UTC_TIMESTAMP() ,'UTC',vTimeZone) AS DATE) INTO currDateWithAppliedTimeZone ;  \n" +
                "	-- select currDateWithAppliedTimeZone	;  \n" +
                "  \n" +
                "	SELECT paymentTermsID INTO v_paymentTermsID  \n" +
                "	FROM mfgcodemst  \n" +
                "	WHERE id = pCustomerID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF v_paymentTermsID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE `gencCategoryID` = v_paymentTermsID  \n" +
                "		AND categoryType = 'Payment Terms'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPayementID IS NULL OR pPayementID = '') THEN  \n" +
                "  \n" +
                "		/* add new customer payment case */  \n" +
                "		SELECT *  \n" +
                "		FROM (  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate, cps.isLocked,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				cps.termsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "				0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				NULL AS appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "		) tempInv  \n" +
                "		WHERE (  \n" +
                "			(  \n" +
                "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "					/* get all peding to pay inv with 0 amount */  \n" +
                "			)  \n" +
                "			OR  \n" +
                "			(  \n" +
                "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "						 /* get all peding to pay inv */  \n" +
                "			)  \n" +
                "		   )  \n" +
                "  \n" +
                "		;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* update customer payment case */  \n" +
                "  \n" +
                "		SELECT isPaymentVoided INTO v_isPaymentVoided  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pPayementID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		IF(v_isPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN  \n" +
                "			/* get already paid invoices + get pending to pay invoices */  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate, cps.isLocked,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					cps.termsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "				/* get pending to pay invoices  */  \n" +
                "				SELECT *  \n" +
                "				FROM (  \n" +
                "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate, cps.isLocked,  \n" +
                "					cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "						cps.status, cps.isZeroValue ,  \n" +
                "						cps.termsDays ,  \n" +
                "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "							WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
                "							ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,  \n" +
                "						0 AS invPaidAmtFromCurrPaymentDet,  \n" +
                "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND isPaymentVoided = 0  \n" +
                "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "							AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "						NULL AS appliedDate  \n" +
                "					FROM customer_packingslip cps  \n" +
                "					WHERE cps.customerID = pCustomerID  \n" +
                "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "					AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refPayementid = pPayementID  \n" +
                "								AND isPaymentVoided = 0  \n" +
                "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "  \n" +
                "				) tempInv  \n" +
                "				WHERE  \n" +
                "				 (  \n" +
                "					(  \n" +
                "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL  \n" +
                "							/* get all peding to pay inv with 0 amount */  \n" +
                "					)  \n" +
                "					OR  \n" +
                "					(  \n" +
                "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0  \n" +
                "								 /* get all peding to pay inv */  \n" +
                "					)  \n" +
                "				   )  \n" +
                "				;  \n" +
                "  \n" +
                "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN  \n" +
                "  \n" +
                "				/* get already paid invoices  */  \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate, cps.isLocked,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "					cps.status,  cps.isZeroValue ,  \n" +
                "					cps.termsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "					pipd.appliedDate  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "								 AND pipd.refPayementid = pPayementID  \n" +
                "								 AND pipd.isPaymentVoided = 0  \n" +
                "								 AND pipd.isDeleted = 0  \n" +
                "				WHERE cps.customerID = pCustomerID  \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(v_isPaymentVoided = 1) THEN  \n" +
                "  \n" +
                "			/* get already paid invoices only */  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate, cps.isLocked,  \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				cps.termsDays ,  \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId) <= CAST(currDateWithAppliedTimeZone AS DATE)  \n" +
                "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,cps.termsDays,cps.termsId))  \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,  \n" +
                "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,  \n" +
                "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,  \n" +
                "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
                "				   --  + IFNULL(pipd.paymentAmount,0)  \n" +
                "				    ) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND pip.refPaymentMode = 'WOFF'   /* 'WOFF' - write off  */  \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllWriteOff ,  \n" +
                "				pipd.appliedDate  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = pPayementID  \n" +
                "							 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.customerID = pCustomerID  \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* get customer Past Due Balance >> check from current date till pending */  \n" +
                "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount  \n" +
                "	FROM (  \n" +
                "		SELECT customerID,  \n" +
                "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,  \n" +
                "				DATE_ADD(invoiceDate, INTERVAL IFNULL(termsDays,0) DAY) paymentDueDate  \n" +
                "  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE customerID = pCustomerID  \n" +
                "		AND transType = pInvoiceTransType   /* here 'I' for invoice */  \n" +
                "		AND subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		AND isDeleted = 0  \n" +
                "	    ) a  \n" +
                "	GROUP BY a.customerID ;  \n" +
                "  \n" +
                "	/* get customer current Terms Days from master */  \n" +
                "	SELECT v_custTermsDays AS custCurrentTermsDays;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5358,'2.00','V1',' Sproc_GetAllInvoiceOfCustomerPayment - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5358:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustPNListFromPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustPNListFromPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pCPN TEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @cpnresult = CONCAT('SELECT c.id, c.mfgPN, c.mfgcodeID, c.RoHSStatusID,  cpn.refCPNPartID,  \n" +
                "	(SELECT mfgCode FROM mfgCodemst WHERE id = c.mfgcodeID) AS mfgCode,  \n" +
                "	r.name AS RoHSName, r.rohsIcon  \n" +
                "	FROM component_cust_alias_rev_pn cpn  \n" +
                "	JOIN component c ON c.id = cpn.refComponentID  \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "	WHERE cpn.refCPNPartID IN (  \n" +
                "		SELECT id FROM component WHERE mfgCodeID = (  \n" +
                "			SELECT mfgCodeID FROM component WHERE id =', pPartID ,'  \n" +
                "			)  AND mfgPn in (\"',pCPN,'\")   AND isDeleted = 0  \n" +
                "			)  \n" +
                "	AND cpn.isDeleted = 0;');  \n" +
                " 	PREPARE cpnresult1 FROM @cpnresult;  \n" +
                "	EXECUTE cpnresult1;  \n" +
                "	DEALLOCATE PREPARE cpnresult1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5359,'2.00','V1','Bug 37427: BOM: Wrong validation message is showing for CPN/Rev mismatched on SAVE action (Dev Server) , Showing SQL Syntax Error  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5359:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "CREATE TABLE `rfq_Assy_dataelement_transaction_value_history` (  \n" +
                "  `id` int NOT NULL auto_increment,  \n" +
                "  `dataElementID` int NOT NULL,  \n" +
                "  `refTransID` int NOT NULL,  \n" +
                "  `refTransHistoryId` int NOT NULL,  \n" +
                "  `value` longtext,  \n" +
                "  `entityID` int NOT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `refSubFormTransID` int DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_Assy_dataelement_transaction_value_history_dataElementID` (`dataElementID`),  \n" +
                "  KEY `FK_rfq_Assy_dataelement_transaction_value_history_entityID` (`entityID`),  \n" +
                "  KEY `FK_rfq_Assy_dataelement_transaction_value_history_SubFormTransID` (`refSubFormTransID`),  \n" +
                "  CONSTRAINT `FK_rfq_Assy_dataelement_transaction_value_history_SubFormTransID` FOREIGN KEY (`refSubFormTransID`) REFERENCES `subform_transaction` (`subFormTransID`),  \n" +
                "  CONSTRAINT `FK_rfq_Assy_dataelement_transaction_value_history_dataElementID` FOREIGN KEY (`dataElementID`) REFERENCES `dataelement` (`dataElementID`),  \n" +
                "  CONSTRAINT `FK_rfq_Assy_dataelement_transaction_value_history_entityID` FOREIGN KEY (`entityID`) REFERENCES `entity` (`entityID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5360,'2.00','V1',' create table rfq_Assy_dataelement_transaction_value_history - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5360:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteSubmittedSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteSubmittedSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE vrfqSubmittedQuoteID INT;  \n" +
                "	DECLARE vPartID INT;  \n" +
                "  \n" +
                "			select max(id) into vrfqSubmittedQuoteID  from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;  \n" +
                "			SELECT partID into vPartID FROM rfq_assemblies WHERE id = prfqAssyID;  \n" +
                "  \n" +
                "		-- insert quote summary details  \n" +
                "			INSERT INTO `rfq_assy_quote_submitted_assydetail`  \n" +
                "			(`refSubmittedQuoteID`, `rfqAssyID`, `qty`, `turnTime`, `turnType`, `materialCost`, `materialLeadTime`, `laborCost`, `laborLeadTime`,  \n" +
                "			`additionalCost`, `customItemLeadTime`, `unitPrice`, `totalLeadTime`, `extendedCost`, `excessMaterialCost`, `additionalCostDetail`, `nreDays`, `nreCost`,  \n" +
                "			`toolingCost`, `toolingDays`, `nretoolingdescription`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`,`priceGroup`,`rfqPriceGroupId`,`allCost`,`allDays`)  \n" +
                "			SELECT sb.id `refSubmittedQuoteID`, qo.rfqAssyID `rfqAssyID`, requestedQty `qty`, turntime `turnTime`, timeType `turnType`,  \n" +
                "			qo.materialCost, qo.materialDays AS materialLeadTime,  \n" +
                "			qo.laborCost, qo.laborDays AS laborLeadTime,  \n" +
                "			(IFNULL(qo.overheadUnitPrice,0) + fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead')) additionalCost,  \n" +
                "			(IFNULL(qo.overheadDay,0) + fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead'))`customItemLeadTime`,  \n" +
                "			(qo.materialCost + qo.laborCost + IFNULL(qo.overheadUnitPrice,0) + IFNULL(qo.allCost,0) +fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead')) `unitPrice`,  \n" +
                "			(qo.materialDays+  \n" +
                "			(CASE WHEN (qo.laborDays>fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead'))  \n" +
                "			THEN qo.laborDays  \n" +
                "			ELSE fun_getSumOfDaysByCostingType(qo.id, qo.rfqAssyID,'Overhead') END  \n" +
                "			)) `totalLeadTime`,  \n" +
                "			(qo.requestedQty *( qo.materialCost +qo.laborCost + IFNULL(qo.overheadUnitPrice,0) + IFNULL(qo.allCost,0) + fun_getSumOfAmountByCostingType(qo.id, qo.rfqAssyID,'Overhead'))) extendedCost,  \n" +
                "			qo.excessQtyTotalPrice `excessMaterialCost`, NULL, qo.nreDays, qo.nreCost , qo.toolingCost, qo.toolingDays,  \n" +
                "			fun_getNREToolingCostDescriptionbyQuoteID(qo.id, qo.rfqAssyID) AS nretoolingdescription, pUserID `createdBy`, fun_DatetimetoUTCDateTime(),pUserID `updatedBy`,fun_DatetimetoUTCDateTime(),  \n" +
                "			rpg.`name`,rpg.id, qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quotations qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			LEFT JOIN rfq_price_group rpg ON rpg.id = qo.rfqPriceGroupID  \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID and refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "  \n" +
                "		-- insert standards details from component standard details to rfq assy standard detail  \n" +
                "			INSERT INTO `rfq_assy_standard_class_detail`  \n" +
                "			(`refSubmittedQuoteID`, `standardID`, `standardClassIDs`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`)  \n" +
                "			SELECT vrfqSubmittedQuoteID, certificateStandardID `standardID`,ClassID `standardClassIDs`,  \n" +
                "			pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
                "			FROM component_standard_details csd  \n" +
                "			WHERE deletedAt IS NULL AND componentID = vPartID;  \n" +
                "  \n" +
                "		-- Insert Price Group detail from rfq price group to submitted pricegroup history  \n" +
                "			INSERT INTO `rfq_assy_submitted_price_group_detail`  \n" +
                "			(`refSubmittedQuoteID`,`rfqPriceGroupId`,`name`,`refRFQID`,`rfqAssyID`,`qty`,`turnTime`,`unitOfTime`,  \n" +
                "			`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "			SELECT vrfqSubmittedQuoteID, rpg.id, rpg.name, ra.rfqrefID AS refRFQID, ra.id AS rfqAssyID, rpgd.qty, rpgd.turnTime, rpgd.unitOfTime,  \n" +
                "			pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() `updatedAt`,pRoleID `createByRoleId`,pRoleID `updateByRoleId`  \n" +
                "			FROM rfq_assemblies ra  \n" +
                "			JOIN rfq_price_group rpg ON rpg.refRFQID = ra.rfqrefID AND rpg.isDeleted =0  \n" +
                "			LEFT JOIN rfq_price_group_detail rpgd ON rpgd.rfqPriceGroupID = rpg.id AND rpgd.rfqAssyID = ra.id AND rpgd.isDeleted = 0  \n" +
                "			JOIN component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE ra.rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID) AND ra.isDeleted = 0  \n" +
                "			ORDER BY rpg.id;  \n" +
                "  \n" +
                "		-- Copy rfq_lineitems data for BOM history  \n" +
                "			INSERT INTO `rfq_lineitems_history`  \n" +
                "			(`refSubmittedQuoteID`,`rfqAssyID`,`lineID`,`qpa`,`refDesig`,`custPN`,`custPNID`,`uomID`,`description`,`isInstall`,`isPurchase`,`isNotRequiredKitAllocation`,  \n" +
                "			`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`customerRev`,`customerDescription`,`numOfPosition`,`dnpQty`,`dnpDesig`,`org_lineID`,`org_qpa`,  \n" +
                "			`org_refDesig`,`org_custPN`,`org_uomName`,`org_isInstall`,`org_isPurchase`,`org_customerRev`,`org_customerDescription`,`org_numOfPosition`,  \n" +
                "			`qpaDesignatorStep`,`customerPartDesc`,`org_customerPartDesc`,`mergeLines`,`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "			`partID`,`requireMountingTypeStep`,`requireFunctionalTypeStep`,`programingStatus`,`refDesigCount`,`isObsoleteLine`,`cust_lineID`, `dnpDesigCount`)  \n" +
                "			SELECT vrfqSubmittedQuoteID `refSubmittedQuoteID`, prfqAssyID `rfqAssyID`,`lineID`,`qpa`,`refDesig`,  \n" +
                "			`custPN`,`custPNID`,`uomID`,`description`,`isInstall`,`isPurchase`,`isNotRequiredKitAllocation`,  \n" +
                "            `isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`customerRev`,`customerDescription`,`numOfPosition`, `dnpQty`,`dnpDesig`,`org_lineID`,`org_qpa`,  \n" +
                "			`org_refDesig`,`org_custPN`,`org_uomName`,`org_isInstall`,`org_isPurchase`,`org_customerRev`,`org_customerDescription`,`org_numOfPosition`,  \n" +
                "			`qpaDesignatorStep`,`customerPartDesc`,`org_customerPartDesc`,`mergeLines`,`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "			`partID`,`requireMountingTypeStep`,`requireFunctionalTypeStep`,`programingStatus`,`refDesigCount`,`isObsoleteLine`,`cust_lineID`, `dnpDesigCount`  \n" +
                "			 FROM rfq_lineitems rl  \n" +
                "			 WHERE partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = vPartID AND isDeleted = 0) and rl.isdeleted = 0;  \n" +
                "  \n" +
                "		-- Copy rfq_lineitems_alternatepart data for BOM history  \n" +
                "			INSERT INTO `rfq_lineitems_alternatepart_history`  \n" +
                "			(`rfqLineItemsID`,`distributor`,`distMfgCodeID`,`distPN`,`distMfgPNID`,`mfgCode`,`mfgCodeID`,`mfgPN`,`mfgPNID`,`description`,  \n" +
                "			`RoHSStatusID`,`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,  \n" +
                "			`deletedAt`,`refSubmittedQuoteID`,`mfgVerificationStep`,`mfgDistMappingStep`,`mfgCodeStep`,`distVerificationStep`,`distCodeStep`,`getMFGPNStep`,`obsoletePartStep`,  \n" +
                "			`mfgGoodPartMappingStep`,`rfqAssyID`,`mfgPNStep`,`distPNStep`,`customerApproval`,`customerApprovalBy`,`customerApprovalDate`,`org_mfgCode`,  \n" +
                "			`org_mfgPN`,`org_distributor`,`org_distPN`,`badMfgPN`,`distGoodPartMappingStep`,`nonRohsStep`,`epoxyStep`,  \n" +
                "			`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,`parttypeID`,`mountingtypeID`,`partcategoryID`,`partID`,`userData1`,`userData2`,  \n" +
                "			`userData3`,`userData4`,`userData5`,`userData6`,`userData7`,`userData8`,`userData9`,`userData10`,`mismatchMountingTypeStep`,  \n" +
                "			`mismatchFunctionalCategoryStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`pickupPadRequiredStep`,`matingPartRquiredStep`,  \n" +
                "			`driverToolsRequiredStep`,`functionalTestingRequiredStep`,`mismatchValueStep`,`mismatchPackageStep`,`mismatchToleranceStep`,`mismatchTempratureStep`,  \n" +
                "			`mismatchPowerStep`,`uomMismatchedStep`,`programingRequiredStep`,`mismatchColorStep`,`isCustomerUnAppoval`,`customerUnAppovalBy`,  \n" +
                "			`customerUnAppovalDate`,`restrictUseInBOMStep`,`approvedMountingType`,`mismatchRequiredProgrammingStep`,`mappingPartProgramStep`,  \n" +
                "            `suggestedByApplicationMsg`, `suggestedByApplicationStep`,`mismatchProgrammingStatusStep`, `mismatchCustpartRevStep`, `mismatchCPNandCustpartRevStep`)  \n" +
                "			SELECT  \n" +
                "			(  \n" +
                "				SELECT id FROM rfq_lineitems_history  \n" +
                "				WHERE partID = rl.partID AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = vrfqSubmittedQuoteID and lineID = rl.lineID order by id desc limit 1  \n" +
                "			) `rfqLineItemsID`, rla.`distributor`,rla.`distMfgCodeID`,rla.`distPN`,rla.`distMfgPNID`,rla.`mfgCode`,rla.`mfgCodeID`,rla.`mfgPN`,rla.`mfgPNID`,rla.`description`,  \n" +
                "			rla.`RoHSStatusID`,rla.`isDeleted`,rla.`createdBy`,rla.`createdAt`,rla.`updatedBy`,rla.`updatedAt`,rla.`deletedBy`,  \n" +
                "			rla.`deletedAt`,vrfqSubmittedQuoteID `refSubmittedQuoteID`,rla.`mfgVerificationStep`,rla.`mfgDistMappingStep`,  \n" +
                "			rla.`mfgCodeStep`,rla.`distVerificationStep`,rla.`distCodeStep`,rla.`getMFGPNStep`,rla.`obsoletePartStep`,  \n" +
                "			rla.`mfgGoodPartMappingStep`, prfqAssyID `rfqAssyID`,rla.`mfgPNStep`,rla.`distPNStep`,rla.`customerApproval`,rla.`customerApprovalBy`,rla.`customerApprovalDate`,rla.`org_mfgCode`,  \n" +
                "			rla.`org_mfgPN`,rla.`org_distributor`,rla.`org_distPN`,rla.`badMfgPN`,rla.`distGoodPartMappingStep`,rla.`nonRohsStep`,rla.`epoxyStep`,  \n" +
                "			rla.`invalidConnectorTypeStep`,rla.`duplicateMPNInSameLineStep`,rla.`parttypeID`,rla.`mountingtypeID`,rla.`partcategoryID`,rla.`partID`,rla.`userData1`,rla.`userData2`,  \n" +
                "			rla.`userData3`,rla.`userData4`,rla.`userData5`,rla.`userData6`,rla.`userData7`,rla.`userData8`,rla.`userData9`,rla.`userData10`,rla.`mismatchMountingTypeStep`,  \n" +
                "			rla.`mismatchFunctionalCategoryStep`,rla.`restrictUseWithPermissionStep`,rla.`restrictUsePermanentlyStep`,rla.`pickupPadRequiredStep`,rla.`matingPartRquiredStep`,  \n" +
                "			rla.`driverToolsRequiredStep`,rla.`functionalTestingRequiredStep`,rla.`mismatchValueStep`,rla.`mismatchPackageStep`,rla.`mismatchToleranceStep`,rla.`mismatchTempratureStep`,  \n" +
                "			rla.`mismatchPowerStep`,rla.`uomMismatchedStep`,rla.`programingRequiredStep`,rla.`mismatchColorStep`,rla.`isCustomerUnAppoval`,rla.`customerUnAppovalBy`,  \n" +
                "			rla.`customerUnAppovalDate`,rla.`restrictUseInBOMStep`, rla.`approvedMountingType`, rla.`mismatchRequiredProgrammingStep`, rla.`mappingPartProgramStep`,  \n" +
                "            rla.`suggestedByApplicationMsg`, rla.`suggestedByApplicationStep` , rla.`mismatchProgrammingStatusStep`, rla.`mismatchCustpartRevStep`, rla.`mismatchCPNandCustpartRevStep`  \n" +
                "			FROM rfq_lineitems_alternatepart rla  \n" +
                "			JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "			WHERE rla.partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = vPartID AND isDeleted = 0) and rla.isDeleted = 0;  \n" +
                "  \n" +
                "		-- Copy part_sub_assy_relationship data for BOM history  \n" +
                "            INSERT INTO `rfq_assywise_part_sub_assy_relationship_history`  \n" +
                "			(`rfqAssyID`,`partID`,`prPerPartID`,`refSubmittedQuoteID`,`lineitemID`,`prPartLineItemID`,`level`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`)  \n" +
                "			SELECT prfqAssyID rfqAssyID, a.partID, a.prPerPartID, vrfqSubmittedQuoteID,  \n" +
                "			(  \n" +
                "				SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart_history a  \n" +
                "				WHERE mfgPNID = prPerPartID AND partID = (SELECT partID FROM rfq_lineitems WHERE id = a.lineitemID) AND refSubmittedQuoteID = vrfqSubmittedQuoteID  \n" +
                "			) lineitemID,  \n" +
                "			(  \n" +
                "				SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart_history a  \n" +
                "				WHERE mfgPNID = (SELECT partID FROM rfq_lineitems WHERE id = a.lineitemID)  \n" +
                "				AND partID = (SELECT partID FROM rfq_lineitems WHERE id = a.prPartLineItemID) AND refSubmittedQuoteID = vrfqSubmittedQuoteID  \n" +
                "			) prPartLineItemID,  \n" +
                "			a.level, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`  \n" +
                "            FROM part_sub_assy_relationship a  \n" +
                "            WHERE partId = vPartID and isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "            -- Copy RFQ MISC Details in Submitted Quote  \n" +
                "            INSERT INTO `rfq_assy_dataelement_transaction_value_history`  \n" +
                "			(`dataElementID`, `refTransID`, `refTransHistoryId`, `value`, `entityID`, `isDeleted`, `createdAt`, `updatedAt`,  \n" +
                "			`refSubFormTransID`, `createdBy`, `updatedBy`, `createByRoleId`, `updateByRoleId`)  \n" +
                "			SELECT dataElementID, refTransID, vrfqSubmittedQuoteID, value, entityID, isDeleted, utc_timestamp(), utc_timestamp(),  \n" +
                "			refSubFormTransID, pUserID, pUserID, pRoleID, pRoleID  \n" +
                "			FROM dataelement_transactionvalues  \n" +
                "			WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "	-- Update Assembly status  \n" +
                "	    UPDATE rfq_assemblies_quotation_submitted raqs  \n" +
                "        SET  \n" +
                "        raqs.BOMIssues = fun_getQuoteSubjectToFollowing(prfqAssyID)  \n" +
                "        WHERE raqs.id = vrfqSubmittedQuoteID;  \n" +
                "  \n" +
                "	-- Update Assembly status  \n" +
                "	    UPDATE rfq_assemblies SET `STATUS` = 2, `quoteFinalStatus` = 3 WHERE `id` = prfqAssyID;  \n" +
                "  \n" +
                "	-- insert quote is subject to following detail  \n" +
                "		CALL Sproc_CreateQuoteIsSubjetToFollowingDetails(prfqAssyID,pUserID);  \n" +
                "	-- select Last inserted data  \n" +
                "		SELECT * FROM rfq_assy_standard_class_detail WHERE refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "		SELECT * FROM rfq_assy_quote_submitted_assydetail WHERE rfqAssyID = prfqAssyID AND refSubmittedQuoteID = vrfqSubmittedQuoteID;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5361,'2.00','V1','Sproc_CreateQuoteSubmittedSummaryDetails  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5361:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5362,'2.00','V1',' Use umidCreatedQty column from packing_slip_material_receive_det table in Sproc_RetrivePackingSlipMaterialDetList for get umid created qty - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 5232:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 09-09-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 09-09-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5233,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/