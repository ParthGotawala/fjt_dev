(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5362:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-10-2021 *********************************** */
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5363,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5363:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select 'Line 349', @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5364,'2.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5364:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5365,'2.00','V1',' Bug 37577: Material Receipt: Duplicate Packing slip records are showing in list page - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5365:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "CREATE TABLE `pending_elastic_entity_sync_data` (  \n" +
                "  `id` INT NOT NULL AUTO_INCREMENT,  \n" +
                "  `entityID` INT NULL,  \n" +
                "  `entityPKId` VARCHAR(2000) NULL,  \n" +
                "  PRIMARY KEY (`id`));  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        -- (-20) is Purchase Order Entity Default Entry ID  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5366,'2.00','V1','User Story 37311: Enterprise trigger - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5366:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyDescrByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyDescrByID`(  \n" +
                "	ppartID INT) RETURNS VARCHAR(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT mfgPNDescription INTO @result FROM component WHERE id = ppartID  \n" +
                "	AND IFNULL(category,0) = 3;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyNickNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyNickNameByID`(  \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT nickName INTO @result FROM component WHERE id = ppartID  \n" +
                "	AND IFNULL(category,0) = 3;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyrevNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyrevNameByID`(  \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT rev INTO @result FROM component WHERE id = ppartID  \n" +
                "	AND IFNULL(category,0) = 3;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineComponent` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineComponent`(  \n" +
                "customerID INT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT('(SELECT (CASE WHEN b.isDocumentUpload = 1 THEN GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID,''###'',b.isDocumentUpload)  \n" +
                "ELSE GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID,''###'',''0'') END)  from  \n" +
                "(SELECT  \n" +
                "IFNULL(ccl.isDocumentUpload,0) isDocumentUpload,rla.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,rla.mfgPNID  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN  \n" +
                "component c ON rla.mfgpnid=c.id  \n" +
                "LEFT JOIN mfgcodemst mg ON  \n" +
                "c.mfgCodeID=mg.id  \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rla.consolidateID AND rcl.isDeleted = 0  \n" +
                "LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =',customerID,' AND ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT  \n" +
                "IFNULL(ccl.isDocumentUpload,0) isDocumentUpload,c.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,c.id   AS  mfgPNID  \n" +
                "FROM component c  \n" +
                "LEFT JOIN mfgcodemst mg ON  \n" +
                "c.mfgCodeID=mg.id  \n" +
                "LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',customerID,' AND ccl.isDeleted = 0  \n" +
                "WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isDeleted=0 And rla.restrictUseInBOMStep=0)) AND c.isdeleted=0)b) AS component')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineComponentExport` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineComponentExport`(  \n" +
                "           isPackaging TINYINT (1)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	IF(isPackaging=1) THEN  \n" +
                "	SELECT  CONCAT('(SELECT GROUP_CONCAT(b.PIDCode)  from  \n" +
                "(SELECT  \n" +
                "rla.PIDCode  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT  \n" +
                "c.PIDCode  \n" +
                "FROM component c  \n" +
                "WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id  \n" +
                "AND rla.isDeleted=0)) AND c.isdeleted=0)b) AS componentExcel')  INTO @result;  \n" +
                "ELSE  \n" +
                "SELECT CONCAT('(SELECT  \n" +
                "GROUP_CONCAT(rla.PIDCode)  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) as componentExcel') INTO @result;  \n" +
                "END IF;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineComponentHistory` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineComponentHistory`(  \n" +
                "  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT('(SELECT (GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID))  from  \n" +
                "(SELECT  \n" +
                "rla.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,rla.mfgPNID  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla LEFT JOIN  \n" +
                "component c ON rla.mfgpnid=c.id  \n" +
                "LEFT JOIN mfgcodemst mg ON   c.mfgCodeID=mg.id  \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem_history rcl ON rcl.consolidateID = rla.consolidateID AND rcl.refHistoryID=rla.refHistoryID AND rcl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.consolidateID AND rcl.refHistoryID=rla.refHistoryID AND rla.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT  \n" +
                "c.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,c.id   AS  mfgPNID  \n" +
                "FROM component c  \n" +
                "LEFT JOIN mfgcodemst mg ON  \n" +
                "c.mfgCodeID=mg.id  \n" +
                "WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla WHERE rla.consolidateID=rl.consolidateID AND rla.refHistoryID=rl.refHistoryID AND rla.isDeleted=0)) AND c.isdeleted=0)b) AS component')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(  \n" +
                "rfqAssyID INT,  \n" +
                "SQLString VARCHAR(16383),  \n" +
                "customerID INT,  \n" +
                "isPackaging TINYINT,  \n" +
                "SQLGroupString VARCHAR(16383)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	DECLARE ppartid INT;  \n" +
                "	SELECT partid INTO ppartid FROM rfq_assemblies WHERE id=rfqAssyID AND isdeleted=0;  \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                "					SELECT  \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,rl.consolidatedpartlineID,rl.consolidateRestrictPartDetail,fun_getUnitAbbrivationByID(rl.uomID) unitName,rl.isqpaMismatch,  \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,fun_getAssyPIDCodeByID(rl.custPNID) CPNPID,  \n" +
                "                     rl.custPNID, ifnull(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, ifnull(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, ifnull(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                "					CASE WHEN  \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN  \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN  \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id  \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE  \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN  \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN  \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id  \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,  \n" +
                "		   CASE WHEN  \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN  \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN  \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id  \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE  \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN  \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN  \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id  \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,  \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',  \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponentExport(isPackaging)),',  \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPN()),', ',  \n" +
                "					SQLString,SQLGroupString,' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "					JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "					JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.id')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineComponentHistory` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineComponentHistory`(  \n" +
                "  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT('(SELECT (GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID))  from  \n" +
                "(SELECT  \n" +
                "rla.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,rla.mfgPNID  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla LEFT JOIN  \n" +
                "component c ON rla.mfgpnid=c.id  \n" +
                "LEFT JOIN mfgcodemst mg ON   c.mfgCodeID=mg.id  \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem_history rcl ON rcl.consolidateID = rla.consolidateID AND rcl.refHistoryID=rla.refHistoryID AND rcl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.consolidateID AND rcl.refHistoryID=rla.refHistoryID AND rla.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT  \n" +
                "c.mfgPN,mg.mfgCode,fun_getRoHSNameByID(c.RoHSStatusID) name,c.id   AS  mfgPNID  \n" +
                "FROM component c  \n" +
                "LEFT JOIN mfgcodemst mg ON  \n" +
                "c.mfgCodeID=mg.id  \n" +
                "WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla WHERE rla.consolidateID=rl.consolidateID AND rla.refHistoryID=rl.refHistoryID AND rla.isDeleted=0)) AND c.isdeleted=0)b) AS component')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItemsforCount` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItemsforCount`(  \n" +
                "rfqAssyID INT,  \n" +
                "SQLString VARCHAR(16383)  \n" +
                "  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	DECLARE ppartid INT;  \n" +
                "	      SELECT partid INTO ppartid FROM rfq_assemblies WHERE id=rfqAssyID AND isdeleted=0;  \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                "					SELECT  \n" +
                "					  rl.id,rl.isPurchase, rl.lineID  \n" +
                "					, ',  \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "					 JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID  \n" +
                "					 JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.id')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItemsWithPackagingHistory` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItemsWithPackagingHistory`(  \n" +
                "rfqAssyID INT,  \n" +
                "SQLString VARCHAR(16383),  \n" +
                "pqtyID INT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                "					SELECT  \n" +
                "					  rl.id,rl.consolidateID,rl.isPurchase, rl.lineID,  \n" +
                "					  rl.qpa,  \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackagingHistory()),', ',SQLString, ' FROM rfq_consolidated_mfgpn_lineitem_history rl  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity_history rq ON rl.consolidateID=rq.consolidateID and rq.isdeleted=0  \n" +
                "					LEFT JOIN rfq_consolidated_history rch ON rch.id=rl.refHistoryID  \n" +
                "					WHERE rl.isdeleted=0  AND rch.id in (SELECT id FROM tempHistory) and rl.consolidateID not in (select rc.consolidateID from rfq_consolidated_mfgpn_lineitem_history rc where rc.isdeleted=1) AND rq.qtyID=',pqtyID, ' AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.consolidateID')  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPN` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPN`(  \n" +
                "  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "  \n" +
                "			SELECT  CONCAT('(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',fun_getRoHSNameByID(c.RoHSStatusID),''@@@'',  \n" +
                "			IFNULL(fun_getRoHSIconByID(c.RoHSStatusID),\"\"),''@@@'',IFNULL(c.isCustom,1),''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(fun_getPartStatusNameByID(c.partStatus),\"\"),''@@@'',  \n" +
                "			REPLACE(IFNULL(fun_getPartStatusColorByID(c.partStatus),\"\"),\",\",\"***\"),''@@@'',REPLACE(IFNULL(fun_getPartTBDDetails(c.id),\"\"),\",\",\"***\"),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "			IFNULL(rla.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'','''',''@@@'','''',''@@@'',  \n" +
                "			IFNULL(rla.approvedMountingType,0),''@@@'',  \n" +
                "			IFNULL(rla.mismatchMountingTypeStep,1)  \n" +
                "			)AS mfgPn  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN  \n" +
                "			component c ON rla.mfgpnid=c.id  \n" +
                "			WHERE rla.consolidateID = rl.id AND rla.isdeleted=0) AS mfgPN')  INTO @result;  \n" +
                "  \n" +
                "	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPNWithPackagingHistory` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPNWithPackagingHistory`(  \n" +
                "  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "  \n" +
                "	SELECT  CONCAT('(SELECT GROUP_CONCAT(DISTINCT  IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',a.RoHSStatusID,''@@@'', a.name,''@@@'',IFNULL(a.rohsIcon,\"\"),''@@@'',IFNULL(a.isCustom,\"\"),''@@@'',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(a.partStatusName,\"\"),  \n" +
                "	''@@@'',REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',0,''@@@'',0,''@@@'',1,''@@@'',1,''@@@'',0,''@@@'',0,''@@@'',1,''@@@'',  \n" +
                "	1,''@@@'',\"\",''@@@'',\"\",''@@@'',\"\",''@@@'',0,''@@@'',1,''@@@'',REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',a.mfgCode,''@@@'',a.mfgpnID) FROM  \n" +
                "                                 ( SELECT DISTINCT rla.PIDCode,c.RoHSStatusID,fun_getRoHSNameByID(c.RoHSStatusID) name,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                                 c.feature,c.isCustom,fun_getPartStatusNameByID(c.partStatus) partStatusName,fun_getPartStatusColorByID(c.partStatus) partStatusColor,  \n" +
                "                                 fun_getPartTBDDetails(c.id) partTBD,c.mfgPN ,fun_getMfgCodeByID(c.mfgcodeID)  as mfgCode,c.id as mfgpnID  \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla LEFT JOIN  \n" +
                "                                component c ON rla.mfgpnid=c.id  \n" +
                "                                WHERE rla.consolidateID=rl.consolidateID AND rla.refHistoryID=rl.refHistoryID AND rla.isdeleted=0  \n" +
                "                                UNION  \n" +
                "                                SELECT c.PIDCode,c.RoHSStatusID,fun_getRoHSNameByID(c.RoHSStatusID) name,IFNULL(fun_getRoHSIconByID(c.RoHSStatusID),\"\") rohsIcon,  \n" +
                "                                REPLACE(IFNULL(c.feature,\"\"),\",\",\"\") feature,c.isCustom, fun_getPartStatusNameByID(c.partStatus) partStatusName,  \n" +
                "                                fun_getPartStatusColorByID(c.partStatus) partStatusColor,fun_getPartTBDDetails(c.id) partTBD,c.mfgPN,fun_getMfgCodeByID(c.mfgcodeID)  as mfgCode,c.id as mfgpnID  \n" +
                "                                  FROM component c  \n" +
                "                                  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component  \n" +
                "                                  WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate_history rla  \n" +
                "                                  WHERE rla.consolidateID=rl.consolidateID and rla.refHistoryID=rl.refHistoryID AND rla.isDeleted=0)) AND c.isdeleted=0) a) AS mfgPN')  INTO @result;  \n" +
                "  \n" +
                "  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPN_refector` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPN_refector`(  \n" +
                "  pcustomerID INT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "  \n" +
                "			SELECT  CONCAT('(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',fun_getRoHSNameByID(c.RoHSStatusID),''@@@'',  \n" +
                "			IFNULL(fun_getRoHSIconByID(c.RoHSStatusID),\"\"),''@@@'',IFNULL(c.isCustom,1),''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(fun_getPartStatusNameByID(c.partStatus),\"\"),''@@@'',  \n" +
                "			REPLACE(IFNULL(fun_getPartStatusColorByID(c.partStatus),\"\"),\",\",\"***\"),''@@@'',REPLACE(IFNULL(fun_getPartTBDDetails(c.id),\"\"),\",\",\"***\"),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "			IFNULL(rla.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "			IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'','''',''@@@'','''',''@@@'',  \n" +
                "			IFNULL(rla.approvedMountingType,0),''@@@'',  \n" +
                "			IFNULL(rla.mismatchMountingTypeStep,1) ,''@@@''  \n" +
                "        ,REPLACE(c.mfgPN,\",\",\"***\"),''@@@'',fun_getMfgCodeByID(c.mfgcodeID),''@@@'',c.id,''@@@'',IFNULL(ccl.isDocumentUpload,0)  \n" +
                "			)AS mfgPn  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN  \n" +
                "			component c ON rla.mfgpnid=c.id  \n" +
                "            LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =',pcustomerID,' AND ccl.isDeleted = 0  \n" +
                "			WHERE rla.consolidateID = rl.id AND rla.isdeleted=0) AS mfgPN')  INTO @result;  \n" +
                "  \n" +
                "	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustomLines` ;  \n" +
                "CREATE FUNCTION `fun_getCustomLines`(  \n" +
                "rfqAssyID INT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT (SELECT c.iscustom FROM rfq_consolidated_mfgpn_lineitem_alternate ra JOIN component c ON ra.mfgpnid=c.id WHERE c.iscustom=1 AND ra.consolidateid=rl.id AND rl.isdeleted=0 LIMIT 1)  \n" +
                "                     AS custom,rl.id FROM rfq_consolidated_mfgpn_lineitem rl where rl.isdeleted=0 and rl.rfqAssyID=\",rfqAssyID)  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustomPartData` ;  \n" +
                "CREATE FUNCTION `fun_getCustomPartData`(  \n" +
                "	rfqAssyID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT 	rq.qtyID,  \n" +
                "				IFNULL(cqty.consolidatedQty, rl.requestQty) requestQty,  \n" +
                "				rq.unitPrice,  \n" +
                "				ra.qpa,  \n" +
                "				rl.rfqPriceGroupId,  \n" +
                "				rl.requestQty   qty,  \n" +
                "				rq.componentID,  \n" +
                "				pg.name AS priceGroupName  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id  \n" +
                "			LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity cqty ON cqty.refConsolidateLineitemQtyId = rq.id  \n" +
                "			LEFT JOIN rfq_price_group pg ON pg.id = rl.rfqPriceGroupId  \n" +
                "			JOIN component c ON c.id = rq.componentID  \n" +
                "			WHERE rl.isDeleted=0 AND ra.isdeleted=0 AND rq.isDeleted=0 AND ra.isPurchase = 1 AND rl.rfqAssyid = \",rfqAssyID,\" AND c.isCustom = TRUE;\")  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getDataElementNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getDataElementNameByID`(  \n" +
                "	pDataElementID INT) RETURNS VARCHAR(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vResult VARCHAR(100);  \n" +
                "	SET vResult = '';  \n" +
                "	SELECT dataElementName INTO vResult FROM dataelement WHERE dataElementID = pDataElementID;  \n" +
                "    #SET result = @result;  \n" +
                "	RETURN vResult;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getDataElementSubFormNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getDataElementSubFormNameByID`(  \n" +
                "	pSubFormID INT) RETURNS VARCHAR(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(50);  \n" +
                "    SET result = '';  \n" +
                "	SELECT dataElementName INTO @result FROM dataelement WHERE dataElementID = (SELECT parentDataElementID FROM subform_transaction WHERE subFormTransID =  pSubFormID);  \n" +
                "    SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getLineItemByConsolidateID` ;  \n" +
                "CREATE FUNCTION `fun_getLineItemByConsolidateID`(  \n" +
                "    consolidateItems VARCHAR(50)  \n" +
                ") RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE result VARCHAR(16383);  \n" +
                "     SELECT GROUP_CONCAT(rl.lineID)  INTO result FROM rfq_lineitems rl  \n" +
                "       LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rl.id AND rcl.isdeleted=0  \n" +
                "        WHERE FIND_IN_SET(rl.id, consolidateItems) AND rl.isdeleted=0 ;  \n" +
                "     RETURN result;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getOpStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getOpStatusNameByID`(  \n" +
                "	popstatus INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (popstatus = 0) THEN 'Draft'  \n" +
                "      WHEN (popstatus = 1) THEN 'Published'  \n" +
                "      WHEN (popstatus = 2) THEN 'Disabled' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRackStatusbyID` ;  \n" +
                "CREATE FUNCTION `fun_getRackStatusbyID`(  \n" +
                "	prackStatus INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (prackStatus = 0) THEN '-'  \n" +
                "      WHEN (prackStatus = 1) THEN 'Passed'  \n" +
                "      WHEN (prackStatus = 2) THEN 'Reprocess Required'  \n" +
                "      WHEN (prackStatus = 3) THEN 'Defect Observed'  \n" +
                "      WHEN (prackStatus = 4) THEN 'Scrapped'  \n" +
                "      WHEN (prackStatus = 5) THEN 'Rework Required'  \n" +
                "      WHEN (prackStatus = 6) THEN 'Board With Missing Parts'  \n" +
                "      WHEN (prackStatus = 7) THEN 'Bypassed' ELSE '-' END) INTO result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRestrictedParts` ;  \n" +
                "CREATE FUNCTION `fun_getRestrictedParts`(  \n" +
                "	prfqAssyID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT rla.mfgPN,rla.mfgPNID,rla.consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate rla JOIN rfq_consolidated_mfgpn_lineitem rl  ON  \n" +
                "               rl.id = rla.consolidateID AND rl.deletedAt IS NULL JOIN component c ON c.id=rla.mfgPNID AND c.deletedAt IS NULL   WHERE rla.isDeleted = 0 AND(IFNULL(rla.restrictUseInBOMStep, 0) = 1  \n" +
                "               OR rla.restrictUseWithPermissionStep = 0 OR rla.restrictUsePermanentlyStep = 0 OR c.restrictPackagingUsePermanently=1 OR rla.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "               (rla.restrictUseInBOMExcludingAliasWithPermissionStep=1) OR  \n" +
                "               (IFNULL(rla.customerApproval,'A')!='A' and c.restrictPackagingUseWithpermission=1)) AND rl.rfqAssyID = \",prfqAssyID,\"  \n" +
                "               UNION  \n" +
                "               SELECT c.mfgPN, c.id AS mfgPNID, rlam.consolidateID FROM component c LEFT JOIN  rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid = c.id WHERE c.id NOT IN  \n" +
                "               (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID IN  \n" +
                "              (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid = \",prfqAssyID,\"  AND deletedat IS NULL) AND rla.deletedAt IS NULL) AND  c.packaginggroupID IN  \n" +
                "               (SELECT comp.packaginggroupID FROM component comp WHERE comp.id IN (SELECT rla.mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID IN  \n" +
                "               (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid =\",prfqAssyID,\"  AND deletedat IS NULL))  \n" +
                "               ) AND c.isdeleted = 0 AND(IFNULL(rlam.restrictUseInBOMStep, 0) = 1  \n" +
                "               OR rlam.restrictUseWithPermissionStep = 0 OR rlam.restrictUsePermanentlyStep = 0  \n" +
                "               OR c.restrictUSEwithpermission=1 OR c.restrictUsePermanently=1  OR c.restrictPackagingUsePermanently=1 OR rlam.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "               (rlam.restrictUseInBOMExcludingAliasWithPermissionStep=1)  \n" +
                "               OR (IFNULL(rlam.customerApproval,'A')!='A' and c.restrictPackagingUseWithpermission=1))\")  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRestrictedPartsinPlannBOM` ;  \n" +
                "CREATE FUNCTION `fun_getRestrictedPartsinPlannBOM`(  \n" +
                "	ppartID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT rla.mfgPN,rla.mfgPNID FROM rfq_lineitems_alternatepart rla  WHERE rla.isDeleted=0  AND  \n" +
                " (ifnull(rla.restrictUseInBOMStep,0) = 1 OR ifnull(rla.restrictUseInBOMWithPermissionStep,0) = 1  \n" +
                " OR ifnull(rla.restrictUseInBOMExcludingAliasStep,0) = 1 OR ifnull(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) =1  \n" +
                " OR ifnull(rla.restrictUseExcludingAliasStep,1) = 0 OR ifnull(rla.restrictUseExcludingAliasWithPermissionStep,1) = 0  \n" +
                " OR ifnull(rla.restrictUsePermanentlyStep,1) = 0 OR ifnull(rla.restrictUseWithPermissionStep,1) = 0)  \n" +
                " AND rla.partID = \",ppartID)  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRfqFinalStatusByID` ;  \n" +
                "CREATE FUNCTION `fun_getRfqFinalStatusByID`(  \n" +
                "quoteFinalStatus INT  \n" +
                ") RETURNS CHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (quoteFinalStatus = 1) THEN 'Pending'  \n" +
                "		WHEN (quoteFinalStatus = 2) THEN 'Re-Quote'  \n" +
                "		WHEN (quoteFinalStatus = 3) THEN 'Submitted'  \n" +
                "		WHEN (quoteFinalStatus = 4) THEN 'Completed' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRfqStatusByID` ;  \n" +
                "CREATE FUNCTION `fun_getRfqStatusByID`(  \n" +
                "quoteStatus INT  \n" +
                ") RETURNS CHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (quoteStatus = 1) THEN 'In Progress'  \n" +
                "		WHEN (quoteStatus = 2) THEN 'Follow up Submitted RFQ'  \n" +
                "		WHEN (quoteStatus = 3) THEN 'Won'  \n" +
                "		WHEN (quoteStatus = 4) THEN 'Lost'  \n" +
                "		WHEN (quoteStatus = 5) THEN 'Canceled' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getselectedPartDetail` ;  \n" +
                "CREATE FUNCTION `fun_getselectedPartDetail`(  \n" +
                "	rfqAssyID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT IFNULL(cqty.consolidatedQty ,(SELECT ra.requestQty FROM rfq_assy_quantity ra WHERE ra.deletedAt IS NULL AND ra.id=rq.qtyID))requestQty,  \n" +
                "					rq.finalPrice,  \n" +
                "					rq.unitPrice,  \n" +
                "					rq.supplier,  \n" +
                "					rq.min,  \n" +
                "					rq.mult,  \n" +
                "					rq.selectedMpn,  \n" +
                "					rq.selectionMode,  \n" +
                "					rq.qtyID,  \n" +
                "					rq.currentStock,  \n" +
                "					rq.leadTime,  \n" +
                "					rq.supplierStock,  \n" +
                "					rq.grossStock,  \n" +
                "					rq.componentid,  \n" +
                "					rq.selectedPIDCode,  \n" +
                "					rq.pricingSuppliers,  \n" +
                "					rq.packaging,  \n" +
                "					rq.rfqQtySupplierID,  \n" +
                "					rq.unitEachPrice,  \n" +
                "					rq.quoteQtyEach,  \n" +
                "					rq.supplierEachStcok,  \n" +
                "					c.noOfPosition ApiNoOfPosition,  \n" +
                "					ct.qpa,  \n" +
                "				  (SELECT u.abbreviation FROM uoms u WHERE u.deletedAt IS NULL AND u.id=ct.uomID) abbreviation,  \n" +
                "					rq.quoteQty,  \n" +
                "					c.connecterTypeID,  \n" +
                "					c.noOfRows,  \n" +
                "					rq.pricenotselectreason,  \n" +
                "					rq.isBomUpdate,  \n" +
                "					rq.rfqPriceGroupId,  \n" +
                "					pg.name AS priceGroupName,  \n" +
                "					cqty.consolidatedQty,  \n" +
                "					(SELECT authorizeType FROM mfgcodemst WHERE (mfgcode=rq.supplier OR mfgname=rq.supplier) AND deletedAt IS NULL AND mfgType='DIST' LIMIT 1) authorizeType,  \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				LEFT JOIN component c ON rq.componentid = c.id AND c.deletedAt IS NULL  \n" +
                "				LEFT JOIN rfq_consolidated_mfgpn_lineitem ct ON  rq.consolidateID=ct.id  \n" +
                "				LEFT JOIN rfq_price_group pg ON pg.id=rq.rfqpricegroupID  \n" +
                "				LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity cqty ON cqty.refConsolidateLineitemQtyId = rq.id  \n" +
                "				WHERE ct.isdeleted=0 AND rq.isdeleted=0 AND ct.rfqAssyID=\",rfqAssyID)  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSerailNoCurrentStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getSerailNoCurrentStatusNameByID`(  \n" +
                "	pcurrStatusID VARCHAR(255)) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pcurrStatusID = 1) THEN 'Passed'  \n" +
                "      WHEN (pcurrStatusID = 2) THEN 'Reprocess Required'  \n" +
                "      WHEN (pcurrStatusID = 3) THEN 'Defect Observed'  \n" +
                "      WHEN (pcurrStatusID = 4) THEN 'Scrapped'  \n" +
                "      WHEN (pcurrStatusID = 5) THEN 'Rework Required'  \n" +
                "      WHEN (pcurrStatusID = 6) THEN 'Board with Missing Parts'  \n" +
                "      WHEN (pcurrStatusID = 7) THEN 'Bypassed'  \n" +
                "      ELSE pcurrStatusID END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getStatusNameByColumnAndID` ;  \n" +
                "CREATE FUNCTION `fun_getStatusNameByColumnAndID`(  \n" +
                "                      pcolname VARCHAR(50),  \n" +
                "                      pval VARCHAR(100)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "                      DECLARE result VARCHAR(100);  \n" +
                "                      IF (pcolname = \"WOSTATUS\") THEN  \n" +
                "                          SELECT (CASE WHEN (pval = '0') THEN 'Draft'  \n" +
                "                                WHEN (pval = '1') THEN 'Published'  \n" +
                "                                WHEN (pval = '2') THEN 'Completed'  \n" +
                "                                WHEN (pval = '4') THEN 'Void'  \n" +
                "                                WHEN (pval = '5') THEN 'Draft Under Review'  \n" +
                "                                WHEN (pval = '6') THEN 'Under Termination'  \n" +
                "                                WHEN (pval = '7') THEN 'Terminated'  \n" +
                "                                WHEN (pval = '8') THEN 'Published Draft & Review'  \n" +
                "                                WHEN (pval = '9') THEN 'Completed With Missing Parts'  \n" +
                "                                ELSE pval END) INTO @result;  \n" +
                "                          SET result = @result;  \n" +
                "                          RETURN result;  \n" +
                "                       ELSEIF pcolname = \"SOSTATUS\" THEN  \n" +
                "							SELECT CASE WHEN pval = '1' THEN 'In Progress'  \n" +
                "                                WHEN pval = '2' THEN 'Completed'  \n" +
                "                                WHEN pval = '-1' THEN 'Canceled'  \n" +
                "                                ELSE pval END INTO result;  \n" +
                "                             RETURN  result;  \n" +
                "                       ELSE  \n" +
                "                          RETURN pval;  \n" +
                "                      END IF;  \n" +
                "                  END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalHistoryPrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalHistoryPrice`(  \n" +
                "	prfqAssyID INT,  \n" +
                "	pqtyID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT rq.refHistoryID,(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(rch.createdAt)) createdAt,  \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END))) AS TotalExtendedPrice,  \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END)) * IFNULL(rq.requestQty,0)) AS TotalAssemblyPrice,  \n" +
                "						SUM((IFNULL(rq.quoteqty,0)-(rq.requestQty*IFNULL(ra.qpa,1) * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END)))*IFNULL(rq.unitPrice,0)) AS TotalExcessPrice  \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq  \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem_history ra ON rq.consolidateID=ra.consolidateID AND rq.refHistoryID=ra.refHistoryID  \n" +
                "					           LEFT JOIN rfq_consolidated_history rch on rch.id=rq.refHistoryID  \n" +
                "					        WHERE rq.qtyID=\",pqtyID,\" AND rq.refHistoryID in (SELECT id FROM tempHistory) AND ra.isdeleted=0 AND rq.isDeleted=0 and ra.isPurchase = 1 AND ra.rfqAssyid=\",prfqAssyID,\"  GROUP BY rq.refHistoryID\")  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalPrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalPrice`(  \n" +
                "	rfqAssyID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT rq.qtyID, IFNULL(cqty.consolidatedQty, rl.requestQty) requestQty,  \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END))) AS TotalExtendedPrice,  \n" +
                "						(SUM(rq.unitPrice * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END))) AS TotalUnitPrice,  \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END)) * IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,  \n" +
                "						SUM((IFNULL(rq.quoteqty,0)-((CASE WHEN rq.quoteqty IS NULL THEN 0 ELSE rl.requestQty END)*IFNULL(ra.qpa,1) * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "					IFNULL(ra.numOfPosition,1)  \n" +
                "					ELSE 1 END)))*IFNULL(rq.unitPrice,0)) AS TotalExcessPrice,  \n" +
                "					         rl.rfqPriceGroupId,  \n" +
                "					         rl.requestQty   qty,  \n" +
                "					         pg.name AS priceGroupName  \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "					            JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id  \n" +
                "					            JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id  \n" +
                "					            LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity cqty ON cqty.refConsolidateLineitemQtyId = rq.id  \n" +
                "					            LEFT JOIN rfq_price_group pg ON pg.id = rl.rfqPriceGroupId  \n" +
                "					          WHERE rl.isDeleted=0 AND ra.isdeleted=0 AND rq.isDeleted=0 AND ra.isPurchase = 1 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\")  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalQtyDetails` ;  \n" +
                "CREATE FUNCTION `fun_getTotalQtyDetails`(  \n" +
                "rfqAssyID INT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"select rt.id qtyTimeID, rt.turnTime, rt.unitOfTime, rt.rfqAssyQtyID, rq.requestQty, rq.rfqPriceGroupId, rpg.name as priceGroup  \n" +
                "					from rfq_assy_quantity rq  \n" +
                "					join rfq_assy_quantity_turn_time rt on rt.rfqAssyQtyID = rq.id and rt.isDeleted = 0  \n" +
                "					left join rfq_price_group rpg on rpg.id = rq.rfqPriceGroupId  \n" +
                "					WHERE rq.rfqAssyID= \",rfqAssyID,\" and rq.isDeleted=0  \n" +
                "					order by rq.rfqPriceGroupId, rq.requestQty, rt.turnTime\")  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getWoStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getWoStatusNameByID`(  \n" +
                "	pwostatus INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwostatus = 0) THEN 'Draft'  \n" +
                "      WHEN (pwostatus = 1) THEN 'Published'  \n" +
                "      WHEN (pwostatus = 2) THEN 'Completed'  \n" +
                "      WHEN (pwostatus = 4) THEN 'Void'  \n" +
                "      WHEN (pwostatus = 6) THEN 'Under Termination'  \n" +
                "      WHEN (pwostatus = 7) THEN 'Terminated'  \n" +
                "	 ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getWoSubStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getWoSubStatusNameByID`(  \n" +
                "	pwosubstatus INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwosubstatus = 0) THEN 'Draft'  \n" +
                "      WHEN (pwosubstatus = 1) THEN 'Published'  \n" +
                "      WHEN (pwosubstatus = 2) THEN 'Completed'  \n" +
                "      WHEN (pwosubstatus = 4) THEN 'Void'  \n" +
                "      WHEN (pwosubstatus = 5) THEN 'Draft Under Review'  \n" +
                "      WHEN (pwosubstatus = 6) THEN 'Under Termination'  \n" +
                "      WHEN (pwosubstatus = 7) THEN 'Terminated'  \n" +
                "      WHEN (pwosubstatus = 8) THEN 'Published Draft & Review'  \n" +
                "      WHEN (pwosubstatus = 9) THEN 'Completed With Missing Parts' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getwoTypeNameByType` ;  \n" +
                "CREATE FUNCTION `fun_getwoTypeNameByType`(  \n" +
                "	pwoType INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwoType = 1) THEN 'New'  \n" +
                "		WHEN (pwoType = 2) THEN 'Repeat order with same revision'  \n" +
                "		WHEN (pwoType = 3) THEN 'Revision change'  \n" +
                "		WHEN (pwoType = 4) THEN 'I-ECO'  \n" +
                "		WHEN (pwoType = 5) THEN 'C-ECO'  \n" +
                "		ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_lastPricingStatus` ;  \n" +
                "CREATE FUNCTION `fun_lastPricingStatus`(  \n" +
                "rfqAssyID INT,  \n" +
                "puserID INT,  \n" +
                "pisPurchaseApi TINYINT  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` is NOT NULL and isPurchaseApi=\",pisPurchaseApi,\" and rfqAssyID=\", rfqAssyID)  INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_convertDateTimeString` ;  \n" +
                "CREATE FUNCTION `fun_convertDateTimeString`(  \n" +
                "convertDate DATETIME  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(5000);  \n" +
                "	SELECT DATE_FORMAT(convertDate, \"%m/%d/%y %r\") INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkInEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkInEmployeeForOperation`(  \n" +
                "	IN pWoID INT,  \n" +
                "	IN pOpID INT,  \n" +
                "	IN pWoOPID INT,  \n" +
                "	IN pEquipmentID INT,  \n" +
                "	IN pWorkstationID INT,  \n" +
                "	IN pisSetup TINYINT,  \n" +
                "	IN pIsSingleEmployee TINYINT,  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pWoTransID INT,  \n" +
                "	IN pIssueQty INT,  \n" +
                "	IN pCreatedBy VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE lvwoNumber VARCHAR(255);  \n" +
                "	DECLARE lvopName VARCHAR(255);  \n" +
                "	DECLARE lvempName VARCHAR(255);  \n" +
                "	DECLARE lvinsertedWoTransInOutID INT;  \n" +
                "	DECLARE lvemployeeID INT;  \n" +
                "	DECLARE lvopNumber DECIMAL(7,3);  \n" +
                "	DECLARE lvburdenRate DECIMAL(13,3);  \n" +
                "	DECLARE lpaymentMode VARCHAR(10);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;  \n" +
                "	CREATE TEMPORARY TABLE error_CheckIn (  \n" +
                "		errorText VARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCheckInTime;  \n" +
                "	SELECT CAST(burdenRate AS DECIMAL(13,3)), paymentMode INTO lvburdenRate, lpaymentMode FROM employees WHERE id=pEmployeeID;  \n" +
                "  \n" +
                "	-- to pause all active operation in case of resume any other operation  \n" +
                "	CALL Sproc_PauseActiveOperationListBeforeCheckIn(pWoID,pWoOPID,pEmployeeID,pCreatedBy);  \n" +
                "  \n" +
                "	IF(pIsSingleEmployee = 1) THEN  \n" +
                "		INSERT INTO workorder_trans_empinout  \n" +
                "		(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`, `burdenRate`, `paymentMode`)  \n" +
                "		VALUES  \n" +
                "		(pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0, lvburdenRate, lpaymentMode);  \n" +
                "  \n" +
                "		SET lvinsertedWoTransInOutID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/* [S] - Add Time line log for check-in to team work order operation */  \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),  \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,  \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)  \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
                "		FROM workorder_trans_empinout  wteio  \n" +
                "		WHERE wteio.woTransinoutID = lvinsertedWoTransInOutID;  \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;  \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee start activity in team operation\");  \n" +
                "		SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity in team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
                "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',lvinsertedWoTransInOutID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', lvemployeeID),pCreatedBy,1);  \n" +
                "		/* [E] - Add Time line log for check-in to team work order operation */  \n" +
                "	ELSE  \n" +
                "		IF (IFNULL(pIssueQty,0)= 0) THEN  \n" +
                "			INSERT INTO workorder_trans  \n" +
                "			(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isDeleted`, `woentrytype`, `isSetup`)  \n" +
                "				VALUES  \n" +
                "			(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T', pisSetup);  \n" +
                "  \n" +
                "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;  \n" +
                "  \n" +
                "			INSERT INTO workorder_trans_empinout  \n" +
                "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`, `burdenRate`, `paymentMode`)  \n" +
                "			VALUES  \n" +
                "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0, lvburdenRate, lpaymentMode);  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for check-in work order operation */  \n" +
                "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),  \n" +
                "				(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,  \n" +
                "				(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)  \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
                "			FROM workorder_trans  wt  \n" +
                "			WHERE wt.woTransID = @pWoTransID;  \n" +
                "  \n" +
                "			SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");  \n" +
                "			SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
                "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  \n" +
                "			/* [E] - Add Time line log for check-in work order operation */  \n" +
                "		ELSE  \n" +
                "			CALL Sproc_GetopReadyStock(pWOID,pOpID);  \n" +
                "			SELECT issuePending INTO @pIssuePending FROM temp_Sproc_GetopReadyStock;  \n" +
                "  \n" +
                "			IF((IFNULL(pIssueQty,0)) > IFNULL(@pIssuePending,0)) THEN  \n" +
                "				INSERT INTO error_CheckIn (errorText) VALUES ('Invalid Issue Qty !!');  \n" +
                "			ELSE  \n" +
                "				INSERT INTO workorder_trans  \n" +
                "				(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,  \n" +
                "					`createdBy`, `isDeleted`, `woentrytype`, `isSetup`)  \n" +
                "				VALUES  \n" +
                "				(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T',pisSetup);  \n" +
                "  \n" +
                "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;  \n" +
                "  \n" +
                "			INSERT INTO workorder_trans_empinout  \n" +
                "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`,  \n" +
                "			`checkinTime`,`createdBy`, `isPaused`, `isDeleted`, `burdenRate`, `paymentMode`)  \n" +
                "			VALUES  \n" +
                "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0, lvburdenRate, lpaymentMode);  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for check-in work order operation */  \n" +
                "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),  \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,  \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)  \n" +
                "				INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
                "				FROM workorder_trans  wt  \n" +
                "			WHERE wt.woTransID = @pWoTransID;  \n" +
                "  \n" +
                "			SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");  \n" +
                "			SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
                "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  \n" +
                "			/* [E] - Add Time line log for check-in work order operation */  \n" +
                "  \n" +
                "			END IF;  \n" +
                "	 	END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT errorText FROM error_CheckIn;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_convertToMasterTemplate` ;  \n" +
                "CREATE PROCEDURE `Sproc_convertToMasterTemplate`(  \n" +
                "	IN pmasterTemplate VARCHAR(1000),  \n" +
                "	IN pdescription TEXT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pcreatedBy VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_mastertemplate_convert_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_mastertemplate_convert_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT COUNT(masterTemplate) INTO @masterTemplateDet FROM master_templates WHERE masterTemplate=pmasterTemplate AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0;  \n" +
                "	SELECT COUNT(opID) INTO @opCount  \n" +
                "	FROM operations op WHERE op.opID IN (SELECT woop.opID FROM workorder_operation woop WHERE woID=pwoID AND woop.deletedAt IS NULL AND IFNULL(woop.isDeleted,0)=0)  \n" +
                "	AND op.opStatus=1 AND op.deletedAt IS NULL AND IFNULL(op.isDeleted,0)=0;  \n" +
                "	IF (IFNULL(@masterTemplateDet,0) > 0) THEN  \n" +
                "		SET @stmt_error_template = CONCAT('<b>',pmasterTemplate,'</b>  template is already exists!');  \n" +
                "		INSERT INTO temp_mastertemplate_convert_error (errorText) VALUES (@stmt_error_template);  \n" +
                "		SELECT errorText FROM temp_mastertemplate_convert_error;  \n" +
                "	ELSEIF (IFNULL(@opCount,0) < 1) THEN  \n" +
                "		SET @stmt_error_op = CONCAT('There is no operations in work order to convert into master template');  \n" +
                "		INSERT INTO temp_mastertemplate_convert_error (errorText) VALUES (@stmt_error_op);  \n" +
                "		SELECT errorText FROM temp_mastertemplate_convert_error;  \n" +
                "	ELSE  \n" +
                "		START TRANSACTION;  \n" +
                "			INSERT INTO master_templates (masterTemplate,description,isActive,isMasterTemplate, createdBy)  \n" +
                "			VALUES (pmasterTemplate, pdescription, 1, 0, pcreatedBy);  \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO @pmasterTemplateID;  \n" +
                "  \n" +
                "			INSERT INTO operation_master_templates (masterTemplateId,operationId,isActive,createdBy,isDeleted)  \n" +
                "			SELECT @pmasterTemplateID, a.opID , 1, pcreatedBy, 0 FROM  \n" +
                "				(  \n" +
                "					SELECT op.opID FROM operations op WHERE op.opID IN  \n" +
                "					(SELECT woop.opID FROM workorder_operation woop  \n" +
                "					WHERE woop.woID=pwoID AND woop.deletedAt IS NULL  \n" +
                "					AND IFNULL(woop.isDeleted,0)=0) AND op.deletedAt IS NULL  \n" +
                "					AND IFNULL(op.isDeleted,0)=0 AND op.opStatus=1  \n" +
                "				) a;  \n" +
                "			SELECT @pmasterTemplateID AS masterTemplateID;  \n" +
                "		COMMIT;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetMaxWorkorderNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetMaxWorkorderNumber`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pisRepeat INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE woPartID INT DEFAULT 0;  \n" +
                "	DECLARE woWONumber VARCHAR(50);  \n" +
                "	SET woPartID = 0;  \n" +
                "  \n" +
                "	IF (pwoID IS NULL) THEN  \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` AS `Workorder` WHERE `Workorder`.`deletedAt` IS NULL;  \n" +
                "	ELSE  \n" +
                "		-- commmented after discussion with dixit sir on 02/10/2018  \n" +
                "		SELECT partID, woNumber INTO woPartID, woWONumber FROM workorder WHERE woID=pwoID AND `deletedAt` IS NULL;  \n" +
                "		SET woWONumber = SUBSTRING_INDEX(woWONumber,'-',1);  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` Where woNumber LIKE '%\", woWONumber, \"%' AND `deletedAt` IS NULL\");  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_PauseActiveOperationListBeforeCheckIn` ;  \n" +
                "CREATE PROCEDURE `Sproc_PauseActiveOperationListBeforeCheckIn`(  \n" +
                "	IN pWoID INT,  \n" +
                "	IN pWoOPID INT,  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;  \n" +
                "	CREATE TEMPORARY TABLE error_CheckIn (  \n" +
                "		errorText VARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCheckInTime;  \n" +
                "  \n" +
                "	--  Start: Pause all current running operation before start activity  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_active_employee_operation;  \n" +
                "	CREATE TEMPORARY TABLE temp_active_employee_operation  \n" +
                "	SELECT woopID,woTransinoutID,  \n" +
                "		(SELECT IFNULL(wc.isParellelOperation,0) FROM workorder_cluster wc  \n" +
                "			WHERE wc.clusterID IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "					WHERE woc.woopid=woEmpInout.woopID AND `woc`.`deletedAt` IS NULL)  \n" +
                "			AND wc.deletedAt IS NULL AND wc.woID = woEmpInout.woID  \n" +
                "		) isParellelOperation  \n" +
                "	FROM workorder_trans_empinout woEmpInout  \n" +
                "	WHERE woEmpInout.employeeID=pEmployeeID AND woEmpInout.checkinTime IS NOT NULL AND woEmpInout.checkoutTime IS NULL  \n" +
                "	AND woEmpInout.isPaused=0 AND woEmpInout.deletedAt IS NULL;  \n" +
                "  \n" +
                "	SELECT IFNULL(wc.isParellelOperation,0) INTO @pparallelOperation FROM workorder_cluster wc  \n" +
                "					WHERE wc.clusterID  \n" +
                "						IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "							WHERE woc.woopid=pWoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
                "					 AND wc.deletedAt IS NULL AND wc.woID = pWoID;  \n" +
                "  \n" +
                "	IF(@pparallelOperation = 1) THEN  \n" +
                "	-- case 1: current operation is parallel operation with in same workorder  \n" +
                "		-- SELECT * FROM temp_active_employee_operation;  \n" +
                "		UPDATE workorder_trans_empinout SET isPaused = 1, updatedBy = pCreatedBy  \n" +
                "			WHERE woTransinoutID IN (SELECT woTransinoutID FROM temp_active_employee_operation WHERE IFNULL(isParellelOperation,0)=0);  \n" +
                "  \n" +
                "		INSERT INTO workorder_trans_emp_pausedet (`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)  \n" +
                "		 	SELECT woTransinoutID , @pCheckInTime, pCreatedBy, 0 FROM temp_active_employee_operation WHERE IFNULL(isParellelOperation,0)=0;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "	-- case 2: current operation is normal operation  \n" +
                "		-- select * from temp_active_employee_operation;  \n" +
                "		UPDATE workorder_trans_empinout SET isPaused = 1, updatedBy = pCreatedBy  \n" +
                "			WHERE woTransinoutID IN (SELECT woTransinoutID FROM temp_active_employee_operation);  \n" +
                "  \n" +
                "		INSERT INTO workorder_trans_emp_pausedet (`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)  \n" +
                "			SELECT woTransinoutID , @pCheckInTime, pCreatedBy, 0 FROM temp_active_employee_operation;  \n" +
                "	END IF;  \n" +
                "	-- End: Pause all current running operation before start activity  \n" +
                "	SELECT errorText FROM error_CheckIn;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderOperation`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoOPID INT,  \n" +
                "	IN pisRework TINYINT,  \n" +
                "	IN pqtyControl TINYINT,  \n" +
                "	IN pisIssueQty TINYINT,  \n" +
                "	IN poperationTypeID INT,  \n" +
                "	IN pisPreProgrammingComponent INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE previous_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "	DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "	DECLARE is_current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "	DECLARE current_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "	DECLARE first_op_number INT DEFAULT 0;  \n" +
                "  \n" +
                "	DECLARE IsInValidReworkInspectionProcess INT DEFAULT 0;  \n" +
                "	DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "	DECLARE Found_As_Parallel_Operation INT DEFAULT 0;  \n" +
                "	DECLARE Found_In_Parallel_Cluster INT DEFAULT 0;  \n" +
                "	DECLARE operation_clusterid INT DEFAULT 0;  \n" +
                "	DECLARE isParellelCluster INT DEFAULT 0;  \n" +
                "	DECLARE isparelleloperationtypeid INT DEFAULT 0;  \n" +
                "	DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "	DECLARE IsInvalidReworkInspectionOperation INT DEFAULT 0;  \n" +
                "	DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "	DECLARE IsReworkInParallelCluster INT DEFAULT 0;  \n" +
                "	DECLARE IsPreProgrammingInParallelCluster INT DEFAULT 0;  \n" +
                "	DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "	DECLARE prv_oprn_is_inspection_parellel_cluster INT DEFAULT 0;  \n" +
                "	DECLARE Is_Rework_FALSE INT DEFAULT 0;  \n" +
                "  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	-- get opnumber from woopid  \n" +
                "	-- get opname from woopid and opnumber  \n" +
                "	SELECT opnumber, opname, isRework, qtyControl, isIssueQty, operationTypeID, isPreProgrammingComponent  \n" +
                "	INTO @pwoopnumber, @curr_opname, @curr_isRework, @curr_qtyControl, @curee_isIssueQty, @curr_operationTypeID, @curr_isPreProgrammingComponent FROM workorder_operation  \n" +
                "	WHERE woopid=pwoopid AND deletedat IS NULL LIMIT 1;  \n" +
                "  \n" +
                "	-- get inspection process type id  \n" +
                "	SET InspectionOperationTypeID := 0;  \n" +
                "	SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                "		WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "	/******************** start - case 1 - current operation with rework than previous operation must have 'inspection process' ***********/  \n" +
                "	IF (pisrework = 1) THEN  \n" +
                "		SET first_op_number:= 0;  \n" +
                "		SELECT MIN(opNumber) INTO first_op_number FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "		/**************************************** start - 1. if current operation is first operation should not be rework type ****************************************************/  \n" +
                "		IF first_op_number=@pwoopnumber THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' not allowed as rework operation, because first operation of workorder can not be rework !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - 1. if current operation is first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 2. rework operation should not be inspection process ****************************************************/  \n" +
                "		SET IsInValidReworkInspectionProcess:=0;  \n" +
                "		IF (poperationtypeid IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(poperationtypeid,0) = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInValidReworkInspectionProcess:=1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_operationTypeID,0) = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInValidReworkInspectionProcess:=1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF IsInValidReworkInspectionProcess  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is rework operation, So it can not be as inspection process !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - 2. rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 3. rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "		SET IsInValidReworkOperation:=0;  \n" +
                "		IF ((pqtyControl IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pqtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF ((IFNULL(@curr_qtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF ((pisIssueQty IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pisIssueQty,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF ((IFNULL(@curr_isIssueQty,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInValidReworkOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid operation, It must be allow true for manufacturer qty and Issue Qty !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - 3. rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 4. check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "		SET Found_As_Parallel_Operation:= 0;  \n" +
                "		-- check rework operation should not be in parallel operation cluster  \n" +
                "		SELECT COUNT(*) INTO Found_As_Parallel_Operation FROM workorder_operation_cluster  \n" +
                "			WHERE clusterid IN (SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1 )  \n" +
                "			AND deletedat IS NULL AND woopid=pwoopid;  \n" +
                "  \n" +
                "		-- set flag false if any operation not found as inspection process  \n" +
                "		IF Found_As_Parallel_Operation > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation cannot be set as rework operation, because it is in parallel cluster !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - 4. check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 5. check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "		SET previous_opnumber:= 0;  \n" +
                "  \n" +
                "		-- get previous operation of rework operation  \n" +
                "		SELECT MAX(opnumber) INTO previous_opnumber FROM workorder_operation wo  \n" +
                "		WHERE opnumber < @pwoopnumber  \n" +
                "		AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "		-- if found previous operation than check operation is inspection process or not  \n" +
                "		IF previous_opnumber > 0 THEN  \n" +
                "			SET is_current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "			-- set checked operation number if found as inspection process  \n" +
                "			SELECT opnumber INTO is_current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "			WHERE ((operationtypeid = InspectionOperationTypeID) OR (isrework=1))  \n" +
                "			AND woid=pwoid AND deletedat IS NULL AND opnumber=previous_opnumber;  \n" +
                "  \n" +
                "			-- set flag false if any operation not found as inspection process  \n" +
                "			IF is_current_inspection_or_rework_opnumber = 0 THEN  \n" +
                "				SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have previous operation inspection process or rework operation !!');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have previous operation inspection process or rework operation !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** start - 5. check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "	END IF;  \n" +
                "	/******************** end - case 1 - current operation with rework than previous operation must have 'inspection process' ***********/  \n" +
                "  \n" +
                "	/**************************************** start - case 2 - current Operation inspection process ****************************************************/  \n" +
                "	/* case 0 - any operation with inspection process than next operation must have 'rework' and not in parallel cluster*/  \n" +
                "  \n" +
                "	SET IsInspectionProcess:= 0;  \n" +
                "	IF (poperationtypeid IS NOT NULL) THEN  \n" +
                "		IF(InspectionOperationTypeID = IFNULL(poperationtypeid,0)) THEN  \n" +
                "			SET IsInspectionProcess:= 1;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF(InspectionOperationTypeID = IFNULL(@curr_operationTypeID,0)) THEN  \n" +
                "			SET IsInspectionProcess:= 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(IsInspectionProcess > 0) THEN  \n" +
                "		SET IsInvalidReworkInspectionOperation:= 0;  \n" +
                "		/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "		IF (pisrework IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisrework,0) = 1) THEN  \n" +
                "				SET IsInvalidReworkInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isRework,0) = 1) THEN  \n" +
                "				SET IsInvalidReworkInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInvalidReworkInspectionOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid inspection operation, It cannot be rework operation !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "		SET IsInValidInspectionOperation:= 0;  \n" +
                "		IF ((pqtyControl IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pqtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF ((IFNULL(@curr_qtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid operation, It must allow true for manufacturer qty !!');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "		SET Found_In_Parallel_Cluster:= 0;  \n" +
                "		-- check rework operation should not be in parallel operation cluster  \n" +
                "		SELECT COUNT(*) INTO Found_In_Parallel_Cluster FROM workorder_operation_cluster  \n" +
                "			WHERE clusterid IN (SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1 )  \n" +
                "			AND deletedat IS NULL AND woopid=pwoopid;  \n" +
                "  \n" +
                "		IF (Found_In_Parallel_Cluster = 0) THEN  \n" +
                "			SET next_opnumber:= 0;  \n" +
                "			-- get next operation of inspection operation  \n" +
                "			SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                "			WHERE opnumber > @pwoopnumber  \n" +
                "			AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "			-- if found next operation than check operation is rework operation or not  \n" +
                "			IF next_opnumber > 0 THEN  \n" +
                "				SET current_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as rework operation  \n" +
                "				SELECT opnumber INTO current_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE opnumber=next_opnumber AND isrework=1  \n" +
                "				AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "				-- set flag false if any operation not found as rework operation  \n" +
                "				IF current_rework_opnumber = 0 THEN  \n" +
                "					SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have next operation as rework operation');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have next operation as rework operation');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/**************************************** end - case 2 - current Operation inspection process ****************************************************/  \n" +
                "  \n" +
                "	/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "	SET isparelleloperationtypeid:= 0;  \n" +
                "	SET operation_clusterid:= 0;  \n" +
                "	SET isParellelCluster:= 0;  \n" +
                "  \n" +
                "	SELECT clusterid INTO operation_clusterid FROM workorder_operation_cluster WHERE woopid=pwoopid AND deletedat IS NULL LIMIT 1;  \n" +
                "	SELECT isparelleloperation INTO isParellelCluster FROM workorder_cluster WHERE clusterID=operation_clusterid AND deletedat IS NULL LIMIT 1;  \n" +
                "  \n" +
                "	IF (operation_clusterid > 0 AND isParellelCluster = 1) THEN  \n" +
                "		/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "		SET IsReworkInParallelCluster:=0;  \n" +
                "		IF (pisrework IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisrework,0) = 1) THEN  \n" +
                "				SET IsReworkInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isRework,0) = 1) THEN  \n" +
                "				SET IsReworkInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(IsReworkInParallelCluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is rework operation, It is not allowed in parallel cluster');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "		/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "		/************************** start - if cluster is parallel than it should not have any preprogramming operation ******************************/  \n" +
                "		SET IsPreProgrammingInParallelCluster:=0;  \n" +
                "		IF (pisPreProgrammingComponent IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisPreProgrammingComponent,0) = 1) THEN  \n" +
                "				SET IsPreProgrammingInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isPreProgrammingComponent,0) = 1) THEN  \n" +
                "				SET IsPreProgrammingInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(IsPreProgrammingInParallelCluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is preprogramming operation, It is not allowed in parallel cluster');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "		/************************** end - if cluster is parallel than it should not have any preprogramming operation ******************************/  \n" +
                "  \n" +
                "		/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "		SELECT DISTINCT operationtypeid  INTO isparelleloperationtypeid FROM workorder_operation WHERE woopid = pwoopid AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "		-- set flag false if any operation not found as inspection process  \n" +
                "		IF ((isparelleloperationtypeid > 0) AND (isparelleloperationtypeid != poperationtypeid)) THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have same operation type in cluster');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "	/****************** start - If current operation is not rework than check previous of this operation should not be in inspection parallel cluster ******************/  \n" +
                "	SET Is_Rework_FALSE := 0;  \n" +
                "	IF (pisrework IS NOT NULL) THEN  \n" +
                "		IF(IFNULL(pisrework,0) = 0) THEN  \n" +
                "			SET Is_Rework_FALSE = 1;  \n" +
                "	END IF;  \n" +
                "	ELSE  \n" +
                "		IF(IFNULL(@curr_isRework,0) = 0) THEN  \n" +
                "			SET Is_Rework_FALSE = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (Is_Rework_FALSE = 1) THEN  \n" +
                "		SET prv_oprn_is_inspection_parellel_cluster:= 0;  \n" +
                "		-- get previous operation of rework operation  \n" +
                "		SELECT isParellelOperation INTO prv_oprn_is_inspection_parellel_cluster FROM workorder_cluster WHERE clusterID = (  \n" +
                "			SELECT clusterID FROM workorder_operation_cluster WHERE woOPID=(  \n" +
                "				SELECT woOPID FROM workorder_operation WHERE opNumber = (  \n" +
                "					SELECT MAX(opnumber) FROM workorder_operation  \n" +
                "					WHERE opnumber < @pwoopnumber  \n" +
                "					AND woid=pwoid AND deletedat IS NULL  \n" +
                "				) AND deletedat IS NULL AND woid=pwoid AND operationTypeID = InspectionOperationTypeID  \n" +
                "			) AND deletedat IS NULL  \n" +
                "		) AND deletedat IS NULL;  \n" +
                "  \n" +
                "		IF(prv_oprn_is_inspection_parellel_cluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is must be rework operation, because it is next operation of inspection parallel cluster.');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/****************** end - If current operation is not rework than check previous of this operation should not be in inspection parallel cluster ******************/  \n" +
                "  \n" +
                "	SELECT errorText FROM temp_operation_error;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-10-2021 *********************************** */
                /* **************************** Add Script Version -> 12-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5367,'2.00','V1','SP and Function Updates for NVARCHAR changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5367:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "ALTER TABLE `company_info`  \n" +
                "ADD COLUMN `legalName` VARCHAR(255) NULL;  \n" +
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "ALTER TABLE `mfgcodemst`  \n" +
                "ADD COLUMN `legalName` VARCHAR(255) NULL;  \n" +
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "ALTER TABLE `company_info`  \n" +
                "CHANGE COLUMN `unitOfTime` `unitOfTime` VARCHAR(5) NOT NULL DEFAULT 'D';  \n" +
                /* **************************** Add Script Version -> 13-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5368,'2.00','V1',' User Story 37007: Data Tracking Entities: Add new control field for Label - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5368:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.mfgType='DIST' THEN 'Company' ELSE 'Business Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.legalName,0) != IFNULL(NEW.legalName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Legal Name',CAST(OLD.legalName AS CHAR), CAST(NEW.legalName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.primaryContactName,0) != IFNULL(NEW.primaryContactName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Primary Contact',CAST(OLD.primaryContactName AS CHAR), CAST(NEW.primaryContactName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),  \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(FORMAT(OLD.displayOrder, 5) AS CHAR), CAST(FORMAT(NEW.displayOrder, 5) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5369,'2.00','V1',' User Story 37007: Data Tracking Entities: Add new control field for Label - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5369:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,  \n" +
                "		mc.systemID,mc.customerSystemID,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isDeleted= 0) mappingMfr,  \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
                "            wbw.acquired,  \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "		 ,gc.gencCategoryName,  \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "        mc.displayOrder,  \n" +
                "        mc.invoicesRequireManagementApproval,  \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
                "		mc.taxID,  \n" +
                "        mc.accountRef,  \n" +
                "        mc.paymentMethodID,  \n" +
                "		pc.gencCategoryName paymentMethodName,  \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
                "		mc.acctId  \n" +
                "	FROM mfgcodemst mc  \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi  \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
                "            AND wbwi.isDeleted = 0) wbw  \n" +
                "			ON wbw.buyTo = mc.id  \n" +
                "	WHERE mc.isdeleted = 0  \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	 PREPARE query1 FROM @SQLStatement2;  \n" +
                "	 EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 13-10-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    IN pIsCustOrDisty BIT,  \n" +
                "    IN pmfgType NVARCHAR(10),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);  \n" +
                "	ELSE  \n" +
                "		SELECT  id,mfgCode,mfgName,legalName,primaryContactName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,  \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,  \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,  \n" +
                "			isDeleted  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE  id = IFNULL(pId,id) AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-10-2021 *********************************** */
                "drop procedure if exists `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')), ci.name,'<br/>',ci.street1,'<br/>',ci.city,', ',ci.state,' ',ci.postalCode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ',  \n" +
                "	ci.contactNumber,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.contactNumber,''))AS address,  \n" +
                "		ci.personName,ci.registeredEmail,ci.faxNumber,ci.contactNumber,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-10-2021 *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "				pip.payToAddress,  \n" +
                "				pip.billToName supplierName,  \n" +
                "                pip.billToAddress supplierAddress,  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')), ci.name,'<br/>',ci.street1,'<br/>',ci.city,', ',ci.state,' ',ci.postalCode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ',  \n" +
                "			ci.contactNumber,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.contactNumber,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  companyName, '' as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5370,'2.00','V1',' User Story 37007: Data Tracking Entities: Add new control field for Label - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5370:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "CREATE TABLE `component_oddely_refdes` (  \n" +
                "  `id` int not null auto_increment,  \n" +
                "  `refComponentID` int NOT NULL,  \n" +
                "  `refDes` varchar(255) NOT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `unqDate` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `IDX_UNQ_compo_refdes` (`refComponentID`,`refDes`,`isDeleted`,`unqDate`,`deletedAt`),  \n" +
                "  KEY `FK_component_oddely_refdes_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_oddely_refdes_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5371,'2.00','V1','User Story 36632: BOM: QPA vs REFDES Improvement points suggested by JV [20-08-2021]  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5371:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)paymentTerm,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)termDays,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,  \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,  \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,  \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,  \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,  \n" +
                "            ro.rohsIcon AS rohsIcon,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE id = rqs.custBillingAddressID  \n" +
                "					)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			) billingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "						)  \n" +
                "					ELSE  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE id = rqs.custShippingAddressID  \n" +
                "						)  \n" +
                "					END  \n" +
                "                )  \n" +
                "			) shippingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM rfq_assy_standard_class_detail csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM component_standard_details  csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) standards,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN  \n" +
                "					(  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "						)dataelementForms  \n" +
                "						GROUP BY subFormName  \n" +
                "						)a)  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						   rqs.RFQMISCData  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) dataelementdata,  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0) isQuoteHistory,  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "            ra.winPrice, ra.isActivityStart,  \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.  \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0  \n" +
                "				LEFT JOIN component com ON com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL  \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount,toolingQty;  \n" +
                "  \n" +
                "		# Company detail  \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo  \n" +
                "			FROM customer_addresses cua  \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;  \n" +
                "		# select list of price Group detail  \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,  \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN  \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg  \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID  \n" +
                "			JOIN component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY rpg.name;  \n" +
                "  \n" +
                "        # select list of price Group  \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY NAME;  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5372,'2.00','V1','User Story 36632: BOM: QPA vs REFDES Improvement points suggested by JV [20-08-2021]  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5372:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vPOLines INT;  \n" +
                "  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
                "  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
                "			SET vStatus='P';  \n" +
                "		ELSE  \n" +
                "			SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end) WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5373,'2.00','V1',' Bug 37668: Supplier PO: Can not delete line anymore, had to delete PO PO was in DRAFT and COMPLETED Automatically.Hot-Fix - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5373:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetComponentSalesPriceHistory;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentSalesPriceHistory`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pmfgPnID VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    set @temp_Sproc_GetComponentCustAliasRev = concat(\"  \n" +
                "    select id,mfgPNID,rfqNumber,  \n" +
                "            fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "            fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "            rfqAssyID,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt  \n" +
                "		from (  \n" +
                "			select  \n" +
                "                rank() over (partition by rfqNumber order by id asc) as rnk,  \n" +
                "                cpbd.*  \n" +
                "            from component_price_break_details as cpbd  \n" +
                "            where  \n" +
                "            cpbd.isDeleted = 0 and cpbd.mfgPNID = \" , pmfgPnID,\" and cpbd.type = 2 and cpbd.isHistory = 1) as a where a.rnk = 1\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rfqNumber ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentCustAliasRev,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentCustAliasRev,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_GetComponentSalesPriceHistoryDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentSalesPriceHistoryDetail`(  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pmfgPnID int,  \n" +
                "    IN prfqNumber varchar(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    set @temp_Sproc_GetComponentSalesPriceHistoryDetail= concat(\"  \n" +
                "    select  \n" +
                "		 id,  \n" +
                "         priceBreak,  \n" +
                "         turnTime,  \n" +
                "         unitOfTime,  \n" +
                "         fun_getUnitOfTimeByKey(unitOfTime) unitOfTimeVal,  \n" +
                "        unitPrice,  \n" +
                "        round(((unitPrice*priceBreak)),2) extPrice,  \n" +
                "        type,  \n" +
                "        salesCommissionPercentage,  \n" +
                "        salesCommissionAmount,  \n" +
                "        round(((((salesCommissionAmount * 100) / 100) * (priceBreak * 100) / 100)),2) as extSalesCommission,  \n" +
                "		salesCommissionNotes,  \n" +
                "        rfqNumber  \n" +
                "	from component_price_break_details where mfgPNID = \" , pmfgPnID,\"  and rfqNumber = '\",prfqNumber,\"' and isDeleted = 0 and type = 2\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rfqNumber ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentSalesPriceHistoryDetail,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentSalesPriceHistoryDetail,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5374,'2.00','V1',' User Story 37421: Part Master: Sales Price Tab Changes - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5374:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipListByPODetId`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipListByPODetId`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefPODetID INT,  \n" +
                "    IN pRefReleaseLineID INT,  \n" +
                "    IN pPONumber VARCHAR(100),  \n" +
                "    IN pPartID INT,  \n" +
                "    IN pRefPOLineID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT  \n" +
                "		p.id,  \n" +
                "        psmrd.packingSlipSerialNumber,  \n" +
                "		p.packingSlipNumber,  \n" +
                "		p.packingSlipDate,  \n" +
                "		p.supplierSONumber,  \n" +
                "		p.soDate,  \n" +
                "		p.receiptDate,  \n" +
                "		p.status,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "				WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "				WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "				WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "				WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "				WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) packingSlipStatus,  \n" +
                "		p.lockStatus,  \n" +
                "		psmrd.receivedQty,  \n" +
                "		psmrd.packingSlipQty,  \n" +
                "		c.unit,  \n" +
                "		fun_getUnitNameByID(c.uom) uomName,  \n" +
                "		fun_getPackagingNameByID(psmrd.packagingID) packaging,  \n" +
                "		fun_getBinNameByID(psmrd.binID) bin,  \n" +
                "		fun_getWarehouseNameByID(psmrd.warehouseID) warehouse,  \n" +
                "		fun_getWarehouseNameByID(psmrd.parentWarehouseID) parentWarehouse,  \n" +
                "		fun_getUserNameByID(psmrd.createdBy)  createdByName,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psmrd.createdAt,v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "        psmrd.refPurchaseOrderDetID,  \n" +
                "        psmrd.refPOReleaseLineID  \n" +
                "	FROM packing_slip_material_receive_det psmrd  \n" +
                "		JOIN packing_slip_material_receive p ON p.id = psmrd.refPackingSlipMaterialRecID AND p.isDeleted=0 AND p.receiptType='P' AND p.poNumber=IFNULL(pPONumber, p.poNumber)  \n" +
                "		LEFT JOIN component c ON c.id = psmrd.partID AND c.isDeleted = 0  \n" +
                "	WHERE psmrd.isdeleted=0 AND  psmrd.partID=IFNULL(pPartID, psmrd.partID) and psmrd.refPOLineID = IFNULL(pRefPOLineID, psmrd.refPOLineID);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC, packingSlipSerialNumber ASC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pRefPODetID IS NOT NULL AND pRefPODetID != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refPurchaseOrderDetID=\", pRefPODetID);  \n" +
                "        IF(pRefReleaseLineID IS NOT NULL AND pRefReleaseLineID != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refPOReleaseLineID=\", pRefReleaseLineID);  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5375,'2.00','V1',' User Story 37522: Hyperlink Improvement: Display detail view for received qty of PO Main Branch - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5375:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-10-2021 *********************************** */
                "ALTER TABLE `supplier_invoice_payment_history`  \n" +
                "ADD COLUMN `valueDataType` VARCHAR(30) NULL;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5376,'2.00','V1','User Story 37554: Transaction History related changes in Supplier invoice flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5376:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-10-2021 *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipChangeHistory`(  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_packing_slip_det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_packing_slip_det AS  \n" +
                "	SELECT id, packingSlipSerialNumber FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_packing_slip_track_number;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_packing_slip_track_number AS  \n" +
                "	SELECT id FROM packing_slip_track_number WHERE refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetPackingSlipChangeHistory = CONCAT(\"  \n" +
                "			SELECT 	a.ID,  \n" +
                "					a.Tablename,  \n" +
                "					a.RefTransID,  \n" +
                "					c.packingSlipSerialNumber,  \n" +
                "					a.Colname,  \n" +
                "					a.Oldval,  \n" +
                "					a.Newval,  \n" +
                "                    a.valueDataType,  \n" +
                "					fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "					fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM 		dataentrychange_auditlog a  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det c ON a.RefTransID = c.id AND a.Tablename = 'PACKINGSLIPMATERIALRECEIVEDET'  \n" +
                "			WHERE 		(a.RefTransID = '\", pPackingSlipId ,\"' AND a.Tablename = 'PACKINGSLIPMATERIALRECEIVE')  \n" +
                "					OR  \n" +
                "					(EXISTS (  \n" +
                "						SELECT 	1  \n" +
                "						FROM 	temp_data_of_packing_slip_det b  \n" +
                "						WHERE 	b.id = a.RefTransID  \n" +
                "					) AND a.Tablename = 'PACKINGSLIPMATERIALRECEIVEDET')  \n" +
                "					OR  \n" +
                "					(EXISTS (  \n" +
                "						SELECT 	1  \n" +
                "						FROM 	temp_data_of_packing_slip_track_number c  \n" +
                "						WHERE 	c.id = a.RefTransID  \n" +
                "					) AND a.Tablename = 'PACKINGSLIPTRACKNUMBER')  \n" +
                "         \");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) As TotalRecord FROM ( \",@temp_Sproc_GetPackingSlipChangeHistory,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetPackingSlipChangeHistory ,\" ) c  WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                "drop trigger if exists `Trg_AU_Packingslip_Invoice_Payment_Det_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vRefPaymentMode VARCHAR(10);  \n" +
                "    DECLARE vReceiptType VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT refPaymentMode INTO vRefPaymentMode  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id = NEW.refPayementid ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								refPackingslipInvoiceID,  \n" +
                "					refRefundPaymentID,							refRefundCustCreditMemoID,  \n" +
                "                    valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'  \n" +
                "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
                "						WHEN vRefPaymentMode = 'CR' THEN 'Refund Amount in Detail ($)'  \n" +
                "						ELSE 'Payment ($) in line Detail' END),				OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,						OLD.refPackingslipInvoiceID,  \n" +
                "					OLD.refRefundPaymentID,								OLD.refRefundCustCreditMemoID,  \n" +
                "                    'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.refPayementid,		NEW.id,  \n" +
                "					'Applied Credit Memo Date in Detail',			OLD.appliedDate,  \n" +
                "					NEW.appliedDate,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName, 'appliedDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF vRefPaymentMode = 'RR' AND OLD.isDeleted = 0 AND NEW.isDeleted = 1 THEN  \n" +
                "		SELECT a.receiptType  \n" +
                "          INTO vReceiptType  \n" +
                "		  FROM packing_slip_material_receive a  \n" +
                "		 WHERE id = OLD.refPackingslipInvoiceID;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								refPackingslipInvoiceID,  \n" +
                "                    valueDataType)  \n" +
                "		    VALUES (vTableName,											NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vReceiptType = 'C' THEN 'Credit Memo'  \n" +
                "						WHEN vReceiptType = 'D' THEN 'Debit Memo'  \n" +
                "						ELSE '' END),							'',  \n" +
                "					'Deleted',									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,					OLD.refPackingslipInvoiceID,  \n" +
                "                    'varchar');  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF vRefPaymentMode = 'CR' AND (IFNULL(OLD.comment, \"\") != IFNULL(NEW.comment, \"\")) THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					'Reason',									OLD.comment,  \n" +
                "					NEW.comment,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'comment'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                "drop trigger if exists `Trg_AU_Packingslip_Invoice_Payment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
                "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
                "					NEW.paymentDate,				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 		(vTableName,								NEW.id,  \n" +
                "					\"Account Reference\",							OLD.accountReference,  \n" +
                "					NEW.accountReference,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
                "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
                "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			 VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
                "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
                "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided Date\",									'',  \n" +
                "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Locked Date\",									'',  \n" +
                "					NEW.lockedAt, 									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Locked By\",									'',  \n" +
                "					fun_getUserNameByID(NEW.lockedBy),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId,					valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
                "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
                "						ELSE '' END),								OLD.offsetAmount,  \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'amount');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"COA\",  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
                "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
                "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
                "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5377,'2.00','V1','User Story 37554: Transaction History related changes in Supplier invoice flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5377:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                "drop function if exists `fun_getDataTypeBasedOnTableAndColumnName`;  \n" +
                "CREATE FUNCTION `fun_getDataTypeBasedOnTableAndColumnName`(  \n" +
                "	pTableName Varchar(100),  \n" +
                "	pColumnName Varchar(100)  \n" +
                "    ) RETURNS varchar(20) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vDataType VARCHAR(20);  \n" +
                "  \n" +
                "	SELECT DATA_TYPE into vDataType  \n" +
                "	  FROM `INFORMATION_SCHEMA`.`COLUMNS`  \n" +
                "	 WHERE `TABLE_SCHEMA` = (select database())  \n" +
                "	   AND `TABLE_NAME` = pTableName  \n" +
                "	   and `COLUMN_NAME` = pColumnName;  \n" +
                "  \n" +
                "	RETURN vDataType;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5378,'2.00','V1','User Story 37554: Transaction History related changes in Supplier invoice flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5378:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "alter table component  \n" +
                "add column isEpoxyMount tinyint default 0;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5379,'2.00','V1','User Story 37307: Change Epoxy Logic in BOM  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5379:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)paymentTerm,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)termDays,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,  \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,  \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,  \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,  \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,  \n" +
                "            ro.rohsIcon AS rohsIcon,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE id = rqs.custBillingAddressID  \n" +
                "					)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			) billingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "						)  \n" +
                "					ELSE  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE id = rqs.custShippingAddressID  \n" +
                "						)  \n" +
                "					END  \n" +
                "                )  \n" +
                "			) shippingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM rfq_assy_standard_class_detail csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM component_standard_details  csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) standards,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN  \n" +
                "					(  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "						)dataelementForms  \n" +
                "						GROUP BY subFormName  \n" +
                "						)a)  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						   rqs.RFQMISCData  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) dataelementdata,  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0) isQuoteHistory,  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "            ra.winPrice, ra.isActivityStart,  \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.  \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0  \n" +
                "				LEFT JOIN component com ON com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL  \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount,toolingQty;  \n" +
                "  \n" +
                "		# Company detail  \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo  \n" +
                "			FROM customer_addresses cua  \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;  \n" +
                "		# select list of price Group detail  \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,  \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN  \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg  \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID  \n" +
                "			JOIN component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY rpg.name;  \n" +
                "  \n" +
                "        # select list of price Group  \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY NAME;  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \";  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = true OR pIsRestrictUsePermanently = true OR pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType,isEpoxyMount  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsAttribute  then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "			toPart.`pitch` = fromPart.pitch,  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "			toPart.`length` = fromPart.length,  \n" +
                "			toPart.`width` = fromPart.width,  \n" +
                "			toPart.`heightText` = fromPart.heightText,  \n" +
                "			toPart.`height` = fromPart.height,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsSettings then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "			toPart.`eau` = fromPart.eau,  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "		IF pIsAdditionalAttibute then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`, `isEpoxyMount`  \n" +
                "			from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                "			toPart.`voltage` = fromPart.voltage,  \n" +
                "			toPart.`value` = fromPart.value,  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                "			toPart.`weight` = fromPart.weight,  \n" +
                "			toPart.`feature` = fromPart.feature,  \n" +
                "			toPart.`color` = fromPart.color,  \n" +
                "			toPart.`isEpoxyMount` = fromPart.isEpoxyMount,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsPackagingDetail then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                "			toPart.`minimum` = fromPart.minimum,  \n" +
                "			toPart.`mult` = fromPart.mult,  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "			toPart.`uom` = fromPart.uom,  \n" +
                "			toPart.`uomText` = fromPart.uomText,  \n" +
                "			toPart.`unit` = fromPart.unit,  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "            toPart.`isReceiveBulkItem` = fromPart.isReceiveBulkItem,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		if pIsStandards then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				-- commit;  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "		toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "		toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "		toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "		toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "		toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "		toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "		toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "		toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "		toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "		toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "		toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "		toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "		toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "		toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "		toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "		toPart.`pitch` = fromPart.pitch,  \n" +
                "		toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "		toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "		toPart.`length` = fromPart.length,  \n" +
                "		toPart.`width` = fromPart.width,  \n" +
                "		toPart.`heightText` = fromPart.heightText,  \n" +
                "		toPart.`height` = fromPart.height,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	IF pIsSettings then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "		toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "		toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "        toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "		toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "		toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "		toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "		toPart.`eau` = fromPart.eau,  \n" +
                "		toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "		toPart.`driverToolRequired` = fromPart.driverToolRequired,  \n" +
                "		toPart.`matingPartRquired` = fromPart.matingPartRquired,  \n" +
                "		toPart.`pickupPadRequired` = fromPart.pickupPadRequired,  \n" +
                "		toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "		toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,  \n" +
                "		toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,  \n" +
                "		toPart.`bomLock` = fromPart.bomLock,  \n" +
                "		toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "		INSERT INTO `component_temperature_sensitive_data`  \n" +
                "		(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "	end if;  \n" +
                "	IF pIsAdditionalAttibute then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "		from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`tolerance` = fromPart.tolerance,  \n" +
                "		toPart.`voltage` = fromPart.voltage,  \n" +
                "		toPart.`value` = fromPart.value,  \n" +
                "		toPart.`partPackage` = fromPart.partPackage,  \n" +
                "		toPart.`powerRating` = fromPart.powerRating,  \n" +
                "		toPart.`weight` = fromPart.weight,  \n" +
                "		toPart.`feature` = fromPart.feature,  \n" +
                "		toPart.`isEpoxyMount` = fromPart.isEpoxyMount,  \n" +
                "		toPart.`color` = fromPart.color,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	IF pIsPackagingDetail then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "		toPart.`packagingID` = fromPart.packagingID,  \n" +
                "		toPart.`minimum` = fromPart.minimum,  \n" +
                "		toPart.`mult` = fromPart.mult,  \n" +
                "		toPart.`packageQty` = fromPart.packageQty,  \n" +
                "        toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "		toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "		toPart.`uom` = fromPart.uom,  \n" +
                "		toPart.`uomText` = fromPart.uomText,  \n" +
                "		toPart.`unit` = fromPart.unit,  \n" +
                "		toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "		toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "		toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "		toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "		toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "        toPart.`isReceiveBulkItem` = (CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END),  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "	if pIsStandards then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "		toPart.`htsCode` = fromPart.htsCode,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "		INSERT INTO `component_standard_details`  \n" +
                "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "		and not exists (select 1 from component_standard_details csd  \n" +
                "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "	end if;  \n" +
                "	if pIsRequiredMountingType then  \n" +
                "		INSERT INTO `component_requiremountingtype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requiremountingtype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredMountingTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`mountingTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	if pIsRequiredFunctionalType then  \n" +
                "		INSERT INTO `component_requirefunctionaltype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requirefunctionaltype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredFunctionalTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	IF(pIsPackagingAliasPart)  \n" +
                "	THEN  \n" +
                "		set vMisMatchFields  = '';  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);  \n" +
                "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);  \n" +
                "	END IF;  \n" +
                "	IF(vValidationPassed = 0)  \n" +
                "	THEN  \n" +
                "		ROLLBACK;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                "  \n" +
                "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "		THEN  \n" +
                "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "		end if;  \n" +
                "  \n" +
                "        IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			ROLLBACK;  \n" +
                "			select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "		ELSE  \n" +
                "			if pIsPackagingAliasPart then  \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  ToPartID  \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                "  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  FromPartID  \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsOtherPartName then  \n" +
                "				INSERT INTO `component_otherpn`  \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_otherpn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "			end if;  \n" +
                "			If pIsAlternatePart then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "			end if;  \n" +
                "			if pIsRoHSReplacementPart then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "			end if;  \n" +
                "			if pIsDriveTool then  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_drivetools  \n" +
                "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "  \n" +
                "				set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @DriveToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`driverToolRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsProcessMaterial then  \n" +
                "				INSERT INTO `component_processmaterial`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_processmaterial  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "			end if;  \n" +
                "			if pIsRequiredMattingParts then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "  \n" +
                "				set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @mattingpartcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`matingPartRquired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "  \n" +
                "			end if;  \n" +
                "			if pIsPickupPad then  \n" +
                "			INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "  \n" +
                "				set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @PickupPadcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`pickupPadRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsProgram then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);  \n" +
                "  \n" +
                "				set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @Programcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`programingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsFunctionalTesingTool then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "  \n" +
                "				set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @FunctionalTesingToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`functionalTestingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsFinctionalRestingEquipment then  \n" +
                "				INSERT INTO `component_functionaltestingequipment`  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "			end if;  \n" +
                "			commit;  \n" +
                "			select * from component where id = pToPartID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_RequireFlagFromPartMaster`;  \n" +
                "CREATE PROCEDURE `Sproc_Update_BOM_RequireFlagFromPartMaster`(  \n" +
                "                    	IN pAliasGroupID INT,  \n" +
                "                    	IN pPartID INT,  \n" +
                "                    	IN pNewProgramingRequired TINYINT,  \n" +
                "                    	IN pNewMatingPartRquired TINYINT,  \n" +
                "                    	IN pNewDriverToolRequired TINYINT,  \n" +
                "                    	IN pNewFunctionalTestingRequired TINYINT,  \n" +
                "                    	IN pNewPickupPadRequired TINYINT,  \n" +
                "                    	IN pOldPartStatus INT,  \n" +
                "                    	IN pNewPartStatus INT,  \n" +
                "                    	IN pOldUOM INT,  \n" +
                "                    	IN pNewUOM INT,  \n" +
                "                    	IN pOldEpoxyMount VARCHAR(255),  \n" +
                "                    	IN pNewEpoxyMount VARCHAR(255),  \n" +
                "                    	IN pOldConnecterTypeID INT,  \n" +
                "                    	IN pNewConnecterTypeID INT,  \n" +
                "                    	IN pOldNoOfRows INT,  \n" +
                "                    	IN pNewNoOfRows INT,  \n" +
                "                    	IN pUserId INT,  \n" +
                "                    	IN pUserRoleId INT  \n" +
                "                    )  \n" +
                "BEGIN  \n" +
                "                        DECLARE totalCount INT DEFAULT 0;  \n" +
                "                        DECLARE currIndex INT DEFAULT 0;  \n" +
                "                       DECLARE currMfgPnID INT;  \n" +
                "                       DECLARE currAssyID INT;  \n" +
                "                       DECLARE lastAssyID INT;  \n" +
                "                       DECLARE subAssyType INT;  \n" +
                "                       DECLARE vActivePartStatusID INT;  \n" +
                "                       SET lastAssyID = 0;  \n" +
                "  \n" +
                "                   	SET  subAssyType = 3;  \n" +
                "                   	SELECT id INTO vActivePartStatusID FROM component_partstatusmst cps WHERE cps.name = 'Active';  \n" +
                "  \n" +
                "                   	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "                   	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "                   	SELECT  rla.partID, rla.mfgPNID  \n" +
                "                   	FROM rfq_lineitems_alternatepart AS rla  \n" +
                "                   	WHERE rla.deletedAt IS NULL  \n" +
                "                       AND rla.isDeleted = 0  \n" +
                "                   	AND (EXISTS (SELECT 1 FROM component_packagingalias cp  \n" +
                "                   				WHERE cp.componentID = rla.mfgPNID  \n" +
                "                                     AND cp.isDeleted = 0  \n" +
                "                                     AND cp.aliasgroupID = pAliasGroupID)  \n" +
                "                   		OR rla.mfgPNID = pPartID)  \n" +
                "                   	GROUP BY rla.partID, rla.mfgPNID  \n" +
                "                       ORDER BY rla.partID, rla.mfgPNID;  \n" +
                "  \n" +
                "  \n" +
                "                       /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                "      /*                 UPDATE component  \n" +
                "                   	SET  \n" +
                "                   		liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "                   		liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                "                   	WHERE id IN(  \n" +
                "                   	WITH RECURSIVE cte AS  \n" +
                "                   	(  \n" +
                "                   	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "                   	  FROM component c  \n" +
                "                         JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "                   	  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "                   	  UNION ALL  \n" +
                "                   	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "                   	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child  \n" +
                "                   	  WHERE rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "                   	  AND cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "                   	)  \n" +
                "                   	SELECT DISTINCT partId FROM cte);  \n" +
                "  */  \n" +
                "                       /* Update BOM flag Detail where part is used where part is added */  \n" +
                "                       SELECT unitName, measurementTypeID INTO @oldUOMName, @oldUOMClassID FROM uoms WHERE id = pOldUOM;  \n" +
                "                   	SELECT unitName, measurementTypeID INTO @newUOMName, @newUOMClassID FROM uoms WHERE id = pNewUOM;  \n" +
                "  \n" +
                "                   	UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	SET  \n" +
                "                   		rla.programingRequiredStep = (CASE WHEN pNewProgramingRequired = 1 THEN (CASE WHEN rl.programingStatus = 0 THEN 0 ELSE 1 END) ELSE 1 END),  \n" +
                "                   		rla.matingPartRquiredStep = (CASE WHEN pNewMatingPartRquired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.driverToolsRequiredStep = (CASE WHEN pNewDriverToolRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.functionalTestingRequiredStep = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.pickupPadRequiredStep = (CASE WHEN pNewPickupPadRequired = 1 THEN 0 ELSE 1 END),  \n" +
                "                   		rla.invalidConnectorTypeStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition is not null THEN 0  \n" +
                "                   								WHEN pNewConnecterTypeID <> -1 AND (c.noOfPosition is not null OR (c.noOfPosition <> rl.numOfPosition)) THEN 0  \n" +
                "                   								ELSE 1  \n" +
                "                   							END)  \n" +
                "                   						ELSE rla.invalidConnectorTypeStep END),  \n" +
                "                   		rla.partPinIsLessthenBOMPinStep = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                "                   							(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN 0 ELSE 1 END)  \n" +
                "                   						     ELSE rla.partPinIsLessthenBOMPinStep END),  \n" +
                "  \n" +
                "                   		rla.obsoletePartStep = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
                "                   						(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN 0  \n" +
                "                   							WHEN pNewPartStatus = vActivePartStatusID THEN 1 END)  \n" +
                "                   					ELSE rla.obsoletePartStep END),  \n" +
                "                   		rla.mismatchNumberOfRowsStep = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
                "                   							(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                "                   								((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
                "                   									OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
                "                   								 ) THEN  \n" +
                "                   							 0 ELSE 1 END)  \n" +
                "                   						ELSE rla.mismatchNumberOfRowsStep END),  \n" +
                "                   		rla.uomMismatchedStep = (CASE WHEN pOldUOM <> pNewUOM  THEN (CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN 0 ELSE 1 END) ELSE rla.uomMismatchedStep END),  \n" +
                "                   		rla.description = CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id),REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('CA',rla.id)),'')),  \n" +
                "				rla.epoxyStep = (CASE WHEN pOldEpoxyMount <> pNewEpoxyMount  THEN (CASE WHEN ifnull(pNewEpoxyMount,0) = 1 THEN 0 ELSE 1 END) ELSE rla.epoxyStep END),  \n" +
                "                   		rla.customerApproval = 'P',  \n" +
                "                   		rla.customerApprovalBy = NULL,  \n" +
                "                   		rla.customerApprovalDate = NULL,  \n" +
                "                   		rla.updatedAt = UTC_TIMESTAMP(),  \n" +
                "                   		rla.updatedBy = pUserId,  \n" +
                "                   		rla.updateByRoleId = pUserRoleId  \n" +
                "                   	WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	/* Update BOM set drive tool require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewDriverToolRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('DRIVETOOLSREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set matting part require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewMatingPartRquired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('MATINGPARTREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set pickup pad require error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewPickupPadRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PICKUPPADREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "                   	/* Update BOM set functional testing required error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewFunctionalTestingRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('FUNCTESTREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Programming error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pNewProgramingRequired = 1 THEN  \n" +
                "                   					CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id))  \n" +
                "                   					ELSE REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PROGRAMINGREQUIRED',rla.id)),'') END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Pin Mismatch error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldConnecterTypeID <> pNewConnecterTypeID THEN  \n" +
                "                   					(CASE WHEN pNewConnecterTypeID = -1  AND rl.numOfPosition > c.noOfPosition THEN  \n" +
                "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),''),  \n" +
                "                   						'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id))  \n" +
                "                   					ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('PARTPINISLESSTHENBOMPIN',rla.id)),'')  \n" +
                "                   					END)  \n" +
                "                   				     ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set Obsolate error description Detail where part is used where part is added */  \n" +
                "					SELECT cps.name INTO @oldPartStatus FROM component_partstatusmst cps WHERE id = pOldPartStatus;  \n" +
                "					SELECT cps.name INTO @newPartStatus FROM component_partstatusmst cps WHERE id = pNewPartStatus;  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                        JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN component_partstatusmst ps ON ps.id = c.partStatus  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldPartStatus <> pNewPartStatus THEN  \n" +
                "                   					(CASE WHEN pNewPartStatus <> vActivePartStatusID THEN  \n" +
                "                   						CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@oldPartStatus)),''),  \n" +
                "                   						'  \n" +
                "', REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@newPartStatus))  \n" +
                "                   					WHEN pNewPartStatus = vActivePartStatusID THEN  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('OBS',rla.id),ps.name,@oldPartStatus)),'')  \n" +
                "                   					END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldNoOfRows <> pNewNoOfRows  THEN  \n" +
                "                   					(CASE WHEN c.connecterTypeID = -1 AND  \n" +
                "                   						((c.mountingTypeID = 3 AND (rl.numOfRows is not null OR rl.numOfRows <> pNewNoOfRows))  \n" +
                "                   							OR (c.mountingTypeID = 2 AND rl.numOfRows is not null AND rl.numOfRows <> pNewNoOfRows)  \n" +
                "                   						 ) THEN  \n" +
                "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),''),  \n" +
                "                   							'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id))  \n" +
                "                   					 ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHNUMBEROFROW',rla.id)),'')  \n" +
                "                   					  END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "                   	  /* Update BOM set UOM Mismatch error description Detail where part is used where part is added */  \n" +
                "  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN uoms ua ON ua.id = c.uom  \n" +
                "                   		LEFT JOIN uoms ul ON ul.id = rl.uomID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = ( CASE WHEN pOldUOM <> pNewUOM  THEN  \n" +
                "                   					(CASE WHEN @newUOMClassID <> ul.measurementTypeID THEN  \n" +
                "                   						 CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName),'<% UOM %>',ul.unitName)),''),  \n" +
                "                   							'  \n" +
                "', REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@newUOMName),'<% UOM %>',ul.unitName))  \n" +
                "                   					ELSE  \n" +
                "                   						REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',REPLACE(REPLACE(fun_createBOMErrorMsgByErrorCodeandLineID('UOMMISMATCHED',rla.id),ua.unitName,@oldUOMName),'<% UOM %>',ul.unitName)),'')  \n" +
                "                   					END)  \n" +
                "                   				ELSE rla.description END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "                   	  /* Update BOM set no of row error description Detail where part is used where part is added */  \n" +
                "                   	  UPDATE rfq_lineitems_alternatepart rla  \n" +
                "                   		JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "                   		JOIN component c ON c.id = rla.mfgpnID  \n" +
                "                   		JOIN tempRfqLineItems trla ON trla.partID = rla.partID AND trla.mfgPNID = rla.mfgPNID  \n" +
                "                   	   SET  \n" +
                "                   		rla.description = (CASE WHEN pOldEpoxyMount <> pNewEpoxyMount  THEN  \n" +
                "								(CASE WHEN ifnull(pNewEpoxyMount,0) = 1 THEN  \n" +
                "									CONCAT(REPLACE(IFNULL(rla.description,''),CONCAT(fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),''),  \n" +
                "									'  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id))  \n" +
                "								ELSE  \n" +
                "									REPLACE(IFNULL(rla.description,''),CONCAT('  \n" +
                "',fun_createBOMErrorMsgByErrorCodeandLineID('EPOXY',rla.id)),'')  \n" +
                "								END)  \n" +
                "							ELSE  \n" +
                "								IFNULL(rla.description,'')  \n" +
                "							END)  \n" +
                "                   	  WHERE rla.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5380,'2.00','V1','User Story 37307: Change Epoxy Logic in BOM  - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5380:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021 *********************************** */
                "ALTER TABLE `pending_elastic_entity_sync_data`  \n" +
                "CHANGE COLUMN `entityPKId` `entityParamDet` VARCHAR(2000) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5381,'2.00','V1',' Alter Pending Elastic Entity- SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5381:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePaymentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPaymentID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN  \n" +
                "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS  \n" +
                "			SELECT id, invoiceNumber  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)  \n" +
                "			AND transType = 'I'  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS  \n" +
                "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				id, tableName , refPaymentID ,  \n" +
                "				colName,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "                valueDataType,  \n" +
                "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF') AND siph.refPaymentDetID IS NOT NULL  \n" +
                "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment  \n" +
                "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE id = siph.refPaymentDetID))  \n" +
                "					WHEN '\",pRefPaymentMode,\"' IN ('P','RR') THEN  \n" +
                "						  (select ifnull(a.creditMemoNumber, a.debitMemoNumber)  \n" +
                "						     from packing_slip_material_receive a  \n" +
                "						    where a.id = siph.refPackingslipInvoiceID)  \n" +
                "				    ELSE '' END) AS invoiceNumber ,  \n" +
                "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundPaymentID IS NOT NULL THEN  \n" +
                "						(SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = siph.refRefundPaymentID)  \n" +
                "					ELSE '' END) AS custPaymentNumber ,  \n" +
                "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundCustCreditMemoID IS NOT NULL THEN  \n" +
                "						(SELECT creditMemoNumber FROM customer_packingslip WHERE id = siph.refRefundCustCreditMemoID)  \n" +
                "					ELSE '' END) AS custCreditMemoNumber ,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedBy,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole  \n" +
                "			FROM    supplier_invoice_payment_history siph  \n" +
                "			WHERE   refPaymentID =\",pPaymentID,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5382,'2.00','V1','User Story 37554: Transaction History related changes in Supplier invoice flow - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5382:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(  \n" +
                "	IN prfqAssyIDORrefSalesOrderdetID INT,  \n" +
                "    IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE v_GroupConcatSeparator text;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "       -- Create leavel wise assembly BOM data  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "			(  \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
                "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
                "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
                "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                "				/*  \n" +
                "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,  \n" +
                "				*/  \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                "				/* we not required this in functionaly this will be used for check in detail  \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                "				*/  \n" +
                "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
                "				FROM  rfq_lineitems rl  \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0  \n" +
                "			)  \n" +
                "			UNION ALL  \n" +
                "			(  \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                "				rl.refDesig,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END) * IFNULL(rl.qpa,0)  \n" +
                "				) AS qpacount,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END) * IFNULL(rl.qpa,0)  \n" +
                "				) AS kitqpacount,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END) * IFNULL(rl.dnpQty,0)  \n" +
                "				) AS dnpQty,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END) * IFNULL(rl.dnpQty,0)  \n" +
                "				) AS kitdnpQty,  \n" +
                "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END)*  \n" +
                "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
                "								IFNULL(rl.refDesigCount,0)  \n" +
                "							ELSE IFNULL(rl.qpa,0)  \n" +
                "						END)  \n" +
                "						ELSE IFNULL(rl.qpa,0)  \n" +
                "					END)  \n" +
                "				) AS qpa1,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END)*  \n" +
                "  (CASE WHEN rl.uomID = -1 THEN  \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
                "					ELSE  \n" +
                "						IFNULL(rl.qpa,0)  \n" +
                "  END)  \n" +
                "				) AS kitqpa1,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END)*  \n" +
                "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
                "								IFNULL(rl.dnpDesigCount,0)  \n" +
                "							ELSE IFNULL(rl.dnpQty,0)  \n" +
                "						END)  \n" +
                "						ELSE IFNULL(rl.dnpQty,0)  \n" +
                "					END)  \n" +
                "				) AS dnpQPA1,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END) *  \n" +
                "				(CASE WHEN rl.uomID = -1 THEN  \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
                "					ELSE  \n" +
                "						IFNULL(rl.dnpQty,0)  \n" +
                "					END)  \n" +
                "				) AS kitdnpQPA1,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END) *  \n" +
                "					IFNULL(rl.refDesigCount,0)  \n" +
                "				) refDesigCount,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END) * IFNULL(rl.refDesigCount,0)  \n" +
                "				) AS kitrefDesigCount,  \n" +
                "				(  \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "					END) *  \n" +
                "					IFNULL(rl.dnpDesigCount,0)  \n" +
                "				) dnpDesigCount,  \n" +
                "                (  \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                "							(cte.qpa1)  \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(cte.dnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                "					END) *  \n" +
                "					IFNULL(rl.dnpDesigCount,0)  \n" +
                "				) kitdnpDesigCount,  \n" +
                "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
                "						1  \n" +
                "					ELSE rl.qpaDesignatorStep  \n" +
                "				END) AS qpaDesignatorStep ,  \n" +
                "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',  \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/  \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                "				#com.packaginggroupID,  \n" +
                "				/* we not required this in functionaly this will be used for check in detail  \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                "				*/  \n" +
                "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
                "				FROM  rfq_lineitems rl  \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
                "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0  \n" +
                "			)  \n" +
                "		)  \n" +
                "		SELECT cte.* FROM cte  \n" +
                "		ORDER BY lineItemID;  \n" +
                "  \n" +
                "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS  \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
                "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
                "					MIN(a.mountingTypeID)  \n" +
                "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
                "					MAX(approvedMountingTypeID)  \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
                "        (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN  /* Matched funcitonal Type */  \n" +
                "					MIN(a.partType)  \n" +
                "			WHEN MIN(a.partType) !=  MAX(a.partType)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval funcitonal Type */  \n" +
                "					MAX(approvedFunctionalTypeID)  \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD funcitonal type*/ END) partType,  \n" +
                "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
                "			MIN(a.connecterTypeID)  \n" +
                "		ELSE  \n" +
                "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
                "		END) AS connecterTypeID,  \n" +
                "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
                "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
                "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
                "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
                "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
                "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
                "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
                "      a.approvedMountingType,' | ',  \n" +
                "      ifnull(a.custAssyPN,''),' | ',  \n" +
                "      ifnull(a.isCustom,0)  \n" +
                "      ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
                "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
                "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
                "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
                "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
                "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
                "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
                "      ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
                "      ' | Approved Mounting Type:', approvedMountingTypeName,  \n" +
                "      ' | Approved Functional Type:', approvedFunctionalTypeName,  \n" +
                "      ' | Custom PartNum:', ifnull(custAssyPN,''),  \n" +
                "      ' | isCustom:', ifnull(isCustom,''),  \n" +
                "      ' | AssyPN:', AssyPN,  \n" +
                "      ' | partID:', partID,  \n" +
                "      ' | assyCustPN:', assyCustPN,  \n" +
                "      ' | mfgPN:', mfgPN,  \n" +
                "      '}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
                "		FROM  \n" +
                "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID,x.AssyPN,x.assyCustPN, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
                "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.custAssyPN, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
                "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
                "  x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
                "  x.approvedMountingTypeID, x.approvedMountingTypeName, x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                "				FROM  \n" +
                "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, al.AssyPN, al.assyCustPN, IFNULL(d.id, c.id) AS mfgPNID,  \n" +
                "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
                "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
                "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.custAssyPN, c.custAssyPN) AS custAssyPN, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
                "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
                "      IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
                "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
                "						(CASE WHEN al.approvedMountingType = 1 THEN c.functionalCategoryID ELSE -1 END) approvedFunctionalTypeID,  \n" +
                "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getPartTypeNameByID(c.functionalCategoryID) ELSE '' END) approvedFunctionalTypeName,  \n" +
                "      al.mismatchMountingTypeStep,  \n" +
                "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
                "						(CASE  \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
                "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
                "							ELSE	 /*Packaging Alias*/  \n" +
                "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "						END) AS restrictUsePermanentlyStep,  \n" +
                "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "						(CASE  \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
                "						(CASE  \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
                "							ELSE   /*Packaging Alias*/  \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						(CASE  \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
                "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "						END) AS restrictUseExcludingAliasStep,  \n" +
                "						(CASE  \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
                "				FROM  \n" +
                "					leveldata al  \n" +
                "				INNER JOIN component c ON al.mfgPNID = c.id  \n" +
                "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
                "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
                "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
                "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
                "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
                "			) AS X  \n" +
                "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID ,x.AssyPN,x.assyCustPN, x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.custAssyPN, x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
                "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
                "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
                "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName,x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                "		) a  \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
                "  \n" +
                "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	-- Create Temporary table for level wise lineitem detail  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS  \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,  \n" +
                "				 a.numOfPosition,  \n" +
                "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
                "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
                "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
                "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
                "					THEN (a.qpa1)  \n" +
                "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                "				END) qpa,  /* QPA count for Pricing */  \n" +
                "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                "							0  \n" +
                "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                "							(a.kitqpa1)  \n" +
                "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
                "							(a.kitdnpQPA1)  \n" +
                "						ELSE  \n" +
                "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
                "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
                "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */  \n" +
                "                 IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
                "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
                "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
                "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
                "						' | REF DES Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP REF DES Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
                "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, ' | assyCustPN:', a.assyCustPN, ' | AssyPN:', a.AssyPN,  '}') AS partlineID,  \n" +
                "				(CASE WHEN a.uomID = - 1  \n" +
                "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                "				ELSE 0  \n" +
                "				END) isqpaMismatchflag,  \n" +
                "				(CASE WHEN a.uomID = - 1  \n" +
                "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                "				ELSE 0  \n" +
                "				END) isdnpQPAMismatchflag,  \n" +
                "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
                "					THEN 1  \n" +
                "				ELSE 0  \n" +
                "				END) isPurchaseWithDNP  \n" +
                "		FROM  \n" +
                "			leveldata a  \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level, a.rfqlineitemsid , a.partid, a.lineID , a.uomID,  a.isInstall,  \n" +
                "        a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
                "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        -- Create Consolidated data in temp table  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS  \n" +
                "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
                "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
                "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
                "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
                "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
                "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
                "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
                "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
                "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
                "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
                "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
                "				GROUP_CONCAT(tal.mfgPartsWithPackagings SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidateRestrictPartDetail  \n" +
                "		FROM  \n" +
                "				temp_LevleWiseLineItemDetail tl  \n" +
                "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
                "		GROUP BY  \n" +
                "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
                "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
                "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                "   tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
                "		ORDER BY rfqlineitemsid\");  \n" +
                "  \n" +
                "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        -- Drop temporary tables generated for generate consolidate data  \n" +
                "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPriceGroupDetailByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPriceGroupDetailByID`(  \n" +
                "	IN pPriceGroupId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT pg.name AS `priceGroupName`, 		pd.qty,  		pd.turnTime,  		pd.unitOfTime,  		c.PIDCode,  		a.partID,  \n" +
                "		c.mfgPN,  		r.name AS `rohsName`,  		r.RoHSIcon,  c.custAssyPN  \n" +
                "		FROM rfq_price_group_detail pd  \n" +
                "		LEFT JOIN rfq_price_group pg ON pd.rfqPriceGRoupID = pg.id  \n" +
                "		LEFT JOIN rfq_assemblies a ON a.id = pd.rfqAssyID  \n" +
                "		LEFT JOIN component c ON c.id = a.partID  \n" +
                "		LEFT JOIN rfq_rohsmst r ON c.RoHSStatusID = r.id  \n" +
                "		WHERE pg.id = pPriceGroupId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5383,'2.00','V1','Bug 37702: Part Costing: Copy PID,,MPN and Part# icons are missing for ASSY ID field of Consolidated QPA. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5383:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021  ********************************* */
                "INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
                " VALUES ('Allow to Change Kit Allocation Customer Consign Status', 1, 0, 1,1);  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5384,'2.00','V1','User Story 37276: KIT PAGE Improvement Points - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5384:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_DeallocateUMIDFromKit`;  \n" +
                "CREATE PROCEDURE `Sproc_DeallocateUMIDFromKit`(  \n" +
                "    IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pUIDIds LONGTEXT,  \n" +
                "    IN pKitAllocationIds LONGTEXT,  \n" +
                "    IN pRefBOMLineID INT,  \n" +
                "    IN pRemark VARCHAR(500),  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pIsUMIDIsInEquipment INT;  \n" +
                "    DECLARE IsSuccess TINYINT DEFAULT 0;  \n" +
                "  \n" +
                "	IF (pUIDIds IS NULL AND pKitAllocationIds IS NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(id), GROUP_CONCAT(refUIDId) INTO pKitAllocationIds, pUIDIds FROM kit_allocation  \n" +
                "			   WHERE refBOMLineID = pRefBOMLineID and `status` = 'A' AND refSalesOrderDetID = pRefSalesOrderDetID AND assyID = pAssyId;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO pIsUMIDIsInEquipment FROM workorder_trans_umid_details WHERE refsidid IN (pUIDIds) AND reelStatus = 'P' AND isDeleted = 0;  \n" +
                "  \n" +
                "    IF(pIsUMIDIsInEquipment > 0) THEN  \n" +
                "		SET IsSuccess = FALSE;  \n" +
                "    ELSE  \n" +
                "		UPDATE kit_allocation SET `status` = 'D', updatedBy =  pUserID, updateByRoleId = pUserRoleID, remark = pRemark, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE id in (pKitAllocationIds);  \n" +
                "		SET IsSuccess = TRUE;  \n" +
                "	END IF;  \n" +
                "    SELECT IsSuccess, pKitAllocationIds AS id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustConsignMismatchKitAllocationDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustConsignMismatchKitAllocationDetails`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "    IN pAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT 		a.id, 			refSalesOrderDetID, 			partID, 		lineID,  \n" +
                "							rfqLineItemsId,									mfgPN,  \n" +
                "							a.isPurchase,	mfgPNIdsWithPackaging,			custPNID,       custPN,  \n" +
                "							custPIDCode, 	custIsCustom, 					cpnRoHsIcon, 	cpnRoHsName  \n" +
                "			FROM  \n" +
                "			(  \n" +
                "					SELECT 	k.id,				k.refSalesOrderDetID, 		k.partID,		k.lineID,  \n" +
                "							k.isPurchase, 		k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "							k.custPNID, 		k.custPN,  \n" +
                "							FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,  \n" +
                "							cpnCom.isCustom custIsCustom,  \n" +
                "							FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "							FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName  \n" +
                "				FROM 	kit_allocation_lineitems k  \n" +
                "				LEFT JOIN 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "				INNER JOIN 	rfq_lineitems rl ON rl.id = k.refRfqLineitem AND rl.isDeleted = 0  \n" +
                "				WHERE k.refSalesOrderDetID = pRefSalesOrderDetID AND k.partID = pAssyID AND k.isDeleted = 0 AND rl.isPurchase <> k.isPurchase  \n" +
                "				GROUP BY  k.refSalesOrderDetID, k.partID, k.refRfqLineitem  \n" +
                "			) AS a  INNER JOIN  \n" +
                "						(  \n" +
                "							SELECT  \n" +
                "										a.id,	 a.refRfqLineitem,  \n" +
                "										GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging,  \n" +
                "										GROUP_CONCAT(  \n" +
                "													IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',  \n" +
                "													a.RoHSStatusID,'@@@',  \n" +
                "													IFNULL(a.name,\"\"),'@@@',  \n" +
                "													IFNULL(a.rohsIcon,\"\"),'@@@',  \n" +
                "													IFNULL(a.isCustom,\"\"),'@@@',  \n" +
                "													REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',  \n" +
                "													IFNULL(a.partStatusName,\"\"),'@@@',  \n" +
                "													REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),'@@@',  \n" +
                "													REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),'@@@',  \n" +
                "													IFNULL(a.restrictUseInBOMStep,0) ,'@@@',  \n" +
                "													IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',  \n" +
                "													IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',  \n" +
                "													IFNULL(a.restrictUseWithPermissionStep,1),'@@@',  \n" +
                "													IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',  \n" +
                "													IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',  \n" +
                "													IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',  \n" +
                "													IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@','','@@@',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),'@@@','','@@@',  \n" +
                "													IFNULL(a.approvedMountingType,0),'@@@',  \n" +
                "													IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,  \n" +
                "													REPLACE(a.mfgPN,\",\",\"***\"),'@@@',  \n" +
                "													a.mfgCode,'@@@',  \n" +
                "													a.mfgPNID,'@@@',  \n" +
                "													IFNULL(a.isDocumentUpload,0),'@@@' ,  \n" +
                "													IFNULL(a.custAssyPN,0),'@@@' ,  \n" +
                "													IFNULL(a.mismatchFunctionalCategoryStep,0) ,'@@@' ,  \n" +
                "													IFNULL(a.leadTime,0)  \n" +
                "													SEPARATOR \"###\") mfgpn  \n" +
                "							FROM  \n" +
                "								(  \n" +
                "									SELECT z.id,	z.refRfqLineitem,	z.mfgPNID,		z.mfgPNDescription,  \n" +
                "													PIDCode,			RoHSStatusID, 	fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,  \n" +
                "													fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "													fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "													approvedMountingType,  \n" +
                "													mismatchMountingTypeStep,  \n" +
                "													mismatchFunctionalCategoryStep,  \n" +
                "													fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "													fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "													fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "													z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "													 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "													 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "													 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "													 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "													 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "													 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "													 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "													 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "									FROM  \n" +
                "										(  \n" +
                "											SELECT 	l.id,		l.refRfqLineitem,  \n" +
                "													IFNULL(d.id,c.id) AS mfgPNID,  \n" +
                "													IFNULL(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "													IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "													IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "													IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "													IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "													IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "													IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "													IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "												   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "														IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "													ELSE    /*Packaging Alias*/  \n" +
                "														CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "													END AS restrictUsePermanentlyStep,  \n" +
                "													IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "															IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "													ELSE  \n" +
                "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "													END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "														IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "													ELSE     /*Packaging Alias*/  \n" +
                "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "													END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "														IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "													ELSE  \n" +
                "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "													END AS restrictUseExcludingAliasStep,  \n" +
                "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "														 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "													ELSE  \n" +
                "													case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "													END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "													IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "													IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "													IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "													IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "													IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "										FROM kit_allocation_lineitems_alternatepart al  \n" +
                "										JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "										JOIN component c ON al.mfgPNID = c.id  \n" +
                "										LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "										AND NOT EXISTS  \n" +
                "											( SELECT 1  FROM  kit_allocation_lineitems_alternatepart x  WHERE  x.refRfqLineitem = al.refRfqLineitem  AND x.mfgpnid = d.id  \n" +
                "														AND d.id != c.id and x.isdeleted = 0  \n" +
                "											)  \n" +
                "											LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = pAssyID AND ccl.isDeleted = 0  \n" +
                "											LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = pAssyID AND ccld.isDeleted = 0  \n" +
                "											WHERE l.refSalesOrderDetid = pRefSalesOrderDetID  AND al.isDeleted = 0 AND c.isGoodPart = 1  AND c.id = IFNULL(d.id,c.id)  \n" +
                "				) z GROUP BY z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "				) a GROUP BY a.id, a.refRfqLineitem  \n" +
                "				) AS mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "		GROUP BY 	id, 				refSalesOrderDetID, 		partID, 				lineID,  \n" +
                "					mfgPN,  			mfgPNIdsWithPackaging,		custPNID,               custPN,  \n" +
                "					custPIDCode, 		custIsCustom,  				rfqLineItemsId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_CreateKitAllocationAssyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailID INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "	IN pMrpQty INT,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pActionStatus VARCHAR(50),  \n" +
                "	IN pRoleID INT,  \n" +
                "    IN pIsOnlyQtyChange TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_assyDataCount INT;  \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);  \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "	SELECT 	ps.prPerPartID,  \n" +
                "			c.liveInternalVersion,  \n" +
                "			c.liveVersion,  \n" +
                "			max(ps.level) level  \n" +
                "	FROM 		part_sub_assy_relationship ps  \n" +
                "	JOIN		component c ON c.id = ps.prPerPartID  \n" +
                "	WHERE 		ps.PartID = pPartID  \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "	AND 		ps.isDeleted = 0  \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "	SELECT 	COUNT(1)  \n" +
                "	INTO 	v_assyDataCount  \n" +
                "	FROM 	tempSubAmmseblyData  \n" +
                "	WHERE 	prPerPartID = pPartID;  \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted  \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail  \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "				AND isAssembly = 1  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,  \n" +
                "				pKitQty AS kitQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  \n" +
                "				pMrpQty AS mrpQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,  \n" +
                "				pUserID AS updatedBy,  \n" +
                "				pUserID AS createdBy,  \n" +
                "				pRoleID AS createByRoleId,  \n" +
                "				pRoleID AS updateByRoleId  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS  \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id,  \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,  \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,  \n" +
                "				uomID, 		partID,		numOfPosition, 		description,  \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep,  \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,  \n" +
                "				isNotRequiredKitAllocation,  \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,  \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,  \n" +
                "                customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep,  duplicateCPNStep,  \n" +
                "				requireMountingTypeStep, requireFunctionalTypeStep, refDesigCount, isObsoleteLine,  \n" +
                "				customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount,  \n" +
                "				requireMountingTypeError, requireFunctionalTypeError, dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep,  \n" +
                "				customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "		FROM 		rfq_lineitems rl  \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */  \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "										WHERE temp.prPerPartid = partid)  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS  \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id,  \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,  \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,  \n" +
                "			description,		RoHSStatusID,  \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,  \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,  \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep,  \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,  \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,  \n" +
                "			deleteByRoleId,mfgVerificationStep, mfgDistMappingStep, mfgCodeStep, distVerificationStep, distCodeStep,  \n" +
                "			getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep, mfgPNStep, distPNStep,  \n" +
                "			badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep, duplicateMPNInSameLineStep,  \n" +
                "			pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep, functionalTestingRequiredStep,  \n" +
                "			mismatchValueStep, mismatchPackageStep, mismatchToleranceStep, mismatchTempratureStep, mismatchPowerStep,  \n" +
                "			programingRequiredStep, mismatchColorStep, isCustomerUnAppoval, customerUnAppovalBy,  \n" +
                "			customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep,  \n" +
                "			tbdPartStep, exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep,  \n" +
                "			suggestedGoodPartStep, suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep,  \n" +
                "			mismatchCustomPartStep, suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "		FROM 	rfq_lineitems_alternatepart rla  \n" +
                "		WHERE 	EXISTS  ( SELECT 1 FROM rfq_LineItems rl  \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "															WHERE temp.prPerPartid = partid)  \n" +
                "									AND rl.id =  rla.rfqLineItemsID  \n" +
                "    AND rl.isdeleted = 0)  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */  \n" +
                "		IF (pActionStatus = 'DELETE')  \n" +
                "        THEN  \n" +
                "			/* Delete from kit_allocation_assy_detail */  \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "			SET 	kasd.updatedBy = pUserID,  \n" +
                "				kasd.isDeleted = 1,  \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kasd.deletedBy = pUserId,  \n" +
                "				kasd.updateByRoleId = pRoleID,  \n" +
                "				kasd.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */  \n" +
                "			UPDATE 	kit_allocation_lineitems kal  \n" +
                "			SET 	kal.updatedBy = pUserID,  \n" +
                "				kal.isDeleted = 1,  \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kal.deletedBy = pUserId,  \n" +
                "				kal.updateByRoleId = pRoleID,  \n" +
                "				kal.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */  \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "			SET 	kala.updatedBy = pUserID,  \n" +
                "				kala.isDeleted = 1,  \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kala.deletedBy = pUserId,  \n" +
                "				kala.updateByRoleId = pRoleID,  \n" +
                "				kala.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "			UPDATE 	kit_allocation ka  \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "				ka.returnUnit = ka.allocatedUnit,  \n" +
                "				ka.returnUOM = ka.allocatedUOM,  \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "				ka.updatedBy = pUserID,  \n" +
                "				ka.updateByRoleId = pRoleID,  \n" +
                "				ka.`status` = 'D',  \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND ka.`status` = 'A';  \n" +
                "  \n" +
                "			-- Delete release plan detail  \n" +
                "			UPDATE 	salesorder_plan_detailsmst  \n" +
                "			SET 	isDeleted = 1,  \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				deletedBy = pUserId  \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */  \n" +
                "		IF (pActionStatus != 'DELETE') THEN  \n" +
                "			IF (pActionStatus = 'UPDATE')  \n" +
                "            THEN  \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "				SET 	kasd.updatedBy = pUserID,  \n" +
                "					kasd.isDeleted = 1,  \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kasd.deletedBy = pUserId,  \n" +
                "					kasd.updateByRoleId = pRoleID,  \n" +
                "					kasd.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems kal  \n" +
                "				SET 	kal.updatedBy = pUserID,  \n" +
                "					kal.isDeleted = 1,  \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kal.deletedBy = pUserId,  \n" +
                "					kal.updateByRoleId = pRoleID,  \n" +
                "					kal.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "				SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)  \n" +
                "				IF(pIsOnlyQtyChange = 0) THEN  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "						ka.updatedBy = pUserID,  \n" +
                "						ka.updateByRoleId = pRoleID,  \n" +
                "						ka.`status` = 'D',  \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND ka.`status` = 'A';  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "            THEN  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "                THEN  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */  \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "					SET 	kasd.updatedBy = pUserID,  \n" +
                "							kasd.isDeleted = 1,  \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "							kasd.deletedBy = pUserId,  \n" +
                "							kasd.updateByRoleId = pRoleID,  \n" +
                "							kasd.deleteByRoleId = pRoleID  \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND NOT EXISTS (SELECT 	1  \n" +
                "													FROM 	tempResultForUpdate r  \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID  \n" +
                "															AND r.prPerPartID = kasd.partId)  \n" +
                "								AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal  \n" +
                "					SET 	kal.updatedBy = pUserID,  \n" +
                "						kal.isDeleted = 1,  \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kal.deletedBy = pUserId,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "						kal.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kal.partID = pPartID  \n" +
                "							AND NOT EXISTS ( 	SELECT 	1  \n" +
                "								FROM 	tempResultForLineItem r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID  \n" +
                "										AND r.partID = kal.partID  \n" +
                "										AND r.id = kal.refRfqLineitem  	)  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kala.partID = pPartID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "												FROM 	tempResultForLineItemAlternatePart r  \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "														AND r.partID = kala.partID  \n" +
                "														AND r.mfgPNID = kala.mfgPNID  \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )  \n" +
                "						AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */  \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/  \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd  \n" +
                "				SET 	ka.partId = tsd.prPerPartID,  \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,  \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,  \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,  \n" +
                "					ka.kitQty = tsd.kitQty,  \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,  \n" +
                "					ka.mrpQty = tsd.mrpQty,  \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,  \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,  \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,  \n" +
                "					ka.updatedBy = tsd.updatedBy,  \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId  \n" +
                "				WHERE	ka.id IS NOT NULL  \n" +
                "						AND ka.partId = tsd.prPerPartID  \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND ka.isDeleted = 0;  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                " THEN  \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt  \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,  \n" +
                "						kal.refRfqLineitem = tlt.id,  \n" +
                "						kal.lineID = tlt.lineID,  \n" +
                "						kal.qpa = tlt.qpa,  \n" +
                "						kal.dnpQty = tlt.dnpQty,  \n" +
                "						kal.isInstall = tlt.isInstall,  \n" +
                "						/* kal.isPurchase = tlt.isPurchase,  - Commented by CP: 11-102021 Take permisssion before any modification  \n" +
                "							as this will be calculate seperately for Kit allocation */  \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,  \n" +
                "						kal.custPN = tlt.custPN,  \n" +
                "						kal.custPNID = tlt.custPNID,  \n" +
                "						kal.uomID = tlt.uomID,  \n" +
                "						kal.partID = tlt.partID,  \n" +
                "						kal.numOfPosition = tlt.numOfPosition,  \n" +
                "						kal.description = tlt.description,  \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,  \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,  \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,  \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,  \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,  \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,  \n" +
                "						kal.updatedBy = pUserID,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "                        kal.refDesig = tlt.refDesig,  \n" +
                "                        kal.customerRev = tlt.customerRev,  \n" +
                "                        kal.customerDescription = tlt.customerDescription,  \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,  \n" +
                "                        kal.programingStatus = tlt.programingStatus,  \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,  \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,  \n" +
                "                        kal.numOfRows = tlt.numOfRows,  \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc,  \n" +
                "                        kal.qpaDesignatorStep = tlt.qpaDesignatorStep,  \n" +
                "						kal.mergeLines = tlt.mergeLines,  \n" +
                "						kal.lineMergeStep = tlt.lineMergeStep,  \n" +
                "						kal.duplicateCPNStep = tlt.duplicateCPNStep,  \n" +
                "						kal.requireMountingTypeStep = tlt.requireMountingTypeStep,  \n" +
                "						kal.requireFunctionalTypeStep = tlt.requireFunctionalTypeStep,  \n" +
                "						kal.refDesigCount = tlt.refDesigCount,  \n" +
                "						kal.isObsoleteLine = tlt.isObsoleteLine,  \n" +
                "						kal.customerApprovalForQPAREFDESStep = tlt.customerApprovalForQPAREFDESStep,  \n" +
                "						kal.customerApprovalForBuyStep = tlt.customerApprovalForBuyStep,  \n" +
                "						kal.customerApprovalForPopulateStep = tlt.customerApprovalForPopulateStep,  \n" +
                "						kal.customerApprovalCPNBy = tlt.customerApprovalCPNBy,  \n" +
                "						kal.customerApprovalCPNDate = tlt.customerApprovalCPNDate,  \n" +
                "						kal.dnpDesigCount = tlt.dnpDesigCount,  \n" +
                "						kal.requireMountingTypeError = tlt.requireMountingTypeError,  \n" +
                "						kal.requireFunctionalTypeError = tlt.requireFunctionalTypeError,  \n" +
                "						kal.dnpQPARefDesStep = tlt.dnpQPARefDesStep,  \n" +
                "						kal.customerApprovalForDNPQPAREFDESStep = tlt.customerApprovalForDNPQPAREFDESStep,  \n" +
                "						kal.customerApprovalForDNPBuyStep = tlt.customerApprovalForDNPBuyStep,  \n" +
                "						kal.isSupplierToBuy = tlt.isSupplierToBuy  \n" +
                "					WHERE	kal.id IS NOT NULL  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  \n" +
                "										AND kala.id IS NOT NULL  \n" +
                "							)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia  \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,  \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,  \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,  \n" +
                "						kala.distributor = tlia.distributor,  \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,  \n" +
                "						kala.distPN = tlia.distPN,  \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,  \n" +
                "						kala.mfgCode = tlia.mfgCode,  \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,  \n" +
                "						kala.mfgPN = tlia.mfgPN,  \n" +
                "						kala.mfgPNID = tlia.mfgPNID,  \n" +
                "						kala.description = tlia.description,  \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,  \n" +
                "						kala.parttypeID = tlia.parttypeID,  \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,  \n" +
                "						kala.partcategoryID = tlia.partcategoryID,  \n" +
                "						kala.partID = tlia.partID,  \n" +
                "						kala.customerApproval = tlia.customerApproval,  \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,  \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,  \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,  \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,  \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,  \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,  \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,  \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,  \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,  \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,  \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "						kala.updatedBy = pUserID,  \n" +
                "						kala.updateByRoleId=pRoleID,  \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId,  \n" +
                "                        kala.mfgVerificationStep = tlia.mfgVerificationStep,  \n" +
                "						kala.mfgDistMappingStep = tlia.mfgDistMappingStep,  \n" +
                "						kala.mfgCodeStep = tlia.mfgCodeStep,  \n" +
                "						kala.distVerificationStep = tlia.distVerificationStep,  \n" +
                "						kala.distCodeStep = tlia.distCodeStep,  \n" +
                "						kala.getMFGPNStep = tlia.getMFGPNStep,  \n" +
                "						kala.obsoletePartStep = tlia.obsoletePartStep,  \n" +
                "						kala.mfgGoodPartMappingStep = tlia.mfgGoodPartMappingStep,  \n" +
                "						kala.mfgPNStep = tlia.mfgPNStep,  \n" +
                "						kala.distPNStep = tlia.distPNStep,  \n" +
                "						kala.badMfgPN = tlia.badMfgPN,  \n" +
                "						kala.distGoodPartMappingStep = tlia.distGoodPartMappingStep,  \n" +
                "						kala.nonRohsStep = tlia.nonRohsStep,  \n" +
                "						kala.epoxyStep = tlia.epoxyStep,  \n" +
                "						kala.invalidConnectorTypeStep = tlia.invalidConnectorTypeStep,  \n" +
                "						kala.duplicateMPNInSameLineStep = tlia.duplicateMPNInSameLineStep,  \n" +
                "						kala.pickupPadRequiredStep = tlia.pickupPadRequiredStep,  \n" +
                "						kala.matingPartRquiredStep = tlia.matingPartRquiredStep,  \n" +
                "						kala.driverToolsRequiredStep = tlia.driverToolsRequiredStep,  \n" +
                "						kala.functionalTestingRequiredStep = tlia.functionalTestingRequiredStep,  \n" +
                "						kala.mismatchValueStep = tlia.mismatchValueStep,  \n" +
                "						kala.mismatchPackageStep = tlia.mismatchPackageStep,  \n" +
                "						kala.mismatchToleranceStep = tlia.mismatchToleranceStep,  \n" +
                "						kala.mismatchTempratureStep = tlia.mismatchTempratureStep,  \n" +
                "						kala.mismatchPowerStep = tlia.mismatchPowerStep,  \n" +
                "						kala.programingRequiredStep = tlia.programingRequiredStep,  \n" +
                "						kala.mismatchColorStep = tlia.mismatchColorStep,  \n" +
                "						kala.isCustomerUnAppoval = tlia.isCustomerUnAppoval,  \n" +
                "						kala.customerUnAppovalBy = tlia.customerUnAppovalBy,  \n" +
                "						kala.customerUnAppovalDate = tlia.customerUnAppovalDate,  \n" +
                "						kala.mismatchNumberOfRowsStep = tlia.mismatchNumberOfRowsStep,  \n" +
                "						kala.partPinIsLessthenBOMPinStep = tlia.partPinIsLessthenBOMPinStep,  \n" +
                "						kala.tbdPartStep = tlia.tbdPartStep,  \n" +
                "						kala.exportControlledStep = tlia.exportControlledStep,  \n" +
                "						kala.isUnlockApprovedPart = tlia.isUnlockApprovedPart,  \n" +
                "						kala.unknownPartStep = tlia.unknownPartStep,  \n" +
                "						kala.defaultInvalidMFRStep = tlia.defaultInvalidMFRStep,  \n" +
                "						kala.suggestedGoodPartStep = tlia.suggestedGoodPartStep,  \n" +
                "						kala.suggestedGoodDistPartStep = tlia.suggestedGoodDistPartStep,  \n" +
                "						kala.mismatchRequiredProgrammingStep = tlia.mismatchRequiredProgrammingStep,  \n" +
                "						kala.mappingPartProgramStep = tlia.mappingPartProgramStep,  \n" +
                "						kala.mismatchCustomPartStep = tlia.mismatchCustomPartStep,  \n" +
                "						kala.suggestedByApplicationMsg = tlia.suggestedByApplicationMsg,  \n" +
                "						kala.suggestedByApplicationStep = tlia.suggestedByApplicationStep,  \n" +
                "						kala.mismatchProgrammingStatusStep = tlia.mismatchProgrammingStatusStep  \n" +
                "					WHERE	kala.id IS NOT NULL  \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID  \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID  \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/*SELECT * from tempResultForUpdate;  \n" +
                "			 SELECT 	ts.prPerPartID,		ts.salesOrderDetailID,		ts.perAssyBuildQty, 		ts.totalAssyBuildQty,  \n" +
                "				ts.kitQty,			ts.totalAssyMrpQty,		ts.mrpQty,			ts.liveInternalVersion,  \n" +
                "				ts.liveVersion,		ts.bomAssyLevel,		ts.updatedBy, 			ts.createdBy,  \n" +
                "				ts.createByRoleId, 		ts.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate ts  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = ts.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = ts.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL; */  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */  \n" +
                "			INSERT INTO kit_allocation_assy_detail (  \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,  \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,  \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,  \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId  \n" +
                "			)  \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,  \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,  \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,  \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate tsd  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */  \n" +
                "			INSERT INTO kit_allocation_lineitems (  \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,  \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,  \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,  \n" +
                "				numOfPosition,  		description,     		restrictCPNUseWithPermissionStep,  \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,  \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,  \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep, duplicateCPNStep, requireMountingTypeStep, requireFunctionalTypeStep,  \n" +
                "				refDesigCount, isObsoleteLine, customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount, requireMountingTypeError, requireFunctionalTypeError,  \n" +
                "				dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep, customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "			)  \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa,  \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,  \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID,  \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep,  \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,  \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,  \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,  \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc,  \n" +
                "                tlt.qpaDesignatorStep, 	tlt.mergeLines, 	tlt.lineMergeStep, 		tlt.duplicateCPNStep, 		tlt.requireMountingTypeStep,  \n" +
                "                tlt.requireFunctionalTypeStep, 	tlt.refDesigCount, 		tlt.isObsoleteLine, 	tlt.customerApprovalForQPAREFDESStep,  \n" +
                "                tlt.customerApprovalForBuyStep, 	tlt.customerApprovalForPopulateStep, 	tlt.customerApprovalCPNBy,  \n" +
                "                tlt.customerApprovalCPNDate, 	tlt.dnpDesigCount, 		tlt.requireMountingTypeError, 	tlt.requireFunctionalTypeError,  \n" +
                "				tlt.dnpQPARefDesStep, 		tlt.customerApprovalForDNPQPAREFDESStep, 		tlt.customerApprovalForDNPBuyStep, 	tlt.isSupplierToBuy  \n" +
                "			FROM 	tempResultForLineItem tlt  \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.partID = tlt.partID  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.isDeleted = 0  \n" +
                "			WHERE 	kal.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */  \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (  \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,  \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,  \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,  \n" +
                "				description,    		RoHSStatusID,  \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,  \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,  \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,  \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,  \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,  \n" +
                "				updatedBy,    createByRoleId,    	updateByRoleId,   mfgVerificationStep, 	mfgDistMappingStep,  \n" +
                "				mfgCodeStep, distVerificationStep, distCodeStep, getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep,  \n" +
                "				mfgPNStep, distPNStep, badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep,  \n" +
                "				duplicateMPNInSameLineStep, pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep,  \n" +
                "				functionalTestingRequiredStep, mismatchValueStep, mismatchPackageStep, mismatchToleranceStep,  \n" +
                "				mismatchTempratureStep, mismatchPowerStep, programingRequiredStep, mismatchColorStep, isCustomerUnAppoval,  \n" +
                "				customerUnAppovalBy, customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep, tbdPartStep,  \n" +
                "				exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep, suggestedGoodPartStep,  \n" +
                "				suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep, mismatchCustomPartStep,  \n" +
                "				suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "			)  \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,  \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID,  \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID,  \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,  \n" +
                "                tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID,  \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,  \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep,  \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep,  \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,  \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				pUserID, pUserID,    pRoleID,     pRoleID, tlia.mfgVerificationStep, 	tlia.mfgDistMappingStep,  \n" +
                "				tlia.mfgCodeStep, tlia.distVerificationStep, tlia.distCodeStep, tlia.getMFGPNStep, tlia.obsoletePartStep, tlia.mfgGoodPartMappingStep,  \n" +
                "				tlia.mfgPNStep, tlia.distPNStep, tlia.badMfgPN, tlia.distGoodPartMappingStep, tlia.nonRohsStep, tlia.epoxyStep, tlia.invalidConnectorTypeStep,  \n" +
                "				tlia.duplicateMPNInSameLineStep, tlia.pickupPadRequiredStep, tlia.matingPartRquiredStep, tlia.driverToolsRequiredStep,  \n" +
                "				tlia.functionalTestingRequiredStep, tlia.mismatchValueStep, tlia.mismatchPackageStep, tlia.mismatchToleranceStep,  \n" +
                "				tlia.mismatchTempratureStep, tlia.mismatchPowerStep, tlia.programingRequiredStep, tlia.mismatchColorStep, tlia.isCustomerUnAppoval,  \n" +
                "				tlia.customerUnAppovalBy, tlia.customerUnAppovalDate, tlia.mismatchNumberOfRowsStep, tlia.partPinIsLessthenBOMPinStep, tlia.tbdPartStep,  \n" +
                "				tlia.exportControlledStep, tlia.isUnlockApprovedPart, tlia.unknownPartStep, tlia.defaultInvalidMFRStep, tlia.suggestedGoodPartStep,  \n" +
                "				tlia.suggestedGoodDistPartStep, tlia.mismatchRequiredProgrammingStep, tlia.mappingPartProgramStep, tlia.mismatchCustomPartStep,  \n" +
                "				tlia.suggestedByApplicationMsg, tlia.suggestedByApplicationStep, tlia.mismatchProgrammingStatusStep  \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia  \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "							AND tlia.partID = kala.partID  \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem  \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID  \n" +
                "							AND kala.isDeleted = 0  \n" +
                "			WHERE 	kala.id IS NULL;  \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate ASC  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.packingSlipDetID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d ORDER BY internalDateCodeInDate ASC;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate ASC;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);  \n" +
                "    DECLARE pPIDCode VARCHAR(200);  \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "    DECLARE pPartID INT;  \n" +
                "    DECLARE pRoHSName VARCHAR(100);  \n" +
                "    DECLARE pRoHSIcon VARCHAR(255);  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN  \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "					fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "					sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "				INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM salesorderdet s  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "					JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "					WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM kit_allocation_assy_detail k  \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "                    JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "								AND k.partId = pAssyID  \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT  \n" +
                "				c.id,			 	refSalesOrderDetID,		mfgPNID,  \n" +
                "                pPartID partID,								pPIDCode PIDCode,  \n" +
                "                pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "                pCustomer companyName, 						pCustomerID customerID,  \n" +
                "				lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "                uomID,			 	unitName,				uomClassID,  \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,  \n" +
                "                (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "				END) shortagePerBuildQty,  \n" +
                "				(CASE  \n" +
                "									WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "											ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "										END  \n" +
                "				END) shortagePerQtyBuildPins  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "						k.id,	 		k.refSalesOrderDetID,		kal.mfgPNID,  \n" +
                "                        k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "                        k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  										k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.isNotRequiredKitAllocation,						kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "					INNER JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id AND kal.isDeleted = 0  \n" +
                "					INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "                    INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "					LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND k.partID = ka.assyID  AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "					WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "					GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "					rfqLineItemsId, numOfPosition;  \n" +
                "		ELSE  \n" +
                "			SELECT  \n" +
                "					c.id,			 refSalesOrderDetID,		mfgPNID,  \n" +
                "					pPartID partID,								pPIDCode PIDCode,  \n" +
                "					pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "					pCustomer companyName, 						pCustomerID customerID,  \n" +
                "					lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "					uomID,			 	unitName,				uomClassID,  \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "                    (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END) shortagePerBuildQty,  \n" +
                "					(CASE  \n" +
                "						WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "					END) shortagePerQtyBuildPins  \n" +
                "				FROM  \n" +
                "					(SELECT  \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 	kal.mfgPNID,  \n" +
                "							k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "							k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.isNotRequiredKitAllocation,				k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,		IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			INNER JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id AND kal.isDeleted = 0  \n" +
                "            INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "			INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "			LEFT JOIN 	vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND FIND_IN_SET(ka.refBOMLineID, k.consolidatedLineItemIDs)  \n" +
                "			WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, kal.mfgPNID) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "				rfqLineItemsId, numOfPosition;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  	isPurchaseWithDNP AS isPurchase,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailableQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailablePins  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  		a.isPurchaseWithDNP,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  		isPurchaseWithDNP,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  	isPurchase,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID != -2 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item(Line#)\",  \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Cust BOM Line#\",  \n" +
                "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Non-Kitting Item\",  \n" +
                "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN Rev\",  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Pin Per REF DES on PCB\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfRows IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"No. of Rows\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty\",  \n" +
                "				NULL, CAST(trim(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP REF DES\",  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.uomID IS NOT NULL  \n" +
                "				THEN  \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "				ELSE  \n" +
                "					SET newUOM = '';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "			IF newSubstitutesAllow != '' THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
                "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
                "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Non-Kitting Item\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
                "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  /*  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 2 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of QPA or REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 3 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Buy: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 4 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Populate: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 18 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of DNP Qty REF DES: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "		SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 17 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of Buy DNP Qty: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "        	INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5385,'2.00','V1','User Story 37276: KIT PAGE Improvement Points - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5385:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021 *********************************** */
                "CREATE TABLE `common_longtext_history` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `refTransId` int NOT NULL,  \n" +
                "  `Tablename` varchar(50) not null,  \n" +
                "  `Colname` varchar(200) NOT NULL,  \n" +
                "  `valueDataType` varchar(30) not null,  \n" +
                "  `Oldval` longtext,  \n" +
                "  `Newval` longtext,  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ");  \n" +
                "  \n" +
                "ALTER TABLE `rfq_assemblies_history` ADD COLUMN `valueDataType` VARCHAR(30) NULL;  \n" +
                "ALTER TABLE `rfq_assemblies_history`  \n" +
                "CHANGE COLUMN `Oldval` `Oldval` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `Newval` `Newval` VARCHAR(2000) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5386,'2.00','V1','User Story 37749: Transaction History related changes for Assembly Quote Status History in RFQ list page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5386:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021 *********************************** */
                "drop procedure if exists `Sproc_GetRFQ_AssembliesHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQ_AssembliesHistory`(  \n" +
                "	IN pRefRfqId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	set @temp_mainQuery = concat(\"  \n" +
                "			select a.*,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt  \n" +
                "			from ( SELECT h.id,  \n" +
                "						h.Colname,  \n" +
                "						h.Oldval,  \n" +
                "						h.Newval,  \n" +
                "						fun_getUserNameByID(h.createdBy) AS ModifiedUser,  \n" +
                "						h.updatedAt,  \n" +
                "                        h.valueDataType  \n" +
                "					FROM rfq_assemblies_history h  \n" +
                "					WHERE h.refRfqId = \",pRefRfqId,\"  \n" +
                "					union all  \n" +
                "					SELECT h.id,  \n" +
                "						h.Colname,  \n" +
                "						h.Oldval,  \n" +
                "						h.Newval,  \n" +
                "						fun_getUserNameByID(h.createdBy) AS ModifiedUser,  \n" +
                "						h.updatedAt,  \n" +
                "                        h.valueDataType  \n" +
                "					FROM common_longtext_history h  \n" +
                "					WHERE h.tablename = 'rfq_assemblies'  \n" +
                "					and h.refTransId = \",pRefRfqId,\") a \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY updatedAt DESC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_mainQuery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_mainQuery,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                "drop TRIGGER if exists `Trg_AU_rfq_assemblies`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_assemblies` AFTER UPDATE ON `rfq_assemblies` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "    IF(NEW.quoteInDate != OLD.quoteInDate) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET quoteInDate = NEW.quoteInDate WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    IF(NEW.quoteDueDate != OLD.quoteDueDate) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET quoteDueDate = NEW.quoteDueDate WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    IF(NEW.isDeleted != OLD.isDeleted) THEN  \n" +
                "	UPDATE rfq_assemblies_quotation_submitted SET isDeleted = NEW.isDeleted, deletedBy=NEW.deletedBy, deletedAt = fun_DatetimetoUTCDateTime() WHERE rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.reason,\"\") != IFNULL(NEW.reason,\"\") THEN  \n" +
                "       INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt,  \n" +
                "         valueDataType,				Tablename)  \n" +
                "	VALUES(NEW.id,					'Quote Reason',			OLD.reason,  \n" +
                "		 NEW.reason,	 			NEW.updatedBy,		NEW.updatedAt,  \n" +
                "         fun_getDataTypeBasedOnTableAndColumnName('rfq_assemblies', 'reason'),  \n" +
                "         'rfq_assemblies');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.status,\"\") != IFNULL(NEW.status,\"\") THEN  \n" +
                "		IF OLD.status IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.status = 3 THEN  \n" +
                "										'Won'  \n" +
                "								WHEN OLD.status = 4 THEN  \n" +
                "										'Lost'  \n" +
                "								WHEN OLD.status = 5 THEN  \n" +
                "										'Canceled'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "        IF NEW.status IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.status = 3 THEN  \n" +
                "										'Won'  \n" +
                "								WHEN NEW.status = 4 THEN  \n" +
                "										'Lost'  \n" +
                "								WHEN NEW.status = 5 THEN  \n" +
                "										'Canceled'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF IFNULL(pOldValue,\"\") != IFNULL(pNewValue,\"\") THEN  \n" +
                "			   INSERT INTO rfq_assemblies_history  \n" +
                "				(refRfqId,					Colname,				Oldval,  \n" +
                "				 Newval,					createdBy,				createdAt,  \n" +
                "				valueDataType)  \n" +
                "			VALUES(NEW.id,					'Completed Status',		pOldValue,  \n" +
                "				 pNewValue,	 				NEW.updatedBy,		NEW.updatedAt,  \n" +
                "				 'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.winQuantity,\"\") != IFNULL(NEW.winQuantity,\"\") THEN  \n" +
                "       INSERT INTO rfq_assemblies_history  \n" +
                "		(refRfqId,					Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt,  \n" +
                "		valueDataType)  \n" +
                "	VALUES(NEW.id,					'Win Quantity',			CAST(OLD.winQuantity AS CHAR),  \n" +
                "		 CAST(NEW.winQuantity AS CHAR),	 		NEW.updatedBy,		NEW.updatedAt,  \n" +
                "         'qty');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.winPrice,\"\") != IFNULL(NEW.winPrice,\"\") THEN  \n" +
                "       INSERT INTO rfq_assemblies_history  \n" +
                "		(refRfqId,					Colname,				Oldval,  \n" +
                "		 Newval,					createdBy,				createdAt,  \n" +
                "		valueDataType)  \n" +
                "	VALUES(NEW.id,					'Win Price',			CAST(OLD.winPrice AS CHAR),  \n" +
                "		 CAST(NEW.winPrice AS CHAR),	 			NEW.updatedBy,		NEW.updatedAt,  \n" +
                "         'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    if(NEW.quoteValidTillDate is not null)then  \n" +
                "    update rfq_assemblies_quotation_submitted set quoteValidTillDate=NEW.quoteValidTillDate where rfqAssyID = NEW.id AND quoteNumber IS NULL;  \n" +
                "    end if;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 18-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5387,'2.00','V1','User Story 37749: Transaction History related changes for Assembly Quote Status History in RFQ list page - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5387:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 19-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getActivityStartedAssemblyForMultiplePartsWithPackaging`;  \n" +
                "CREATE PROCEDURE `Sproc_getActivityStartedAssemblyForMultiplePartsWithPackaging`(  \n" +
                "	IN pPartIDs text,  \n" +
                "    in pAssyID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	drop temporary table if exists tempComponentIds;  \n" +
                "    set @SQLStatement1 = \" create temporary table tempComponentIds as  \n" +
                "							select id from component co where co.isdeleted = 0 \";  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and (co.id in (\",pPartIDs,\") or  \n" +
                "                                co.packaginggroupID in(select packaginggroupID from component where isdeleted = 0 and id in (\",pPartIDs,\")))\");  \n" +
                "  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    if(pAssyID is not null and pAssyID <>'') then  \n" +
                "		set @SQLStatement3 = concat(\"co.id <> \",pAssyID);  \n" +
                "	else  \n" +
                "		set @SQLStatement3 = concat(\"1 = 1\");  \n" +
                "	end if;  \n" +
                " 	SET @SQLStatement2=CONCAT(\"SELECT co.id,co.mfgcodeID, co.mfgPN, co.PIDCode, co.nickName, co.mfgPNDescription, co.imageURL, co.documentPath, co.isActivityStart,  \n" +
                "		co.activityStartAt, co.activityStartBy, CONCAT(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		(CASE WHEN co.isActivityStart = TRUE THEN  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt, FUN_DATETIMETOUTCDATETIME()) ELSE NULL END) activityStartTime,  \n" +
                "		m.mfgCode, m.mfgName  \n" +
                "	FROM component co  \n" +
                "	LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "	JOIN mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	WHERE co.isActivityStart = 1 AND co.isdeleted = 0  \n" +
                "    and \",@SQLStatement3,\"  \n" +
                "	AND EXISTS( SELECT 1 FROM rfq_lineitems_alternatepart rla  \n" +
                "						JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "						WHERE rla.partID = co.id AND rla.isdeleted = 0  \n" +
                "						AND EXISTS( SELECT 1 FROM tempComponentIds t  \n" +
                "										WHERE(t.id = rla.mfgPNID OR t.id = rl.custPNID)  \n" +
                "									)  \n" +
                "				)\");  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "    EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	drop temporary table if exists tempComponentIds;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5388,'2.00','V1','User Story 37305: Update Part Attributes from BOM - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5388:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE packing_slip_material_receive  \n" +
                "	ADD COLUMN isCustConsigned TINYINT DEFAULT 0,  \n" +
                "    ADD COLUMN CustomerID INT(11);  \n" +
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE packing_slip_material_receive_det  \n" +
                "	ADD COLUMN isLineCustConsigned TINYINT DEFAULT 0,  \n" +
                "    ADD COLUMN isNonUMIDStock TINYINT DEFAULT 0,  \n" +
                "    ADD COLUMN LineCustomerID INT(11);  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5389,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5389:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "INSERT INTO table_mapping_details(tabel_name,display_page_name) VALUES('customer_packingslip_invoice','Customer Invoices');  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5390,'2.00','V1','Insert entry for customer invoice as it is being used at part master delete  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5390:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE `workorder_operation_refdesig`  \n" +
                "MODIFY COLUMN `unqDate` DATETIME NOT NULL DEFAULT '2001-01-01 00:00:00' ;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5391,'2.00','V1','Change unqDate column to not null  in workorder_operation_refdesig  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5391:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "select parentPageID into @parentPageID from page_detail where pageRoute = 'app.component.managecomponent';  \n" +
                "select @parentPageID;  \n" +
                "  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values ('Manage Supplier Parts',0,0,'app.component.managedistcomponent',  \n" +
                "'/managedistcomponent','Manage Supplier Parts',@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,0,'Parts', 0,1,0);  \n" +
                "  \n" +
                "SELECT LAST_INSERT_ID() into @parentPageID;  \n" +
                "  \n" +
                "update page_detail set pageRoute = 'app.component.managedistcomponent.detail', pageURL = '/detail/dist/:coid',  \n" +
                " parentPageID= @parentPageID where pageName = 'Manage Supplier Parts Detail';  \n" +
                "  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Alias & Alternate Groups',0,0,'app.component.managedistcomponent.alternategroup',  \n" +
                "'/alternategroup/dist/:coid/:subTab','Manage Parts Alias & Alternate Groups',@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                " ('Manage Supplier Parts Standards',0,0,'app.component.managedistcomponent.standards','/standards/dist/:coid','Manage Supplier Parts Standards',@parentPageID,0,  \n" +
                " 'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Document',0,0,'app.component.managedistcomponent.document','/documents/dist/:coid/:docOpenType','Manage Supplier Parts Document',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Miscellaneous',0,0,'app.component.managedistcomponent.otherdetail','/otherdetail/dist/:coid','Manage Supplier Parts MISC',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Pricing History',0,0,'app.component.managedistcomponent.pricinghistory','/pricinghistory/dist/:coid','Manage Supplier Parts Supplier Pricing History',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Customer LOA',0,0,'app.component.managedistcomponent.customerloa','/customerloa/dist/:coid','Manage Supplier Parts Customer LOA',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Comments',0,0,'app.component.managedistcomponent.comments','/comments/dist/:coid','Manage Supplier Parts Requirement & Comments',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts BOM',0,0,'app.component.managedistcomponent.bom','/bom/dist/:coid/:subTab','Manage Supplier Parts BOM',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts History',0,0,'app.component.managedistcomponent.history','/componenthistory/dist/:coid','Manage Supplier Parts History',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Kit Allocation',0,0,'app.component.managedistcomponent.kitallocation','/kitallocation/dist/:coid','Manage Supplier Parts Kit Allocation',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts UMID List',0,0,'app.component.managedistcomponent.umidlist','/umidlist/dist/:coid','Manage Supplier Parts UMID List',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts ECO/DFM',0,0,'app.component.managedistcomponent.dfm','/dfm/dist/:coid','Manage Supplier Part ECO/DFM',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts DataFields',0,0,'app.component.managedistcomponent.datafields','/datafields/dist/:coid','Manage Supplier Track Data',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Assembly Stock',0,0,'app.component.managedistcomponent.assemblystockdetail','/assemblystock/dist/:coid','Manage Supplier Parts Assembly Stock',@parentPageID,0,  \n" +
                "'',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Supplier API Response',0,0,'app.component.managedistcomponent.supplierapiresponse','/supplierapiresponse/dist/:coid','Manage Supplier Parts CALL Supplier API',@parentPageID,0  \n" +
                ",'',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Disapproved Supplier',0,0,'app.component.managedistcomponent.approveddisapprovedsupplier','/approveddisapprovedsupplier/dist/:coid',  \n" +
                "'Manage Supplier Disapproved Supplier',  \n" +
                "@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Sales Price Matrix',0,0,'app.component.managedistcomponent.assysalespricematrix','/assysalespricematrix/dist/:coid/:selectedTab',  \n" +
                "'Manage Supplier Parts Sales Price Matrix',@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Work Order List',0,0,'app.component.managedistcomponent.workorderlist','/workorderlist/dist/:coid','Manage Supplier Parts Work Order List',@parentPageID,0,  \n" +
                "'',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts RFQ',0,0,'app.component.managedistcomponent.rfq','/rfq/dist/:coid','Manage Supplier Parts RFQ',@parentPageID,0,  \n" +
                "'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +

                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, ':mfgType', 'mfg') where pageRoute like '%app.component.managecomponent%';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName = REPLACE(menuName, 'Manage Part', 'Manage Manufacturer Part') where menuName like '%Manage Part%' and pageRoute like '%app.component.managecomponent%';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName = REPLACE(menuName, 'Manage', 'Manage Manufacturer Part ') where menuName like '%Manage Track Data%' and pageRoute like '%app.component.managecomponent%';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName = REPLACE(menuName, 'Manage Parts', 'Manage Manufacturer Parts') where menuName like '%Manage Parts%' and pageRoute like '%app.component.managecomponent%';  \n" +

                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.alternategroup';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.alternategroup' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.standards';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.standards' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.document';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.document' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.otherdetail';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.otherdetail' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.pricinghistory';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.pricinghistory' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.customerloa';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.customerloa' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.comments';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.comments' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.bom';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.bom' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.history';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.history' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.kitallocation';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.kitallocation' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.umidlist';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.umidlist' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.dfm';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.dfm' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.dfm';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.dfm' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.datafields';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.datafields' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.assemblystockdetail';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.assemblystockdetail' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.approveddisapprovedsupplier';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.approveddisapprovedsupplier' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.assysalespricematrix';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.assysalespricematrix' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.workorderlist';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.workorderlist' and p.isDeleted = 0);  \n" +
                "  \n" +
                " select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.rfq';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.rfq' and p.isDeleted = 0);  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, '/mfg', '') where pageURL like '%/mfg%' and pageRoute like '%app.component.managecomponent%';  \n" +
                "  \n" +
                "select * from page_detail where  pageURL = '/managecomponent';  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, '/managecomponent', '/managemfg') where pageURL = '/managecomponent 	';  \n" +
                "  \n" +
                "select * from page_detail where pageURL like '%/dist%' and pageRoute like '%app.component.managedistcomponent%';  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, '/dist', '') where pageURL like '%/dist%' and pageRoute like '%app.component.managedistcomponent%';  \n" +
                "  \n" +
                "select * from page_detail where pageURL like '%/dist%' and pageRoute like '%app.component.managedistcomponent%';  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, '/dist', '') where pageURL like '%/dist%' and pageRoute like '%app.component.managedistcomponent%';  \n" +
                "  \n" +
                "select * from page_detail where  pageURL = '/managedistcomponent';  \n" +
                "UPDATE page_detail  \n" +
                "SET pageURL = REPLACE(pageURL, '/managedistcomponent', '/managedist') where pageURL = '/managedistcomponent';  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5392,'2.00','V1',' User Story 36256: Page role/right wise access for MFR and Supplier part route - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5392:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "ALTER TABLE component_oddely_refdes modify column unqDate datetime NoT null default '2001-01-01' on update current_timestamp();  \n" +
                "update component_oddely_refdes set unqDate = '2001-01-01' where isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5393,'2.00','V1','User Story 36632: BOM: QPA vs REFDES Improvement points suggested by JV [20-08-2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5393:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_component_oddely_refdes`;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_component_oddely_refdes` BEFORE UPDATE ON `component_oddely_refdes`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "        IF (OLD.isDeleted = 0  AND NEW.isDeleted = 1) THEN  \n" +
                "                SET NEW.unqDate = UTC_TIMESTAMP();  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5394,'2.00','V1','TRG_UNQDATE_component_oddely_refdes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5394:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE `mfgcodealias`  \n" +
                "ADD COLUMN `unqDate` DATETIME NULL DEFAULT '2001-01-01';  \n" +
                "ALTER TABLE `mfgcodealias`  \n" +
                "DROP INDEX `unq_mfgcodealias` ,  \n" +
                "ADD UNIQUE INDEX `unq_mfgcodealias` (`alias` ASC, `unqDate` ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5395,'2.00','V1','Bug 37656: Manufacturer/Customer : Parallel Testing findings on Dev Branch - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5395:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "drop trigger if exists `TRG_UNQDATE_mfgcodealias`;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_mfgcodealias` BEFORE UPDATE ON `mfgcodealias` FOR EACH ROW BEGIN  \n" +
                "        IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "                set NEW.unqDate = utc_timestamp();  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5396,'2.00','V1','Bug 37656: Manufacturer/Customer : Parallel Testing findings on Dev Branch - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5396:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(1000);  \n" +
                "    DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" and (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0	where sodet.isDeleted = 0  \n" +
                "															and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%')	))\");  \n" +
                "		SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%' )\");  \n" +
                "                                        /*OR soDetail.refSalesOrderID in (select id from salesordermst where isDeleted = 0  \n" +
                "																		and (salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "																			or poNumber like '%\",pSearchText,\"%')))\");    */  \n" +
                "    ELSE  \n" +
                "        SET detailWhereClause = '1=1';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by soDate desc, soId desc \", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workorderDet.woNumberList) woComment  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(shipQty) shippedQty from customer_packingslip_det where isDeleted = 0 group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select salesOrderDetailID,group_concat(wo.woNumber) woNumberList from workorder_salesorder_details woSo  join workorder wo  \n" +
                "                on woSo.woID = wo.woID and woSo.isDeleted = 0 where wo.isDeleted = 0 group by woSo.salesOrderDetailID) as workorderDet on workorderDet.salesOrderDetailID =  sod.id  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "				/*PIDCode, mfgPN, rohsName, rohsIcon, */  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 COUNT(refCustPackingSlipID) over (partition by releaseId) cpsDetailCnt,  \n" +
                "				 row_number() over (partition by releaseId) cpsIndex  \n" +
                "                 -- woNumberList  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate  \n" +
                "               -- workorderDet.woNumberList  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                where  \" , detailWhereClause);  \n" +
                "  -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5397,'2.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5397:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5398,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5398:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getDesignatorList;  \n" +
                "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
                "	pRefDesig TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
                "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
                "  DECLARE item VARCHAR(200);  \n" +
                "  DECLARE delim CHAR(1) ;  \n" +
                "  DECLARE vGetRange VARCHAR(2000);  \n" +
                "  SET delim = ',';  \n" +
                "  If pRefDesig IS NOT NULL Then  \n" +
                "    -- Replace space with comma, as we consider space as a seperator too  \n" +
                "    SET refDesigArr = trim(pRefDesig);  \n" +
                "    SET refDesigArr = replace(refDesigArr,' ', ',');  \n" +
                "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
                "    set maxLength = length(refDesigArr);  \n" +
                "	REPEAT  \n" +
                "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
                "        IF endPos = 0 THEN  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
                "        ELSE  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
                "        END IF;  \n" +
                "		IF item <>'' OR item IS NOT NULL THEN  \n" +
                "			IF (instr(item,'-') > 0) THEN  \n" +
                "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
                "			ELSE  \n" +
                "				SET vGetRange = item;  \n" +
                "			END IF;  \n" +
                "			IF startpos >=  1 AND  endPos = 0 THEN  \n" +
                "				SET vReturn = concat(vReturn,vGetRange);  \n" +
                "				SET startPos = maxLength ;  \n" +
                "			ELSE  \n" +
                "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	UNTIL startPos>= maxLength END REPEAT;  \n" +
                "  END IF;  \n" +
                "  return vReturn;  \n" +
                "end;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5399,'2.00','V1','fun_getDesignatorList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5399:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_customerID_idx` (`CustomerID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_customerID`  \n" +
                "  FOREIGN KEY (`CustomerID`)  \n" +
                "  REFERENCES `mfgcodemst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** New Script -> 20-10-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_det_linecustomerID_idx` (`LineCustomerID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_det_linecustomerID`  \n" +
                "  FOREIGN KEY (`LineCustomerID`)  \n" +
                "  REFERENCES `mfgcodemst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 20-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5400,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5400:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_RetrieveWarehouse_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse_History`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWarehouseID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "SET @temp_Sproc_RetrieveWarehouse_History = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		w.ID,  \n" +
                "        w.Name,  \n" +
                "        w.Description,  \n" +
                "        w.nickname,  \n" +
                "		w.parentWHID,  \n" +
                "        w.isActive,  \n" +
                "        w.isPermanentWH,  \n" +
                "        w.isDepartment,  \n" +
                "        w.refWHID,  \n" +
                "        w.uniqueCartID,  \n" +
                "        w.scanWH,  \n" +
                "        w.scanBin,  \n" +
                "        w.allMovableBin,  \n" +
                "        w.userAccessMode,  \n" +
                "        w.refEqpID,  \n" +
                "        w.domain,  \n" +
                "        w.cartMfr,  \n" +
                "        w.cartMachineName,  \n" +
                "        w.warehouseType,  \n" +
                "        w.isCartOnline,  \n" +
                "		fun_getWarehouseNameByID(w.parentWHID) parentWarehouseName,  \n" +
                "		fun_getWarehouseTypeByKey(w.warehouseType)  AS warehouseTypeValue,  \n" +
                "		(CASE  \n" +
                "			WHEN (w.isActive = 0) THEN 'Inactive'  \n" +
                "			WHEN (w.isActive = 1) THEN 'Active'  \n" +
                "			ELSE ''  \n" +
                "		END) AS isActiveConvertedValue,  \n" +
                "		(CASE  \n" +
                "			WHEN (w.isPermanentWH = 0) THEN 'No'  \n" +
                "			WHEN (w.isPermanentWH = 1) THEN 'Yes'  \n" +
                "			ELSE ''  \n" +
                "		END) AS parentConvertedValue,  \n" +
                "		(CASE  \n" +
                "			WHEN (w.allMovableBin = 0) THEN 'No'  \n" +
                "			WHEN (w.allMovableBin = 1) THEN 'Yes'  \n" +
                "			ELSE ''  \n" +
                "		END) AS allMovableBinConvertValue,  \n" +
                "		(CASE  \n" +
                "			WHEN (`userAccessMode` = 'S') THEN 'Single'  \n" +
                "			WHEN (`userAccessMode` = 'M') THEN 'Multiple'  \n" +
                "			WHEN (`userAccessMode` = 'N/A') THEN 'N/A (Not Applicable)'  \n" +
                "			ELSE ''  \n" +
                "		END) AS `userAccessModeConvertValue`,  \n" +
                "        fun_getUserNameByID(w.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(w.createdBy) createdby,  \n" +
                "		fun_getRoleByID(w.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(w.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(w.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(w.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	FROM	warehousemst_history w  \n" +
                "\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refWHID = '\", pWarehouseID, \"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWarehouse_History,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWarehouse_History,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SELECT 	ID,  \n" +
                "		`Name`,  \n" +
                "		fun_getWarehouseNameByID(parentWHID) parentWHName,  \n" +
                "		NickName,  \n" +
                "		isActive,  \n" +
                "		isPermanentWH  \n" +
                "	FROM 	warehousemst w  \n" +
                "	WHERE 	isDeleted = 0  \n" +
                "			AND ID = pWarehouseID  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveBin_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin_History`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pBinID INT(11),  \n" +
                "	IN pClusterWHID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveBin_History = CONCAT(\"  \n" +
                "		SELECT  	id,  \n" +
                "				NAME,  \n" +
                "				Description,  \n" +
                "				WarehouseID,  \n" +
                "				fun_getWarehouseNameByID(WarehouseID) wareHoueseName,  \n" +
                "				nickname,  \n" +
                "				parentWarehouseID,  \n" +
                "				fun_getWarehouseNameByID(parentWarehouseID) parentWarehouse,  \n" +
                "				isActive,  \n" +
                "				(  \n" +
                "					CASE 	WHEN (isActive= 0) THEN 'Inactive'  \n" +
                "						WHEN (isActive = 1) THEN 'Active'  \n" +
                "						ELSE ''  \n" +
                "					END  \n" +
                "				) AS isActiveConvertedValue,  \n" +
                "				isPermanentBin,  \n" +
                "				(  \n" +
                "					CASE 	WHEN (isPermanentBin = 0) THEN 'Movable'  \n" +
                "						WHEN (isPermanentBin = 1) THEN 'Non-Movable'  \n" +
                "						ELSE ''  \n" +
                "					END  \n" +
                "				) AS isPermanentBinConvertedValue,  \n" +
                "				prefix,  \n" +
                "				suffix,  \n" +
                "				refBinID,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM 	binmst_history  \n" +
                "			where 	1=1  \n" +
                "		\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBinID IS NOT NULL) THEN  \n" +
                "		SET @temp_Sproc_RetrieveBin_History = CONCAT(@temp_Sproc_RetrieveBin_History, \" AND refBinID = '\", pBinID, \"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @temp_Sproc_RetrieveBin_History = CONCAT(@temp_Sproc_RetrieveBin_History, \" AND refBinID in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND IFNULL(isdeleted,0) = 0)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveBin_History,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveBin_History,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "		`Name`,  \n" +
                "		fun_getWarehouseNameByID(WarehouseID) warehouseName,  \n" +
                "		fun_getDepartmentNameByBinID(id) parentWarehouseName,  \n" +
                "		nickname,  \n" +
                "		isActive,  \n" +
                "		isPermanentBin  \n" +
                "	FROM 	binmst  \n" +
                "	WHERE	deletedAt IS NULL  \n" +
                "			AND id = pBinID  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5401,'2.00','V1','Bug 36648: Warehouse History is not showing current information of User who updates details of the Warehouse - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5401:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "ALTER TABLE purchase_order_mst ADD COLUMN isCustConsigned TINYINT DEFAULT 0, ADD COLUMN CustomerID INT(11);  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "ALTER TABLE purchase_order_det ADD COLUMN isLineCustConsigned TINYINT DEFAULT 0, ADD COLUMN lineCustomerID INT(11);  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "ALTER TABLE `purchase_order_mst`  \n" +
                "    ADD INDEX `FK_purchase_order_mst_customerID_idx` (`CustomerID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `purchase_order_mst`  \n" +
                "    ADD CONSTRAINT `FK_purchase_order_mst_customerID`  \n" +
                "        FOREIGN KEY (`CustomerID`)  \n" +
                "        REFERENCES `mfgcodemst` (`id`)  \n" +
                "        ON DELETE NO ACTION  \n" +
                "        ON UPDATE NO ACTION;  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "ALTER TABLE `purchase_order_det`  \n" +
                "    ADD INDEX `FK_purchase_order_det_linecustomerID_idx` (`lineCustomerID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `purchase_order_det`  \n" +
                "    ADD CONSTRAINT `FK_purchase_order_det_linecustomerID`  \n" +
                "        FOREIGN KEY (`lineCustomerID`)  \n" +
                "        REFERENCES `mfgcodemst` (`id`)  \n" +
                "        ON DELETE NO ACTION  \n" +
                "        ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5402,'2.00','V1',' User Story 37431: Purchase Screen changes as per Customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5402:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                vups.poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.partType=4 and a.poWorkingStatus=\"C\" then \"C\" else ifnull(a.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.poWorkingStatus=\"C\" then \"C\" when a.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderElasticSearchDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderElasticSearchDetail`(  \n" +
                "	IN poID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    IF(pRequiredCount) THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "		WHERE pom.isdeleted=0 AND pod.isDeleted = 0 AND pom.id=IFNULL(poID ,pom.id);  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			pod.id,  \n" +
                "			pom.id AS purchaseID,  \n" +
                "			DATE_FORMAT(pom.poDate , \"%m/%d/%y\") poDate,  \n" +
                "			pom.poNumber,  \n" +
                "			pom.poRevision,  \n" +
                "			DATE_FORMAT(pom.soDate , \"%m/%d/%y\") soDate,  \n" +
                "			pom.soNumber,  \n" +
                "			fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "			pom.supplierID,  \n" +
                "			pod.supplierQuoteNumber,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "			pom.termsID,  \n" +
                "			pom.shippingMethodID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "			pom.carrierID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "			pom.carrierAccountNumber,  \n" +
                "			pom.poComment,  \n" +
                "			pod.internalRef,  \n" +
                "			pom.serialNumber,  \n" +
                "			c.PIDCode,  \n" +
                "			c.mfgPN,  \n" +
                "			pod.mfgPartID,  \n" +
                "			CONCAT(emp.firstName,' ',emp.lastName) contactPerson,  \n" +
                "			pom.contactPersonEmpID,  \n" +
                "			fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "			c.mfgcodeID,  \n" +
                "			pod.partDescription,  \n" +
                "			pod.qty,  \n" +
                "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                "			pod.packagingID,  \n" +
                "			fun_getPackagingNameByID(pod.packagingID) packagingName,  \n" +
                "			pom.serialNumber,  \n" +
                "			case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatus        ,  \n" +
                "			pom.cancleReason,  \n" +
                "			case when pom.CancellationConfirmed=1 then 'Yes' else 'No' end CancellationConfirmed,  \n" +
                "			pod.isDeleted,  \n" +
                "			CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "			CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "			pom.customerID,  \n" +
                "			fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) customerName,  \n" +
                "			pod.lineCustomerID,  \n" +
                "			fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, vMfgCodeFormat) lineCustomerName  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "        LEFT JOIN mfgcodemst cm ON cm.id=c.mfgcodeID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN mfgcodemst m ON m.id=pom.customerID  \n" +
                "        LEFT JOIN mfgcodemst mc ON mc.id=pod.lineCustomerID  \n" +
                "		WHERE pom.id=IFNULL(poID ,pom.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(pod.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(pom.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pom.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5403,'2.00','V1',' User Story 37431: Purchase Screen changes as per Customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5403:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Cancellation Confirmed by Supplier',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MPN',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SPN',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Description',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCB Per Array',CAST(OLD.pcbPerArray AS CHAR),  \n" +
                "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Internal Ref#',CAST(OLD.internalRef AS CHAR),  \n" +
                "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Total Release',CAST(OLD.totalRelease AS CHAR),  \n" +
                "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Qty',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Price',CAST(OLD.price AS CHAR),  \n" +
                "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Comment',CAST(OLD.lineComment AS CHAR),  \n" +
                "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Supplier Quote#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
                "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Packaging',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
                "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'RoHS Requirement',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
                "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalLineComment AS CHAR),  \n" +
                "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5404,'2.00','V1',' User Story 37431: Purchase Screen changes as per Customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5404:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_det WHERE deletedAt IS NULL AND lineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');  \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_SaveDuplicatePurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicatePurchaseOrder`(  \n" +
                "		IN pPOID INT,  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewPOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vOldPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vNewPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vmfgPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM purchase_order_mst WHERE id=pPOID;  \n" +
                "			-- insert purchase order header detail  \n" +
                "		INSERT INTO purchase_order_mst(supplierID,poNumber,poDate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,`status`,  \n" +
                "		pocomment,shippingComment,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,serialNumber,poRevision,carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,  \n" +
                "		isBlanketPO,contactPersonEmpID,poWorkingStatus,shippingAddress,isCustConsigned,CustomerID)  \n" +
                "		SELECT supplierID,pPONumber,pPODate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,0,  \n" +
                "		pocomment,shippingComment,0,puserID,puserID,puserRoleID,puserRoleID,pSerialNumber,'00',carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,  \n" +
                "		isBlanketPO,contactPersonEmpID,'P',shippingAddress,isCustConsigned,CustomerID FROM purchase_order_mst WHERE id=pPOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewPOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseOrder AS  \n" +
                "  \n" +
                "				SELECT pod.id,row_number() over (PARTITION BY pod.refPurchaseOrderID) rowNumber,pod.mfgPartID FROM purchase_order_det pod  \n" +
                "					JOIN component c on c.id = pod.mfgPartID and c.partStatus != -3  \n" +
                "					WHERE pod.refPurchaseOrderID=pPOID AND pod.isdeleted=0;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempPurchaseOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old purchase order detail id  \n" +
                "				SELECT id,mfgPartID INTO vOldPurchaseOrderDetID,vmfgPartID FROM tempPurchaseOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new purchase order detail  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,0,puserID,puserID,puserRoleID,puserRoleID,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID FROM purchase_order_det WHERE id=vOldPurchaseOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,pod.mfgPartID,pod.supplierPartID,pod.packagingID,c.mfgPNDescription,pod.pcbPerArray,pod.rohsstatusID,pod.internalRef,pod.salesCommissionTo,pod.totalrelease,pod.qty,pod.price,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=pod.mfgPartID AND im.requiementType='C' AND cid.category='P' AND im.isdeleted=0),pod.category,0,puserID,puserID,puserRoleID,puserRoleID,pod.lineID,pod.supplierQuoteNumber,isLineCustConsigned,lineCustomerID FROM purchase_order_det pod JOIN component c ON c.id=pod.mfgPartID  \n" +
                "			 WHERE pod.id=vOldPurchaseOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewPurchaseOrderDetID;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO purchase_order_line_othercharges(refPurchaseOrderDetID,partID,qty,price,frequency,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			 SELECT  vNewPurchaseOrderDetID,partID,qty,price,frequency,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_othercharges  \n" +
                "			 WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- check for purchase requirement  \n" +
                "			 IF(pisKeepPO=1)THEN  -- keep same requirement of po  \n" +
                "  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID,instruction,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_requirement_det WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID  \n" +
                "			  AND isdeleted=0;  \n" +
                "  \n" +
                "			 ELSE  \n" +
                "			 -- get part requirement from part master  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID, im.requirement,0,puserID,puserID,puserRoleID,puserRoleID  \n" +
                "			  FROM componenet_inspection_requirement_det cid  JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=vmfgPartID AND im.requiementType='R' AND cid.category='P' AND im.isdeleted=0 ;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "				  -- to save shipping details  \n" +
                "				  INSERT INTO purchase_order_line_release_det (refPurchaseOrderDetID,qty,shippingdate,promisedShipDate,releaseNumber,shippingmethodid,shippingAddressID,releaseNotes,additionalNotes,isdeleted,  \n" +
                "		 createdby,updatedby,createByRoleId,updateByRoleId,poLineWorkingStatus)  \n" +
                "  \n" +
                "		SELECT vNewPurchaseOrderDetID,pord.qty,DATE_ADD( pPODate, INTERVAL DATEDIFF(pord.shippingDate, vOldPODate) DAY),DATE_ADD(pPODate, INTERVAL DATEDIFF(pord.promisedShipDate,vOldPODate) DAY),  \n" +
                "		pord.releaseNumber,pord.shippingmethodid,pord.shippingAddressID,pord.releaseNotes,pord.additionalNotes,0,puserID,puserID,puserRoleID,puserRoleID,'P'  \n" +
                "		FROM  \n" +
                "		purchase_order_line_release_det pord  \n" +
                "		WHERE pord.isdeleted=0 AND pord.refPurchaseOrderDetID= vOldPurchaseOrderDetID;  \n" +
                "  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "  \n" +
                "			  SELECT   vNewPOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5405,'2.00','V1',' User Story 37431: Purchase Screen changes as per Customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5405:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentPackagingAliasGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAliasGroup`(  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentPackagingAliasGroup= CONCAT(\"select a.* from (SELECT  \n" +
                "							cpa.id,  \n" +
                "							cpa.componentID,  \n" +
                "							cpa.aliasgroupID,  \n" +
                "							co.id AS partID,  \n" +
                "							co.mfgPN AS mfgPN,  \n" +
                "							co.isCustom AS isCustom,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode, co.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "							co.mfgType,  \n" +
                "							m.id AS mfgCodeID,  \n" +
                "							m.mfgCode AS mfgCode  \n" +
                "						FROM  \n" +
                "							component_packagingalias AS cpa  \n" +
                "								INNER JOIN  \n" +
                "							component AS co ON cpa.aliasgroupID = co.packaginggroupID  \n" +
                "								AND (co.isDeleted = FALSE  \n" +
                "								AND co.id = \",pPartId,\")  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							mfgCodemst AS m ON co.mfgcodeID = m.id  \n" +
                "								AND m.isDeleted = FALSE) as a where a.componentID != \",pPartId);  \n" +
                "  \n" +
                "		PREPARE query1 FROM @temp_Sproc_GetComponentPackagingAliasGroup;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5406,'2.00','V1',' Bug NO 29337/35309 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5406:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "delete from userpagedetail where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.assysalespricematrix');  \n" +
                "delete from userpagedetail where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.approveddisapprovedsupplier');  \n" +
                "delete from help_blog_det where helpBlogId in (select id from help_blog where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.assysalespricematrix'));  \n" +
                "delete from help_blog_det where helpBlogId in (select id from help_blog where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.approveddisapprovedsupplier'));  \n" +
                "delete from help_blog where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.assysalespricematrix');  \n" +
                "delete from help_blog where pageID in (select pageID from page_detail where pageRoute = 'app.component.managedistcomponent.approveddisapprovedsupplier');  \n" +
                "delete from  page_detail where pageRoute = 'app.component.managedistcomponent.assysalespricematrix';  \n" +
                "delete from  page_detail where pageRoute = 'app.component.managedistcomponent.approveddisapprovedsupplier';  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5407,'2.00','V1',' Remove Sales Price/Disapproved Supplier Tab detail from Part - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5407:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP INDEX IDX_UNQ_compo_mfgType_SerialNumber ON component;  \n" +
                "DROP INDEX IDX_UNQ_component_SerialNumber on component;  \n" +
                "CREATE UNIQUE INDEX IDX_UNQ_component_SerialNumber ON component(serialNumber,unqdate);  \n" +                
                "DROP TRIGGER IF EXISTS `Trg_BI_component`; \n" +
                "CREATE TRIGGER `Trg_BI_component` BEFORE INSERT ON `component` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_mfgType varchar(10);  \n" +
                "    IF (select count(1) from component  \n" +
                "		where PIDCode = NEW.PIDCode AND isdeleted=0 AND deletedAt IS NULL)>0 then  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5408,'2.00','V1',' Remove dupplicate uniquekey and trigger update for Component - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5408:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_UK_MANUAL_BI_invalid_mfgmappingmst` ;  \n" +
                "CREATE TRIGGER `TRG_UK_MANUAL_BI_invalid_mfgmappingmst` BEFORE INSERT ON `invalid_mfgmappingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_message VARCHAR(1000);  \n" +
                "  \n" +
                "	IF (SELECT COUNT(1) FROM invalid_mfgmappingmst WHERE refmfgCodeID = NEW.refmfgCodeID AND refmfgAliasID = NEW.refmfgAliasID AND isdeleted = 0) > 0 THEN  \n" +
                "		SET v_message = CONCAT('TRG - Duplicate MFR Mapping found');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = v_message;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5409,'2.00','V1',' New Trigger TRG_UK_MANUAL_BI_invalid_mfgmappingmst-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5409:
                allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentPackagingAliasGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAliasGroup`(  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentPackagingAliasGroup= CONCAT(\"select a.* from (SELECT  \n" +
                "							cpa.id,  \n" +
                "							co.id as componentID,  \n" +
                "							cpa.aliasgroupID,  \n" +
                "							co.id AS partID,  \n" +
                "							co.mfgPN AS mfgPN,  \n" +
                "							co.isCustom AS isCustom,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode, co.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "							co.mfgType,  \n" +
                "							m.id AS mfgCodeID,  \n" +
                "							m.mfgCode AS mfgCode  \n" +
                "						FROM  \n" +
                "							component AS co  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							component_packagingalias  \n" +
                "							 AS cpa ON cpa.componentID = co.id  \n" +
                "								AND (cpa.isDeleted = FALSE )  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							mfgCodemst AS m ON co.mfgcodeID = m.id  \n" +
                "								AND m.isDeleted = FALSE  \n" +
                "							where co.isDeleted = 0 and  \n" +
                "                             cpa.aliasgroupID = (select packaginggroupID from component c where c.id = \",pPartId,\")  \n" +
                "                           and co.id != \",pPartId,\") as a\");  \n" +
                "  \n" +
                "		PREPARE query1 FROM @temp_Sproc_GetComponentPackagingAliasGroup;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5410,'2.00','V1','Bug 37996: Not able to Delete the Added/Existing Packaging Alias records from Part Details - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5410:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                // "ALTER TABLE packing_slip_material_receive ADD COLUMN isCustConsigned TINYINT DEFAULT 0, ADD COLUMN CustomerID INT(11);  \n" +
                // "ALTER TABLE packing_slip_material_receive_det ADD COLUMN isLineCustConsigned TINYINT DEFAULT 0, ADD COLUMN isNonUMIDStock TINYINT DEFAULT 0, ADD COLUMN lineCustomerID INT(11);  \n" +
                // /* **************************** New Script -> 22-10-2021 *********************************** */
                // "ALTER TABLE `packing_slip_material_receive`  \n" +
                // "ADD INDEX `FK_packing_slip_material_receive_customerID_idx` (`CustomerID` ASC) VISIBLE;  \n" +
                // "ALTER TABLE `packing_slip_material_receive`  \n" +
                // "ADD CONSTRAINT `FK_packing_slip_material_receive_customerID`  \n" +
                // "  FOREIGN KEY (`CustomerID`)  \n" +
                // "  REFERENCES `mfgcodemst` (`id`)  \n" +
                // "  ON DELETE NO ACTION  \n" +
                // "  ON UPDATE NO ACTION;  \n" +
                // /* **************************** New Script -> 22-10-2021 *********************************** */
                // "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                // "ADD INDEX `FK_packing_slip_material_receive_det_linecustomerID_idx` (`lineCustomerID` ASC) VISIBLE;  \n" +
                // "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                // "ADD CONSTRAINT `FK_packing_slip_material_receive_det_linecustomerID`  \n" +
                // "  FOREIGN KEY (`lineCustomerID`)  \n" +
                // "  REFERENCES `mfgcodemst` (`id`)  \n" +
                // "  ON DELETE NO ACTION  \n" +
                // "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5411,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5411:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem,  \n" +
                "                p.isLineCustConsigned, p.isNonUMIDStock,  \n" +
                "                CASE WHEN p.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                p.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, vMfgCodeFormat) customerName  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "        LEFT JOIN	mfgcodemst mc  on mc.id = p.LineCustomerID  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5412,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5412:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllPOLineIdForExternalPO`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPOLineIdForExternalPO`(  \n" +
                "	IN pPoNumber VARCHAR(100),  \n" +
                "    IN pPartId INT,  \n" +
                "    IN pRefPOLineID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT psmrd.id,  \n" +
                "			psmrd.refPackingSlipMaterialRecID,  \n" +
                "			psmrd.packingSlipSerialNumber,  \n" +
                "			psmrd.partID,  \n" +
                "			psmrd.packagingID,  \n" +
                "			cpm.name,  \n" +
                "			psmrd.refPOLineID,  \n" +
                "			psmrd.orderedQty,  \n" +
                "			CONCAT('',psmrd.refPOLineID,' (',GROUP_CONCAT(distinct cpm.name),' | ',FLOOR(psmrd.orderedQty),')') AS POLine,  \n" +
                "			COUNT(psmrd.id) AS TotalReleaseLine,  \n" +
                "            psmrd.isLineCustConsigned,  \n" +
                "            psmrd.isNonUMIDStock,  \n" +
                "            psmrd.LineCustomerID as lineCustomerID  \n" +
                "		FROM packing_slip_material_receive_det psmrd  \n" +
                "		JOIN packing_slip_material_receive psmr  \n" +
                "			ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "				AND psmr.isDeleted = 0  \n" +
                "				AND psmr.refPurchaseOrderID IS NULL  \n" +
                "				AND psmr.poNumber = pPoNumber  \n" +
                "		JOIN component_packagingmst cpm  \n" +
                "			ON cpm.id = psmrd.packagingID AND cpm.isdeleted = 0  \n" +
                "		WHERE psmrd.isDeleted = 0 AND psmrd.partID=pPartId  \n" +
                "			AND psmrd.refPOLineID = IFNULL(pRefPOLineID, psmrd.refPOLineID)  \n" +
                "		GROUP BY psmrd.refPOLineID  \n" +
                "		ORDER BY psmrd.refPOLineID ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckLineExistsForExternalPO`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckLineExistsForExternalPO`(  \n" +
                "	IN pPoNumber VARCHAR(100),  \n" +
                "    IN pOrderedQty DECIMAL(18,8),  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = concat(\"SELECT psmrd.id,  \n" +
                "										psmrd.packingSlipSerialNumber,  \n" +
                "										psmrd.partID,  \n" +
                "										psmrd.packagingID,  \n" +
                "										cpm.name,  \n" +
                "										psmrd.refPOLineID,  \n" +
                "										psmrd.orderedQty,  \n" +
                "                                        psmrd.receivedQty,  \n" +
                "                                        psmrd.packingSlipQty,  \n" +
                "                                        GROUP_CONCAT(DISTINCT cpm.name) AS Packaging,  \n" +
                "                                        psmrd.isLineCustConsigned,  \n" +
                "										psmrd.isNonUMIDStock,  \n" +
                "                                        psmrd.LineCustomerID as lineCustomerID  \n" +
                "									FROM  \n" +
                "										packing_slip_material_receive_det psmrd  \n" +
                "											JOIN  \n" +
                "										packing_slip_material_receive psmr ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "											AND psmr.isDeleted = 0  \n" +
                "											AND psmr.poNumber = '\",pPoNumber,\"'  \n" +
                "											JOIN  \n" +
                "										component_packagingmst cpm ON cpm.id = psmrd.packagingID  \n" +
                "											AND cpm.isdeleted = 0  \n" +
                "									WHERE  \n" +
                "										psmrd.isDeleted = 0  \n" +
                "											AND psmrd.orderedQty = '\",pOrderedQty,\"'  \n" +
                "											AND psmrd.partID = '\",pPartId,\"'  \n" +
                "									Group by refPOLineID;\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_getPackingSlipMaterialDetailStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_getPackingSlipMaterialDetailStatus`(  \n" +
                "	pPackingSlipMaterialIDs VARCHAR(16383),  \n" +
                "    pPackingSlipID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	declare vUMIDCount decimal(18,8);  \n" +
                "    declare vRMACount  int;  \n" +
                "  \n" +
                "	select 	count(1)  \n" +
                "	into 	vUMIDCount  \n" +
                "	from 	component_sid_stock css  \n" +
                "	inner join component_sid_stock_packing_detail cssp on css.id = cssp.refComponentSidStockID and cssp.isDeleted = 0  \n" +
                "	inner join packing_slip_material_receive_det psd on cssp.refPackingSlipDetailID = psd.id   and psd.isDeleted = 0  \n" +
                "													and FIND_IN_SET(psd.id, pPackingSlipMaterialIDs)  \n" +
                "where css.isDeleted = 0;  \n" +
                "	SELECT COUNT(id) into vRMACount  \n" +
                "		FROM packing_slip_material_receive_det_stock  \n" +
                "		WHERE FIND_IN_SET(refPackingSlipId, pPackingSlipMaterialIDs)  \n" +
                "			AND isdeleted = 0;  \n" +
                "  \n" +
                "	select 	p.id packingSlipID,		p.packingSlipNumber,	p.packingSlipDate,	p.status packingSlipStatus,  \n" +
                "			i.id invoiceID,			i.invoiceNumber,		i.invoiceDate,		i.status invoiceStatus,  \n" +
                "            vUMIDCount UMIDCount,   vRMACount RMACount  \n" +
                "	from 	packing_slip_material_receive p  \n" +
                "	left join packing_slip_material_receive i on p.refPackingSlipNumberForInvoice = i.id and i.isDeleted = 0  \n" +
                "	where 	p.id = pPackingSlipID and p.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5413,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5413:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=0, LineCustomerID=NULL WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5414,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5414:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_det WHERE deletedAt IS NULL AND lineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND LineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');  \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "    SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgCode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(SUM(psmrd.orderedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0) - IFNULL(SUM(psmrd.packingSlipQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance,  \n" +
                "                CASE WHEN psmr.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "				CASE WHEN psmrd.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN psmrd.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                psmr.CustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrmc.mfgCode, psmrmc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "				psmrd.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrdmc.mfgCode, psmrdmc.mfgName, vMfgCodeFormat) lineCustomerName  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT JOIN mfgcodemst psmrmc ON psmrmc.id=psmr.CustomerID  \n" +
                "        LEFT JOIN mfgcodemst psmrdmc ON psmrdmc.id=psmrd.LineCustomerID  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5415,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    case 5415:
        allDbChangesArray.push(
            /* **************************** New Script -> 25-10-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
            "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
            "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
            "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
            "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE PORLINE_OTY INT;  \n" +
            "	DECLARE vTotalQty INT;  \n" +
            "    DECLARE vPOID INT;  \n" +
            "	DECLARE vMfgCodeFormat INT;  \n" +
            "    DECLARE vOldCustomer VARCHAR(100);  \n" +
            "    DECLARE vNewCustomer VARCHAR(100);  \n" +
            "  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
            "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
            "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
            "  \n" +
            "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	ELSE  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(vPOID IS NOT NULL) THEN  \n" +
            "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
            "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
            "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
            "		(  \n" +
            "			CASE  \n" +
            "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
            "				ELSE NULL  \n" +
            "			END  \n" +
            "		),  \n" +
            "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
            "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'qty');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
            "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
            "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'unitprice');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'unitprice');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
            "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'amount');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
            "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'amount');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'unitprice');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
            "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
            "		CONCAT(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
            "					ELSE 'Line# '  \n" +
            "				END  \n" +
            "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
            "		),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
            "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
            "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
            "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
            "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'NO UMID Stock',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
            "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 25-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5416,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5416:
                allDbChangesArray.push(
                /* **************************** New Script -> 11-10-2021 *********************************** */
                  "alter table workorder_operation add column isRequireRefDesWithUMID tinyint default 0;  \n" +
                 "alter table workorder_operation add column isStrictlyLimitRefDes tinyint default 0;  \n" +	
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5417,'2.00','V1','Add new column isRequireRefDesWithUMID & isStrictlyLimitRefDes in workorder_operation - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5417:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP FUNCTION IF EXISTS fun_setWOHistoryColDisplayName;  \n" +
                  "CREATE FUNCTION `fun_setWOHistoryColDisplayName`(  \n" +
                  " pColName VARCHAR(255)  \n" +
                  ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                  "BEGIN  \n" +
                  "	DECLARE vName VARCHAR(500);  \n" +
                  "	SELECT  \n" +
                  "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Validate Operations'  \n" +
                  "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Build Sub Assembly Within Operations'  \n" +
                  "			 WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Add Personnel'  \n" +
                  "			 WHEN pColName = 'OPSTATUS' THEN 'Operation Status'  \n" +
                  "             WHEN pColName = 'OPVERSION' THEN 'Operation Version'  \n" +
                  "             WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access Tab Limit'  \n" +
                  "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type'  \n" +
                  "             WHEN pColName = 'OPNUMBER' THEN  'Operation#'  \n" +
                  "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Add Equipment'  \n" +
                  "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water Soluble'  \n" +
                  "             WHEN pColName = 'WONUMBER' THEN 'WO#'  \n" +
                  "			 WHEN pColName = 'PARTID' THEN 'Assy ID'  \n" +
                  "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess Qty'  \n" +
                  "             WHEN pColName = 'BUILDQTY' THEN 'Build Qty'  \n" +
                  "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'  \n" +
                  "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO#'  \n" +
                  "             WHEN pColName = 'WOVERSION' THEN 'WO Version'  \n" +
                  "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied'  \n" +
                  "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status'  \n" +
                  "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                  "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                  "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Track Serial Numbers'  \n" +
                  "             WHEN pColName = 'WOSTATUS' THEN 'WO Status'  \n" +
                  "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                  "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark '  \n" +
                  "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark '  \n" +
                  "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location'  \n" +
                  "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Halt Workorder'  \n" +
                  "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO'  \n" +
                  "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                  "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking Required'  \n" +
                  "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly Follow  Rack Validation'  \n" +
                  "             WHEN pColName = 'ADDCLASSIDS' THEN 'Add Standard'  \n" +
                  "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Update Standard'  \n" +
                  "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard'  \n" +
                  "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Remove Standard'  \n" +
                  "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster Name'  \n" +
                  "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster Display Order'  \n" +
                  "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Delete Cluster'  \n" +
                  "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'  \n" +
                  "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'WO Data Field'  \n" +
                  "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Remove Data Field'  \n" +
                  "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Add Oepration To Cluster '  \n" +
                  "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                  "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Remove Operation From Cluster'  \n" +
                  "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Add Opeation Data Field'  \n" +
                  "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation Data Field Disply Order'  \n" +
                  "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Remove Operation Data Field'  \n" +
                  "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Remove Personnel'  \n" +
                  "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Remove Equipment'  \n" +
                  "             WHEN pColName = 'QTY' THEN 'Equipment Qty'  \n" +
                  "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online'  \n" +
                  "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Remove Operation'  \n" +
                  "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location'  \n" +
                  "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty'  \n" +
                  "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No'  \n" +
                  "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code'  \n" +
                  "             WHEN pColName = 'ADDEDSMT' THEN 'Add Supplies Materials & Tools'  \n" +
                  "             WHEN pColName = 'ISSMTDELETED' THEN 'Remove Supplies Materials & Tools'  \n" +
                  "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA'  \n" +
                  "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA'  \n" +
                  "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM'  \n" +
                  "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time) '  \n" +
                  "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Review Co Owner'  \n" +
                  "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response'  \n" +
                  "             WHEN pColName = 'OPNAME' THEN 'Operation Name'  \n" +
                  "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time'  \n" +
                  "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time'  \n" +
                  "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time'  \n" +
                  "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required'  \n" +
                  "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type'  \n" +
                  "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description'  \n" +
                  "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification'  \n" +
                  "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication'  \n" +
                  "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction'  \n" +
                  "             WHEN pColName = 'OPDOES' THEN 'Do'  \n" +
                  "             WHEN pColName = 'OPDONTS' THEN 'Do Not'  \n" +
                  "             WHEN pColName = 'OPORDER' THEN 'Operation Order'  \n" +
                  "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type'  \n" +
                  "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion'  \n" +
                  "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion'  \n" +
                  "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model'  \n" +
                  "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status'  \n" +
                  "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required'  \n" +
                  "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required'  \n" +
                  "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation'  \n" +
                  "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Halt Operation'  \n" +
                  "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation'  \n" +
                  "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion'  \n" +
                  "             WHEN pColName = 'COLORCODE' THEN 'Operation Color'  \n" +
                  "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock'  \n" +
                  "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID'  \n" +
                  "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation'  \n" +
                  "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation'  \n" +
                  "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements'  \n" +
                  "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty'  \n" +
                  "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job'  \n" +
                  "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample'  \n" +
                  "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder Status'  \n" +
                  "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping'  \n" +
                  "             WHEN pColName = 'PARENTWO' THEN 'Parent WO#'  \n" +
                  "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'Invite User'  \n" +
                  "             WHEN pColName = 'KITALLOCATIONREQUIRED' THEN 'Validate UMID with BOM without Kit Allocation'  \n" +
                  "             WHEN pColName = 'FLUXNOTAPPLICABLE' THEN 'Flux type not applicable'  \n" +
                  "             WHEN pColName = 'WATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                  "             WHEN pColName = 'NOCLEAN' THEN 'No-Clean'  \n" +
                  "			 WHEN pColName = 'REFDESIG' THEN 'REF DES'  \n" +
                  "             WHEN pColName = 'ISOPERATIONREFDESIGDELETED' THEN 'Remove REF DES'  \n" +
                  "             WHEN pColName = 'ADDREFDESIG' THEN 'Add RefDes For This Operation'  \n" +
                  "             WHEN pColName = 'REQMACHINEVERIFICATION' THEN 'Require Machine Setup Verification'  \n" +
                  "             WHEN pColName = 'DONOTREQAPPROVALFORSCAN' THEN 'Does not Require Supervisor Approval (Before Use)'  \n" +
                  "             WHEN pColName = 'REQUIEREFDESWITHUMID' THEN 'Require UMID with RefDes'  \n" +
                  "             WHEN pColName = 'STRICTLYREFDES' THEN 'Strictly limit RefDes for operation'  \n" +
                  "             ELSE pColName  \n" +
                  "		END    INTO vName;  \n" +
                  "	RETURN vName;  \n" +
                  "END;  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5418,'2.00','V1','fun_setWOHistoryColDisplayName - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5418:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP FUNCTION IF EXISTS fun_setWOHistoryDescription;  \n" +
                  "CREATE FUNCTION `fun_setWOHistoryDescription`(  \n" +
                  " pColName VARCHAR(255)  \n" +
                  ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                  "BEGIN  \n" +
                  "	DECLARE vName VARCHAR(500);  \n" +
                  "	SELECT  \n" +
                  "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Operation validated or not.'  \n" +
                  "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Sub Assembly Within Operations included or not.'  \n" +
                  "			 WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access tab limit changed.'  \n" +
                  "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type Changed.'  \n" +
                  "             WHEN pColName = 'OPNUMBER' THEN  'Operation# changed.'  \n" +
                  "             WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Personnel Added to work order.'  \n" +
                  "			 WHEN pColName = 'OPSTATUS' THEN 'Status of Operation in work order changed.'  \n" +
                  "             WHEN pColName = 'OPVERSION' THEN 'Operation Version changed.'  \n" +
                  "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Equipment added Operation/Work order.'  \n" +
                  "             WHEN pColName = 'WONUMBER' THEN 'WO# Changed.'  \n" +
                  "			 WHEN pColName = 'PARTID' THEN 'Assy ID changed.'  \n" +
                  "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess qty changed.'  \n" +
                  "             WHEN pColName = 'BUILDQTY' THEN 'Build qty changed.'  \n" +
                  "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'  \n" +
                  "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO# '  \n" +
                  "             WHEN pColName = 'WOVERSION' THEN 'WO Version changed.'  \n" +
                  "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied to work order.'  \n" +
                  "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status changed.'  \n" +
                  "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                  "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                  "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Tracking By serial numbers.'  \n" +
                  "             WHEN pColName = 'WOSTATUS' THEN 'WO status changed.'  \n" +
                  "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                  "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark changed.'  \n" +
                  "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark changed.'  \n" +
                  "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location changed.'  \n" +
                  "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Hold the Workorder.'  \n" +
                  "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO .'  \n" +
                  "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                  "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking required.'  \n" +
                  "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly follow rack validation.'  \n" +
                  "             WHEN pColName = 'ADDCLASSIDS' THEN 'Added Standard to work order.'  \n" +
                  "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Standard changed in work order.'  \n" +
                  "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard to work order.'  \n" +
                  "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Standard removed from work order.'  \n" +
                  "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster name changed.'  \n" +
                  "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster display order changed.'  \n" +
                  "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Cluster deleted from work order.'  \n" +
                  "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'  \n" +
                  "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'Added Work order data field.'  \n" +
                  "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Work order data field removed.'  \n" +
                  "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Oepration added to cluster.'  \n" +
                  "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                  "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Operation removed from cluster.'  \n" +
                  "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Added opeation data field.'  \n" +
                  "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation data field disply order.'  \n" +
                  "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Removed Operation data field.'  \n" +
                  "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Personnel removed from work order/operation.'  \n" +
                  "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Equipment removed from  operation.'  \n" +
                  "             WHEN pColName = 'QTY' THEN 'Equipment Qty changed.'  \n" +
                  "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online/Offline.'  \n" +
                  "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Removed Operation from work order'  \n" +
                  "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location in equipment changed.'  \n" +
                  "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty changed.'  \n" +
                  "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No genereated.'  \n" +
                  "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code.'  \n" +
                  "             WHEN pColName = 'ADDEDSMT' THEN 'Added Supplies Materials & Tools to  Operation.'  \n" +
                  "             WHEN pColName = 'ISSMTDELETED' THEN 'Removed Supplies Materials & Tools from Operation.'  \n" +
                  "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA changed.'  \n" +
                  "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA changed.'  \n" +
                  "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM changed.'  \n" +
                  "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time).'  \n" +
                  "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Added Co Owner for review. '  \n" +
                  "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response (Mandatory / Optional)'  \n" +
                  "             WHEN pColName = 'OPNAME' THEN 'Operation name changed.'  \n" +
                  "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time changed.'  \n" +
                  "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time changed.'  \n" +
                  "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time changed.'  \n" +
                  "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required changed.'  \n" +
                  "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type changed.'  \n" +
                  "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description changed.'  \n" +
                  "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification changed.'  \n" +
                  "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication changed.'  \n" +
                  "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction changed.'  \n" +
                  "             WHEN pColName = 'OPDOES' THEN 'Do changed.'  \n" +
                  "             WHEN pColName = 'OPDONTS' THEN 'Do Not changed.'  \n" +
                  "             WHEN pColName = 'OPORDER' THEN 'Operation Order changed.'  \n" +
                  "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type changed.'  \n" +
                  "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion changed.'  \n" +
                  "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion changed.'  \n" +
                  "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model changed.'  \n" +
                  "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status changed.'  \n" +
                  "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required changed.'  \n" +
                  "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required changed.'  \n" +
                  "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation changed.'  \n" +
                  "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Operation halt.'  \n" +
                  "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation changed.'  \n" +
                  "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion changed.'  \n" +
                  "             WHEN pColName = 'COLORCODE' THEN 'Operation Color changed.'  \n" +
                  "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock changed.'  \n" +
                  "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID changed.'  \n" +
                  "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation changed.'  \n" +
                  "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation changed.'  \n" +
                  "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements changed.'  \n" +
                  "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty changed.'  \n" +
                  "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job changed.'  \n" +
                  "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample changed.'  \n" +
                  "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder status changed'  \n" +
                  "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping changed.'  \n" +
                  "             WHEN pColName = 'PARENTWO' THEN 'Added Parent Work order.'  \n" +
                  "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'User invited for review.'  \n" +
                  "             WHEN pColName = 'KITALLOCATIONREQUIRED' THEN 'Validate UMID with BOM without Kit Allocation changed.'  \n" +
                  "             WHEN pColName = 'FLUXNOTAPPLICABLE' THEN 'Flux type not applicable'  \n" +
                  "             WHEN pColName = 'WATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                  "             WHEN pColName = 'NOCLEAN' THEN 'No-Clean'  \n" +
                  "             WHEN pColName = 'REFDESIG' THEN 'RefDes'  \n" +
                  "             WHEN pColName = 'ISOPERATIONREFDESIGDELETED' THEN 'Removed RefDes'  \n" +
                  "             WHEN pColName = 'ADDREFDESIG' THEN 'Added RefDes in Operation.'  \n" +
                  "             WHEN pColName = 'REQMACHINEVERIFICATION' THEN 'Require Machine Setup Verification changed.'  \n" +
                  "             WHEN pColName = 'DONOTREQAPPROVALFORSCAN' THEN 'Does not Require Supervisor Approval (Before Use) changed.'  \n" +
                  "			 WHEN pColName = 'REQUIEREFDESWITHUMID' THEN 'Set required UMID with RefDes'  \n" +
                  "             WHEN pColName = 'STRICTLYREFDES' THEN 'Strictly limit RefDes for operation'  \n" +
                  "             ELSE pColName  \n" +
                  "		END    INTO vName;  \n" +
                  "	RETURN vName;  \n" +
                  "END;  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5419,'2.00','V1','fun_setWOHistoryDescription - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5419:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP FUNCTION IF EXISTS fun_ValidateRefDesAgainstOperation;  \n" +
                  "CREATE FUNCTION `fun_ValidateRefDesAgainstOperation`(  \n" +
                  "		pAllowedRefDestList TEXT,  \n" +
                  "        pEnteredRefDes TEXT  \n" +
                  ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                  "BEGIN  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                  "    DECLARE startPos, endPos, maxLength INT ;  \n" +
                  "	DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                  "    DECLARE itemRefDesg varchar(500);  \n" +
                  "    SET startPos = 1;  \n" +
                  "	SET maxLength = Length(pAllowedRefDestList);  \n" +
                  "    IF pAllowedRefDestList IS NOT NULL THEN  \n" +
                  "		REPEAT  \n" +
                  "			SET endPos = LOCATE(',',pEnteredRefDes,startPos);  \n" +
                  "			IF endPos = 0 THEN  \n" +
                  "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos);  \n" +
                  "			ELSE  \n" +
                  "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos,endPos-startPos);  \n" +
                  "			END IF;  \n" +
                  "			IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                  "				IF(INSTR(pAllowedRefDestList,itemRefDesg) = 0) THEN  \n" +
                  "					SET vInvalidCount = vInvalidCount +1 ;  \n" +
                  "					/*IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                  "						SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                  "					 ELSE  \n" +
                  "						SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                  "					 END IF;  */  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "			IF endPos = 0  AND startPos > 0 THEN  \n" +
                  "				SET startPos = maxLength;  \n" +
                  "			ELSE  \n" +
                  "				SET startPos = endPos + 1;  \n" +
                  "			END IF;  \n" +
                  "		UNTIL startPos >=  maxLength END REPEAT;  \n" +
                  "	END IF;  \n" +
                  "    IF vInvalidCount > 0 THEN  \n" +
                  "		SET result = fun_checkAndInsertError('UMID052', 0, 1, 0, 0, 0, pEnteredRefDes , pAllowedRefDestList, NULL);  \n" +
                  "    ELSE  \n" +
                  "		SET result = 1;  \n" +
                  "    END IF;  \n" +
                  "  \n" +
                  "	RETURN result;  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5420,'2.00','V1','fun_ValidateRefDesAgainstOperation - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5420:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_GetRFQLineItemsByIDWithSubAssembly;  \n" +
                  "CREATE PROCEDURE `Sproc_GetRFQLineItemsByIDWithSubAssembly`(  \n" +
                  "	IN ppageIndex INT,  \n" +
                  "	IN precordPerPage INT,  \n" +
                  "	IN ppartID INT  \n" +
                  ")  \n" +
                  "BEGIN  \n" +
                  "	DECLARE vMfgCodeFormat INT;  \n" +
                  "    DECLARE pOffset INT;  \n" +
                  "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                  "  \n" +
                  "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                  "  \n" +
                  "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                  "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                  "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                  "	ELSE  \n" +
                  "		SET rowNumWhere = NULL;  \n" +
                  "	END IF;  \n" +
                  "    SET @SQLStatement1 = concat(\"SELECT 	a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                  "			a.customerRev custPNRev,  \n" +
                  "			a.refDesig ,  \n" +
                  "            a.dnpQty,  \n" +
                  "            a.dnpDesig,  \n" +
                  "            a.isInstall,  \n" +
                  "			rla.mfgPNID linePartId,  \n" +
                  "			co.PIDCode,  \n" +
                  "			co.mfgPN,  \n" +
                  "			rohs.name AS rohsName,  \n" +
                  "			rohs.rohsIcon,  \n" +
                  "            co.mfgcodeID,  \n" +
                  "            partMfg.mfgName  \n" +
                  "			-- fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName  \n" +
                  "	FROM rfq_lineitems a  \n" +
                  "    LEFT JOIN rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = a.id and rla.isDeleted = 0  \n" +
                  "	LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                  "    LEFT JOIN component co  ON co.id = rla.mfgPNID and co.isDeleted = 0  \n" +
                  "    LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                  "    LEFT JOIN mfgcodemst partMfg ON partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                  "	WHERE a.isDeleted = 0  \n" +
                  "    AND a.partID in (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = \", ppartID, \" AND isDeleted = 0)  \n" +
                  "     \");  \n" +
                  "     IF rowNumWhere IS NOT NULL THEN  \n" +
                  "		SET @SQLStatement1 = CONCAT(@SQLStatement1, rowNumWhere);  \n" +
                  "     END IF;  \n" +
                  "	PREPARE query1 FROM @SQLStatement1;  \n" +
                  "	EXECUTE query1;  \n" +
                  "	DEALLOCATE PREPARE query1;  \n" +
                  "  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5421,'2.00','V1','Sproc_GetRFQLineItemsByIDWithSubAssembly - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5421:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_RetrieveWorkorderOperation;  \n" +
                  "CREATE PROCEDURE `Sproc_RetrieveWorkorderOperation`(  \n" +
                  "	IN pWOID INT(11),  \n" +
                  "	IN ppageIndex INT(11),  \n" +
                  "	IN precordPerPage INT(11),  \n" +
                  "	IN pOrderBy VARCHAR(255),  \n" +
                  "	IN pWhereClause VARCHAR(16383)  \n" +
                  "	)  \n" +
                  "BEGIN  \n" +
                  "		DECLARE pOffset INT(11);  \n" +
                  "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                  "		SET @temp_Sproc_RetrieveWorkorderOperation = CONCAT(\"  \n" +
                  "			SELECT woop.woOPID, woop.opID, woop.opName, woop.opNumber,  \n" +
                  "            fun_getOperationNameByWOOPID(woop.woOPID) opFullName,  \n" +
                  "			woop.opVersion,woop.isStopOperation,woop.isTerminated,  \n" +
                  "			woop.opStatus, woop.colorCode, woop.tabLimitAtTraveler,  \n" +
                  "			woop.qtyControl, woop.isTeamOperation, woop.isIssueQty,  \n" +
                  "			woop.isRework, woop.isMoveToStock, woop.isTrackBySerialNo,  \n" +
                  "			woop.isAllowFinalSerialMapping, woop.isLoopOperation,  \n" +
                  "			woop.isPreProgrammingComponent,  \n" +
                  "            (CASE WHEN woop.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                  "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'WS'  \n" +
                  "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'NC'  \n" +
                  "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NA'  END) fluxType,  \n" +
                  "            woop.isPlacementTracking,  \n" +
                  "			woop.isAllowMissingPartQty  , woop.isAllowBypassQty ,  \n" +
                  "			woop.isEnablePreProgrammingPart ,  \n" +
                  "            woop.isRequireMachineVerification,  \n" +
                  "            woop.doNotReqApprovalForScan,  \n" +
                  "            woop.addRefDesig,  \n" +
                  "            woop.isRequireRefDesWithUMID,  \n" +
                  "            woop.isStrictlyLimitRefDes,  \n" +
                  "			fun_getOperationNameByWOOPID(woop.refLoopWOOPID) loopToOperationName,  \n" +
                  "			fun_getGenericCategoryNameByID(woop.operationTypeID) operationType,  \n" +
                  "			fun_getMountingTypeNameByID(woop.mountingTypeId) mountingType,  \n" +
                  "			(CASE WHEN (`woop`.`qtyControl` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `qtyControlConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isIssueQty` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `isIssueQtyConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isTeamOperation` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `isTeamOperationConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isRework` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `isReworkConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isMoveToStock` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isTrackBySerialNo` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isTrackBySerialNoConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isAllowFinalSerialMapping` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isAllowFinalSerialMapping` = 1) THEN 'Yes' ELSE '' END) AS `isAllowFinalSerialMappingConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isLoopOperation` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isLoopOperation` = 1) THEN 'Yes' ELSE '' END) AS `isLoopOperationConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isPlacementTracking` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isPlacementTracking` = 1) THEN 'Yes' ELSE '' END) AS `isPlacementTrackingConvertedValue`,  \n" +
                  "			(CASE WHEN woop.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                  "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                  "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                  "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'END ) fluxTypeConvertedValue,  \n" +
                  "			(CASE WHEN (`woop`.`isPreProgrammingComponent` = 0) THEN 'No'  \n" +
                  "			WHEN (`woop`.`isPreProgrammingComponent` = 1) THEN 'Yes' ELSE '' END) AS `isPreProgrammingComponentConvertedValue`,  \n" +
                  "			fun_getOpStatusNameByID(woop.opStatus) AS `opStatusConvertedValue`  ,  \n" +
                  "			(CASE WHEN (`woop`.`isAllowMissingPartQty` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`isAllowMissingPartQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowMissingPartQtyConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isAllowBypassQty` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`isAllowBypassQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowBypassQtyConvertedValue` ,  \n" +
                  "			(CASE WHEN (`woop`.`isEnablePreProgrammingPart` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`isEnablePreProgrammingPart` = 1) THEN 'Yes' ELSE '' END) AS `isEnablePreProgrammingPartConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`addRefDesig` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`addRefDesig` = 1) THEN 'Yes' ELSE '' END) AS `addRefDesigConvertedValue`  ,  \n" +
                  "			(CASE WHEN (`woop`.`isRequireMachineVerification` = 'NA') THEN 'N/A'  \n" +
                  "				WHEN (`woop`.`isRequireMachineVerification` = 'NO') THEN 'No'  \n" +
                  "                WHEN (`woop`.`isRequireMachineVerification` = 'YES') THEN 'Yes' ELSE '' END) AS `isRequireMachineVerificationConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`doNotReqApprovalForScan` = 'NA') THEN 'N/A'  \n" +
                  "				WHEN (`woop`.`doNotReqApprovalForScan` = 'NO') THEN 'No'  \n" +
                  "                WHEN (`woop`.`doNotReqApprovalForScan` = 'YES') THEN 'Yes' ELSE '' END) AS `doNotReqApprovalForScanConvertedValue`  ,  \n" +
                  "			(CASE WHEN (`woop`.`isRequireRefDesWithUMID` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`isRequireRefDesWithUMID` = 1) THEN 'Yes' ELSE '' END) AS `isRequireRefDesWithUMIDConvertedValue`,  \n" +
                  "			(CASE WHEN (`woop`.`isStrictlyLimitRefDes` = 0) THEN 'No'  \n" +
                  "				WHEN (`woop`.`isStrictlyLimitRefDes` = 1) THEN 'Yes' ELSE '' END) AS `isStrictlyLimitRefDesConvertedValue`  \n" +
                  "			FROM `workorder_operation` woop  \n" +
                  "			WHERE woop.`deletedAt` IS NULL and woop.woID=\",pWOID);  \n" +
                  "  \n" +
                  "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                  "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"opNumber ASC\") ;  \n" +
                  "		ELSE  \n" +
                  "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                  "		END IF;  \n" +
                  "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                  "			SET pWhereClause = '1=1' ;  \n" +
                  "		END IF;  \n" +
                  "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                  "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                  "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                  "		ELSE  \n" +
                  "			SET rowNumWhere = '';  \n" +
                  "		END IF;  \n" +
                  "		/* to get total count of rows */  \n" +
                  "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                  "		PREPARE query2 FROM @SQLStatement2;  \n" +
                  "		EXECUTE query2;  \n" +
                  "		DEALLOCATE PREPARE query2;  \n" +
                  "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                  "  \n" +
                  "		PREPARE query1 FROM @SQLStatement2;  \n" +
                  "		EXECUTE query1;  \n" +
                  "		DEALLOCATE PREPARE query1;  \n" +
                  "  \n" +
                  "        set @SQLStatement2 = CONCAT(\"select woOPID,refDesig From workorder_operation_refdesig wor Where wor.woID = \",pWOID,\" and wor.isDeleted = 0\");  \n" +
                  "		PREPARE query1 FROM @SQLStatement2;  \n" +
                  "        EXECUTE query1;  \n" +
                  "        DEALLOCATE PREPARE query1;  \n" +
                  "    END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5422,'2.00','V1','Sproc_RetrieveWorkorderOperation - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5422:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_ValidateScanFeederFirst;  \n" +
                  "CREATE PROCEDURE `Sproc_ValidateScanFeederFirst`(  \n" +
                  "	IN pfeederLocation VARCHAR(1000),  \n" +
                  "	IN pUMID VARCHAR(15),  \n" +
                  "	IN ppartID INT,  \n" +
                  "	IN pwoOpEqpID INT,  \n" +
                  "	IN pwoOpID INT,  \n" +
                  "	IN pwoTransID INT,  \n" +
                  "	IN pemployeeId INT,  \n" +
                  "	IN pcheckKitAllocation INT,  \n" +
                  "	IN pverificationType VARCHAR(255),  \n" +
                  "	IN pisVerify INT,  \n" +
                  "	IN ptransactionType VARCHAR(1),  \n" +
                  "	IN pisChangeReel INT,  \n" +
                  "	IN preelChangeType VARCHAR(100),  \n" +
                  "	IN ptoBinID INT,  \n" +
                  "	IN pOldUMID VARCHAR(15),  \n" +
                  "	IN pisConfirmed INT,  \n" +
                  "	IN pwoID INT,  \n" +
                  "	IN pCreatedBy VARCHAR(255),  \n" +
                  "    IN pApprovedBy INT,  \n" +
                  "    IN pApprovedReason VARCHAR(500)  \n" +
                  ")  \n" +
                  "BEGIN  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                  "	DECLARE temp_comp_id INT;  \n" +
                  "	DECLARE temp_comp_uom INT;  \n" +
                  "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                  "	DECLARE temp_lineID VARCHAR(100);  \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                  "	DECLARE temp_eqpFeederID INT;  \n" +
                  "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                  "	DECLARE feederVerified INT DEFAULT 0;  \n" +
                  "	DECLARE temp_umid_comp_id INT;  \n" +
                  "	DECLARE temp_umid_pkgQty INT;  \n" +
                  "	DECLARE temp_umid_stock_id INT;  \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_package_id INT;  \n" +
                  "	DECLARE temp_old_umid_comp_id INT;  \n" +
                  "	DECLARE temp_old_umid_stock_id INT;  \n" +
                  "	DECLARE temp_old_umid_pkgQty INT;  \n" +
                  "	DECLARE temp_old_umid_pkgUnit INT;  \n" +
                  "	DECLARE temp_old_umid_pkgUOM INT;  \n" +
                  "	DECLARE temp_eqp_wh_id INT;  \n" +
                  "	DECLARE temp_eqp_bin_id INT;  \n" +
                  "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                  "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
                  "	DECLARE flag_isFeederTransExists INT  DEFAULT 0;  \n" +
                  "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
                  "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
                  "	DECLARE flag_tempVerificationApproval VARCHAR(5)  DEFAULT 'V';  \n" +
                  "	DECLARE temp_json_object VARCHAR(100);  \n" +
                  "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
                  "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                  "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                  "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                  "    DECLARE temp_entered_refDes TEXT;  \n" +
                  "  \n" +
                  "	SET temp_eqp_wh_id = NULL;  \n" +
                  "	SET temp_eqp_bin_id = NULL;  \n" +
                  "	SET temp_eqp_wh_name = NULL;  \n" +
                  "	SET temp_all_mfg_id_lineID = NULL;  \n" +
                  "  \n" +
                  "  \n" +
                  "	-- create temporary table for error  \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                  "		CREATE TEMPORARY TABLE temp_scan_error  \n" +
                  "		(  \n" +
                  "			 errorText VARCHAR(2000),  \n" +
                  "			 isFeederError INT,  \n" +
                  "			 isUMIDError INT,  \n" +
                  "			 isConfirmation INT,  \n" +
                  "			 isMessage INT,  \n" +
                  "			 isInformation INT,  \n" +
                  "			 stringText1 VARCHAR(1000),  \n" +
                  "			 stringText2 VARCHAR(1000),  \n" +
                  "			 stringText3 VARCHAR(1000)  \n" +
                  "		);  \n" +
                  "  \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                  "  \n" +
                  "		select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                  "        INTO flag_tempVerificationApproval;  \n" +
                  "  \n" +
                  "		SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                  "		FROM workorder wo  \n" +
                  "		WHERE wo.woID = pwoID  \n" +
                  "		AND wo.isDeleted = 0;  \n" +
                  "  \n" +
                  "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                  "		FROM workorder_operation_refdesig  \n" +
                  "		WHERE woID = pwoID  \n" +
                  "		AND woOPID = pwoOpID  \n" +
                  "		AND isDeleted = 0;  \n" +
                  "  \n" +
                  "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                  "		FROM workorder_operation  \n" +
                  "		WHERE woID = pwoID  \n" +
                  "		AND woOPID = pwoOpID  \n" +
                  "		AND isDeleted = 0 ;  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                  "	IF ((fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, pisChangeReel) > 0)) THEN  \n" +
                  "		SELECT id, rfqLineItemsID, partID, eqpFeederID, lineID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                  "		INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_eqpFeederID, temp_lineID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn ,  temp_entered_refDes  \n" +
                  "		FROM temp_feeder_details;  \n" +
                  "		-- removed due to allow verification multiple times  \n" +
                  "		-- IF(pisChangeReel <> 1 AND pisVerify = 1) THEN  \n" +
                  "		-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                  "		-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                  "		-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                  "		-- 			-- FAILED  \n" +
                  "		-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "		-- 		END IF;  \n" +
                  "		-- 	END IF;  \n" +
                  "		-- ELSE  \n" +
                  "			IF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                  "				AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes) = 0) THEN  \n" +
                  "                SET result = 0;  \n" +
                  "			ELSEIF (pUMID IS NOT NULL) THEN  \n" +
                  "				-- select concat('select fun_checkUMIDScan(',pUMID,',',ppartID,',',pwoTransID,',',pwoOpID,',',pemployeeId,',',pcheckKitAllocation,',','',',','',',',ptransactionType,',','1',',',pisVerify,',',pwoOpEqpID,',',pfeederLocation,',',pCreatedBy,')');  \n" +
                  "				IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                  "					SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                  "				ELSE  \n" +
                  "					SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                  "				END IF;  \n" +
                  "				IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                  "					SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                  "					-- , refSalesOrderDetID  \n" +
                  "					INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                  "					-- , temp_salesorderdetID  \n" +
                  "					FROM temp_umid_details;  \n" +
                  "					#check umid id pid is allocated to same line id in bill of material  \n" +
                  "					#yes - check for kit allocation of UMID  \n" +
                  "					#no - Suggest location for scan UMID  \n" +
                  "					-- select concat('select fun_checkKitAllocation(',IFNULL(pUMID,0),',',IFNULL(pwoID,0),',',IFNULL(pwoOPID,0),',',IFNULL(pwoTransID,0),',',IFNULL(temp_eqpFeederID,0),',',IFNULL(temp_umid_comp_id,0),',',IFNULL(temp_umid_package_id,0),',',IFNULL(pcheckKitAllocation,0),',',IFNULL(pisConfirmed,0),'1',','')');  \n" +
                  "  \n" +
                  "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                  "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                  "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                  "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                  "							-- ALLOCATED  \n" +
                  "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "					ELSE  \n" +
                  "						#in case validate UMID without Kit set true at WO  \n" +
                  "                        #select 'Line 134',flag_kit_allocation_not_required_wo ;  \n" +
                  "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                  "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                  "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                  "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                  "									-- WRONG_LOCATION  \n" +
                  "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "                               ELSE  \n" +
                  "									SET temp_continue = 1;  \n" +
                  "                               END IF;  \n" +
                  "						ELSEIF (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                  "							SET temp_continue = 1;  \n" +
                  "                        ELSE  \n" +
                  "							SET temp_continue = 0;  \n" +
                  "                        END IF;  \n" +
                  "                       # select 'Line 142',temp_continue, pisVerify , pfeederLocation,temp_eqp_wh_id ;  \n" +
                  "                        IF temp_continue = 1 THEN  \n" +
                  "							#check part belongs to multiple line  \n" +
                  "							#yes - check for umid and feeder component must be same  \n" +
                  "							#no - check for restrict part  \n" +
                  "							#no - allow to scan details  \n" +
                  "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                  "								-- INVALID  \n" +
                  "								SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "							-- fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID)  \n" +
                  "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                  "								SET result = 0;  \n" +
                  "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                  "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "							ELSE  \n" +
                  "								# if feeder details and umid details are valid than give umid qty details on screen  \n" +
                  "								# insert transaction details for fedder first and umid validate details in  workorder_trans_umid_details  \n" +
                  "								-- verify flag  \n" +
                  "								IF (pisVerify <> 1) THEN  \n" +
                  "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                  "									IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                  "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                  "										SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                  "										WHERE refEqpID IN (  \n" +
                  "											SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                  "											WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                  "										) AND whmst.deletedAt IS NULL;  \n" +
                  "  \n" +
                  "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                  "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                  "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                  "										END IF;  \n" +
                  "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                  "  \n" +
                  "                                   --     select flag_tempVerificationApproval , pisConfirmed ;  \n" +
                  "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                  "												-- Take confirmation  \n" +
                  "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                  "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                  "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                  "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                  "													AND refsidid = temp_umid_stock_id  \n" +
                  "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                  "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                  "													AND woOPID = pwoOpID;  \n" +
                  "  \n" +
                  "												IF(temp_feeder_transID > 0) THEN  \n" +
                  "													-- FAILED  \n" +
                  "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "												ELSE  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL, NULL,  \n" +
                  "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "														0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "													INSERT INTO workorder_trans_umid_details  \n" +
                  "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                  "                                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "													VALUES  \n" +
                  "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                  "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "													-- VERIFIED  \n" +
                  "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "													SET valid_umid_transfer = 1;  \n" +
                  "												END IF;  \n" +
                  "											ELSEIF(flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN   -- verification required  \n" +
                  "												-- transfer umid to bin  \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "													pCreatedBy, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL, NULL,  \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "													0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "												-- add umid transaction details  \n" +
                  "												INSERT INTO workorder_trans_umid_details  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                  "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "												VALUES  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                  "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "												SET valid_umid_transfer = 1;  \n" +
                  "											END IF;  \n" +
                  "										ELSE  \n" +
                  "											-- WRONG_LOCATION  \n" +
                  "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "										END IF;  \n" +
                  "									ELSE  \n" +
                  "										SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									SET uidVerified = 1;  \n" +
                  "								ELSE  \n" +
                  "									-- If change reel and old umid details  \n" +
                  "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                  "										-- get component details based on old umid  \n" +
                  "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                  "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                  "											FROM component_sid_stock css  \n" +
                  "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                  "  \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                  "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                  "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                  "											AND woOPID = pwoOpID;  \n" +
                  "  \n" +
                  "									-- If not change reel than check for reel transaction is done or not  \n" +
                  "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                  "											AND wtud.refsidid = temp_umid_stock_id  \n" +
                  "												AND wtud.mfgPNID=temp_umid_comp_id  \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                  "											AND wtud.woOPID = pwoOpID;  \n" +
                  "											-- AND isVerified=0;  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									-- if not change reel than update verify flag for verfiy true  \n" +
                  "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                  "										UPDATE workorder_trans_umid_details  \n" +
                  "										SET isVerified=1,  \n" +
                  "										verifiedBy=pemployeeId,  \n" +
                  "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                  "										WHERE id=temp_feeder_transID;  \n" +
                  "  \n" +
                  "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                  "  \n" +
                  "										-- VERIFIED  \n" +
                  "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "										SET uidVerified = 1;  \n" +
                  "  \n" +
                  "									-- if change reel than update verify flag for verfiy true  \n" +
                  "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                  "										IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                  "											( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                  "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                  "											WHERE whmst.refEqpID IN (  \n" +
                  "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                  "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                  "											) AND whmst.deletedAt IS NULL;  \n" +
                  "  \n" +
                  "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                  "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                  "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                  "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                  "											END IF;  \n" +
                  "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                  "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                  "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                  "														-- Added for multiple kit  \n" +
                  "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                  "														(SELECT id FROM kit_allocation ka  \n" +
                  "															WHERE ka.refSalesOrderDetID IN  \n" +
                  "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                  "																FROM workorder_salesorder_details wsd  \n" +
                  "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                  "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                  "														',\\\"returnQty\\\":',0,  \n" +
                  "														',\\\"returnUnit\\\":',0,  \n" +
                  "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                  "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                  "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, 0,  \n" +
                  "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType)  \n" +
                  "														,pwoTransID,  \n" +
                  "														1,NULL,NULL,NULL,NULL);  \n" +
                  "												ELSE  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL, NULL,  \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                  "														0,NULL,NULL,NULL,NULL);  \n" +
                  "												END IF;  \n" +
                  "												SET valid_umid_transfer = 1;  \n" +
                  "  \n" +
                  "												-- update old record toumid  \n" +
                  "												UPDATE workorder_trans_umid_details  \n" +
                  "												SET toRefUIDId=temp_umid_stock_id  \n" +
                  "												WHERE id=temp_feeder_transID;  \n" +
                  "  \n" +
                  "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                  "  \n" +
                  "												-- transfer umid to bin  \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "													pCreatedBy, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL, NULL,  \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "													0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "												-- SELECT pwoTransID;  \n" +
                  "												-- insert new umid for workorder equipment feeder  \n" +
                  "												INSERT INTO workorder_trans_umid_details  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                  "												VALUES  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "												-- UMID SCANNED  \n" +
                  "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "											ELSE  \n" +
                  "												-- WRONG_LOCATION  \n" +
                  "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "											END IF;  \n" +
                  "										ELSE  \n" +
                  "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "										END IF;  \n" +
                  "									ELSE  \n" +
                  "										-- FAILED  \n" +
                  "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "									END IF;  \n" +
                  "								END IF;  \n" +
                  "							END IF;  \n" +
                  "						END IF;  \n" +
                  "  \n" +
                  "                    END IF;  \n" +
                  "				END IF;  \n" +
                  "				-- SELECT IFNULL(COUNT(1),0) FROM kit_allocation WHERE uid = pUMID AND assyID=ppartID AND refBOMLineID IN (SELECT rfqLineItemsID FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID))) > 0  \n" +
                  "			ELSE  \n" +
                  "				# if feeder details are valid than give PID Details on screen  \n" +
                  "				SET feederVerified = 1;  \n" +
                  "				-- SELECT * FROM temp_feeder_details;  \n" +
                  "			END IF;  \n" +
                  "		-- END IF;     -- removed due to allow verification multiple times  \n" +
                  "	END IF;  \n" +
                  "	INSERT INTO `uid_verification_history`(  \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                  "	VALUES (  \n" +
                  "		pfeederLocation, 					CASE WHEN (pUMID IS NULL) THEN '' ELSE pUMID END, 	temp_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_comp_id),		temp_mfgpn, 						temp_umid_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),	temp_umid_mfgPN,					CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                  "		0,							IFNULL(pCreatedBy,''),					fun_DatetimetoUTCDateTime(),  \n" +
                  "		pwoTransID, 						pwoOpEqpID,						pverificationType  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	#1. return history of umid transfer  \n" +
                  "	IF(valid_umid_transfer = 0) THEN  \n" +
                  "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	#2. return history of verification  \n" +
                  "        SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                  "  \n" +
                  "        #3. return error  \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                  "  \n" +
                  "	#4. return umid details  \n" +
                  "	-- IF (uidVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_umid_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#5. return feeder details  \n" +
                  "	-- IF (feederVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                  "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_feeder_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#6. return allocated UMID details  \n" +
                  "	IF (pOldUMID IS NULL AND feederVerified=1) THEN  \n" +
                  "		-- select '1';  \n" +
                  "		SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                  "		WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
                  "		/*IF (temp_comp_is_cpn = 0) THEN  \n" +
                  "			SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                  "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                  "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                  "		ELSE  */  \n" +
                  "			SELECT CASE WHEN vuBOMDet.custPNID IS NOT NULL THEN GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID)  \n" +
                  "						ELSE  GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) END  \n" +
                  "            INTO temp_all_mfg_id_lineID  \n" +
                  "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  AND vuBOMDet.isDeleted = 0  \n" +
                  "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                  "		-- END IF;  \n" +
                  "  \n" +
                  "		CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
                  "	ELSE  \n" +
                  "		SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                  "		WHERE 1=0;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	#7 return last inserted/updated records for umid transaction  \n" +
                  "	SELECT temp_last_inserted_umid_id;  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5423,'2.00','V1','Sproc_ValidateScanFeederFirst - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5423:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_validateScanMissingUMIDOnly;  \n" +
                  "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
                  "	IN pUMID VARCHAR(15),  \n" +
                  "	IN ppartID INT,  \n" +
                  "	IN pwoOpID INT,  \n" +
                  "	IN pwoTransID INT,  \n" +
                  "	IN pemployeeId INT,  \n" +
                  "	IN pcheckKitAllocation INT,  \n" +
                  "	IN pverificationType VARCHAR(255),  \n" +
                  "	IN pisVerify INT,  \n" +
                  "	IN ptransactionType VARCHAR(1),  \n" +
                  "	IN prfqLineItemsID INT,  \n" +
                  "	IN pisConfirmed INT,  \n" +
                  "	IN pwoID INT,  \n" +
                  "	IN pisPlacementTracking INT,  \n" +
                  "	IN psaveUMIDDetails INT,  \n" +
                  "	IN prefDesig VARCHAR(3000),  \n" +
                  "	IN passyQty INT  ,  \n" +
                  "    IN pConsumeQty INT,  \n" +
                  "    IN pUMIDAllocateStatus INT,  \n" +
                  "    IN pCreatedBy VARCHAR(255),  \n" +
                  "    IN pCreateByRoleId INT ,  \n" +
                  "    IN pApprovedBy INT,  \n" +
                  "    IN pApprovedReason VARCHAR(500)  \n" +
                  ")  \n" +
                  "BEGIN  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                  "	DECLARE temp_umid_comp_id INT;  \n" +
                  "	DECLARE temp_umid_stock_id INT;  \n" +
                  "	DECLARE temp_umid_pkgQty INT;  \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_package_id INT;  \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                  "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                  "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                  "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                  "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                  "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
                  "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
                  "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_salesorder_detID INT ;  \n" +
                  "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
                  "    DECLARE vParentWoId INT;  \n" +
                  "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                  "  \n" +
                  "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
                  "	-- create temporary table for error  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                  "	(  \n" +
                  "	     errorText VARCHAR(2000),  \n" +
                  "	     isFeederError INT,  \n" +
                  "	     isUMIDError INT,  \n" +
                  "	     isConfirmation INT,  \n" +
                  "	     isMessage INT,  \n" +
                  "	     isInformation INT,  \n" +
                  "	     stringText1 VARCHAR(1000),  \n" +
                  "	     stringText2 VARCHAR(1000),  \n" +
                  "	     stringText3 VARCHAR(1000)  \n" +
                  "	);  \n" +
                  "		#Get parent WO ID in case of revise  work order.  \n" +
                  "		WITH RECURSIVE RevWo AS  (  \n" +
                  "			SELECT	woId,  \n" +
                  "					1 lvl  ,  \n" +
                  "					terminateWOID  \n" +
                  "			FROM workorder  \n" +
                  "			WHERE woId = pwoID  \n" +
                  "			AND isDeleted = 0  \n" +
                  "			UNION ALL  \n" +
                  "			SELECT	wo.woID,  \n" +
                  "					rw.lvl +1 lvl,  \n" +
                  "					wo.terminateWOID  \n" +
                  "			 FROM workorder wo  \n" +
                  "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                  "			 WHERE wo.isDeleted = 0  \n" +
                  "			 )  \n" +
                  "			SELECT rev.woID  INTO vParentWoId  \n" +
                  "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                  "  \n" +
                  "		#Check for kit allocation flag from BOM Line  \n" +
                  "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
                  "		FROM rfq_lineitems rli  \n" +
                  "		WHERE rli.id = prfqLineItemsID  \n" +
                  "        AND rli.isDeleted = 0 ;  \n" +
                  "  \n" +
                  "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
                  "  \n" +
                  "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                  "		FROM workorder_operation_refdesig  \n" +
                  "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                  "		AND woOPID = pwoOpID  \n" +
                  "		AND isDeleted = 0;  \n" +
                  "  \n" +
                  "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                  "		FROM workorder_operation  \n" +
                  "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                  "		AND woOPID = pwoOpID  \n" +
                  "		AND isDeleted = 0 ;  \n" +
                  "  \n" +
                  "		#CHeck Only BOM Part allowed  \n" +
                  "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                  "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                  "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                  "			    AND rla.partID =   ppartID  \n" +
                  "				AND rla.isDeleted = 0) = 0 THEN  \n" +
                  "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "        END IF;  \n" +
                  "	# umid transaction details based on umid  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                  "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                  "    INTO flag_tempVerificationApproval;  \n" +
                  "  /*  \n" +
                  "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                  "		SET flag_tempVerificationRequire = 1;  \n" +
                  "	END IF;  \n" +
                  "  */  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                  "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
                  "    IF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                  "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig) = 0) THEN  \n" +
                  "                SET result = 0;  \n" +
                  "	ELSEIF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                  "		FROM temp_umid_details;  \n" +
                  "  \n" +
                  "  \n" +
                  "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		IF(flag_tempLineCount = 1) THEN  \n" +
                  "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		END IF;  \n" +
                  "  \n" +
                  "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                  "			UPDATE temp_umid_details tud  \n" +
                  "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                  "			AND id = prfqLineItemsID)  \n" +
                  "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                  "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                  "		END IF;  \n" +
                  "  \n" +
                  "  \n" +
                  "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
                  "  \n" +
                  "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
                  "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
                  "            INTO kit_qty  \n" +
                  "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
                  "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
                  "			AND STATUS = 'A';  \n" +
                  "  \n" +
                  "            IF kit_qty > 0 THEN  \n" +
                  "				IF  kit_qty >= pConsumeQty THEN  \n" +
                  "					SET pUMIDAllocateStatus = 1 ;  \n" +
                  "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
                  "					SET pUMIDAllocateStatus = 2 ;  \n" +
                  "				END IF ;  \n" +
                  "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
                  "            ELSE  \n" +
                  "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
                  "				FROM component_sid_stock AS css  \n" +
                  "				WHERE css.uid = pUMID  \n" +
                  "				AND css.isDeleted = 0;  \n" +
                  "  \n" +
                  "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
                  "				FROM kit_allocation AS ka_all  \n" +
                  "				WHERE ka_all.uid = pUMID  \n" +
                  "				AND  ka_all.status IN ('A','R')  \n" +
                  "				GROUP BY ka_all.uid ;  \n" +
                  "  \n" +
                  "				#step - 3 Check Un-Allocated  stock available or not  \n" +
                  "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
                  "					SET pUMIDAllocateStatus = 3;  \n" +
                  "					#allocate kit from un allocated stock  \n" +
                  "				END IF;  \n" +
                  "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
                  "            END IF;  \n" +
                  "        END IF;  \n" +
                  "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
                  "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
                  "  \n" +
                  "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                  "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "					SET uidVerified = 1;  \n" +
                  "				ELSE  \n" +
                  "					SET uidVerified = 0;  \n" +
                  "					SET result = 0;  \n" +
                  "				END IF;  \n" +
                  "			ELSE  \n" +
                  "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                  "					SET result = 0;  \n" +
                  "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                  "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "				ELSE  \n" +
                  "						#take first sales order default in case of multiple sales order  \n" +
                  "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
                  "						INTO temp_salesorder_detID  \n" +
                  "						FROM  workorder_salesorder_details  \n" +
                  "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                  "						AND isDeleted = 0  \n" +
                  "						LIMIT 1;  \n" +
                  "					-- check verification required  \n" +
                  "					-- than verification require than check from which page scan/verify  \n" +
                  "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) and psaveUMIDDetails = 1 THEN  \n" +
                  "							-- Take confirmation  \n" +
                  "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                  "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) and psaveUMIDDetails = 1 THEN -- verification not require  \n" +
                  "						-- if scan option selected than check for already scanned in flow first  \n" +
                  "						-- if not scanned than add as verified umid directly  \n" +
                  "						IF(pisVerify <> 1) THEN  \n" +
                  "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                  "							WHERE transactionType='U'  \n" +
                  "							AND refsidid = temp_umid_stock_id  \n" +
                  "							AND mfgPNID=temp_umid_comp_id  \n" +
                  "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                  "							AND woOPID = pwoOpID  \n" +
                  "							AND employeeID=pemployeeId;  \n" +
                  "							-- if already scanned than give message  \n" +
                  "							-- else add as verified umid directly  \n" +
                  "							IF(temp_feeder_transID > 0) THEN  \n" +
                  "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                  "								INSERT INTO workorder_trans_umid_details  \n" +
                  "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                  "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
                  "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "								VALUES  \n" +
                  "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                  "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                  "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "	  							-- VERIFIED  \n" +
                  "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "								SELECT LAST_INSERT_ID() AS id;  \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "								SET uidVerified = 1;  \n" +
                  "							ELSE  \n" +
                  "								IF psaveUMIDDetails = 1 THEN  \n" +
                  "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                  "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                  "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
                  "										# Check wheather kit allocation required  or not  \n" +
                  "  \n" +
                  "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                  "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                  "										ELSE  \n" +
                  "											SET result = 1;  \n" +
                  "										END IF;  \n" +
                  "									ELSE  \n" +
                  "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                  "												wop.partID = temp_umid_comp_id AND  \n" +
                  "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                  "											SET result = 1;  \n" +
                  "										END IF;  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									IF (result = 1 ) THEN  \n" +
                  "										SET result = 1;  \n" +
                  "										INSERT INTO workorder_trans_umid_details  \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                  "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
                  "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "										VALUES  \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
                  "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "										-- VERIFIED  \n" +
                  "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "										SELECT LAST_INSERT_ID() AS id;  \n" +
                  "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "										SET uidVerified = 1;  \n" +
                  "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                  "										SET pUMIDAllocateStatus = 4;  \n" +
                  "									END IF;  \n" +
                  "								END IF;  \n" +
                  "							END IF;  \n" +
                  "						ELSE  \n" +
                  "							-- if already scanned than verify same umid for history  \n" +
                  "							-- if not scanned yet than give message  \n" +
                  "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "								SET uidVerified = 1;  \n" +
                  "							ELSE  \n" +
                  "								SET uidVerified = 0;  \n" +
                  "								SET result = 0;  \n" +
                  "							END IF;  \n" +
                  "						END IF;  \n" +
                  "					ELSE  \n" +
                  "						-- verification require than check from which page/popup  \n" +
                  "						-- if from scan popup than add umid as scanned new record  \n" +
                  "						-- else check for verify flow  \n" +
                  "                        #select  prfqLineItemsID;  \n" +
                  "						IF (pisVerify <> 1) THEN  \n" +
                  "							IF psaveUMIDDetails = 1 THEN  \n" +
                  "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                  "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                  "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
                  "                                # Check wheather kit allocation required  or not  \n" +
                  "  \n" +
                  "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                  "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                  "                                    ELSE  \n" +
                  "										SET result = 1;  \n" +
                  "                                    END IF;  \n" +
                  "                                ELSE  \n" +
                  "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                  "											wop.partID = temp_umid_comp_id AND  \n" +
                  "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                  "										SET result = 1;  \n" +
                  "									END IF;  \n" +
                  "								END IF;  \n" +
                  "                                #select 'Line261' , result;  \n" +
                  "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
                  "                                IF result = 1 THEN  \n" +
                  "									SET result = 1;  \n" +
                  "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
                  "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                  "									INSERT INTO workorder_trans_umid_details  \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
                  "									VALUES  \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
                  "									-- SCANNED  \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "									SELECT LAST_INSERT_ID() AS id;  \n" +
                  "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
                  "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                  "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "										SET uidVerified = 1;  \n" +
                  "                                    ELSE  \n" +
                  "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "										SET uidVerified = 1;  \n" +
                  "									END IF;  \n" +
                  "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                  "									SET pUMIDAllocateStatus = 4;  \n" +
                  "                                END IF;  \n" +
                  "							END IF;  \n" +
                  "						ELSE  \n" +
                  "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "								SET uidVerified = 1;  \n" +
                  "							ELSE  \n" +
                  "								SET uidVerified = 0;  \n" +
                  "								SET result = 0;  \n" +
                  "							END IF;  \n" +
                  "						END IF;  \n" +
                  "					END IF;  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "		#END IF;  \n" +
                  "	END IF;  \n" +
                  "	#END IF;  \n" +
                  "  \n" +
                  "	#select '10' , 'AT END' ;  \n" +
                  "	INSERT INTO `uid_verification_history`(  \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                  "	VALUES (  \n" +
                  "		pUMID,							'',				temp_umid_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                  "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                  "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                  "		pwoTransID, 						NULL,				pverificationType  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	#0. return assy part list  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                  "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                  "  \n" +
                  "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                  "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                  "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                  "	ELSE  \n" +
                  "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                  "			-- verified UMID  \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                  "		ELSE  \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		END IF;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	#1. return history of verification  \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                  "  \n" +
                  "	#2. return error  \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
                  "  \n" +
                  "	#3. return umid details  \n" +
                  "	-- IF (uidVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_umid_details;  \n" +
                  "	-- SELECT * FROM temp_umid_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#4 return last inserted/updated records for umid transacrion  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                  "	SELECT NULL AS id;  \n" +
                  "	SELECT id FROM temp_umid_transIDs;  \n" +
                  "  \n" +
                  "    #5 return UMID allocation checking status  \n" +
                  "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
                  "  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5424,'2.00','V1','Sproc_validateScanMissingUMIDOnly - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5424:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_ValidateScanUMIDFirst;  \n" +
                  "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(  \n" +
                  "	IN pUMID VARCHAR(15),  \n" +
                  "	IN pfeederLocation VARCHAR(1000),  \n" +
                  "	IN ppartID INT(11),  \n" +
                  "	IN pwoOpEqpID INT(11),  \n" +
                  "	IN pwoOpID INT(11),  \n" +
                  "	IN pwoTransID INT(11),  \n" +
                  "	IN pemployeeId INT(11),  \n" +
                  "	IN pcheckKitAllocation INT(11),  \n" +
                  "	IN pverificationType VARCHAR(255),  \n" +
                  "	IN pisVerify INT(11),  \n" +
                  "	IN ptransactionType VARCHAR(1),  \n" +
                  "	IN pisChangeReel INT(11),  \n" +
                  "	IN preelChangeType VARCHAR(100),  \n" +
                  "	IN ptoBinID INT(11),  \n" +
                  "	IN pOldUMID VARCHAR(15),  \n" +
                  "	IN pisConfirmed INT(11),  \n" +
                  "	IN pwoID INT(11),  \n" +
                  "	IN pCreatedBy VARCHAR(255),  \n" +
                  "    IN pApprovedBy INT,  \n" +
                  "    IN pApprovedReason VARCHAR(500)  \n" +
                  ")  \n" +
                  "BEGIN  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                  "	DECLARE temp_comp_id INT(11);  \n" +
                  "	DECLARE temp_comp_uom INT(11);  \n" +
                  "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                  "	DECLARE temp_lineID VARCHAR(100);  \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                  "	DECLARE temp_eqpFeederID INT(11);  \n" +
                  "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;  \n" +
                  "	DECLARE uidVerified INT(11) DEFAULT 0;  \n" +
                  "	DECLARE feederVerified INT(11) DEFAULT 0;  \n" +
                  "	DECLARE temp_umid_comp_id INT(11);  \n" +
                  "	DECLARE temp_umid_pkgQty INT(11);  \n" +
                  "	DECLARE temp_umid_stock_id INT(11);  \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_package_id INT(11);  \n" +
                  "	DECLARE temp_umid_pkgUnit INT(11);  \n" +
                  "	DECLARE temp_umid_pkgCount INT(11);  \n" +
                  "	DECLARE temp_umid_pkgUOM INT(11);  \n" +
                  "	DECLARE temp_old_umid_comp_id INT(11);  \n" +
                  "	DECLARE temp_old_umid_stock_id INT(11);  \n" +
                  "	DECLARE temp_old_umid_pkgQty INT(11);  \n" +
                  "	DECLARE temp_old_umid_pkgUnit INT(11);  \n" +
                  "	DECLARE temp_old_umid_pkgUOM INT(11);  \n" +
                  "	DECLARE temp_eqp_wh_id INT(11);  \n" +
                  "	DECLARE temp_eqp_bin_id INT(11);  \n" +
                  "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                  "	DECLARE temp_salesorderdetID VARCHAR(100);  \n" +
                  "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;  \n" +
                  "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;  \n" +
                  "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                  "	DECLARE temp_json_object VARCHAR(100);  \n" +
                  "	DECLARE temp_last_inserted_umid_id INT (11);  \n" +
                  "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                  "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                  "	DECLARE temp_old_umid_verify_status TINYINT DEFAULT 0; -- for  change reel flow  \n" +
                  "	DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                  "    DECLARE temp_entered_refDes TEXT;  \n" +
                  "  \n" +
                  "	SET temp_eqp_wh_id = NULL;  \n" +
                  "	SET temp_eqp_bin_id = NULL;  \n" +
                  "	SET temp_eqp_wh_name = NULL;  \n" +
                  "  \n" +
                  "   -- This will be case when  call from  Change Reel SP : Sproc_ValidateScanChangeReel  \n" +
                  "	CREATE temporary TABLE IF NOT EXISTS temp_old_umid_details  \n" +
                  "    SELECT 0 As isVerified;  \n" +
                  "	SELECT isVerified  \n" +
                  "	INTO temp_old_umid_verify_status  \n" +
                  "    FROM temp_old_umid_details;  \n" +
                  "  \n" +
                  "  \n" +
                  "	-- create temporary table for error  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                  "	(  \n" +
                  "	     errorText VARCHAR(2000),  \n" +
                  "	     isFeederError INT(11),  \n" +
                  "	     isUMIDError INT(11),  \n" +
                  "	     isConfirmation INT(11),  \n" +
                  "	     isMessage INT(11),  \n" +
                  "	     isInformation INT(11),  \n" +
                  "	     stringText1 VARCHAR(1000),  \n" +
                  "	     stringText2 VARCHAR(1000),  \n" +
                  "	     stringText3 VARCHAR(1000)  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                  "  \n" +
                  "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                  "	INTO flag_tempVerificationApproval;  \n" +
                  "  \n" +
                  "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                  "	FROM workorder wo  \n" +
                  "	WHERE wo.woID = pwoID  \n" +
                  "	AND wo.isDeleted = 0;  \n" +
                  "  \n" +
                  "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                  "	FROM workorder_operation_refdesig  \n" +
                  "	WHERE woID = pwoID  \n" +
                  "	AND woOPID = pwoOpID  \n" +
                  "	AND isDeleted = 0;  \n" +
                  "  \n" +
                  "	SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                  "	FROM workorder_operation  \n" +
                  "	WHERE woID = pwoID  \n" +
                  "	AND woOPID = pwoOpID  \n" +
                  "	AND isDeleted = 0 ;  \n" +
                  "  \n" +
                  "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                  "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                  "	ELSE  \n" +
                  "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "    # Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                  "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');  \n" +
                  "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId  \n" +
                  "		-- , refSalesOrderDetID  \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id  \n" +
                  "		-- , temp_salesorderdetID  \n" +
                  "		FROM temp_umid_details;  \n" +
                  "		-- Before doing ZeroOut any UMID it should be verified  \n" +
                  "		IF (preelChangeType = \"ZeroOut\"  AND  temp_old_umid_verify_status = 0 and  pUMID is not null) THEN  \n" +
                  "			SET result = fun_checkAndInsertError('UMID050', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "        elseif (pfeederLocation IS NOT NULL) THEN  \n" +
                  "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN  \n" +
                  "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                  "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn,temp_entered_refDes  \n" +
                  "				FROM temp_feeder_details;  \n" +
                  "				-- IF(pisVerify = 1) THEN  \n" +
                  "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                  "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                  "				-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                  "				-- 			-- FAILED  \n" +
                  "				-- 			SET @stmt_str = 'FEED001';  \n" +
                  "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                  "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "				-- 		END IF;  \n" +
                  "				-- 	END IF;  \n" +
                  "				-- ELSE  \n" +
                  "					# check for valid lineid for feeder details and umid details  \n" +
                  "					#yes - check for lineid and valid than save transaction  \n" +
                  "					#no - suggest valid feeder location  \n" +
                  "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                  "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                  "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                  "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                  "							-- ALLOCATED  \n" +
                  "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "					ELSEIF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                  "							AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes) = 0) THEN  \n" +
                  "							SET result = 0;  \n" +
                  "					ELSE  \n" +
                  "						#in case validate UMID without Kit set true at WO  \n" +
                  "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                  "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                  "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                  "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                  "									-- WRONG_LOCATION  \n" +
                  "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "							   ELSE  \n" +
                  "									SET temp_continue = 1;  \n" +
                  "							   END IF;  \n" +
                  "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                  "							SET temp_continue = 1 ;  \n" +
                  "						END IF;  \n" +
                  "                        IF temp_continue = 1 THEN  \n" +
                  "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                  "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                  "								SET result = 0;  \n" +
                  "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                  "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "							ELSE  \n" +
                  "								IF (pisVerify <> 1) THEN  \n" +
                  "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                  "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION  \n" +
                  "                                    -- UMID016 for regualer feeder scan  \n" +
                  "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation  \n" +
                  "									IF ( pwoOpEqpID IS NOT NULL AND  \n" +
                  "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                  "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst  \n" +
                  "										WHERE refEqpID IN (  \n" +
                  "											SELECT eqpID FROM workorder_operation_equipment  \n" +
                  "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL  \n" +
                  "										) AND deletedAt IS NULL;  \n" +
                  "  \n" +
                  "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                  "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                  "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                  "										END IF;  \n" +
                  "  \n" +
                  "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                  "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                  "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                  "												-- Take confirmation  \n" +
                  "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                  "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                  "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                  "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                  "													AND refsidid = temp_umid_stock_id  \n" +
                  "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                  "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                  "													AND woOPID = pwoOpID;  \n" +
                  "  \n" +
                  "  \n" +
                  "												IF(temp_feeder_transID > 0) THEN  \n" +
                  "													-- FAILED  \n" +
                  "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "												ELSE  \n" +
                  "  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL, NULL,  \n" +
                  "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "														0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "													INSERT INTO workorder_trans_umid_details  \n" +
                  "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                  "														`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "													VALUES  \n" +
                  "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                  "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "													-- VERIFIED  \n" +
                  "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "													SET valid_umid_transfer = 1;  \n" +
                  "												END IF;  \n" +
                  "											ELSEIF (flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN  \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "													pCreatedBy, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL, NULL,  \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "													0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                  "												INSERT INTO workorder_trans_umid_details  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                  "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "												VALUES  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                  "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "												-- SCANNED  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "												SET valid_umid_transfer = 1;  \n" +
                  "											END IF;  \n" +
                  "										ELSE  \n" +
                  "											-- WRONG_LOCATION  \n" +
                  "											-- SET @stmt_str = 'UMID018';  \n" +
                  "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                  "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "										END IF;  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									SET feederVerified = 1;  \n" +
                  "								ELSE  \n" +
                  "									-- If change reel and old umid details  \n" +
                  "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                  "										-- get component details based on old umid  \n" +
                  "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                  "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                  "											FROM component_sid_stock css  \n" +
                  "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                  "  \n" +
                  "										SELECT wtud.id  \n" +
                  "                                        INTO temp_feeder_transID  \n" +
                  "                                        FROM workorder_trans_umid_details wtud  \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                  "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                  "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                  "											AND woOPID = pwoOpID;  \n" +
                  "									-- If not change reel than check for reel transaction is done or not  \n" +
                  "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                  "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                  "										AND wtud.refsidid = temp_umid_stock_id  \n" +
                  "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                  "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                  "										FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                  "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                  "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                  "										AND wtud.woOPID = pwoOpID;  \n" +
                  "										-- AND isVerified=0;  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                  "										UPDATE workorder_trans_umid_details  \n" +
                  "										SET isVerified=1,  \n" +
                  "										verifiedBy=pemployeeId,  \n" +
                  "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                  "										WHERE id=temp_feeder_transID;  \n" +
                  "  \n" +
                  "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                  "										-- VERIFIED  \n" +
                  "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "										SET feederVerified = 1;  \n" +
                  "									-- if change reel than update verify flag for verfiy true  \n" +
                  "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                  "										 IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                  "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                  "                                        -- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                  "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                  "											WHERE whmst.refEqpID IN (  \n" +
                  "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                  "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                  "											) AND whmst.deletedAt IS NULL;  \n" +
                  "  \n" +
                  "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                  "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                  "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                  "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                  "											END IF;  \n" +
                  "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                  "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                  "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                  "														-- Added for multiple kit  \n" +
                  "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                  "														(SELECT id FROM kit_allocation ka  \n" +
                  "															WHERE ka.refSalesOrderDetID IN  \n" +
                  "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                  "																FROM workorder_salesorder_details wsd  \n" +
                  "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                  "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                  "														',\\\"returnQty\\\":',0,  \n" +
                  "														',\\\"returnUnit\\\":',0,  \n" +
                  "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                  "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                  "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, 0,  \n" +
                  "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                  "														1,NULL,NULL,NULL,NULL);  \n" +
                  "												ELSE  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                  "														pCreatedBy, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL,  \n" +
                  "														NULL, NULL, NULL, NULL, NULL,  \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                  "														0,NULL,NULL,NULL,NULL);  \n" +
                  "												END IF;  \n" +
                  "												SET valid_umid_transfer = 1;  \n" +
                  "  \n" +
                  "												-- update old record toumid  \n" +
                  "												UPDATE workorder_trans_umid_details  \n" +
                  "												SET toRefUIDId=temp_umid_stock_id  \n" +
                  "												WHERE id=temp_feeder_transID;  \n" +
                  "  \n" +
                  "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                  "  \n" +
                  "												-- transfer umid to bin  \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                  "													pCreatedBy, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL,  \n" +
                  "													NULL, NULL, NULL, NULL, NULL,  \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                  "													0,NULL,NULL,NULL,NULL);  \n" +
                  "  \n" +
                  "												-- SELECT pwoTransID;  \n" +
                  "												-- insert new umid for workorder equipment feeder  \n" +
                  "												INSERT INTO workorder_trans_umid_details  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                  "												VALUES  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "												-- UMID SCANNED  \n" +
                  "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "											ELSE  \n" +
                  "												-- WRONG_LOCATION  \n" +
                  "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "											END IF;  \n" +
                  "										ELSE  \n" +
                  "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "										END IF;  \n" +
                  "									ELSE  \n" +
                  "										-- FAILED  \n" +
                  "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "									END IF;  \n" +
                  "								END IF;  \n" +
                  "							END IF;  \n" +
                  "						END IF;  \n" +
                  "                    END IF;  \n" +
                  "				-- END IF;  \n" +
                  "			END IF;  \n" +
                  "		ELSE  \n" +
                  "			SET uidVerified = 1;  \n" +
                  "		END IF;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	INSERT INTO `uid_verification_history`(  \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                  "	VALUES (  \n" +
                  "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                  "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),  \n" +
                  "		pwoTransID, 						pwoOpEqpID,									pverificationType  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	#1. return history of umid transfer  \n" +
                  "	IF(valid_umid_transfer = 0) THEN  \n" +
                  "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	#2. return history of verification  \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                  "  \n" +
                  "	#3. return error  \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                  "  \n" +
                  "	#4. return umid details  \n" +
                  "	-- IF (uidVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_umid_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#5. return feeder details  \n" +
                  "	-- IF (feederVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                  "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_feeder_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#6. return allocated UMID details  \n" +
                  "	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                  "	WHERE 1=0;  \n" +
                  "  \n" +
                  "	#7 return last inserted/updated records for umid transacrion  \n" +
                  "	SELECT temp_last_inserted_umid_id;  \n" +
                  "END;  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5425,'2.00','V1','Sproc_ValidateScanUMIDFirst - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5425:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_validateScanUMIDOnly;  \n" +
                  "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
                  "	IN pUMID VARCHAR(15),  \n" +
                  "	IN ppartID INT,  \n" +
                  "	IN pwoOpID INT,  \n" +
                  "	IN pwoTransID INT,  \n" +
                  "	IN pemployeeId INT,  \n" +
                  "	IN pcheckKitAllocation INT,  \n" +
                  "	IN pverificationType VARCHAR(255),  \n" +
                  "	IN pisVerify INT,  \n" +
                  "	IN ptransactionType VARCHAR(1),  \n" +
                  "	IN prfqLineItemsID INT,  \n" +
                  "	IN pisConfirmed INT,  \n" +
                  "	IN pwoID INT,  \n" +
                  "	IN pCreatedBy VARCHAR(255),  \n" +
                  "	IN pisPlacementTracking INT,  \n" +
                  "	IN psaveUMIDDetails INT,  \n" +
                  "	IN prefDesig VARCHAR(3000),  \n" +
                  "	IN passyQty INT,  \n" +
                  "    IN pApprovedBy INT,  \n" +
                  "    IN pApprovedReason VARCHAR(500)  \n" +
                  ")  \n" +
                  "BEGIN  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                  "	DECLARE temp_umid_comp_id INT;  \n" +
                  "	DECLARE temp_umid_stock_id INT;  \n" +
                  "	DECLARE temp_umid_pkgQty INT;  \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                  "	DECLARE temp_umid_package_id INT;  \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                  "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                  "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                  "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
                  "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                  "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                  "	DECLARE temp_wo_sub_status INT ;  \n" +
                  "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                  "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                  "  \n" +
                  "	-- create temporary table for error  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                  "	(  \n" +
                  "	     errorText VARCHAR(2000),  \n" +
                  "	     isFeederError INT,  \n" +
                  "	     isUMIDError INT,  \n" +
                  "	     isConfirmation INT,  \n" +
                  "	     isMessage INT,  \n" +
                  "	     isInformation INT,  \n" +
                  "	     stringText1 VARCHAR(1000),  \n" +
                  "	     stringText2 VARCHAR(1000),  \n" +
                  "	     stringText3 VARCHAR(1000)  \n" +
                  "	);  \n" +
                  "  \n" +
                  "    SELECT isKitAllocationNotRequired,woSubStatus  \n" +
                  "    INTO flag_kit_allocation_not_required_wo  , temp_wo_sub_status  \n" +
                  "    FROM workorder wo  \n" +
                  "    WHERE wo.woID = pwoID  \n" +
                  "    AND wo.isDeleted = 0;  \n" +
                  "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                  "    FROM workorder_operation_refdesig  \n" +
                  "    WHERE woID = pwoID  \n" +
                  "    AND woOPID = pwoOpID  \n" +
                  "    AND isDeleted = 0;  \n" +
                  "  \n" +
                  "    SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                  "    FROM workorder_operation  \n" +
                  "    WHERE woID = pwoID  \n" +
                  "    AND woOPID = pwoOpID  \n" +
                  "    AND isDeleted = 0 ;  \n" +
                  "  \n" +
                  "	#CHeck Only SMT Part allowed  in case of missing material status  \n" +
                  "	IF (temp_wo_sub_status = 9 AND (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                  "			WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                  "										WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                  "            AND rla.partID =   ppartID  \n" +
                  "			AND rla.isDeleted = 0) > 0 ) THEN  \n" +
                  "		 SET result = fun_checkAndInsertError('UMID051', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "	END IF;  \n" +
                  "	# umid transaction details based on umid  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                  "  \n" +
                  "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                  "    INTO flag_tempVerificationApproval;  \n" +
                  "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                  "		SET flag_tempVerificationRequire = 1;  \n" +
                  "	END IF;                */  \n" +
                  "  \n" +
                  "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                  "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                  "    ELSE  \n" +
                  "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                  "    END IF;  \n" +
                  "  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                  "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                  "  \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                  "		FROM temp_umid_details;  \n" +
                  "  \n" +
                  "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		IF(flag_tempLineCount = 1) THEN  \n" +
                  "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		END IF;  \n" +
                  "  \n" +
                  "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                  "			UPDATE temp_umid_details tud  \n" +
                  "			SET tud.refDesig = (SELECT GROUP_CONCAT(CONCAT_WS(',',refDesig,dnpDesig)) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                  "			AND id = prfqLineItemsID)  \n" +
                  "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                  "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                  "		END IF;  \n" +
                  "-- select pisPlacementTracking, psaveUMIDDetails, flag_isStrictlyLimitRefDes , temp_allowed_refDesList , flag_tempLineCount;  \n" +
                  "-- select flag_kit_allocation_not_required_wo;  \n" +
                  "-- select fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID);  \n" +
                  "-- select * from temp_scan_error;  \n" +
                  "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
                  "			SET result = 0;  \n" +
                  "        ELSEIF flag_kit_allocation_not_required_wo = 1 AND pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0  THEN  \n" +
                  "			SET result = 0;  \n" +
                  "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
                  "-- select 'line 132';  \n" +
                  "			SET result = 0;  \n" +
                  "        ELSEIF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                  "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig) = 0) THEN  \n" +
                  "                SET result = 0;  \n" +
                  "		ELSE  \n" +
                  "			-- need to check from here  \n" +
                  "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
                  "			-- Check placement tracking with more than one BOM line item for same part  \n" +
                  "            -- Check for Allowed RefDes  \n" +
                  "--  SELECT 'line 140',pisVerify,flag_tempLineCount,pisPlacementTracking,COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042');  \n" +
                  "            IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042') > 0)) THEN  \n" +
                  "				SET result = 0;  \n" +
                  "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
                  "				SET result = 0;  \n" +
                  "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
                  "				SET result = 0;  \n" +
                  "			ELSE  \n" +
                  "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                  "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "						SET uidVerified = 1;  \n" +
                  "					ELSE  \n" +
                  "						SET uidVerified = 0;  \n" +
                  "						SET result = 0;  \n" +
                  "					END IF;  \n" +
                  "				ELSE  \n" +
                  "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                  "						SET result = 0;  \n" +
                  "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                  "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                  "					ELSE  \n" +
                  "						-- check verification required  \n" +
                  "						-- than verification require than check from which page scan/verify  \n" +
                  "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                  "							-- Take confirmation  \n" +
                  "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                  "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                  "							-- if scan option selected than check for already scanned in flow first  \n" +
                  "							-- if not scanned than add as verified umid directly  \n" +
                  "							IF(pisVerify <> 1) THEN  \n" +
                  "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                  "								WHERE transactionType='U'  \n" +
                  "								AND refsidid = temp_umid_stock_id  \n" +
                  "								AND mfgPNID=temp_umid_comp_id  \n" +
                  "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                  "								AND woOPID = pwoOpID  \n" +
                  "								AND employeeID=pemployeeId;  \n" +
                  "  \n" +
                  "								-- if already scanned than give message  \n" +
                  "								-- else add as verified umid directly  \n" +
                  "								IF(temp_feeder_transID > 0) THEN  \n" +
                  "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                  "									INSERT INTO workorder_trans_umid_details  \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                  "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
                  "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "									VALUES  \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                  "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "									-- SCANNED  \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "									SELECT LAST_INSERT_ID() AS id;  \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "									SET uidVerified = 1;  \n" +
                  "								ELSE  \n" +
                  "									INSERT INTO workorder_trans_umid_details  \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                  "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
                  "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                  "									VALUES  \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                  "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                  "  \n" +
                  "									-- VERIFIED  \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "									SELECT LAST_INSERT_ID() AS id;  \n" +
                  "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "									SET uidVerified = 1;  \n" +
                  "								END IF;  \n" +
                  "							ELSE  \n" +
                  "								-- if already scanned than verify same umid for history  \n" +
                  "								-- if not scanned yet than give message  \n" +
                  "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "									SET uidVerified = 1;  \n" +
                  "								ELSE  \n" +
                  "									SET uidVerified = 0;  \n" +
                  "									SET result = 0;  \n" +
                  "								END IF;  \n" +
                  "							END IF;  \n" +
                  "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
                  "                         /*ELSE  \n" +
                  "							-- verification require than check from which page/popup  \n" +
                  "							-- if from scan popup than add umid as scanned new record  \n" +
                  "							-- else check for verify flow  \n" +
                  "							IF (pisVerify <> 1) THEN  \n" +
                  "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                  "								INSERT INTO workorder_trans_umid_details  \n" +
                  "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                  "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                  "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                  "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
                  "								VALUES  \n" +
                  "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                  "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                  "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                  "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
                  "  \n" +
                  "								-- SCANNED  \n" +
                  "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                  "								SELECT LAST_INSERT_ID() AS id;  \n" +
                  "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "								SET uidVerified = 1;  \n" +
                  "							ELSE  \n" +
                  "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                  "									SET uidVerified = 1;  \n" +
                  "								ELSE  \n" +
                  "									SET uidVerified = 0;  \n" +
                  "									SET result = 0;  \n" +
                  "								END IF;  \n" +
                  "							END IF; */  \n" +
                  "						END IF;  \n" +
                  "					END IF;  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "		END IF;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	INSERT INTO `uid_verification_history`(  \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                  "	VALUES (  \n" +
                  "		pUMID,							'',				temp_umid_comp_id,  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                  "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                  "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                  "		pwoTransID, 						NULL,				pverificationType  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	#0. return assy part list  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                  "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                  "  \n" +
                  "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                  "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                  "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                  "	ELSE  \n" +
                  "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                  "			-- verified UMID  \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                  "		ELSE  \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                  "		END IF;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	#1. return history of verification  \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                  "  \n" +
                  "	#2. return error  \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                  "  \n" +
                  "	#3. return umid details  \n" +
                  "	-- IF (uidVerified=1) THEN  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                  "	SELECT * FROM temp_umid_details;  \n" +
                  "	-- SELECT * FROM temp_umid_details;  \n" +
                  "	-- END IF;  \n" +
                  "  \n" +
                  "	#4 return last inserted/updated records for umid transacrion  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                  "	SELECT NULL AS id;  \n" +
                  "	SELECT id FROM temp_umid_transIDs;  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5426,'2.00','V1','Sproc_validateScanUMIDOnly - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5426:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP PROCEDURE IF EXISTS Sproc_ValidateWorkorderAndPublish;  \n" +
                  "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                  "	IN pwoID INT,  \n" +
                  "	IN pwoStatus INT,  \n" +
                  "	IN pupdatedBy INT  \n" +
                  "    )  \n" +
                  "BEGIN  \n" +
                  "	DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                  "    DECLARE vPartID INT;  \n" +
                  "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                  "  \n" +
                  "	-- create temporary table for error  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                  "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                  "	(  \n" +
                  "	     errorText VARCHAR(5000)  \n" +
                  "	);  \n" +
                  "  \n" +
                  "	Select partID into vPartID  \n" +
                  "    From workorder wo  \n" +
                  "    Where wo.woID = pwoID  \n" +
                  "    and wo.isDeleted = 0;  \n" +
                  "  \n" +
                  "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                  "	block1: BEGIN  \n" +
                  "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                  "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                  "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;  \n" +
                  "		DECLARE current_isLoopOperation INT DEFAULT 0;  \n" +
                  "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                  "		DECLARE current_refLoopWOOPID INT DEFAULT 0;  \n" +
                  "  \n" +
                  "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                  "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                  "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                  "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;  \n" +
                  "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;  \n" +
                  "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                  "  \n" +
                  "		DECLARE current_opname VARCHAR(500) DEFAULT '';  \n" +
                  "		DECLARE current_woopid VARCHAR(500) DEFAULT '';  \n" +
                  "  \n" +
                  "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';  \n" +
                  "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;  \n" +
                  "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;  \n" +
                  "  \n" +
                  "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;  \n" +
                  "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;  \n" +
                  "  \n" +
                  "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';  \n" +
                  "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';  \n" +
                  "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;  \n" +
                  "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;  \n" +
                  "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;  \n" +
                  "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;  \n" +
                  "  \n" +
                  "		DECLARE err TINYINT  DEFAULT 0;  \n" +
                  "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                  "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                  "  \n" +
                  "		-- 2 declare the cursor operation  \n" +
                  "		DECLARE operation_cursor CURSOR FOR  \n" +
                  "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                  "  \n" +
                  "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                  "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                  "  \n" +
                  "		-- get first operation work order  \n" +
                  "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo  \n" +
                  "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                  "  \n" +
                  "		-- get last operation work order  \n" +
                  "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo  \n" +
                  "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                  "  \n" +
                  "		-- get inspection process type id  \n" +
                  "		SET InspectionOperationTypeID := 0;  \n" +
                  "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                  "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                  "  \n" +
                  "		-- get Assembly Clean Type  \n" +
                  "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'  \n" +
                  "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                  "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                  "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                  "                    ELSE ''  \n" +
                  "               END INTO assyCleanType  \n" +
                  "        FROM component comst  \n" +
                  "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );  \n" +
                  "		-- open the cursor  \n" +
                  "		OPEN operation_cursor;  \n" +
                  "  \n" +
                  "		 -- start looping  \n" +
                  "		operation_loop: LOOP  \n" +
                  "  \n" +
                  "			-- read the name from next row into the variables  \n" +
                  "			FETCH operation_cursor INTO current_opnumber;  \n" +
                  "  \n" +
                  "  \n" +
                  "			-- check if the exit_loop flag has been set by mysql,  \n" +
                  "			-- close the cursor and exit the loop if it has.  \n" +
                  "			IF exit_loop THEN  \n" +
                  "				 CLOSE operation_cursor;  \n" +
                  "				 LEAVE operation_loop;  \n" +
                  "			END IF;  \n" +
                  "  \n" +
                  "			SET current_opname:= '';  \n" +
                  "			SET current_woopid:= 0;  \n" +
                  "			SET current_operationTypeID:= 0;  \n" +
                  "			SET current_qtyControl:= 0;  \n" +
                  "			SET current_isTrackBySerialNo:= 0;  \n" +
                  "			SET current_isLoopOperation:= 0;  \n" +
                  "			SET current_refLoopWOOPNumber:= 0;  \n" +
                  "			SET current_isIssueQty:= 0;  \n" +
                  "			SET current_refLoopWOOPID:= 0;  \n" +
                  "  \n" +
                  "			-- get opname and woopid from operation number  \n" +
                  "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,  \n" +
                  "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,  \n" +
                  "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,  \n" +
                  "			  curWOOP.refLoopWOOPID  \n" +
                  "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,  \n" +
                  "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,  \n" +
                  "			current_refLoopWOOPNumber ,  \n" +
                  "			current_refLoopWOOPID  \n" +
                  "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber  \n" +
                  "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;  \n" +
                  "			-- get previous operation of rework operation  \n" +
                  "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo  \n" +
                  "				WHERE opnumber < current_opnumber  \n" +
                  "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                  "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                  "			IF first_opnumber=current_opnumber THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                  "  \n" +
                  "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                  "			IF last_opnumber=current_opnumber THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                  "			SET IsInspectionProcess:=0;  \n" +
                  "  \n" +
                  "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                  "				SET IsInspectionProcess := 1;  \n" +
                  "			END IF;  \n" +
                  "  \n" +
                  "			IF (IsInspectionProcess  > 0) THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                  "			SET IsInValidReworkOperation:=0;  \n" +
                  "  \n" +
                  "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                  "				SET IsInValidReworkOperation := 1;  \n" +
                  "			END IF;  \n" +
                  "  \n" +
                  "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                  "			SET IsInValidIsTrackBySerialNo:=0;  \n" +
                  "  \n" +
                  "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN  \n" +
                  "				SET IsInValidIsTrackBySerialNo := 1;  \n" +
                  "			END IF;  \n" +
                  "  \n" +
                  "			IF IsInValidIsTrackBySerialNo  > 0 THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                  "  \n" +
                  "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/  \n" +
                  "			SET IsInValidIsLoopOperation:=0;  \n" +
                  "			IF (current_isLoopOperation = 1) THEN  \n" +
                  "				SET next_opnumber:= 0;  \n" +
                  "				-- get next operation of inspection operation  \n" +
                  "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                  "					WHERE opnumber > current_opnumber  \n" +
                  "					AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                  "  \n" +
                  "				IF(current_qtyControl = 0) THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				-- if next operation is rework than not allow  \n" +
                  "				ELSEIF(next_opnumber > 0 AND  \n" +
                  "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                  "						WHERE deletedat IS NULL  \n" +
                  "							AND woID=pwoID  \n" +
                  "							AND opNumber = next_opnumber  \n" +
                  "							AND isRework=1) > 0) THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				-- if found previous operation than check operation is inspection process or not  \n" +
                  "				ELSEIF(current_refLoopWOOPNumber > 0 AND  \n" +
                  "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                  "						WHERE deletedat IS NULL  \n" +
                  "							AND woID=pwoID  \n" +
                  "							AND opNumber <> current_refLoopWOOPNumber  \n" +
                  "							AND opNumber <> current_opnumber  \n" +
                  "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				-- check refLoopWOOPID added or not  \n" +
                  "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0  \n" +
                  "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL  \n" +
                  "						AND woOPID = current_refLoopWOOPID) = 0  \n" +
                  "					) THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/  \n" +
                  "  \n" +
                  "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                  "			SET found_in_paralleloperation:= 0;  \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster  \n" +
                  "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                  "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                  "			) AND woopid=current_woopid;  \n" +
                  "  \n" +
                  "			IF found_in_paralleloperation > 0 THEN  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                  "  \n" +
                  "			-- if found previous operation than check operation is inspection process or not  \n" +
                  "			IF current_previousopnumber > 0 THEN  \n" +
                  "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                  "  \n" +
                  "				-- set checked operation number if found as inspection process  \n" +
                  "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                  "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                  "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;  \n" +
                  "  \n" +
                  "				-- set flag false if any operation not found as inspection process  \n" +
                  "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                  "					IF(current_isLoopOperation = 1) THEN  \n" +
                  "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "					ELSE  \n" +
                  "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "					END IF;  \n" +
                  "				END IF;  \n" +
                  "			ELSE  \n" +
                  "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                  "		END LOOP operation_loop;  \n" +
                  "  \n" +
                  "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                  "		block2: BEGIN  \n" +
                  "			-- 1 get list of inspection operation in workorder  \n" +
                  "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;  \n" +
                  "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                  "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                  "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                  "  \n" +
                  "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                  "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                  "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                  "  \n" +
                  "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                  "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                  "  \n" +
                  "  \n" +
                  "			-- 2 declare the cursor for inspection operation  \n" +
                  "			DECLARE inspection_cursor CURSOR FOR  \n" +
                  "			SELECT opnumber FROM workorder_operation  \n" +
                  "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                  "			AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "  \n" +
                  "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                  "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                  "  \n" +
                  "			-- open the cursor  \n" +
                  "			OPEN inspection_cursor;  \n" +
                  "  \n" +
                  "			 -- start looping  \n" +
                  "			inspection_loop: LOOP  \n" +
                  "  \n" +
                  "				-- read the name from next row into the variables  \n" +
                  "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                  "  \n" +
                  "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                  "				-- close the cursor and exit the loop if it has.  \n" +
                  "				IF exit_inspection_loop THEN  \n" +
                  "					 CLOSE inspection_cursor;  \n" +
                  "					 LEAVE inspection_loop;  \n" +
                  "				END IF;  \n" +
                  "  \n" +
                  "				SET temp_opname:= '';  \n" +
                  "				SET temp_woopid:= 0;  \n" +
                  "				SET temp_isRework:= 0;  \n" +
                  "				SET temp_qtyControl:= 0;  \n" +
                  "  \n" +
                  "				SELECT opname, woopid, isRework, qtyControl  \n" +
                  "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                  "				FROM workorder_operation WHERE opnumber = c_opnumber  \n" +
                  "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                  "  \n" +
                  "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                  "				SET IsReworkInspectionOperation:= 0;  \n" +
                  "				IF (temp_isRework = 1) THEN  \n" +
                  "					SET IsReworkInspectionOperation := 1;  \n" +
                  "				END IF;  \n" +
                  "  \n" +
                  "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                  "  \n" +
                  "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                  "				SET IsInValidInspectionOperation:= 0;  \n" +
                  "  \n" +
                  "				IF (temp_qtyControl = 0) THEN  \n" +
                  "					SET IsInValidInspectionOperation := 1;  \n" +
                  "				END IF;  \n" +
                  "  \n" +
                  "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                  "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                  "  \n" +
                  "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                  "				SET IsParallelClusterOperation:= 0;  \n" +
                  "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation  \n" +
                  "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                  "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL  \n" +
                  "				 			AND clusterid IN (  \n" +
                  "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL  \n" +
                  "								AND woid=pwoid AND isparelleloperation=1  \n" +
                  "				 	)  \n" +
                  "				);  \n" +
                  "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                  "  \n" +
                  "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                  "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                  "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                  "					SET c_checkopnumber:= 0;  \n" +
                  "					-- get next operation of inspection operation  \n" +
                  "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo  \n" +
                  "						WHERE opnumber > c_opnumber  \n" +
                  "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                  "  \n" +
                  "					-- if found next operation than check operation is rework process or not  \n" +
                  "					IF c_checkopnumber > 0 THEN  \n" +
                  "						SET c_reworkopnumber:= 0;  \n" +
                  "						-- set checked operation number if found as rework process  \n" +
                  "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                  "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                  "						AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "  \n" +
                  "						-- set flag false if any operation not found as rework process  \n" +
                  "						IF c_reworkopnumber = 0 THEN  \n" +
                  "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                  "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "						END IF;  \n" +
                  "					ELSE  \n" +
                  "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "					END IF;  \n" +
                  "				END IF;  \n" +
                  "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                  "			END LOOP inspection_loop;  \n" +
                  "		END block2;  \n" +
                  "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                  "		block3: BEGIN  \n" +
                  "			-- 1 get list of cluster in workorder  \n" +
                  "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                  "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "  \n" +
                  "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';  \n" +
                  "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                  "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                  "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                  "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                  "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                  "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;  \n" +
                  "  \n" +
                  "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                  "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                  "  \n" +
                  "  \n" +
                  "			-- 2 declare the cursor for cluster  \n" +
                  "			DECLARE cluster_cursor CURSOR FOR  \n" +
                  "			SELECT DISTINCT clusterid FROM workorder_cluster  \n" +
                  "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                  "  \n" +
                  "  \n" +
                  "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                  "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                  "  \n" +
                  "			-- open the cursor  \n" +
                  "			OPEN cluster_cursor;  \n" +
                  "  \n" +
                  "			 -- start looping  \n" +
                  "			cluster_loop: LOOP  \n" +
                  "  \n" +
                  "				-- read the name from next row into the variables  \n" +
                  "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                  "  \n" +
                  "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                  "				-- close the cursor and exit the loop if it has.  \n" +
                  "				IF exit_cluster_loop THEN  \n" +
                  "					 CLOSE cluster_cursor;  \n" +
                  "					 LEAVE cluster_loop;  \n" +
                  "				END IF;  \n" +
                  "  \n" +
                  "				IF current_clusterid > 0 THEN  \n" +
                  "					SET temp_clustername:= '';  \n" +
                  "					SET temp_isParellelOperation:= 0;  \n" +
                  "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                  "  \n" +
                  "					IF(temp_isParellelOperation = 1) THEN  \n" +
                  "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                  "						SET IsReworkParallelCluster:=0;  \n" +
                  "  \n" +
                  "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation  \n" +
                  "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                  "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                  "						);  \n" +
                  "  \n" +
                  "						IF IsReworkParallelCluster > 0 THEN  \n" +
                  "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                  "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "						END IF;  \n" +
                  "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                  "  \n" +
                  "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                  "						SET IsPregrorammingParallelCluster:=0;  \n" +
                  "  \n" +
                  "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation  \n" +
                  "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                  "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                  "						);  \n" +
                  "  \n" +
                  "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                  "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                  "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "						END IF;  \n" +
                  "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                  "  \n" +
                  "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                  "						SET found_mismatchoperations:= 0;  \n" +
                  "  \n" +
                  "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                  "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                  "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "  \n" +
                  "						IF found_mismatchoperations > 1 THEN  \n" +
                  "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                  "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "						ELSE  \n" +
                  "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                  "							IF (found_mismatchoperations = 1) THEN  \n" +
                  "								SET found_operationTypeID:= 0;  \n" +
                  "								SET cluster_maxOpNumber:= 0;  \n" +
                  "  \n" +
                  "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                  "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                  "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "  \n" +
                  "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                  "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                  "									SET next_operation_to_cluster_is_loopoperation:= 0;  \n" +
                  "  \n" +
                  "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                  "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                  "									opNumber > cluster_maxOpNumber);  \n" +
                  "  \n" +
                  "  \n" +
                  "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN  \n" +
                  "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');  \n" +
                  "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "									END IF;  \n" +
                  "  \n" +
                  "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                  "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                  "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "									END IF;  \n" +
                  "								END IF;  \n" +
                  "							END IF;  \n" +
                  "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                  "						END IF;  \n" +
                  "						/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                  "					END IF;  \n" +
                  "  \n" +
                  "  \n" +
                  "  \n" +
                  "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                  "					SET current_minopnumber:= 0;  \n" +
                  "					SET current_maxopnumber:= 0;  \n" +
                  "  \n" +
                  "					-- find min and max operation number in workorder operation  \n" +
                  "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN  \n" +
                  "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                  "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                  "					SET found_invalidsequenceoperation:= 0;  \n" +
                  "  \n" +
                  "					-- check in between any operation is outside cluster than invalid  \n" +
                  "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE  \n" +
                  "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                  "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                  "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                  "					ORDER BY opnumber;  \n" +
                  "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                  "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                  "				END IF;  \n" +
                  "			END LOOP cluster_loop;  \n" +
                  "		END block3;  \n" +
                  "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                  "  \n" +
                  "  \n" +
                  "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                  "		block4: BEGIN  \n" +
                  "  \n" +
                  "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;  \n" +
                  "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;  \n" +
                  "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                  "			DECLARE move_to_stock_operation_count INT DEFAULT 0;  \n" +
                  "-- 			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                  "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                  "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                  "			DECLARE invalid_wo_count INT DEFAULT 0;  \n" +
                  "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                  "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;  \n" +
                  "			DECLARE move_to_stock_is_rework INT DEFAULT 0;  \n" +
                  "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;  \n" +
                  "			DECLARE move_to_stock_op_name VARCHAR(500);  \n" +
                  "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE found_assembly_part_not_added INT DEFAULT 0;  \n" +
                  "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;  \n" +
                  "  \n" +
                  "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);  \n" +
                  "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                  "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;  \n" +
                  "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;  \n" +
                  "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;  \n" +
                  "  \n" +
                  "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                  "			SET found_invalid_rework_operation:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "			IF found_invalid_rework_operation > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                  "			END IF;  \n" +
                  "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                  "			SET found_invalid_is_loop_operation:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "			IF found_invalid_is_loop_operation > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');  \n" +
                  "			END IF;  \n" +
                  "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                  "  \n" +
                  "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                  "			SET found_invalid_inspection_operation:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                  "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                  "			END IF;  \n" +
                  "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                  "  \n" +
                  "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                  "			SET found_invalid_is_track_by_serialno_operation:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE  \n" +
                  "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "			IF found_invalid_is_track_by_serialno_operation > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');  \n" +
                  "			END IF;  \n" +
                  "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                  "  \n" +
                  "  \n" +
                  "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                  "			SET check_workorder_isrevised:= 0;  \n" +
                  "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                  "			IF check_workorder_isrevised > 0 THEN  \n" +
                  "				SET first_OpTypeID:=0;  \n" +
                  "  \n" +
                  "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                  "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                  "  \n" +
                  "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                  "			SET preprogramming_operation_count:= 0;  \n" +
                  "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                  "			IF preprogramming_operation_count > 1 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');  \n" +
                  "			END IF;  \n" +
                  "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                  "  \n" +
                  "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                  "			-- set flag 1 for standard count ok  \n" +
                  "			-- SET certificate_standard_count:= 0;  \n" +
                  "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards  \n" +
                  "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND  \n" +
                  "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                  "			-- IF certificate_standard_count > 0 THEN  \n" +
                  "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                  "			-- END IF;  \n" +
                  "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                  "  \n" +
                  "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                  "			-- set flag 1 for standard count ok  \n" +
                  "			SET invalid_wo_count:= 0;  \n" +
                  "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation  \n" +
                  "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;  \n" +
                  "			IF invalid_wo_count > 0 THEN  \n" +
                  "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');  \n" +
                  "			END IF;  \n" +
                  "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                  "  \n" +
                  "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                  "			SET move_to_stock_operation_count:= 0;  \n" +
                  "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;  \n" +
                  "			IF move_to_stock_operation_count > 1 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');  \n" +
                  "			ELSE  \n" +
                  "				IF move_to_stock_operation_count = 0 THEN  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');  \n" +
                  "				ELSE  \n" +
                  "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                  "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "					IF(last_opnumber <> move_to_stock_op_number) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                  "  \n" +
                  "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                  "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                  "  \n" +
                  "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                  "					IF(move_to_stock_is_rework = 1) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                  "  \n" +
                  "					IF(move_to_stock_is_preprogramming = 1) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                  "  \n" +
                  "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                  "			SET allow_final_serialno_operation_count:= 0;  \n" +
                  "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;  \n" +
                  "			IF allow_final_serialno_operation_count > 1 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('More than one operations configured with \"Serial# Mapping\". <br/>Only one operation with \"Serial# Mapping\" is allowed.');  \n" +
                  "			ELSE  \n" +
                  "				IF allow_final_serialno_operation_count <> 0 THEN  \n" +
                  "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl  \n" +
                  "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "  \n" +
                  "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                  "					IF(allow_final_serialno_operation_is_rework = 1) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                  "  \n" +
                  "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                  "					IF(allow_final_serialno_operation_qtyControl = 0) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                  "  \n" +
                  "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                  "					IF(allow_final_serialno_operation_preprogramming = 1) THEN  \n" +
                  "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                  "					END IF;  \n" +
                  "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                  "  \n" +
                  "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                  "			SET found_invalid_move_to_stock_operation:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;  \n" +
                  "			IF found_invalid_move_to_stock_operation > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');  \n" +
                  "			END IF;  \n" +
                  "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                  "  \n" +
                  "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                  "			-- SET found_assembly_part_not_added:= 0;  \n" +
                  "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart  \n" +
                  "			--   WHERE rfqLineItemsID  \n" +
                  "			-- 	IN (SELECT id FROM rfq_lineitems  \n" +
                  "			-- 		WHERE partID  \n" +
                  "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                  "			-- 		AND deletedAt IS NULL)  \n" +
                  "			-- 			AND mountingTypeID  \n" +
                  "			-- 			IN (  \n" +
                  "			-- 				SELECT rfqMountingTypeID  \n" +
                  "			-- 				FROM component_logicalgroup_detail cld  \n" +
                  "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                  "			-- 				IN (  \n" +
                  "			-- 					SELECT id  \n" +
                  "			-- 					FROM component_logicalgroup  \n" +
                  "			-- 					WHERE `name`  \n" +
                  "			-- 					IN ('Supplies','Materials','Tools')  \n" +
                  "			-- 					AND deletedAt IS NULL  \n" +
                  "			-- 				)  \n" +
                  "			-- 			)  \n" +
                  "			-- 			AND deletedAt IS NULL  \n" +
                  "			-- 			AND mfgPNID  \n" +
                  "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                  "  \n" +
                  "			SET found_assembly_part_not_added:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools  \n" +
                  "			WHERE refComponentID IN (SELECT id FROM component WHERE id  \n" +
                  "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                  "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID  \n" +
                  "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                  "												AND mountingTypeID  IN (SELECT rfqMountingTypeID  \n" +
                  "														FROM component_logicalgroup_detail cld  \n" +
                  "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                  "														IN (SELECT id  \n" +
                  "														FROM component_logicalgroup  \n" +
                  "														WHERE `name` IN ('Supplies','Materials','Tools')  \n" +
                  "														AND deletedAt IS NULL)  \n" +
                  "													)) AND deletedAt IS NULL  \n" +
                  "							) AND deletedAt IS NULL AND driverToolRequired=1  \n" +
                  "						) AND deletedAt IS NULL AND componentID  \n" +
                  "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                  "  \n" +
                  "			IF found_assembly_part_not_added > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');  \n" +
                  "			END IF;  \n" +
                  "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                  "  \n" +
                  "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                  "			SET found_assembly_equipment_not_added:= 0;  \n" +
                  "			SELECT COUNT(1) INTO found_assembly_equipment_not_added  \n" +
                  "			FROM component_functionaltestingequipment  \n" +
                  "			WHERE refComponentID  \n" +
                  "			IN (SELECT id FROM component WHERE id  \n" +
                  "				IN (  \n" +
                  "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                  "					WHERE rfqLineItemsID  \n" +
                  "					IN (  \n" +
                  "						SELECT id FROM rfq_lineitems WHERE partID  \n" +
                  "						IN(  \n" +
                  "							SELECT partID FROM workorder WHERE woID=pwoID  \n" +
                  "						)  \n" +
                  "					) AND deletedAt IS NULL  \n" +
                  "				) AND deletedAt IS NULL AND functionalTestingRequired=1  \n" +
                  "			) AND deletedAt IS NULL  AND eqpID  \n" +
                  "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                  "  \n" +
                  "			IF found_assembly_equipment_not_added > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');  \n" +
                  "			END IF;  \n" +
                  "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                  "  \n" +
                  "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                  "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                  "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP  \n" +
                  "			FROM workorder_operation woop  \n" +
                  "			WHERE woop.woID = pwoid  \n" +
                  "			AND woop.`isAllowMissingPartQty` =  1  \n" +
                  "			AND woop.deletedAt IS NULL  \n" +
                  "			ORDER BY opNumber DESC LIMIT 1;  \n" +
                  "  \n" +
                  "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP  \n" +
                  "			FROM workorder_operation woop  \n" +
                  "			WHERE woop.woID = pwoid  \n" +
                  "			AND woop.`isRework` =  1  \n" +
                  "			AND woop.deletedAt IS NULL ;  \n" +
                  "  \n" +
                  "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND  \n" +
                  "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0  \n" +
                  "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN  \n" +
                  "  \n" +
                  "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".  \n" +
                  "							So after this operation, any one operation must be rework.');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			END IF;  \n" +
                  "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                  "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                  "  \n" +
                  "  \n" +
                  "  \n" +
                  "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                  "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems  \n" +
                  "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)  \n" +
                  "			AND programingStatus = 1  \n" +
                  "			AND deletedAt IS NULL LIMIT 1 ;  \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation  \n" +
                  "			WHERE woID = pwoID  \n" +
                  "			AND isPreProgrammingComponent = 1  \n" +
                  "			AND deletedAt IS NULL LIMIT 1;  \n" +
                  "  \n" +
                  "  \n" +
                  "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');  \n" +
                  "			END IF;  \n" +
                  "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                  "  \n" +
                  "  \n" +
                  "		END block4;  \n" +
                  "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                  "  \n" +
                  "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                  "		block5: BEGIN  \n" +
                  "        	DECLARE v_IsAllowSerialMappingWOId INT;  \n" +
                  "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);  \n" +
                  "			DECLARE v_CountMFRSR INT;  \n" +
                  "			IF allow_final_serialno_operation_count <= 2 THEN  \n" +
                  "				SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId  \n" +
                  "				,v_IsAllowSerialMappingOperationName FROM  \n" +
                  "				workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;  \n" +
                  "				IF(v_IsAllowSerialMappingWOId IS NOT NULL)  \n" +
                  "				THEN  \n" +
                  "					SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;  \n" +
                  "					IF v_CountMFRSR = 0 THEN  \n" +
                  "						INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));  \n" +
                  "					END IF;  \n" +
                  "				END IF;  \n" +
                  "            END IF;  \n" +
                  "		END block5;  \n" +
                  "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                  "  \n" +
                  "		/**************************************** start - case 6 - Check cleaning type of operation againse Assembly cleaning type ****************************************************/  \n" +
                  "        block6: BEGIN  \n" +
                  "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,  \n" +
                  "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,  \n" +
                  "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,  \n" +
                  "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt  \n" +
                  "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp  \n" +
                  "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;  \n" +
                  "			IF assyCleanType = '' THEN  \n" +
                  "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN  \n" +
                  "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "			ELSEIF	assyCleanType = 'NC' THEN  \n" +
                  "				SET err = 0;  \n" +
                  "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';  \n" +
                  "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				IF  bothOp IS NOT NULL THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				IF waterSolubleOp IS NOT NULL THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                  "				IF err > 0 THEN  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "			ELSEIF	assyCleanType = 'WS' THEN  \n" +
                  "				SET err= 0 ;  \n" +
                  "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';  \n" +
                  "				IF  noCleanOp IS NOT NULL THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				IF  bothOp IS NOT NULL THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				IF waterSolubleOp IS NULL THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                  "				IF err > 0 THEN  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "			ELSEIF	assyCleanType = 'BOTH' THEN  \n" +
                  "				-- Check Both Operation Available Then allow  \n" +
                  "				-- Check NoClean and WaterSolubale Both Operation Allow  \n" +
                  "				SET err= 0 ;  \n" +
                  "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';  \n" +
                  "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN  \n" +
                  "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');  \n" +
                  "					SET err = 1;  \n" +
                  "				END IF;  \n" +
                  "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                  "				IF err > 0 THEN  \n" +
                  "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                  "				END IF;  \n" +
                  "			END IF;  \n" +
                  "        END block6;  \n" +
                  "		/**************************************** end - case 6 - first operation should not be rework type ****************************************************/  \n" +
                  "  \n" +
                  "		/**************************************** start - case 7 - Validate Ref Designator ****************************************************/  \n" +
                  "        block7: BEGIN  \n" +
                  "			DECLARE vBOMRefDesigList,vWoOpRefDesigList,vOdddlyRefDes,vAddedWoOpRefDes TEXT;  \n" +
                  "			DECLARE startPos, endPos, maxLength INT ;  \n" +
                  "            DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                  "            DECLARE itemRefDesg varchar(500);  \n" +
                  "            DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                  "            SET vAddedWoOpRefDes = '';  \n" +
                  "  \n" +
                  "            SELECT  Group_Concat(concat_ws(',',rl.refDesig,rl.dnpDesig)) INTO vBOMRefDesigList  \n" +
                  "            From rfq_lineitems rl  \n" +
                  "            LEFT JOIN part_sub_assy_relationship psub  ON rl.partID = psub.prPerPartID  and psub.isDeleted = 0  \n" +
                  "            Where rl.isDeleted = 0  \n" +
                  "            And psub.partID = vPartID;  \n" +
                  "  \n" +
                  "			IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                  "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                  "			END IF;  \n" +
                  "  \n" +
                  "            SELECT  Group_Concat(wor.refDesig) INTO vWoOpRefDesigList  \n" +
                  "            From workorder_operation_refDesig wor  \n" +
                  "            Where wor.isDeleted = 0  \n" +
                  "            AND wor.woID = pWoId;  \n" +
                  "  \n" +
                  "			SELECT GROUP_CONCAT(cor.refDes) INTO vOdddlyRefDes  \n" +
                  "            From component_oddely_refdes cor  \n" +
                  "            Where cor.refComponentID = vPartID  \n" +
                  "            and cor.isDeleted =0;  \n" +
                  "			--  validation for  oddly named ref des  \n" +
                  "			--  case:  if oddly ref des added and one of them is 'V1-M1' then no need to  send that to fun_getDesignatorList  \n" +
                  "            --  Separate added oddly RefDes and merge after getting valid refDes list  \n" +
                  "            IF vOdddlyRefDes IS NOT NULL THEN  \n" +
                  "				SET startPos = 1;  \n" +
                  "				SET maxLength = Length(vOdddlyRefDes);  \n" +
                  "				REPEAT  \n" +
                  "					SET endPos = LOCATE(',',vOdddlyRefDes,startPos);  \n" +
                  "					IF endPos = 0 THEN  \n" +
                  "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos);  \n" +
                  "					ELSE  \n" +
                  "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos,endPos-startPos);  \n" +
                  "					END IF;  \n" +
                  "  \n" +
                  "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                  "						IF(INSTR(vWoOpRefDesigList, itemRefDesg) > 0) THEN  \n" +
                  "                        	IF vAddedWoOpRefDes = '' OR vAddedWoOpRefDes IS NULL THEN  \n" +
                  "								SET vAddedWoOpRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                  "							 ELSE  \n" +
                  "								SET vAddedWoOpRefDes = CONCAT_WS(',',vAddedWoOpRefDes,itemRefDesg);  \n" +
                  "							 END IF;  \n" +
                  "                        END IF;  \n" +
                  "						SET vWoOpRefDesigList = REPLACE(vWoOpRefDesigList,concat(itemRefDesg,','),'');  \n" +
                  "					END IF;  \n" +
                  "  \n" +
                  "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                  "						SET startPos = maxLength;  \n" +
                  "					ELSE  \n" +
                  "						SET startPos = endPos + 1;  \n" +
                  "					END IF;  \n" +
                  "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                  "            END IF;  \n" +
                  "  \n" +
                  "             IF vWoOpRefDesigList IS NOT NULL OR  vWoOpRefDesigList <> '' THEN  \n" +
                  "				SELECT  fun_getDesignatorList(vWoOpRefDesigList) into vWoOpRefDesigList;  \n" +
                  "                IF vAddedWoOpRefDes IS NOT NULL OR vAddedWoOpRefDes <> '' THEN  \n" +
                  "					SET vWoOpRefDesigList = CONCAT_WS(',',vAddedWoOpRefDes,  vWoOpRefDesigList);  \n" +
                  "                END IF;  \n" +
                  "            END IF;  \n" +
                  "			SET startPos = 1;  \n" +
                  "            SET maxLength = Length(vWoOpRefDesigList);  \n" +
                  "            IF vWoOpRefDesigList IS NOT NULL THEN  \n" +
                  "				REPEAT  \n" +
                  "					SET endPos = LOCATE(',',vWoOpRefDesigList,startPos);  \n" +
                  "					IF endPos = 0 THEN  \n" +
                  "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos);  \n" +
                  "					ELSE  \n" +
                  "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos,endPos-startPos);  \n" +
                  "					END IF;  \n" +
                  "  \n" +
                  "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                  "						IF(INSTR(vBOMRefDesigList,itemRefDesg) = 0) THEN  \n" +
                  "							SET vInvalidCount = vInvalidCount +1 ;  \n" +
                  "							IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                  "								SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                  "							 ELSE  \n" +
                  "								SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                  "							 END IF;  \n" +
                  "						END IF;  \n" +
                  "					END IF;  \n" +
                  "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                  "						SET startPos = maxLength;  \n" +
                  "					ELSE  \n" +
                  "						SET startPos = endPos + 1;  \n" +
                  "					END IF;  \n" +
                  "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                  "            END IF;  \n" +
                  "            IF vInvalidCount > 0 THEN  \n" +
                  "				INSERT INTO temp_operation_error (errorText) VALUES ( concat('Invalid REF DES found in one of Operation(s). <br/> <b>',vInvalidList,'</b>'));  \n" +
                  "            END IF;  \n" +
                  "        END block7;  \n" +
                  "        /**************************************** end - case 7 - Validate Ref Designator ****************************************************/  \n" +
                  "		SELECT errorText FROM temp_operation_error;  \n" +
                  "  \n" +
                  "		/* check all above result, if all is set true than do publish*/  \n" +
                  "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN  \n" +
                  "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                  "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;  \n" +
                  "		END IF;  \n" +
                  "	END block1;  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5427,'2.00','V1','Sproc_ValidateWorkorderAndPublish - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5427:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                  "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation;  \n" +
                  "CREATE TRIGGER `Trg_AU_WorkOrder_Operation` AFTER UPDATE ON `workorder_operation` FOR EACH ROW BEGIN  \n" +
                  "  \n" +
                  "    DECLARE vWoVersion VARCHAR(200);  \n" +
                  "	SELECT woVersion INTO vWoVersion  \n" +
                  "    FROM workorder w  \n" +
                  "    WHERE w.woID = NEW.woID  \n" +
                  "    AND IFNULL(w.isDeleted,0) = 0;  \n" +
                  "  \n" +
                  "	IF IFNULL(OLD.opName, 0) != IFNULL(NEW.opName, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNAME',  \n" +
                  "			CAST(OLD.opName AS CHAR),CAST(NEW.opName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion ,'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.processTime, 0) != IFNULL(NEW.processTime, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PROCESSTIME',  \n" +
                  "			CAST(OLD.processTime AS CHAR),CAST(NEW.processTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.setupTime, 0) != IFNULL(NEW.setupTime, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'SETUPTIME',  \n" +
                  "			CAST(OLD.setupTime AS CHAR),CAST(NEW.setupTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.perPieceTime , 0)!= IFNULL(NEW.perPieceTime, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PERPIECETIME',  \n" +
                  "			CAST(OLD.perPieceTime AS CHAR),CAST(NEW.perPieceTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Date');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.qtyControl, 0) != IFNULL(NEW.qtyControl, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'QTYCONTROL',  \n" +
                  "			CAST(OLD.qtyControl AS CHAR),CAST(NEW.qtyControl AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	-- IF IFNULL(OLD.cleaningType, 0) != IFNULL(NEW.cleaningType, 0)  THEN  \n" +
                  "	-- 	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                  "	-- 	VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'CLEANINGTYPE',  \n" +
                  "	-- 		CAST(OLD.cleaningType AS CHAR),CAST(NEW.cleaningType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "    --         vWoVersion , NEW.opVersion,'Case');  \n" +
                  "	-- END IF;  \n" +
                  "	 IF IFNULL(OLD.isFluxNotApplicable, 0) != IFNULL(NEW.isFluxNotApplicable , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FLUXNOTAPPLICABLE',  \n" +
                  "			CAST(OLD.isFluxNotApplicable AS CHAR),CAST(NEW.isFluxNotApplicable AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                  "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                  "	 END IF;  \n" +
                  "     IF IFNULL(OLD.isWaterSoluble, 0) != IFNULL(NEW.isWaterSoluble , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'WATERSOLUBLE',  \n" +
                  "			CAST(OLD.isWaterSoluble AS CHAR),CAST(NEW.isWaterSoluble AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                  "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                  "	 END IF;  \n" +
                  "     IF IFNULL(OLD.isNoClean, 0) != IFNULL(NEW.isNoClean , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'NOCLEAN',  \n" +
                  "			CAST(OLD.isNoClean AS CHAR),CAST(NEW.isNoClean AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                  "            vWoVersion  , NEW.opVersion ,'Boolean');  \n" +
                  "	 END IF;  \n" +
                  "	IF IFNULL(OLD.opDescription, 0) != IFNULL(NEW.opDescription , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDESCRIPTION',  \n" +
                  "			CAST(OLD.opDescription AS CHAR),CAST(NEW.opDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opWorkingCondition, 0) != IFNULL(NEW.opWorkingCondition, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPWORKINGCONDITION',  \n" +
                  "			CAST(OLD.opWorkingCondition AS CHAR),CAST(NEW.opWorkingCondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy ,NEW.updateByRoleId,  \n" +
                  "            vWoVersion, NEW.opVersion ,'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opManagementInstruction, 0) != IFNULL(NEW.opManagementInstruction, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPMANAGEMENTINSTRUCTION',  \n" +
                  "			CAST(OLD.opManagementInstruction AS CHAR),CAST(NEW.opManagementInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opDeferredInstruction, 0) != IFNULL(NEW.opDeferredInstruction, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDEFERREDINSTRUCTION',  \n" +
                  "			CAST(OLD.opDeferredInstruction AS CHAR),CAST(NEW.opDeferredInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opDoes, 0) != IFNULL(NEW.opDoes, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDOES',  \n" +
                  "			CAST(OLD.opDoes AS CHAR),CAST(NEW.opDoes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion, NEW.opVersion, 'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opDonts , 0)!= IFNULL(NEW.opDonts , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDONTS',  \n" +
                  "			CAST(OLD.opDonts AS CHAR),CAST(NEW.opDonts AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion, NEW.opVersion,'TextAngular');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opStatus, 0) != IFNULL(NEW.opStatus , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPSTATUS',  \n" +
                  "			CAST(OLD.opStatus AS CHAR),CAST(NEW.opStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opOrder , 0)!= IFNULL(NEW.opOrder , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPORDER',  \n" +
                  "			CAST(OLD.opOrder AS CHAR),CAST(NEW.opOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVesion , NEW.opVersion , 'Number');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.operationTypeID, 0) != IFNULL(NEW.operationTypeID, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPERATIONTYPEID',  \n" +
                  "			CAST(OLD.operationTypeID AS CHAR),CAST(NEW.operationTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.parentOPID, 0) != IFNULL(NEW.parentOPID, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PARENTOPID',  \n" +
                  "			CAST(OLD.parentOPID AS CHAR),CAST(NEW.parentOPID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISOPERATIONDELETED',  \n" +
                  "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion,  NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.firstPcsConclusion, 0) != IFNULL(NEW.firstPcsConclusion , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSCONCLUSION',  \n" +
                  "			CAST(OLD.firstPcsConclusion AS CHAR),CAST(NEW.firstPcsConclusion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.firstPcsModel, 0) != IFNULL(NEW.firstPcsModel , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSMODEL',  \n" +
                  "			CAST(OLD.firstPcsModel AS CHAR),CAST(NEW.firstPcsModel AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion ,'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.firstPcsStatus, 0) != IFNULL(NEW.firstPcsStatus, 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSSTATUS',  \n" +
                  "			CAST(OLD.firstPcsStatus AS CHAR),CAST(NEW.firstPcsStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isIssueQty, 0) != IFNULL(NEW.isIssueQty, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISISSUEQTY',  \n" +
                  "			CAST(OLD.isIssueQty AS CHAR),CAST(NEW.isIssueQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isPreProgrammingComponent, 0) != IFNULL(NEW.isPreProgrammingComponent, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPREPROGRAMMINGCOMPONENT',  \n" +
                  "			CAST(OLD.isPreProgrammingComponent AS CHAR),CAST(NEW.isPreProgrammingComponent AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion, NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isRework, 0) != IFNULL(NEW.isRework, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISREWORK',  \n" +
                  "			CAST(OLD.isRework AS CHAR),CAST(NEW.isRework AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isStopOperation, 0) != IFNULL(NEW.isStopOperation, 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISSTOPOPERATION',  \n" +
                  "			CAST(OLD.isStopOperation AS CHAR),CAST(NEW.isStopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isTeamOperation , 0) != IFNULL(NEW.isTeamOperation , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTEAMOPERATION',  \n" +
                  "			CAST(OLD.isTeamOperation AS CHAR),CAST(NEW.isTeamOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isTerminated, 0) != IFNULL(NEW.isTerminated, 0)  THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTERMINATED',  \n" +
                  "			CAST(OLD.isTerminated AS CHAR),CAST(NEW.isTerminated AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opVersion, 0) != IFNULL(NEW.opVersion , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPVERSION',  \n" +
                  "			CAST(OLD.opVersion AS CHAR),CAST(NEW.opVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.colorCode, 0) != IFNULL(NEW.colorCode , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'COLORCODE',  \n" +
                  "			CAST(OLD.colorCode AS CHAR),CAST(NEW.colorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion ,'Color');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.isMoveToStock , 0) != IFNULL(NEW.isMoveToStock , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISMOVETOSTOCK',  \n" +
                  "			CAST(OLD.isMoveToStock AS CHAR),CAST(NEW.isMoveToStock AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "     IF IFNULL(OLD.isPlacementTracking , 0) != IFNULL(NEW.isPlacementTracking , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPLACEMENTTRACKING',  \n" +
                  "			CAST(OLD.isPlacementTracking AS CHAR),CAST(NEW.isPlacementTracking AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "     IF IFNULL(OLD.isTrackBySerialNo , 0) != IFNULL(NEW.isTrackBySerialNo , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTRACKBYSERIALNO',  \n" +
                  "			CAST(OLD.isTrackBySerialNo AS CHAR),CAST(NEW.isTrackBySerialNo AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isLoopOperation , 0) != IFNULL(NEW.isLoopOperation , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,  updateByRoleId,woVersion, opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISLOOPOPERATION',  \n" +
                  "			CAST(OLD.isLoopOperation AS CHAR),CAST(NEW.isLoopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.isAllowMissingPartQty , 0) != IFNULL(NEW.isAllowMissingPartQty , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWMISSINGPARTQTY',  \n" +
                  "			CAST(OLD.isAllowMissingPartQty AS CHAR),CAST(NEW.isAllowMissingPartQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.isAllowByPassQty , 0) != IFNULL(NEW.isAllowByPassQty , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWBYPASSQTY',  \n" +
                  "			CAST(OLD.isAllowByPassQty AS CHAR),CAST(NEW.isAllowByPassQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "     IF IFNULL(OLD.tabLimitAtTraveler , 0) != IFNULL(NEW.tabLimitAtTraveler , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'TABLIMITATTRAVELER',  \n" +
                  "			CAST(OLD.tabLimitAtTraveler AS CHAR),CAST(NEW.tabLimitAtTraveler AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.mountingTypeID , 0) != IFNULL(NEW.mountingTypeID , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'MOUNTINGTYPE',  \n" +
                  "			CAST(OLD.mountingTypeID AS CHAR),CAST(NEW.mountingTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.opNumber , 0) != IFNULL(NEW.opNumber , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNUMBER',  \n" +
                  "			CAST(OLD.opNumber AS CHAR),CAST(NEW.opNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "	IF IFNULL(OLD.isAllowFinalSerialMapping , 0) != IFNULL(NEW.isAllowFinalSerialMapping , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWFINALSERAILMAPPING',  \n" +
                  "			CAST(OLD.isAllowFinalSerialMapping AS CHAR),CAST(NEW.isAllowFinalSerialMapping AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.addRefDesig , 0) != IFNULL(NEW.addRefDesig , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ADDREFDESIG',  \n" +
                  "			CAST(OLD.addRefDesig AS CHAR),CAST(NEW.addRefDesig AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isRequireMachineVerification , 0) != IFNULL(NEW.isRequireMachineVerification , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'REQMACHINEVERIFICATION',  \n" +
                  "			CAST(OLD.isRequireMachineVerification AS CHAR),CAST(NEW.isRequireMachineVerification AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.doNotReqApprovalForScan , 0) != IFNULL(NEW.doNotReqApprovalForScan , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'DONOTREQAPPROVALFORSCAN',  \n" +
                  "			CAST(OLD.doNotReqApprovalForScan AS CHAR),CAST(NEW.doNotReqApprovalForScan AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'String');  \n" +
                  "	END IF;  \n" +
                  "	IF IFNULL(OLD.isRequireRefDesWithUMID , 0) != IFNULL(NEW.isRequireRefDesWithUMID , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'REQUIEREFDESWITHUMID',  \n" +
                  "			CAST(OLD.isRequireRefDesWithUMID AS CHAR),CAST(NEW.isRequireRefDesWithUMID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "    IF IFNULL(OLD.isStrictlyLimitRefDes , 0) != IFNULL(NEW.isStrictlyLimitRefDes , 0) THEN  \n" +
                  "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)  \n" +
                  "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'STRICTLYREFDES',  \n" +
                  "			CAST(OLD.isStrictlyLimitRefDes AS CHAR),CAST(NEW.isStrictlyLimitRefDes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                  "            vWoVersion , NEW.opVersion , 'Boolean');  \n" +
                  "	END IF;  \n" +
                  "END;  \n" +	
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5428,'2.00','V1','Trg_AU_WorkOrder_Operation - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
              break;
              case 5428:
                allDbChangesArray.push(
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP FUNCTION IF EXISTS `fun_createBOMErrorMsgByErrorCodeandLineID`;  \n" +
                    "CREATE FUNCTION `fun_createBOMErrorMsgByErrorCodeandLineID`(  \n" +
                    "	pErrorCode VARCHAR(100),  \n" +
                    "	pRFQLineItemAlternatePartID INT  \n" +
                    ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                    "BEGIN  \n" +
                    "DECLARE vErrorMsg VARCHAR(2000);  \n" +
                    "DECLARE vErrorCode VARCHAR(2000);  \n" +
                    "DECLARE vMPN VARCHAR(200);  \n" +
                    "DECLARE vMFR VARCHAR(200);  \n" +
                    "DECLARE vSPN VARCHAR(200);  \n" +
                    "DECLARE vSupplierPN VARCHAR(200);  \n" +
                    "DECLARE vCPN VARCHAR(200);  \n" +
                    "DECLARE vCPNRev VARCHAR(200);  \n" +
                    "DECLARE vPartPIN VARCHAR(200);  \n" +
                    "DECLARE vPartRow VARCHAR(200);  \n" +
                    "DECLARE vLinePin VARCHAR(200);  \n" +
                    "DECLARE vLineRow VARCHAR(200);  \n" +
                    "DECLARE vPartUOM VARCHAR(200);  \n" +
                    "DECLARE vLineUOM VARCHAR(200);  \n" +
                    "DECLARE vPartStatus VARCHAR(200);  \n" +
                    "  \n" +
                    "	SELECT description,errorcode INTO vErrorMsg,vErrorCode FROM rfq_lineitems_errorcode  \n" +
                    "	WHERE errorcode = pErrorCode;  \n" +
                    "	SELECT rla.mfgPN, rla.mfgCode, rla.distPN, rla.distributor, rl.custPN, rl.customerRev,c.noOfPosition, rl.numOfPosition,  \n" +
                    "		c.noOfRows, rl.numOfRows, uc.unitName, ul.unitName, cps.name  \n" +
                    "		INTO  \n" +
                    "		vMPN, vMFR, vSPN, vSupplierPN, vCPN, vCPNRev, vPartPIN, vLinePin, vPartRow,  vLineRow, vPartUOM, vLineUOM, vPartStatus  \n" +
                    "	FROM rfq_lineitems_alternatepart rla  \n" +
                    "	INNER JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                    "	INNER JOIN component c ON c.id = rla.mfgPNID  \n" +
                    "	INNER JOIN uoms uc ON uc.id = c.uom  \n" +
                    "	INNER JOIN uoms ul ON ul.id = rl.uomID  \n" +
                    "	INNER JOIN component_partstatusmst cps ON cps.id = c.partStatus  \n" +
                    "	WHERE rla.id = pRFQLineItemAlternatePartID;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% MFR %>', IFNULL(vMFR,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% MPN %>', IFNULL(vMPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% CPN %>', IFNULL(vCPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% CPN Rev %>', IFNULL(vCPNRev,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Supplier %>', IFNULL(vSupplierPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% SPN %>', IFNULL(vSPN,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Part No. of Rows %>', IFNULL(vPartRow,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% No. of Rows %>', IFNULL(vLineRow,'')) INTO vErrorMsg;  \n" +
                    "	#SELECT REPLACE(vErrorMsg, '<% UOM %>', IFNULL(vLineUOM,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Part UOM %>', IFNULL(vPartUOM,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Part Status %>', IFNULL(vPartStatus,'')) INTO vErrorMsg;  \n" +
                    "	#SELECT REPLACE(vErrorMsg, '<% Mounting Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                    "	#SELECT REPLACE(vErrorMsg, '<% Functional Types %>', IFNULL(rla.mfgCode,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Pin Per RefDes ON PCB %>', IFNULL(vLinePin,'')) INTO vErrorMsg;  \n" +
                    "	SELECT REPLACE(vErrorMsg, '<% Part Pin COUNT %>', IFNULL(vPartPIN,'')) INTO vErrorMsg;  \n" +
                    "  \n" +
                    "	RETURN CONCAT(vErrorCode,': ',vErrorMsg);  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP FUNCTION IF EXISTS `fun_getQuoteSubjectToFollowing`;  \n" +
                    "CREATE FUNCTION `fun_getQuoteSubjectToFollowing`(  \n" +
                    "	prfqAssyID INT  \n" +
                    "    ) RETURNS longtext CHARSET utf8mb4  \n" +
                    "BEGIN  \n" +
                    "DECLARE result LONGTEXT;  \n" +
                    "SET SESSION group_concat_max_len = 5000000;  \n" +
                    "DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                    "			CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
                    "			WITH RECURSIVE cte AS  \n" +
                    "			(  \n" +
                    "				(  \n" +
                    "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,  \n" +
                    "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,  \n" +
                    "					comp.PIDCode, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,  \n" +
                    "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,  \n" +
                    "					com.category, rl.lineID,rl.custPN,rl.customerRev  \n" +
                    "					FROM rfq_lineitems_alternatepart rla  \n" +
                    "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                    "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id  \n" +
                    "					LEFT JOIN component com ON com.id = rla.mfgPNID  \n" +
                    "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID  \n" +
                    "					WHERE rl.partId = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID ) OR rla.partID = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID )  \n" +
                    "					AND rla.isDeleted = 0  \n" +
                    "				)  \n" +
                    "				UNION ALL  \n" +
                    "				(  \n" +
                    "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,  \n" +
                    "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,  \n" +
                    "					comp.PIDCode, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,  \n" +
                    "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,  \n" +
                    "					com.category, rl.lineID,rl.custPN,rl.customerRev  \n" +
                    "					FROM rfq_lineitems_alternatepart rla  \n" +
                    "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                    "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id  \n" +
                    "					LEFT JOIN component com ON com.id = rla.mfgPNID  \n" +
                    "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID  \n" +
                    "					RIGHT JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID  \n" +
                    "					WHERE rla.isDeleted = 0  \n" +
                    "				)  \n" +
                    "			)  \n" +
                    "			SELECT cte.* FROM cte  \n" +
                    "            ORDER BY LEVEL;  \n" +
                    "  \n" +
                    "SELECT CONCAT((CASE WHEN ra.isReadyForPricing THEN (CASE WHEN partcostingBOMIssue IS NULL THEN '' ELSE '<b>Issues Require Customer Engineering Resolution</b><br/>' END) ELSE '' END) , (CASE WHEN ra.isReadyForPricing THEN (CASE WHEN partcostingBOMIssue IS NULL THEN '' ELSE partcostingBOMIssue END ) ELSE '' END), IFNULL(bomIssue, '')) INTO result  \n" +
                    "FROM rfq_assemblies ra  \n" +
                    "JOIN  \n" +
                    "(  \n" +
                    "	SELECT  GROUP_CONCAT(IFNULL(bomIssue,'') SEPARATOR '<br /> ') bomIssue  \n" +
                    "    FROM  \n" +
                    "    (  \n" +
                    "		SELECT GROUP_CONCAT(IFNULL(bomIssue,'') SEPARATOR '<br /> ') bomIssue  \n" +
                    "		FROM  \n" +
                    "		(  \n" +
                    "			SELECT bomIssue  \n" +
                    "		    FROM  \n" +
                    "		    (  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Excess Material</b><br/>', GROUP_CONCAT(bomIssue ORDER BY requestQty,lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "					    SELECT CONCAT('Item: ', TRIM(a.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(a.refDesig), (CASE WHEN a.custPN IS NOT NULL THEN CONCAT(' : CPN: ',a.custPN ,'Rev',IFNULL(a.customerRev,'-')) ELSE '' END), ' : ', a.mfgCode,  \n" +
                    "						' : ', a.mfgPN,' : UOM: ',a.unitName, ' : Requested QTY: ', requestQty, ' : QPA: ', TRIM(qpa)+0 ,(CASE WHEN connecterTypeID = -2 THEN CONCAT(' : Requested Pin:',TRIM(reqQty*numOfPosition)+0) ELSE '' END),  \n" +
                    "						' : Quoted QTY: ', a.quoteQty, ' : Excess QTY: ', a.excessqty, ' @ $', TRIM(a.unitPrice)+0,' / ',(CASE WHEN connecterTypeID = -2 THEN 'Pin' ELSE a.unitName END),' : Selected part contains excess material.') AS bomIssue,  \n" +
                    "						TRIM(a.lineID) + 0 AS lineID, requestQty  \n" +
                    "						FROM  \n" +
                    "						(  \n" +
                    "							SELECT rcl.id, rclq.qtyID, rclq.unitPrice, rcl.lineID, rcl.rfqAssyID, rcl.uomID, uo.unitName, rcl.refDesig, raq.requestQty, rcl.qpa, TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.quoteQty,  \n" +
                    "							(CASE WHEN com.connecterTypeID = -2 THEN TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa * rcl.numOfPosition))+0 ELSE TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa))+0 END) excessqty, com.mfgPN, mfg.mfgCode,rl.custPN,rl.customerRev, com.connecterTypeID, rcl.numOfPosition  \n" +
                    "							FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "							LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID  \n" +
                    "							LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id  \n" +
                    "							LEFT JOIN component com ON com.id = rclq.componentID  \n" +
                    "							LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "							LEFT JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "							LEFT JOIN uoms uo ON uo.id = rcl.uomID  \n" +
                    "							WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1  \n" +
                    "							GROUP BY rcl.id , rclq.qtyID  \n" +
                    "							HAVING excessqty > 0  \n" +
                    "						) a  \n" +
                    "						ORDER BY requestQty, a.lineID  \n" +
                    "					) excessMaterial  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Customer Consigned Items</b><br/>', GROUP_CONCAT(bomIssue SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(rcl.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(rcl.refDesig),  (CASE WHEN rl.custPN IS NOT NULL THEN CONCAT(' : CPN: ',rl.custPN ,'Rev',IFNULL(rl.customerRev,'-')) ELSE '' END),' : ', GROUP_CONCAT(CONCAT(mfg.mfgcode, ' : ', com.mfgPN) SEPARATOR ' | '), ' : Customer Consigned Items.') AS bomIssue,  \n" +
                    "						TRIM(rcl.lineID) + 0 AS lineID  \n" +
                    "						FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "						JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID  \n" +
                    "						JOIN component com ON com.id = rcla.mfgPNID  \n" +
                    "						JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "						LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "						WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rcl.isPurchase = 0  \n" +
                    "						GROUP BY rcl.id  \n" +
                    "						ORDER BY rcl.lineID  \n" +
                    "					) customerConsigned  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Unquoted Items</b><br/>', GROUP_CONCAT(bomIssue ORDER BY lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(a.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(a.refDesig),  (CASE WHEN a.custPN IS NOT NULL THEN CONCAT(' : CPN: ',a.custPN ,'Rev',IFNULL(a.customerRev,'-')) ELSE '' END),' : ', GROUP_CONCAT(CONCAT(mfg.mfgcode, ' : ', com.mfgPN) SEPARATOR ' | '), ' : Requested QTY: ', a.requestQty, '  : Unquoted quantity.') AS bomIssue,  \n" +
                    "						TRIM(a.lineID) + 0 AS lineID  \n" +
                    "						FROM  \n" +
                    "						(  \n" +
                    "							SELECT rcl.id, rcl.lineID, rcl.rfqAssyID, rcl.refDesig, GROUP_CONCAT(raq.requestQty) requestQty ,rl.custPN,rl.customerRev  \n" +
                    "							FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "							LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID  \n" +
                    "							LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id  \n" +
                    "							LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "							WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NULL AND rcl.isPurchase = 1  \n" +
                    "							GROUP BY rcl.id  \n" +
                    "						) a  \n" +
                    "						LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON a.id = rcla.consolidateID  \n" +
                    "						LEFT JOIN component com ON com.id = rcla.mfgPNID  \n" +
                    "						LEFT JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "						GROUP BY a.id  \n" +
                    "						ORDER BY a.lineID  \n" +
                    "					) unQuoted  \n" +
                    "				)  \n" +
                    "			    UNION  \n" +
                    "			    (  \n" +
                    "					SELECT CONCAT('<b>Unquoted Labor Items</b><br/>', GROUP_CONCAT(bomIssue ORDER BY assyLevel  SEPARATOR '<br />')) bomIssue  \n" +
                    "                    FROM (  \n" +
                    "						SELECT CONCAT(assyName,' Mountng Type: ', mountingType,' QPA: ',TRIM(totalQPA)+0,' Quantity: ',  GROUP_CONCAT(TRIM(assyQPA*quantity)+0),' ', \"Labor does not considered.\") bomIssue, assyLevel  \n" +
                    "						FROM (  \n" +
                    "								SELECT fun_getAssyNameByID(ramd.partID) assyName, fun_getMountingTypeNameByID(ramd.mountingTypeID) mountingType,  \n" +
                    "								(SELECT SUM(perBuildQty) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND rfqAssyID =  ramd.rfqAssyID AND isDeleted = 0) assyQPA,  \n" +
                    "								(SELECT requestQty FROM rfq_assy_quantity WHERE id = raql.rfqAssyQtyID) quantity, ramd.totalQPA, ramd.lineCount, raql.perAssyPrice,  \n" +
                    "								 raql.price, (SELECT MAX(`level`) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND isDeleted = 0 AND rfqAssyID = ramd.rfqAssyID)assyLevel  \n" +
                    "								 FROM rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
                    "								JOIN rfq_assy_labor_bom_mountingtype_qpa_detail ramd ON ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 0  \n" +
                    "								WHERE raql.isDeleted  = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.mountingTypeID IS NOT NULL AND raql.price = 0  \n" +
                    "						)a  \n" +
                    "						GROUP BY a.assyName, a.mountingType  \n" +
                    "						ORDER BY assyLevel ASC  \n" +
                    "					)unquotedLabor  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Low Stock Alerts</b><br/>', GROUP_CONCAT(bomIssue ORDER BY lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(a.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(a.refDesig),  (CASE WHEN a.custPN IS NOT NULL THEN CONCAT(' : CPN: ',a.custPN ,'Rev',IFNULL(a.customerRev,'-')) ELSE '' END),' : ', a.mfgCode, ' : ', a.mfgPN, ' : Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, '  : Supplier does not having sufficient stock for selected part.') AS bomIssue,  \n" +
                    "						TRIM(a.lineID) + 0 AS lineID  \n" +
                    "						FROM  \n" +
                    "						(  \n" +
                    "							SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, com.mfgPN, mfg.mfgCode, rclq.quoteQty,  \n" +
                    "							TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.grossStock, rclq.currentStock,rl.custPN,rl.customerRev  \n" +
                    "							FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "							LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID  \n" +
                    "							LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id  \n" +
                    "							LEFT JOIN component com ON com.id = rclq.componentID  \n" +
                    "							LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "							LEFT JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "							WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1  \n" +
                    "							GROUP BY rcl.id , rclq.qtyID  \n" +
                    "							HAVING reqQty > grossStock  \n" +
                    "						) a  \n" +
                    "						ORDER BY a.lineID  \n" +
                    "					) lowStock  \n" +
                    "				)  \n" +
                    "			   	UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Long Lead Time Risks</b><br/>', GROUP_CONCAT(bomIssue ORDER BY lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(a.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(a.refDesig),  (CASE WHEN a.custPN IS NOT NULL THEN CONCAT(' : CPN: ',a.custPN ,'Rev',IFNULL(a.customerRev,'-')) ELSE '' END),' : ', a.mfgCode,' : ', a.mfgPN, ' : Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, ' : Lead time: ', a.leadTime, ' week  : Lead time is high for selected part.') AS bomIssue,  \n" +
                    "						TRIM(a.lineID) + 0 AS lineID  \n" +
                    "						FROM  \n" +
                    "						(  \n" +
                    "							SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, com.mfgPN, mfg.mfgCode, rclq.quoteQty, TRIM(raq.requestQty * rcl.qpa)+0 reqQty,  \n" +
                    "							grossStock, IFNULL(rclq.leadTime,0)leadTime,rl.custPN,rl.customerRev  \n" +
                    "							FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "							LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID  \n" +
                    "							LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id  \n" +
                    "							LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "							LEFT JOIN component com ON com.id = rclq.componentID  \n" +
                    "							LEFT JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "							WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1  \n" +
                    "							GROUP BY rcl.id , rclq.qtyID  \n" +
                    "							HAVING grossStock < reqQty  \n" +
                    "						) a  \n" +
                    "						ORDER BY a.lineID  \n" +
                    "					) leadTime  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Obsolete Parts</b><br/>', GROUP_CONCAT(bomIssue ORDER BY lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(rcl.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(rcl.refDesig), (CASE WHEN rl.custPN IS NOT NULL THEN CONCAT(' : CPN: ',rl.custPN ,'Rev',IFNULL(rl.customerRev,'-')) ELSE '' END),' : ' , CONCAT(mfg.mfgcode, ' : ', com.mfgPN), ' : Part is Obsoleted.') AS bomIssue,  \n" +
                    "							TRIM(rcl.lineID) + 0 AS lineID ,rl.custPN,rl.customerRev  \n" +
                    "						FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "						JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID  \n" +
                    "						JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID  \n" +
                    "						JOIN component com ON com.id = rcla.mfgPNID AND partstatus = (SELECT id FROM component_partstatusmst WHERE `name` = 'Obsolete')  \n" +
                    "						JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "						LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "						WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0  \n" +
                    "						GROUP BY rcl.id  \n" +
                    "						ORDER BY rcl.lineID  \n" +
                    "					) obsoletePart  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>LOA Parts Detail</b><br/>', GROUP_CONCAT(bomIssue ORDER BY lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT('Item: ', TRIM(rcl.lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(rcl.refDesig), (CASE WHEN rl.custPN IS NOT NULL THEN CONCAT(' : CPN: ',rl.custPN ,'Rev',IFNULL(rl.customerRev,'-')) ELSE '' END),' : ' , CONCAT(mfg.mfgcode, ' : ', com.mfgPN), CONCAT(' : LOA Price: $',CAST(rclq.LOAprice AS DECIMAL(10,5))),' : LOA Price given for part.') AS bomIssue,  \n" +
                    "							rcl.refDesig,TRIM(rcl.lineID) + 0 AS lineID ,rl.custPN,rl.customerRev,mfg.mfgcode, com.mfgPN, rclq.LOAprice  \n" +
                    "						FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                    "						JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID  \n" +
                    "						JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID  \n" +
                    "						JOIN component com ON com.id = rcla.mfgPNID  \n" +
                    "						JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID  \n" +
                    "						LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID  \n" +
                    "						WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.LOAprice IS NOT NULL  \n" +
                    "						GROUP BY rcl.id  \n" +
                    "						ORDER BY rcl.lineID  \n" +
                    "					) LOAPart  \n" +
                    "				)  \n" +
                    "				UNION  \n" +
                    "				(  \n" +
                    "					SELECT CONCAT('<b>Customer Engineering Approved Items</b><br/>', GROUP_CONCAT(bomIssue ORDER BY LEVEL, lineID SEPARATOR '<br />')) bomIssue  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT CONCAT(PIDCode, ' : Item: ', TRIM(lineID) + 0, ' : RefDes: ', fun_ConvertRefdesgString(refDesig), (CASE WHEN custPN IS NOT NULL THEN CONCAT(' : CPN: ',custPN ,'Rev',IFNULL(customerRev,'-')) ELSE '' END), ' : ', CONCAT(alternatepartmfg, ' : ', alternatepart), ' : ',`comment`) AS bomIssue,  \n" +
                    "						TRIM(lineID)+0 AS lineID,LEVEL  \n" +
                    "						FROM leveldata  \n" +
                    "						WHERE requiredToShowOnQuoteSummary = 1  \n" +
                    "						ORDER BY LEVEL , lineID  \n" +
                    "					) a  \n" +
                    "				)  \n" +
                    "			) a  \n" +
                    "			HAVING bomIssue IS NOT NULL  \n" +
                    "		) a  \n" +
                    "	) X  \n" +
                    ") b  \n" +
                    "WHERE ra.id = prfqAssyID ;  \n" +
                    "RETURN result;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5429,'2.00','V1','User Story 37958: Improvement points given by JV on Oddly Named REF DES, ES, Epoxy logic changes [21/10/2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5429:
                allDbChangesArray.push(
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                    "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(  \n" +
                    "	IN prfqAssyIDORrefSalesOrderdetID INT,  \n" +
                    "    IN ppartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE v_GroupConcatSeparator text;  \n" +
                    "	SET SESSION group_concat_max_len = 500000;  \n" +
                    "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                    "       -- Create leavel wise assembly BOM data  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                    "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                    "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
                    "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
                    "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
                    "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				/*  \n" +
                    "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,  \n" +
                    "				*/  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				/* we not required this in functionaly this will be used for check in detail  \n" +
                    "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                    "				*/  \n" +
                    "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                    "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0  \n" +
                    "			)  \n" +
                    "			UNION ALL  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                    "				rl.refDesig,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS qpacount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS kitqpacount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS dnpQty,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS kitdnpQty,  \n" +
                    "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.refDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.qpa,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.qpa,0)  \n" +
                    "					END)  \n" +
                    "				) AS qpa1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END)*  \n" +
                    "  (CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.qpa,0)  \n" +
                    "  END)  \n" +
                    "				) AS kitqpa1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.dnpDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS dnpQPA1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS kitdnpQPA1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.refDesigCount,0)  \n" +
                    "				) refDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.refDesigCount,0)  \n" +
                    "				) AS kitrefDesigCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) dnpDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) kitdnpDesigCount,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
                    "						1  \n" +
                    "					ELSE rl.qpaDesignatorStep  \n" +
                    "				END) AS qpaDesignatorStep ,  \n" +
                    "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				#com.packaginggroupID,  \n" +
                    "				/* we not required this in functionaly this will be used for check in detail  \n" +
                    "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                    "				*/  \n" +
                    "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                    "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
                    "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0  \n" +
                    "			)  \n" +
                    "		)  \n" +
                    "		SELECT cte.* FROM cte  \n" +
                    "		ORDER BY lineItemID;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                    "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS  \n" +
                    "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
                    "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
                    "					MIN(a.mountingTypeID)  \n" +
                    "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
                    "					MAX(approvedMountingTypeID)  \n" +
                    "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
                    "        (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN  /* Matched funcitonal Type */  \n" +
                    "					MIN(a.partType)  \n" +
                    "			WHEN MIN(a.partType) !=  MAX(a.partType)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval funcitonal Type */  \n" +
                    "					MAX(approvedFunctionalTypeID)  \n" +
                    "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD funcitonal type*/ END) partType,  \n" +
                    "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
                    "			MIN(a.connecterTypeID)  \n" +
                    "		ELSE  \n" +
                    "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
                    "		END) AS connecterTypeID,  \n" +
                    "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
                    "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
                    "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
                    "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
                    "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
                    "      a.approvedMountingType,' | ',  \n" +
                    "      ifnull(a.custAssyPN,''),' | ',  \n" +
                    "      ifnull(a.isCustom,0)  \n" +
                    "      ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
                    "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
                    "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
                    "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
                    "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
                    "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
                    "      ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
                    "      ' | Approved Mounting Type:', approvedMountingTypeName,  \n" +
                    "      ' | Approved Functional Type:', approvedFunctionalTypeName,  \n" +
                    "      ' | Custom PartNum:', ifnull(custAssyPN,''),  \n" +
                    "      ' | isCustom:', ifnull(isCustom,''),  \n" +
                    "      ' | AssyPN:', AssyPN,  \n" +
                    "      ' | partID:', partID,  \n" +
                    "      ' | assyCustPN:', assyCustPN,  \n" +
                    "      ' | mfgPN:', mfgPN,  \n" +
                    "      '}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
                    "		FROM  \n" +
                    "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID,x.AssyPN,x.assyCustPN, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
                    "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.custAssyPN, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
                    "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
                    "  x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
                    "  x.approvedMountingTypeID, x.approvedMountingTypeName, x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                    "				FROM  \n" +
                    "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, al.AssyPN, al.assyCustPN, IFNULL(d.id, c.id) AS mfgPNID,  \n" +
                    "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
                    "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
                    "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.custAssyPN, c.custAssyPN) AS custAssyPN, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
                    "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
                    "      IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
                    "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
                    "						(CASE WHEN al.approvedMountingType = 1 THEN c.functionalCategoryID ELSE -1 END) approvedFunctionalTypeID,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getPartTypeNameByID(c.functionalCategoryID) ELSE '' END) approvedFunctionalTypeName,  \n" +
                    "      al.mismatchMountingTypeStep,  \n" +
                    "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                    "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
                    "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
                    "							ELSE	 /*Packaging Alias*/  \n" +
                    "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                    "						END) AS restrictUsePermanentlyStep,  \n" +
                    "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
                    "							ELSE   /*Packaging Alias*/  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
                    "				FROM  \n" +
                    "					leveldata al  \n" +
                    "				INNER JOIN component c ON al.mfgPNID = c.id  \n" +
                    "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
                    "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
                    "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
                    "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
                    "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
                    "			) AS X  \n" +
                    "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID ,x.AssyPN,x.assyCustPN, x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.custAssyPN, x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
                    "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
                    "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
                    "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName,x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                    "		) a  \n" +
                    "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
                    "  \n" +
                    "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
                    "		EXECUTE query2;  \n" +
                    "		DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for level wise lineitem detail  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                    "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS  \n" +
                    "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,  \n" +
                    "				 a.numOfPosition,  \n" +
                    "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
                    "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1)  \n" +
                    "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				END) qpa,  /* QPA count for Pricing */  \n" +
                    "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(a.kitqpa1)  \n" +
                    "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(a.kitdnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
                    "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
                    "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */  \n" +
                    "                 IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
                    "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
                    "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
                    "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
                    "						' | RefDes Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP RefDes Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
                    "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, ' | assyCustPN:', a.assyCustPN, ' | AssyPN:', a.AssyPN,  '}') AS partlineID,  \n" +
                    "				(CASE WHEN a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isqpaMismatchflag,  \n" +
                    "				(CASE WHEN a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isdnpQPAMismatchflag,  \n" +
                    "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
                    "					THEN 1  \n" +
                    "				ELSE 0  \n" +
                    "				END) isPurchaseWithDNP  \n" +
                    "		FROM  \n" +
                    "			leveldata a  \n" +
                    "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level, a.rfqlineitemsid , a.partid, a.lineID , a.uomID,  a.isInstall,  \n" +
                    "        a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
                    "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "        -- Create Consolidated data in temp table  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                    "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS  \n" +
                    "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
                    "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
                    "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
                    "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
                    "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
                    "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
                    "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
                    "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
                    "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
                    "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
                    "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
                    "				GROUP_CONCAT(tal.mfgPartsWithPackagings SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidateRestrictPartDetail  \n" +
                    "		FROM  \n" +
                    "				temp_LevleWiseLineItemDetail tl  \n" +
                    "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
                    "		GROUP BY  \n" +
                    "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
                    "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
                    "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "   tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
                    "		ORDER BY rfqlineitemsid\");  \n" +
                    "  \n" +
                    "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
                    "		EXECUTE query3;  \n" +
                    "		DEALLOCATE PREPARE query3;  \n" +
                    "  \n" +
                    "        -- Drop temporary tables generated for generate consolidate data  \n" +
                    "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                    "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                    "  \n" +
                    "END;  \n" +		
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ`;  \n" +
                    "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ`(  \n" +
                    "	IN prfqAssyID INT,  \n" +
                    "	IN puserID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE v_GroupConcatSeparator text;  \n" +
                    "	SET SESSION group_concat_max_len = 500000;  \n" +
                    "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS priceGroupleveldata;  \n" +
                    "		CREATE TEMPORARY TABLE IF NOT EXISTS priceGroupleveldata AS  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                    "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
                    "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
                    "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
                    "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, ra.id AS rfqAssyID,  \n" +
                    "				rl.uomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                    "                join rfq_assemblies ra on ra.partID = rl.partID and ra.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				WHERE ra.rfqrefID in (select rfqrefID from rfq_assemblies where id = prfqAssyID) AND rla.isDeleted = 0  \n" +
                    "			)  \n" +
                    "			UNION ALL  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID, rl.refDesig,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS qpacount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS kitqpacount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS dnpQty,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS kitdnpQty,  \n" +
                    "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.refDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.qpa,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.qpa,0)  \n" +
                    "					END)  \n" +
                    "				) AS qpa1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END)*  \n" +
                    "                    (CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.qpa,0)  \n" +
                    "                    END)  \n" +
                    "				) AS kitqpa1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.dnpDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS dnpQPA1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "                    (CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS kitdnpQPA1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.refDesigCount,0)  \n" +
                    "				) refDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.refDesigCount,0)  \n" +
                    "				) AS kitrefDesigCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) dnpDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) kitdnpDesigCount,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
                    "						0  \n" +
                    "					ELSE rl.qpaDesignatorStep  \n" +
                    "				END) AS qpaDesignatorStep ,  \n" +
                    "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				rl.isInstall, rl.isPurchase, rl.lineID,rl.numOfPosition, cte.rfqAssyID AS rfqAssyID,  \n" +
                    "				rl.uomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
                    "				WHERE rla.isDeleted =0  \n" +
                    "			)  \n" +
                    "		)  \n" +
                    "		SELECT cte.* FROM cte  \n" +
                    "		ORDER BY lineItemID;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupAlternatepartwithPackagingGroup;  \n" +
                    "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWisePriceGroupAlternatepartwithPackagingGroup AS  \n" +
                    "		SELECT a.rfqAssyID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
                    "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
                    "					MIN(a.mountingTypeID)  \n" +
                    "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
                    "					MAX(approvedMountingTypeID)  \n" +
                    "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
                    "         (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN /* Matched funcitonal Type */  \n" +
                    "			MIN(a.partType)  \n" +
                    "		ELSE  \n" +
                    "			-1   /*-1 is TBD in case of Mismatched we need to display TBD functional type*/  \n" +
                    "		END) partType,  \n" +
                    "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
                    "			MIN(a.connecterTypeID)  \n" +
                    "		ELSE  \n" +
                    "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
                    "		END) AS connecterTypeID,  \n" +
                    "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
                    "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
                    "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
                    "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
                    "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
                    "                        a.approvedMountingType ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
                    "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
                    "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
                    "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
                    "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
                    "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
                    "                        ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
                    "                        ' | Approved Mounting Type:', approvedMountingTypeName,'}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
                    "		FROM  \n" +
                    "			(SELECT x.rfqAssyID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
                    "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
                    "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
                    "                    x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
                    "                    x.approvedMountingTypeID, x.approvedMountingTypeName  \n" +
                    "				FROM  \n" +
                    "				(SELECT al.rfqAssyID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, IFNULL(d.id, c.id) AS mfgPNID,  \n" +
                    "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
                    "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
                    "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
                    "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
                    "                        IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
                    "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
                    "                        (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
                    "                        (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
                    "                        al.mismatchMountingTypeStep,  \n" +
                    "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                    "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
                    "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
                    "							ELSE	 /*Packaging Alias*/  \n" +
                    "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                    "						END) AS restrictUsePermanentlyStep,  \n" +
                    "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
                    "							ELSE   /*Packaging Alias*/  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
                    "				FROM  \n" +
                    "					priceGroupleveldata al  \n" +
                    "				INNER JOIN component c ON al.mfgPNID = c.id  \n" +
                    "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
                    "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
                    "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
                    "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
                    "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
                    "			) AS X  \n" +
                    "			GROUP BY x.rfqAssyID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID , x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
                    "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
                    "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
                    "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName  \n" +
                    "		) a  \n" +
                    "		GROUP BY a.rfqAssyID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
                    "  \n" +
                    "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
                    "		EXECUTE query2;  \n" +
                    "		DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for level wise lineitem detail  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupLineItemDetail;  \n" +
                    "		CREATE TEMPORARY TABLE temp_LevleWisePriceGroupLineItemDetail AS  \n" +
                    "		SELECT a.rfqAssyID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,a.numOfPosition,  \n" +
                    "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
                    "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1)  \n" +
                    "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				END) qpa,  /* QPA count for Pricing */  \n" +
                    "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(a.kitqpa1)  \n" +
                    "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(a.kitdnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
                    "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
                    "                (CASE WHEN a.isBuyDNPQty = 'N' THEN  \n" +
                    "							0  \n" +
                    "						ELSE  \n" +
                    "							a.kitdnpQPA1  \n" +
                    "				END) AS kitdnpWithoutQPA , /* QPA count for Kit Allocation */  \n" +
                    "                IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
                    "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
                    "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
                    "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
                    "						' | RefDes Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP RefDes Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
                    "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, '}') AS partlineID,  \n" +
                    "				(CASE WHEN a.qpaDesignatorStep = 0 AND a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isqpaMismatchflag,  \n" +
                    "				(CASE WHEN a.qpaDesignatorStep = 0 AND a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isdnpQPAMismatchflag,  \n" +
                    "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
                    "					THEN 1  \n" +
                    "				ELSE 0  \n" +
                    "				END) isPurchaseWithDNP  \n" +
                    "		FROM  \n" +
                    "			priceGroupleveldata a  \n" +
                    "		GROUP BY a.rfqAssyID , a.level , a.rfqlineitemsid , a.partid , a.lineID , a.uomID , a.isInstall ,  \n" +
                    "         a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
                    "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "        -- Create Consolidated data in temp table  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
                    "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem AS  \n" +
                    "		SELECT tl.rfqAssyID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
                    "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
                    "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
                    "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
                    "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM priceGroupleveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
                    "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
                    "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
                    "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
                    "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
                    "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
                    "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
                    "				GROUP_CONCAT(tal.mfgPartsWithPackagings) AS consolidateRestrictPartDetail  \n" +
                    "		FROM  \n" +
                    "				temp_LevleWisePriceGroupLineItemDetail tl  \n" +
                    "				INNER JOIN temp_LevleWisePriceGroupAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
                    "		GROUP BY  \n" +
                    "					tl.rfqAssyID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
                    "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
                    "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "                     tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
                    "		ORDER BY rfqlineitemsid\");  \n" +
                    "  \n" +
                    "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
                    "		EXECUTE query3;  \n" +
                    "		DEALLOCATE PREPARE query3;  \n" +
                    "						#SELECT * FROM temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
                    "  \n" +
                    "			# delete record which are deleted  \n" +
                    "			UPDATE rfq_consolidate_price_group_mfgpn_lineitem_quantity rcplq,  \n" +
                    "				(SELECT  rclq.id FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                    "				JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID  \n" +
                    "				WHERE rcl.rfqAssyID = prfqAssyID AND rclq.isDeleted = 1) drclq  \n" +
                    "			SET  \n" +
                    "				isDeleted = 0,  \n" +
                    "				deletedAt = FUN_DATETIMETOUTCDATETIME(),  \n" +
                    "				deletedBy = puserID  \n" +
                    "			WHERE rcplq.refConsolidateLineitemQtyId = drclq.id AND rcplq.isDeleted = 0;  \n" +
                    "  \n" +
                    "	# update Existing record  \n" +
                    "			UPDATE rfq_consolidate_price_group_mfgpn_lineitem_quantity rcplq,  \n" +
                    "				(SELECT rcl.rfqAssyID, rclq.id, rclq.qtyid, rq.requestQty, rq.rfqPriceGroupId, rcl.consolidatedPartWithFlagDetail,rcl.isInstall,rcl.isPurchase  \n" +
                    "					FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                    "					JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID AND rcl.isDeleted = 0  \n" +
                    "					JOIN rfq_assy_quantity rq ON rq.id = rclq.qtyID AND rq.isDeleted = 0 AND rq.rfqPriceGroupID IS NOT NULL  \n" +
                    "					WHERE rcl.rfqAssyID = prfqAssyID AND rclq.isDeleted = 0) rclq,  \n" +
                    "				(SELECT  rq.rfqAssyID, trcl.qpa, rq.id AS qtyID, rq.requestQty, rq.rfqpriceGroupID, SUM(trcl.qpa * rq.requestQty) consolidatePriceGroupQty,  \n" +
                    "					trcl.consolidatedPartWithFlagDetail,trcl.isInstall,trcl.isPurchaseWithDNP  \n" +
                    "					FROM temp_Sproc_CreateRfqPriceGroupConsolidateLineItem trcl  \n" +
                    "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = trcl.rfqAssyID AND rq.isDeleted = 0 AND rq.rfqpriceGroupID IS NOT NULL  \n" +
                    "					GROUP BY rq.rfqpriceGroupID , trcl.consolidatedPartWithFlagDetail) trclq  \n" +
                    "			SET  \n" +
                    "				consolidatedQty = trclq.consolidatePriceGroupQty  \n" +
                    "			WHERE rclq.rfqAssyID = trclq.rfqAssyID AND rclq.consolidatedPartWithFlagDetail = trclq.consolidatedPartWithFlagDetail  \n" +
                    "            AND rclq.qtyID = trclq.qtyID AND rcplq.refConsolidateLineitemQtyId = rclq.id  \n" +
                    "            and rclq.isInstall = trclq.isInstall and rclq.isPurchase = trclq.isPurchaseWithDNP;  \n" +
                    "  \n" +
                    "			# insert New record which are not exists  \n" +
                    "			INSERT INTO `rfq_consolidate_price_group_mfgpn_lineitem_quantity`  \n" +
                    "			(`refConsolidateLineitemQtyId`,`consolidatedQty`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`)  \n" +
                    "			select rclq.id, consolidatePriceGroupQPA, puserID, fun_DatetimetoUTCDateTime(), puserID, fun_DatetimetoUTCDateTime()  \n" +
                    "			from rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                    "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rclq.consolidateID  \n" +
                    "			join rfq_assy_quantity rq on rq.id = rclq.qtyID and rq.rfqPriceGroupID is not Null  \n" +
                    "			join (  \n" +
                    "					select rq.rfqAssyID,trcl.qpa, rq.requestQty, rq.rfqpriceGroupID, sum(trcl.qpa * rq.requestQty) as consolidatePriceGroupQPA,  \n" +
                    "					trcl.consolidatedPartWithFlagDetail,trcl.isInstall,trcl.isPurchaseWithDNP  \n" +
                    "					from temp_Sproc_CreateRfqPriceGroupConsolidateLineItem trcl  \n" +
                    "					join rfq_assy_quantity rq on rq.rfqAssyID = trcl.rfqAssyID and rq.isDeleted = 0 and rq.rfqpriceGroupID is not null  \n" +
                    "					group by rq.rfqpriceGroupID,trcl.consolidatedPartWithFlagDetail  \n" +
                    "				) trclq on rclq.rfqPriceGroupID = trclq.rfqPriceGroupID  \n" +
                    "			where rcl.rfqAssyID = prfqAssyID and trclq.consolidatedPartWithFlagDetail = rcl.consolidatedPartWithFlagDetail and  rclq.isDeleted = 0  \n" +
                    "            and rcl.isInstall = trclq.isInstall and rcl.isPurchase = trclq.isPurchaseWithDNP  \n" +
                    "			and not exists (  \n" +
                    "			select 1 from rfq_consolidate_price_group_mfgpn_lineitem_quantity  \n" +
                    "			where refConsolidateLineitemQtyId = rclq.id and isDeleted = 0  \n" +
                    "			);  \n" +
                    "		# Update price Group BOM version  \n" +
                    "		update rfq_assemblies ra,component c, (select rfqrefID from rfq_assemblies where id = prfqAssyID) rfq  \n" +
                    "		set ra.priceGroupInternalVersion = c.liveVersion  \n" +
                    "		where ra.partID = c.id and ra.rfqrefID = rfq.rfqrefID and ra.isdeleted = 0;  \n" +
                    "  \n" +
                    "  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS priceGroupleveldata;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupLineItemDetail;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupAlternatepartwithPackagingGroup;  \n" +
                    "  \n" +
                    "	END;  \n" +		
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_ExportRFQCostDetail`;  \n" +
                    "CREATE PROCEDURE `Sproc_ExportRFQCostDetail`(  \n" +
                    "    IN prfqAssyID INT  \n" +
                    "	)  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "        DECLARE ppartID INT;  \n" +
                    "        DECLARE prefSubmittedQuoteID INT;  \n" +
                    "  \n" +
                    "        SELECT partID INTO ppartID FROM rfq_assemblies WHERE id = prfqAssyID;  \n" +
                    "        SELECT MAX(id) INTO prefSubmittedQuoteID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = prfqAssyID;  \n" +
                    "  \n" +
                    "    # BOM data  \n" +
                    "	SELECT compAssy.PIDCode as AssyID, fun_replaceSpecialCharacters(compAssy.PIDCode) AssyIDwithoutSpecialChar,  \n" +
                    "		rlh.partID,  \n" +
                    "		rlh.refRFQLineItemID,  \n" +
                    "		fun_getAssyNameByID(rlh.partID) assyPn,  \n" +
                    "		TRIM(rlh.lineID)+0 AS `Item`,  \n" +
                    "		rlh.qpa AS `QPA`,  \n" +
                    "		rlh.refDesig AS `RefDes`,  \n" +
                    "		(CASE WHEN rlh.isPurchase THEN 'Yes' ELSE 'No' END) AS `Buy`,  \n" +
                    "		(CASE WHEN rlh.isInstall THEN 'Yes' ELSE 'No' END) AS `Populate`,  \n" +
                    "		rlh.dnpQty AS `DNP Qty`,  \n" +
                    "		rlh.dnpDesig AS `DNP RefDes`,  \n" +
                    "		(CASE WHEN rlh.isBuyDNPQty THEN 'Yes' ELSE 'No' END) AS `Buy DNP Qty`,  \n" +
                    "		fun_getUnitNameByID(rlh.uomID) AS `UOM`,  \n" +
                    "		rlh.numOfPosition AS Pin,  \n" +
                    "		#rlh.description as lineIssue,  \n" +
                    "		GROUP_CONCAT(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) SEPARATOR \"@@@\") AS `MFR`,  \n" +
                    "		GROUP_CONCAT(fun_getMFGPNByID(rlah.mfgPNID) SEPARATOR \"@@@\") AS `MFRPN`,  \n" +
                    "		CONCAT(rlh.description, GROUP_CONCAT(IFNULL(rlah.description,'') SEPARATOR \"@@@\")) AS `PendingIssues`  \n" +
                    "        FROM  	rfq_lineitems_history rlh  \n" +
                    "	JOIN 	rfq_lineitems_alternatepart_history rlah ON rlh.id = rlah.rfqLineItemsID AND rlah.isDeleted = 0  \n" +
                    "    join component compAssy on compAssy.id = rlh.partID  \n" +
                    "	WHERE 	rlh.partID IN (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isDeleted = 0)  \n" +
                    "		AND rlh.isDeleted = 0  \n" +
                    "		AND rlh.refSubmittedQuoteID = prefSubmittedQuoteID  \n" +
                    "        GROUP BY rlh.id  \n" +
                    "	ORDER BY rlh.partID,rlh.lineID;  \n" +
                    "  \n" +
                    "	# RFQ Sub Assembly Name  \n" +
                    "  \n" +
                    "        SELECT  \n" +
                    "        DISTINCT prPerPartID,  \n" +
                    "		`level`,  \n" +
                    "		fun_getAssyNameByID(prPerPartID) AS AssyID,  \n" +
                    "		fun_getAssyNameByID(prPerPartID) assyPn  \n" +
                    "	FROM part_sub_assy_relationship  \n" +
                    "	WHERE partID = ppartID AND isDeleted = 0 ORDER BY `level`;  \n" +
                    "  \n" +
                    "    # RFQ Assy Quantity wise Quote Detail  \n" +
                    "  \n" +
                    "        SELECT  rq.requestQty,  \n" +
                    "		rclq.qtyID,  \n" +
                    "		rcl.qpa,  \n" +
                    "		rcl.lineID,  \n" +
                    "		rcl.consolidatedLineItemIDs,  \n" +
                    "		rclq.consolidateID,  \n" +
                    "		(SELECT partId FROM rfq_lineitems WHERE id = rcl.rfqLineItemID) AS partID,  \n" +
                    "		rclq.finalPrice,  \n" +
                    "		rclq.unitPrice,  \n" +
                    "		rclq.selectedMpn,  \n" +
                    "		rclq.supplier,  \n" +
                    "		(SELECT connecterTypeID FROM component WHERE id = rclq.componentID) AS connecterTypeID  \n" +
                    "        FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                    "        JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID AND rcl.isDeleted = 0  \n" +
                    "        JOIN rfq_assy_quantity rq ON rq.id = rclq.qtyID  \n" +
                    "        WHERE rcl.rfqAssyId = prfqAssyID AND rclq.isDeleted = 0  \n" +
                    "        ORDER BY rcl.lineID,rcl.id,rclq.qtyID;  \n" +
                    "  \n" +
                    "	# RFQ assembly Quantity for display quantity wise selected pricing  \n" +
                    "        SELECT 	id,  \n" +
                    "		requestQty  \n" +
                    "	FROM rfq_assy_quantity  \n" +
                    "        WHERE id IN (SELECT qtyID FROM rfq_consolidate_mfgpn_lineitem_quantity WHERE isDeleted  = 0  \n" +
                    "        AND consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID)  \n" +
                    "        ORDER BY id);  \n" +
                    "  \n" +
                    "  \n" +
                    "	# Main Assembly Detail  \n" +
                    "	SELECT 	id,  \n" +
                    "		mfgPN,  fun_replaceSpecialCharacters(mfgPN) mfgPNwithoutSpecialChar,  \n" +
                    "		PIDCode,  \n" +
                    "		fun_getMfgCodeByID(mfgcodeID) customerCode  \n" +
                    "	FROM component WHERE id = ppartID;  \n" +
                    "  \n" +
                    "    END;  \n" +		
                            /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_ExportRFQQuoteDetail`;  \n" +
                    "CREATE PROCEDURE `Sproc_ExportRFQQuoteDetail`(  \n" +
                    "    IN prfqAssyID INT  \n" +
                    "	)  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "        DECLARE ppartID int;  \n" +
                    "  \n" +
                    "        select partID into ppartID  \n" +
                    "        from rfq_assemblies where id = prfqAssyID;  \n" +
                    "  \n" +
                    "	# Common detail from consolidate tables  \n" +
                    "		select id as `consolidateID`, partID,consolidatedpartlineID, item as `Item`,qpa as `QPA`, refDesig as`RefDes`, Buy, Populate,  \n" +
                    "        UOM, MFR, MFRPN as `MFRPN`,Pin from (  \n" +
                    "		select rlh.id,(select partId from rfq_lineitems where id = rlh.rfqLineItemID) as partID, trim(rlh.lineID)+0 as `Item`, rlh.qpa, rlh.refDesig,  \n" +
                    "        (case when rlh.isPurchase then 'Yes' else 'No' end) as `Buy`,(case when rlh.isInstall then 'Yes' else 'No' end) as `Populate`,  \n" +
                    "        rlh.consolidatedpartlineID,rlh.numOfPosition as Pin,  \n" +
                    "        fun_getUnitNameByID(rlh.uomID) as `UOM`,  \n" +
                    "		group_concat(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) separator '@@@') as `MFR`, group_concat(fun_getMFGPNByID(rlah.mfgPNID) separator '@@@') as `MFRPN`  \n" +
                    "        from  rfq_consolidated_mfgpn_lineitem rlh  \n" +
                    "		join rfq_consolidated_mfgpn_lineitem_alternate rlah on rlh.id = rlah.consolidateID and rlah.isDeleted = 0  \n" +
                    "		where rlh.rfqAssyID = prfqAssyID and rlh.isDeleted = 0  \n" +
                    "        group by rlah.consolidateID  \n" +
                    "		order by rlh.lineID,rlh.id)a;  \n" +
                    "  \n" +
                    "    # BOM data  \n" +
                    "		select comAssy.PIDCode as AssyID, fun_replaceSpecialCharacters(comAssy.PIDCode) AssyIDwithoutSpecialChar, trim(rlh.lineID)+0 as `Item`, rlh.qpa as `QPA`, rlh.refDesig as `RefDes`, (case when rlh.isPurchase then 'Yes' else 'No' end) as `Buy`,  \n" +
                    "        (case when rlh.isInstall then 'Yes' else 'No' end) as `Populate`, rlh.dnpQty as `DNP Qty`, rlh.dnpDesig as `DNP RefDes`,  \n" +
                    "        (case when rlh.isBuyDNPQty then 'Yes' else 'No' end) as `Buy DNP Qty`,  \n" +
                    "        fun_getUnitNameByID(rlh.uomID) as `UOM`,#rlh.description as lineIssue,  \n" +
                    "		group_concat(fun_getMfgCodeAndNameByID(rlah.mfgCodeID) separator \"@@@\") as `MFR`, group_concat(fun_getMFGPNByID(rlah.mfgPNID) separator \"@@@\") as `MFRPN`,  \n" +
                    "        concat(rlh.description, group_concat(ifnull(rlah.description,'') separator \"@@@\")) as `PendingIssues`  \n" +
                    "        from  rfq_lineitems rlh  \n" +
                    "		join rfq_lineitems_alternatepart rlah on rlh.id = rlah.rfqLineItemsID and rlah.isDeleted = 0  \n" +
                    "        join component comAssy on comAssy.id = rlh.partID  \n" +
                    "		where rlh.partID in (select distinct prPerPartID from part_sub_assy_relationship where partID = ppartID and isDeleted = 0)  \n" +
                    "        and rlh.isDeleted = 0  \n" +
                    "        group by rlh.id  \n" +
                    "		order by rlh.partID,rlh.lineID;  \n" +
                    "  \n" +
                    "	# RFQ Sub Assembly Name  \n" +
                    "  \n" +
                    "        select distinct  prPerPartID,`level`,fun_getAssyNameByID(prPerPartID) as AssyID from part_sub_assy_relationship where partID = ppartID and isDeleted = 0 order by `level`;  \n" +
                    "  \n" +
                    "    # RFQ Assy Quantity wise Quote Detail  \n" +
                    "  \n" +
                    "        select rq.requestQty,rclq.qtyID,rcl.qpa,rcl.lineID, rclq.consolidateID, (select partId from rfq_lineitems where id = rcl.rfqLineItemID) as partID,  \n" +
                    "        rclq.finalPrice,rclq.unitPrice,rclq.selectedMpn,rclq.supplier,  (select connecterTypeID from component where id = rclq.componentID) as connecterTypeID  \n" +
                    "        from rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
                    "        join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rclq.consolidateID and rcl.isDeleted = 0  \n" +
                    "        join rfq_assy_quantity rq on rq.id = rclq.qtyID  \n" +
                    "        where rcl.rfqAssyId = prfqAssyID and rclq.isDeleted = 0  \n" +
                    "        order by rcl.lineID,rcl.id,rclq.qtyID;  \n" +
                    "  \n" +
                    "	# RFQ assembly Quantity for display quantity wise selected pricing  \n" +
                    "        select id, requestQty from rfq_assy_quantity  \n" +
                    "        where id in (select qtyID from rfq_consolidate_mfgpn_lineitem_quantity where isDeleted  = 0  \n" +
                    "        and consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where isDeleted = 0 and rfqAssyID = prfqAssyID)  \n" +
                    "        order by id);  \n" +
                    "  \n" +
                    "  \n" +
                    "	# Main Assembly Detail  \n" +
                    "		select id,mfgPN, fun_replaceSpecialCharacters(mfgPN) mfgPNwithoutSpecialChar,PIDCode,fun_getMfgCodeByID(mfgcodeID) customerCode from component where id = ppartID;  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIssueDetailsForCopy`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetBOMIssueDetailsForCopy`(  \n" +
                    "	IN pPartID INT ,  \n" +
                    "	IN pExternalIssue TINYINT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE totalCount INT DEFAULT 0;  \n" +
                    "	DECLARE totalAssemblyCount INT DEFAULT 0;  \n" +
                    "	DECLARE currIndex INT DEFAULT 0;  \n" +
                    "	DECLARE currAssyIndex INT DEFAULT 0;  \n" +
                    "	DECLARE currRfqLineItemID INT;  \n" +
                    "	DECLARE currAssyID INT DEFAULT 0;  \n" +
                    "	DECLARE currAssyembly VARCHAR(50);  \n" +
                    "        DECLARE currAssyPN VARCHAR(50);  \n" +
                    "	DECLARE currMfgPN VARCHAR(500);  \n" +
                    "	DECLARE currQPA DECIMAL(16,8);  \n" +
                    "	DECLARE currLine VARCHAR(20);  \n" +
                    "	DECLARE currCustLine VARCHAR(1000);  \n" +
                    "	DECLARE currMfgCode VARCHAR(500);  \n" +
                    "	DECLARE currErrorCode VARCHAR(1000);  \n" +
                    "	DECLARE currRefDesig TEXT;  \n" +
                    "	DECLARE currCustPN VARCHAR(500);  \n" +
                    "	DECLARE currCustRev VARCHAR(500);  \n" +
                    "	DECLARE currDescription TEXT;  \n" +
                    "	DECLARE currAlternateDescription TEXT;  \n" +
                    "	DECLARE currComment VARCHAR(1000);  \n" +
                    "	DECLARE currOneDescription TEXT;  \n" +
                    "	DECLARE currCopyString TEXT;  \n" +
                    "	DECLARE i INT DEFAULT 0;  \n" +
                    "	DECLARE totDescription INT DEFAULT 0;  \n" +
                    "	DECLARE totRefDes INT DEFAULT 0;  \n" +
                    "	DECLARE currentLineCPN VARCHAR(50);  \n" +
                    "	DECLARE currentLineRefDesig VARCHAR(500);  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_assembly;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_CopyData;  \n" +
                    "	CREATE TEMPORARY TABLE temp_CopyData(lineID DECIMAL(16,8), partID INT, assyID VARCHAR(50), assyPN VARCHAR(50), description TEXT );  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE temp_assembly AS  \n" +
                    "	SELECT 	sa.prPerPartID  \n" +
                    "	FROM 	part_sub_assy_relationship sa  \n" +
                    "	WHERE 	sa.partID = pPartID AND sa.isDeleted = 0;  \n" +
                    "  \n" +
                    "	SELECT COUNT(1) INTO totalAssemblyCount FROM temp_assembly;  \n" +
                    "  \n" +
                    "	 WHILE currAssyIndex < totalAssemblyCount DO  \n" +
                    "	 	SELECT 	a.prPerPartID INTO currAssyID  \n" +
                    "	 	FROM 	temp_assembly a LIMIT currAssyIndex, 1;  \n" +
                    "  \n" +
                    "	 	SELECT c.PIDCode,c.mfgPN INTO currAssyembly, currAssyPN  \n" +
                    "	 	FROM component c WHERE c.id = currAssyID;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS tempRfq_lineItemDetails;  \n" +
                    "		SET currIndex = 0;  \n" +
                    "		CREATE TEMPORARY TABLE tempRfq_lineItemDetails AS  \n" +
                    "	SELECT 	l.id AS rfqLineItemID,  \n" +
                    "		a.id AS rfqAlternateItemID,  \n" +
                    "		a.mfgCode,  \n" +
                    "		a.mfgPN,  \n" +
                    "		l.lineID,  \n" +
                    "		l.cust_lineID,  \n" +
                    "		l.refDesig,  \n" +
                    "		l.qpa,  \n" +
                    "		l.custPN,  \n" +
                    "		l.customerRev,  \n" +
                    "		CONCAT(IFNULL(CONCAT(l.requireMountingTypeError,'  \n" +
                    "        '),''), IFNULL(CONCAT(l.requireFunctionalTypeError,'  \n" +
                    "        '),''), IFNULL(l.description,'')) AS description,  \n" +
                    "		-- l.description,  \n" +
                    "		a.description AS alternateDescription,  \n" +
                    "		c.description AS `comment`  \n" +
                    "	FROM rfq_lineitems l  \n" +
                    "	LEFT JOIN rfq_lineitems_alternatepart a ON l.id = a.rfqLineItemsID AND a.isDeleted = 0  \n" +
                    "	LEFT JOIN rfq_lineitems_additional_comment c ON l.id = c.rfqLineItemID AND c.isDeleted = 0  \n" +
                    "	WHERE l.partID = currAssyID AND l.isDeleted = 0 AND (NULLIF(l.description, ' ')IS NOT NULL OR NULLIF(a.description, ' ')IS NOT NULL OR NULLIF(l.requireMountingTypeError, ' ')IS NOT NULL OR NULLIF(l.requireFunctionalTypeError, ' ')IS NOT NULL)  \n" +
                    "	ORDER BY l.lineID;  \n" +
                    "  \n" +
                    "	SELECT COUNT(1) INTO totalCount FROM tempRfq_lineItemDetails;  \n" +
                    "	WHILE currIndex < totalCount DO  \n" +
                    "		SET currCustPN = NULL;  \n" +
                    "		SET currCustRev = NULL;  \n" +
                    "  \n" +
                    "		SELECT 	a.mfgPN, 	a.mfgCode,	CAST(TRIM(a.lineID)+0 AS CHAR),	a.cust_lineID,  \n" +
                    "			a.refDesig, 	a.custPN,	a.customerRev, 	TRIM(a.qpa)+0,  \n" +
                    "			a.description,  a.alternateDescription,		a.comment, a.rfqLineItemID  \n" +
                    "		INTO 	currMfgPN,	currMfgCode,	currLine,	currCustLine,  \n" +
                    "			currRefDesig,	currCustPN,	currCustRev,   	currQPA,  \n" +
                    "			currDescription,currAlternateDescription,	currComment, currRfqLineItemID  \n" +
                    "		FROM 	tempRfq_lineItemDetails a LIMIT currIndex, 1;  \n" +
                    "  \n" +
                    "		IF currCustPN IS NOT NULL THEN  \n" +
                    "			SET currentLineCPN = CONCAT(' : CPN: ', currCustPN, 'Rev', IFNULL(currCustRev,'-'));  \n" +
                    "		ELSE  \n" +
                    "			SET currentLineCPN = NULL;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF currRefDesig IS NOT NULL THEN  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS t_refDes;  \n" +
                    "			CREATE TEMPORARY TABLE t_refDes( txt TEXT );  \n" +
                    "			INSERT INTO t_refDes VALUES(currRefDesig);  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS temp_refDes;  \n" +
                    "			CREATE TEMPORARY TABLE temp_refDes( val TEXT );  \n" +
                    "			SET @SQL = CONCAT(\"insert into temp_refDes (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_refDes), \",\", \"'),('\"),\"');\");  \n" +
                    "            PREPARE stmt3 FROM @SQL;  \n" +
                    "			EXECUTE stmt3;  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			SELECT COUNT(*) FROM temp_refDes INTO totRefDes;  \n" +
                    "			IF totRefDes > 3 THEN  \n" +
                    "				SET currentLineRefDesig = CONCAT(SPLIT_STR(currRefDesig, ',',1),',',SPLIT_STR(currRefDesig, ',',2), ',...,',SPLIT_STR(currRefDesig, ',',totRefDes));  \n" +
                    "			ELSE  \n" +
                    "				SET currentLineRefDesig = currRefDesig;  \n" +
                    "			END IF;  \n" +
                    "		ELSE  \n" +
                    "			SET currentLineRefDesig = \"\";  \n" +
                    "		END IF;  \n" +
                    "		IF currDescription IS NOT NULL THEN  \n" +
                    "			IF ((SELECT COUNT(1) FROM ( SELECT * FROM  tempRfq_lineItemDetails LIMIT 0,currIndex )a WHERE rfqLineItemID = currRfqLineItemID AND description = currDescription) > 0) THEN  \n" +
                    "				SET currDescription = NULL;  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		SET currIndex = currIndex + 1;  \n" +
                    "  \n" +
                    "		IF currDescription IS NOT NULL THEN  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS t_description;  \n" +
                    "			CREATE TEMPORARY TABLE t_description( txt TEXT );  \n" +
                    "			INSERT INTO t_description VALUES(currDescription);  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS temp_description;  \n" +
                    "			CREATE TEMPORARY TABLE temp_description( val TEXT );  \n" +
                    "		SET @SQL = CONCAT('insert into temp_description (val) values (\"', REPLACE(( SELECT GROUP_CONCAT(DISTINCT replace(txt,'\"',\"'\")) AS DATA FROM t_description), '  \n" +
                    "		', '\"),(\"'),'\");');  \n" +
                    "			PREPARE stmt1 FROM @SQL;  \n" +
                    "			EXECUTE stmt1;  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			SELECT COUNT(*) FROM temp_description INTO totDescription;  \n" +
                    "			SET i = 0 ;  \n" +
                    "			WHILE i < totDescription DO  \n" +
                    "  				SELECT 	a.val  \n" +
                    "				INTO 	currOneDescription  \n" +
                    "				FROM 	temp_description a LIMIT i, 1;  \n" +
                    "				IF currOneDescription IS NOT NULL AND currOneDescription != '' THEN  \n" +
                    "					SELECT  SPLIT_STR(currOneDescription, ':',1) INTO currErrorCode;  \n" +
                    "  \n" +
                    "					IF pExternalIssue THEN  \n" +
                    "						IF (SELECT COUNT(1) FROM rfq_lineitems_errorcode WHERE errorCode = trim(replace(currErrorCode,'  \n" +
                    "','')) AND isExternalIssue = 1) > 0 THEN  \n" +
                    "							IF (SELECT COUNT(1) FROM rfq_lineitems_errorcode WHERE errorCode = trim(replace(currErrorCode,'  \n" +
                    "','')) AND isAssemblyLevelError = 1) > 0 THEN  \n" +
                    "								SET currCopyString = CONCAT(REPLACE(currOneDescription,CONCAT(currErrorCode,': '),''), ' : ');  \n" +
                    "								INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (NULL, currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "							ELSE  \n" +
                    "								SET currCopyString = CONCAT('Item: ', IFNULL(currLine,''),' : Cust BOM Line#: ', IFNULL(currCustLine,''), IFNULL(currentLineCPN,''), ' : RefDes: ', currentLineRefDesig, ' : QPA: ', CAST(TRIM(IFNULL(currQPA,0))+0 AS CHAR), ' : ', REPLACE(currOneDescription,CONCAT(currErrorCode,':'),''), ' : ', IFNULL(currComment, ''));  \n" +
                    "								INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (CAST(currLine AS DECIMAL), currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "							END IF;  \n" +
                    "						END IF;  \n" +
                    "					ELSE  \n" +
                    "						IF (SELECT COUNT(1) FROM rfq_lineitems_errorcode WHERE errorCode = currErrorCode AND isAssemblyLevelError = 1) > 0 THEN  \n" +
                    "							SET currCopyString = CONCAT(REPLACE(currOneDescription,CONCAT(currErrorCode,': '),''), ' : ');  \n" +
                    "							INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (NULL, currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "						ELSE  \n" +
                    "							SET currCopyString = CONCAT('Item: ', IFNULL(currLine,''),' : Cust BOM Line#: ', IFNULL(currCustLine,''), IFNULL(currentLineCPN,''), ' : RefDes: ', currentLineRefDesig, ' : QPA: ', CAST(TRIM(IFNULL(currQPA,0))+0 AS CHAR), ' : ', REPLACE(currOneDescription,CONCAT(currErrorCode,':'),''), ' : ', IFNULL(currComment, ''));  \n" +
                    "							INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (CAST(currLine AS DECIMAL), currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "						END IF;  \n" +
                    "  \n" +
                    "					END IF;  \n" +
                    "				END IF;  \n" +
                    "				SET i = i + 1;  \n" +
                    "  \n" +
                    "			END WHILE;  \n" +
                    "		END IF;  \n" +
                    "		IF currAlternateDescription IS NOT NULL THEN  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS t_alternateDescription;  \n" +
                    "			CREATE TEMPORARY TABLE t_alternateDescription( txt TEXT );  \n" +
                    "			INSERT INTO t_alternateDescription VALUES(currAlternateDescription);  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS temp_alternateDescription;  \n" +
                    "			CREATE TEMPORARY TABLE temp_alternateDescription( val TEXT );  \n" +
                    "SET @SQL = CONCAT('insert into temp_alternateDescription (val) values (\"', REPLACE(( SELECT GROUP_CONCAT(DISTINCT  replace(txt,'\"','')) AS DATA FROM t_alternateDescription), '  \n" +
                    "', '\"),(\"'),'\");');  \n" +
                    "			PREPARE stmt2 FROM @SQL;  \n" +
                    "			EXECUTE stmt2;  \n" +
                    "			/*Generate Dummy data from string to row */  \n" +
                    "			SELECT COUNT(*) FROM temp_alternateDescription INTO totDescription;  \n" +
                    "			SET i = 0 ;  \n" +
                    "			WHILE i < totDescription DO  \n" +
                    "  \n" +
                    "				SELECT 	a.val  \n" +
                    "				INTO 	currOneDescription  \n" +
                    "				FROM 	temp_alternateDescription a LIMIT i, 1;  \n" +
                    "  \n" +
                    "				IF currOneDescription IS NOT NULL AND currOneDescription != '' THEN  \n" +
                    "					SELECT  SPLIT_STR(currOneDescription, ':',1) INTO currErrorCode;  \n" +
                    "                    IF pExternalIssue THEN  \n" +
                    "						IF (SELECT COUNT(1) FROM rfq_lineitems_errorcode WHERE errorCode = trim(replace(currErrorCode,'  \n" +
                    "','')) AND isExternalIssue = 1) > 0 THEN  \n" +
                    "                            SET currCopyString = CONCAT('Item: ',IFNULL(currLine,'') ,' : Cust BOM Line#: ', IFNULL(currCustLine,''), IFNULL(currentLineCPN,''), ' : RefDes: ', currentLineRefDesig, ' : ',IFNULL(currMfgCode,''), ' ', IFNULL(currMfgPN,''),' : ', REPLACE(currOneDescription,CONCAT(currErrorCode,':'),''), ' : ', IFNULL(currComment, ''));  \n" +
                    "							INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (CAST(currLine AS DECIMAL), currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "						END IF;  \n" +
                    "					ELSE  \n" +
                    "						SET currCopyString = CONCAT('Item: ', IFNULL(currLine,''),' : Cust BOM Line#: ', IFNULL(currCustLine,''), IFNULL(currentLineCPN,''), ' : RefDes: ', currentLineRefDesig, ' : ',IFNULL(currMfgCode,''), ' ', IFNULL(currMfgPN,''), ' : ', REPLACE(currOneDescription,CONCAT(currErrorCode,':'),''), ' : ', IFNULL(currComment, ''));  \n" +
                    "						INSERT INTO temp_CopyData(lineID, partID, assyID,assyPN, description) VALUE (CAST(currLine AS DECIMAL), currAssyID, currAssyembly,currAssyPN, currCopyString);  \n" +
                    "					END IF;  \n" +
                    "				END IF;  \n" +
                    "				SET i = i + 1;  \n" +
                    "  \n" +
                    "			END WHILE;  \n" +
                    "		END IF;  \n" +
                    "		END WHILE;  \n" +
                    "	 SET currAssyIndex = currAssyIndex + 1;  \n" +
                    "	END WHILE;  \n" +
                    "	SELECT * FROM temp_CopyData;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetKitConsolidateData`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetKitConsolidateData`(  \n" +
                    "	IN pPartId INT,  \n" +
                    "	IN pIsAssyData BOOLEAN  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
                    "	WITH RECURSIVE cte AS  \n" +
                    "	(  \n" +
                    "		(  \n" +
                    "			SELECT 		rl.partID,		rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 		rla.mfgCode, 		rl.id AS lineItemID, 	rla.id AS alternateID,	1 AS LEVEL, 	com.category,  \n" +
                    "					rla.rfqLineItemsID, 	rl.refDesig,  \n" +
                    "					IFNULL(rl.qpa,0) AS qpacount,  \n" +
                    "					IFNULL(rl.dnpQty,0) dnpQty,  \n" +
                    "					rl.isBuyDNPQty,  \n" +
                    "					(  \n" +
                    "						CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "							(  \n" +
                    "								CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END  \n" +
                    "							)  \n" +
                    "							ELSE  \n" +
                    "								IFNULL(rl.qpa,0)  \n" +
                    "							END  \n" +
                    "					) AS qpa1,  \n" +
                    "					(  \n" +
                    "						CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "							(  \n" +
                    "								CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END  \n" +
                    "							)  \n" +
                    "							ELSE  \n" +
                    "								IFNULL(rl.dnpQty,0)  \n" +
                    "							END  \n" +
                    "					) AS dnpQPA1,  \n" +
                    "					IFNULL(rl.refDesigCount,0) refDesigCount, 	IFNULL(rl.dnpDesigCount,0) dnpDesigCount,  \n" +
                    "					rl.qpaDesignatorStep,  \n" +
                    "					IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,  \n" +
                    "					IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "					IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "					IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
                    "					IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
                    "					IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
                    "					IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionstep,  \n" +
                    "					rl.isInstall, 		rl.isPurchase, rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode,  \n" +
                    "					rl.partId AS rfqAssyID, 	rl.isNotRequiredKitAllocation  \n" +
                    "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                    "			JOIN 		rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL  \n" +
                    "			INNER JOIN 	component com ON com.id = rla.mfgPNID  \n" +
                    "			INNER JOIN 	component comp ON comp.id = rl.partID  \n" +
                    "			WHERE 		rl.partId = pPartId AND rla.isdeleted = 0  \n" +
                    "		)  \n" +
                    "		UNION ALL  \n" +
                    "		(  \n" +
                    "			SELECT 		rl.partID,	rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 		rla.mfgCode, 	rl.id AS lineItemID,	rla.id AS alternateID,	cte.level+1 AS LEVEL,  \n" +
                    "					com.category, 	rla.rfqLineItemsID,  	rl.refDesig,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.dnpQPA1  \n" +
                    "								)  \n" +
                    "							END  \n" +
                    "						) * IFNULL(rl.qpa,0)  \n" +
                    "					) AS qpacount,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'Y') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "							END  \n" +
                    "						) * IFNULL(rl.dnpQty,0)  \n" +
                    "					) AS dnpQty,  \n" +
                    "					rl.isBuyDNPQty,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "							END  \n" +
                    "						)*  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "								(  \n" +
                    "									CASE 	WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END  \n" +
                    "								)  \n" +
                    "								ELSE IFNULL(rl.qpa,0)  \n" +
                    "							END  \n" +
                    "						)  \n" +
                    "					) AS qpa1,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "							END  \n" +
                    "						)*  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "								(  \n" +
                    "									CASE 	WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END  \n" +
                    "								)  \n" +
                    "								ELSE  \n" +
                    "									IFNULL(rl.dnpQty,0)  \n" +
                    "							END  \n" +
                    "						)  \n" +
                    "					) AS dnpQPA1,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "							END  \n" +
                    "						) * IFNULL(rl.refDesigCount,0)  \n" +
                    "					) AS refDesigCount,  \n" +
                    "					(  \n" +
                    "						(  \n" +
                    "							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
                    "								(  \n" +
                    "									cte.qpa1  \n" +
                    "								)  \n" +
                    "								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'Y') THEN  \n" +
                    "								(  \n" +
                    "									cte.dnpQPA1 + cte.qpa1  \n" +
                    "								)  \n" +
                    "  \n" +
                    "							END  \n" +
                    "						) * IFNULL(rl.dnpDesigCount,0)  \n" +
                    "					) AS dnpDesigCount,  \n" +
                    "					(  \n" +
                    "						CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN 0 ELSE rl.qpaDesignatorStep END  \n" +
                    "					) AS qpaDesignatorStep,  \n" +
                    "					IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,  \n" +
                    "					IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "					IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "					#concat(rla.mfgcodeid,' | ', rla.mfgpnid,' | ',ifnull(rla.restrictuseinbomstep,0),' | ',ifnull(rla.restrictuseinbomwithpermissionstep,0),' | ',ifnull(rla.restrictusepermanentlystep,1),' | ',ifnull(rla.restrictusewithpermissionstep,1)) AS part,  \n" +
                    "					IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
                    "					IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
                    "					IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
                    "					IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionst,  \n" +
                    "					rl.isInstall, 		rl.isPurchase,		rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode,  \n" +
                    "					pPartId AS rfqAssyID,	rl.isNotRequiredKitAllocation  \n" +
                    "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                    "			JOIN 		rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL  \n" +
                    "			INNER JOIN 	component com ON com.id = rla.mfgPNID  \n" +
                    "			INNER JOIN 	component comp ON comp.id = rl.partID  \n" +
                    "			JOIN 		cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.ispurchase = 1 OR cte.isbuydnpqty IN('Y','C','P'))  \n" +
                    "			WHERE 		rla.isdeleted = 0  \n" +
                    "		)  \n" +
                    "	)  \n" +
                    "  \n" +
                    "	SELECT cte.* FROM cte  \n" +
                    "	WHERE 	(  \n" +
                    "			CASE 	WHEN pIsAssyData = TRUE THEN  \n" +
                    "					cte.category = 3  \n" +
                    "				WHEN pIsAssyData = FALSE THEN  \n" +
                    "					cte.category != 3  \n" +
                    "				ELSE  \n" +
                    "					cte.category = cte.category  \n" +
                    "			END  \n" +
                    "		)  \n" +
                    "	ORDER BY lineItemID;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetKitConsolidateData;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetKitConsolidateData AS  \n" +
                    "	SELECT  	GROUP_CONCAT(partlineID) AS consolidatedpartlineID, 		COUNT(b.rfqLineItemsID) AS multiple, 	GROUP_CONCAT(b.refDesig) AS consolidatedrefDesig,  \n" +
                    "			GROUP_CONCAT(b.rfqLineItemsID) AS consolidatedLineItemIDs,	SUM(qpawithDNP) qpa,	SUM(qpa2) qpaWithoutDNP,	SUM(dnpQPA2) dnpWithoutQPA,  \n" +
                    "			(  \n" +
                    "				CASE WHEN MAX(isqpaMismatchflag) OR MAX(isdnpQPAMismatchflag) THEN 1 ELSE 0 END  \n" +
                    "			) isqpaMismatch,  \n" +
                    "			b.*  \n" +
                    "	FROM  \n" +
                    "	(  \n" +
                    "		SELECT 		part AS part1,  \n" +
                    "				(  \n" +
                    "					CASE WHEN isPurchase = 1 OR isInstall = 1 THEN  \n" +
                    "						(  \n" +
                    "							qpa2 + IF(isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C', dnpQPA2, 0)  \n" +
                    "						)  \n" +
                    "						ELSE  \n" +
                    "						(  \n" +
                    "							IF(isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C', dnpQPA2, 0)  \n" +
                    "						)  \n" +
                    "					END  \n" +
                    "				) qpawithDNP,  \n" +
                    "				a.*  \n" +
                    "		FROM 		(  \n" +
                    "					SELECT  	CONCAT('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',TRIM(a.lineID)+0,' | QPA:',TRIM(SUM(a.qpacount))+0,' | DNP QPA:',TRIM(SUM(a.dnpQty))+0,' | Buy DNP QPA:',(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END),' | RefDes Count:',TRIM(SUM(a.refDesigCount))+0,' | Buy QPA:',a.isPurchase,' | DNP RefDes Count:',TRIM(SUM(a.dnpDesigCount))+0,' |POPULATE:',a.isinstall,'}') AS partlineID,  \n" +
                    "							(  \n" +
                    "								CASE 	WHEN a.qpaDesignatorStep = 0 AND a.uomID = -1 THEN  \n" +
                    "									(  \n" +
                    "										CASE WHEN a.qpacount != IFNULL(a.refDesigCount,0) THEN 1 ELSE 0 END  \n" +
                    "									)  \n" +
                    "									ELSE  \n" +
                    "										0  \n" +
                    "								END  \n" +
                    "							) isqpaMismatchflag,  \n" +
                    "							(  \n" +
                    "								CASE 	WHEN a.qpaDesignatorStep = 0 AND a.uomID = -1 THEN  \n" +
                    "									(  \n" +
                    "										CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount,0) THEN 1 ELSE 0 END  \n" +
                    "									)  \n" +
                    "									ELSE  \n" +
                    "										0  \n" +
                    "								END  \n" +
                    "							) isdnpQPAMismatchflag,  \n" +
                    "							SUM(QPACount) QPACount1, 	SUM(dnpQty) DNPQPACount1, 	SUM(qpa1) qpa2, 	SUM(dnpQPA1) dnpQPA2, 	SUM(refDesigCount) refDesigCount1, 		SUM(dnpDesigCount) dnpDesigCount1, 	MIN(a.qpaDesignatorStep) qpaDesignatorStep1,  \n" +
                    "							(  \n" +
                    "								CASE 	WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C' OR isPurchase = 1 THEN  \n" +
                    "										1  \n" +
                    "									ELSE  \n" +
                    "										0  \n" +
                    "								END  \n" +
                    "							) isPurchaseWithDNP,  \n" +
                    "							a.*  \n" +
                    "					FROM  \n" +
                    "					(  \n" +
                    "						SELECT *,  \n" +
                    "						(  \n" +
                    "							SELECT  	GROUP_CONCAT(CONCAT(a.mfgcodeid,' | ', a.mfgpnid,' | ',IFNULL(a.restrictuseinbomstep,0),' | ',IFNULL(a.restrictuseinbomwithpermissionstep,0),' | ',IFNULL(a.restrictusepermanentlystep,1),' | ',IFNULL(a.restrictusewithpermissionstep,1)) ORDER BY mfgpnid) AS mfgpn  \n" +
                    "							FROM     	(  \n" +
                    "										SELECT 	DISTINCT IFNULL(d.id,c.id) mfgpnid, IFNULL(d.mfgcodeid, c.mfgcodeid) mfgcodeid, /*rla.mfgpnid,	rla.mfgcodeid,*/  \n" +
                    "											IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
                    "											IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
                    "											IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
                    "											IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionstep  \n" +
                    "										FROM  	rfq_lineitems_alternatepart rla  \n" +
                    "										JOIN component c ON rla.mfgpnid = c.id  \n" +
                    "                                        LEFT JOIN component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                    "                                        WHERE   rla.rfqlineitemsid = ld.rfqlineitemsid AND rla.isdeleted=0  \n" +
                    "										)a  \n" +
                    "									) AS part  \n" +
                    "						FROM   leveldata ld  \n" +
                    "					) a  \n" +
                    "					WHERE 		(  \n" +
                    "								CASE  \n" +
                    "									WHEN pIsAssyData = TRUE THEN  \n" +
                    "										a.category = 3  \n" +
                    "									WHEN pIsAssyData = FALSE THEN  \n" +
                    "										a.category != 3  \n" +
                    "									ELSE  \n" +
                    "										a.category = a.category  \n" +
                    "								END  \n" +
                    "							)  \n" +
                    "					GROUP BY 	a.rfqLineItemsID, a.Level, a.PIDCode, a.LineID, a.uomID, part, alternateid  \n" +
                    "					ORDER BY 	part  \n" +
                    "				) a  \n" +
                    "		GROUP BY 	rfqLineItemsID, `LEVEL`  \n" +
                    "	)b  \n" +
                    "	GROUP BY  numOfPosition, part1, isNotRequiredKitAllocation;  \n" +
                    "  \n" +
                    "	-- select * from Results;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                    "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN pCategoryIDs LONGTEXT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "		DECLARE pOffset INT;  \n" +
                    "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                    "		DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                    "        DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                    "		DECLARE vTimeZone VARCHAR(50);  \n" +
                    "  \n" +
                    "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                    "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                    "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                    "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                    "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MFR PN'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Type'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy DNP Qty'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP RefDes'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program RefDes'  \n" +
                    "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA RefDes Change'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA RefDes Change'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 85) THEN 'MPN not Mapped in CPN'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 86) THEN 'Mismatch Custom Part Rev'  \n" +
                    "		WHEN(rfq_lineitems_errorcode.logicID = 87) THEN 'Mismatch CPN and Custom Part Rev'  \n" +
                    "		ELSE '' END) AS `logicName`,errorCode, errorColor,  \n" +
                    "        fun_getUserNameByID(updatedBy) updatedby,  \n" +
                    "		fun_getUserNameByID(createdBy) createdby,  \n" +
                    "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                    "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                    "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                    "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                    "		description, systemVariable,logicID, displayName, org_description,  \n" +
                    "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,  \n" +
                    "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,  \n" +
                    "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'  \n" +
                    "		WHEN (`isExternalIssue` = 1) THEN 'Yes'  \n" +
                    "		ELSE ''  \n" +
                    "		END) AS `isExternalIssueValue`,  \n" +
                    "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'  \n" +
                    "		WHEN (`isResearchStatus` = 1) THEN 'Yes'  \n" +
                    "		ELSE ''  \n" +
                    "		END) AS `isResearchStatusValue`,  \n" +
                    "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'  \n" +
                    "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'  \n" +
                    "		ELSE ''  \n" +
                    "		END) AS `isAssemblyLevelErrorValue`,  \n" +
                    "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'  \n" +
                    "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'  \n" +
                    "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'  \n" +
                    "		ELSE ''  \n" +
                    "		END) AS `isAllowToEngrApprovedValue`,  \n" +
                    "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping  \n" +
                    "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount  \n" +
                    "		FROM `rfq_lineitems_errorcode`  \n" +
                    "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");  \n" +
                    "  \n" +
                    "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;  \n" +
                    "		ELSE  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "			SET pWhereClause = '1=1' ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN  \n" +
                    "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "		ELSE  \n" +
                    "			SET rowNumWhere = '';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "			/* to get total count of rows */  \n" +
                    "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                    "  \n" +
                    "			PREPARE query2 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query2;  \n" +
                    "			DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                    "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "  \n" +
                    "			PREPARE query1 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationSMTPTHCount`;  \n" +
                    "CREATE PROCEDURE `Sproc_RetriveKitAllocationSMTPTHCount`(  \n" +
                    "	IN pPartId INT,  \n" +
                    "	IN pRefSalesOrderDetID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS leveldata_Sproc_RetriveKitAllocationSMTPTHCount;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS leveldata_Sproc_RetriveKitAllocationSMTPTHCount AS  \n" +
                    "	WITH RECURSIVE cte AS  \n" +
                    "	(  \n" +
                    "		(  \n" +
                    "			SELECT 	rl.partID,		rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 	rla.mfgCode, 		rl.id AS lineItemID, 	rla.id AS alternateID,	1 AS LEVEL, 	com.category,  \n" +
                    "				rla.rfqLineItemsID, 	rl.refDesig, 	rl.qpa AS qpacount,  \n" +
                    "				(  \n" +
                    "					CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(  \n" +
                    "							CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END  \n" +
                    "						)  \n" +
                    "						ELSE  \n" +
                    "							rl.qpa  \n" +
                    "						END  \n" +
                    "				) AS qpa1,  \n" +
                    "				IFNULL(rl.refDesigCount,0) refDesigCount, 	rl.qpaDesignatorStep,  \n" +
                    "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMStep,0),' | ',rla.restrictUsePermanentlyStep,' | ',rla.restrictUseWithPermissionStep) AS part,  \n" +
                    "				rl.isInstall, 		rl.isPurchase,		rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode  \n" +
                    "			FROM rfq_lineitems_alternatepart rla  \n" +
                    "			JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL  \n" +
                    "			JOIN component com ON com.id = rla.mfgPNID  \n" +
                    "			LEFT JOIN component comp ON comp.id = rl.partID  \n" +
                    "			WHERE rl.partId = pPartId AND rla.deletedAt IS NULL  \n" +
                    "		)  \n" +
                    "		UNION ALL  \n" +
                    "		(  \n" +
                    "			SELECT 	rl.partID,	rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 		rla.mfgCode, 	rl.id AS lineItemID,	rla.id AS alternateID,	cte.level+1 AS LEVEL,  \n" +
                    "				com.category, 	rla.rfqLineItemsID, 	rl.refDesig, 	(cte.qpa1 * rl.qpa) AS qpacount,  \n" +
                    "				( cte.qpa1 * (  \n" +
                    "						CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                    "						(  \n" +
                    "							CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END  \n" +
                    "						)  \n" +
                    "						ELSE  \n" +
                    "							rl.qpa END  \n" +
                    "					)  \n" +
                    "				) AS qpa1,  \n" +
                    "				(cte.qpa1 * IFNULL(rl.refDesigCount,0)) refDesigCount,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN 0 ELSE rl.qpaDesignatorStep END) AS qpaDesignatorStep ,  \n" +
                    "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMStep,0),' | ',rla.restrictUsePermanentlyStep,' | ',rla.restrictUseWithPermissionStep) AS part,  \n" +
                    "				rl.isInstall, 	rl.isPurchase,		rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode  \n" +
                    "			FROM rfq_lineitems_alternatepart rla  \n" +
                    "			JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL  \n" +
                    "			JOIN component com ON com.id = rla.mfgPNID  \n" +
                    "			LEFT JOIN component comp ON comp.id = rl.partID  \n" +
                    "			JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID  \n" +
                    "			WHERE rla.deletedAt IS NULL  \n" +
                    "		)  \n" +
                    "	)  \n" +
                    "  \n" +
                    "	SELECT cte.* FROM cte  \n" +
                    "	WHERE cte.category != 3  \n" +
                    "	ORDER BY lineItemID,part;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_RetriveKitAllocationSMTPTHCount;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_RetriveKitAllocationSMTPTHCount AS  \n" +
                    "	SELECT  GROUP_CONCAT(partlineID) AS consolidatedpartlineID,COUNT(b.rfqLineItemsID) AS multiple,GROUP_CONCAT(b.refDesig) AS consolidatedrefDesig,  \n" +
                    "		GROUP_CONCAT(b.rfqLineItemsID) AS consolidatedLineItemIDs,SUM(qpa2)qpa, MAX(isqpaMismatchflag) isqpaMismatch, b.*  \n" +
                    "	FROM  \n" +
                    "	(  \n" +
                    "		SELECT 	GROUP_CONCAT(part) AS part1,  \n" +
                    "			a.*  \n" +
                    "		FROM 	(  \n" +
                    "				SELECT  CONCAT('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',TRIM(a.lineID)+0,' | QPA:',TRIM(SUM(a.qpacount))+0,' | RefDes Count:',TRIM(SUM(a.refDesigCount))+0,'}') AS partlineID,  \n" +
                    "					(  \n" +
                    "						CASE WHEN a.qpaDesignatorStep = 0 AND a.uomID = -1 THEN  \n" +
                    "						(  \n" +
                    "							CASE WHEN a.qpacount != IFNULL(a.refDesigCount,0) THEN 1 ELSE 0 END  \n" +
                    "						)  \n" +
                    "						ELSE  \n" +
                    "							0  \n" +
                    "						END  \n" +
                    "					) isqpaMismatchflag,  \n" +
                    "					SUM(QPACount) QPACount1, SUM(qpa1) qpa2, SUM(refDesigCount) refDesigCount1, MIN(a.qpaDesignatorStep) qpaDesignatorStep1,  \n" +
                    "					a.*  \n" +
                    "				FROM leveldata_Sproc_RetriveKitAllocationSMTPTHCount a  \n" +
                    "				GROUP BY a.rfqLineItemsID, a.Level, a.PIDCode, a.LineID, a.uomID, part, alternateid  \n" +
                    "				ORDER BY part  \n" +
                    "			) a  \n" +
                    "		GROUP BY rfqLineItemsID,`LEVEL`  \n" +
                    "	)b  \n" +
                    "	GROUP BY  numOfPosition,isPurchase,part1;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS kitResult;  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS kitResult AS  \n" +
                    "	SELECT 		r.rfqLineItemsID, 	r.qpa, kal.mfgPNID, 	kal.mfgPN, kal.mountingtypeID, 	kal.partID, 	kal.refSalesOrderDetID,  \n" +
                    "			fun_getKitAllocatedUnits(kal.partID, kal.refSalesOrderDetID, r.rfqLineItemsID, TRUE) allocatedUnit  \n" +
                    "	FROM 		temp_Sproc_RetriveKitAllocationSMTPTHCount r  \n" +
                    "	LEFT JOIN 	kit_allocation_lineitems_alternatepart kal ON kal.refRfqLineitem = r.rfqLineItemsID AND kal.refSalesOrderDetID = pRefSalesOrderDetID;  \n" +
                    "  \n" +
                    "	-- MIN(NULLIF(buildFeasibility, 0))  \n" +
                    "	SELECT 	MIN(buildFeasibility) AS SMTBuildFeasibility  \n" +
                    "	FROM 	(  \n" +
                    "			SELECT 		kr.mfgPNID, kr.mfgPN, kr.qpa,  \n" +
                    "					-- IFNULL((SELECT SUM(allocatedQty) FROM kit_allocation WHERE partId = kr.mfgPNID AND STATUS = \"A\" GROUP BY partId), 0) allocatedQty,  \n" +
                    "					-- (IFNULL((SELECT SUM(allocatedQty) FROM kit_allocation WHERE partId = kr.mfgPNID AND STATUS = \"A\" GROUP BY partId), 0)/kr.qpa) buildFeasibility,  \n" +
                    "					(IFNULL(allocatedUnit, 0)/kr.qpa) buildFeasibility,  \n" +
                    "					kr.mountingtypeID, fun_getMountingTypeNameByID(kr.mountingtypeID) mountingTypeName  \n" +
                    "			FROM 		kitResult kr  \n" +
                    "			GROUP BY 	kr.mfgPNID  \n" +
                    "		) a  \n" +
                    "	WHERE 	a.mountingTypeName IN  \n" +
                    "		(  \n" +
                    "			SELECT NAME AS mountingName FROM rfq_mountingtypemst WHERE deletedAt IS NULL AND systemGenerated = 1 AND (NAME = 'SMT')  \n" +
                    "			UNION  \n" +
                    "			SELECT alias AS mountingName FROM component_fields_genericalias_mst WHERE refTableName = 'rfq_mountingtypemst' AND deletedAt IS NULL AND refId IN (  \n" +
                    "				SELECT id FROM rfq_mountingtypemst WHERE deletedAt IS NULL AND systemGenerated = 1 AND (NAME = 'SMT')  \n" +
                    "			)  \n" +
                    "		);  \n" +
                    "  \n" +
                    "	-- MIN(NULLIF(buildFeasibility, 0))  \n" +
                    "	SELECT 	MIN(buildFeasibility) AS PTHBuildFeasibility  \n" +
                    "	FROM 	(  \n" +
                    "			SELECT 		kr.mfgPNID, kr.mfgPN, kr.qpa,  \n" +
                    "					-- IFNULL((SELECT SUM(allocatedQty) FROM kit_allocation WHERE partId = kr.mfgPNID AND STATUS = \"A\" GROUP BY partId), 0) allocatedQty,  \n" +
                    "					-- (IFNULL((SELECT SUM(allocatedQty) FROM kit_allocation WHERE partId = kr.mfgPNID AND STATUS = \"A\" GROUP BY partId), 0)/kr.qpa) buildFeasibility,  \n" +
                    "					(IFNULL(allocatedUnit, 0)/kr.qpa) buildFeasibility,  \n" +
                    "					kr.mountingtypeID, fun_getMountingTypeNameByID(kr.mountingtypeID) mountingTypeName  \n" +
                    "			FROM 		kitResult kr  \n" +
                    "			GROUP BY 	kr.mfgPNID  \n" +
                    "		) a  \n" +
                    "	WHERE 	a.mountingTypeName IN  \n" +
                    "		(  \n" +
                    "			SELECT NAME AS mountingName FROM rfq_mountingtypemst WHERE deletedAt IS NULL AND systemGenerated = 1 AND (NAME = 'thru')  \n" +
                    "			UNION  \n" +
                    "			SELECT alias AS mountingName FROM component_fields_genericalias_mst WHERE refTableName = 'rfq_mountingtypemst' AND deletedAt IS NULL AND refId IN (  \n" +
                    "				SELECT id FROM rfq_mountingtypemst WHERE deletedAt IS NULL AND systemGenerated = 1 AND (NAME = 'thru')  \n" +
                    "			)  \n" +
                    "		);  \n" +
                    "END;  \n" +
                            /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_getAlternatePartList`;  \n" +
                    "CREATE PROCEDURE `Sproc_getAlternatePartList`(  \n" +
                    "IN pconsolidateID  INT,  \n" +
                    "IN pisPurchaseApi TINYINT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "IF(pisPurchaseApi=0)THEN  \n" +
                    "SET @SQLStatement1 = CONCAT(\"SELECT a.* FROM  \n" +
                    "						(SELECT c.PIDCode,c.imageURL, c.documentPath  \n" +
                    "								,fun_getUnitNameByID(c.uom) unitName  \n" +
                    "								,c.RoHSStatusID  \n" +
                    "								,c.mfgCodeID  \n" +
                    "								,fun_getRoHSNameByID(c.RoHSStatusID) name  \n" +
                    "								,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                    "								mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,rla.customerApproval,rla.approvedMountingType,rla.mismatchMountingTypeStep, rla.mismatchFunctionalCategoryStep,  \n" +
                    "                                c.isCustom,c.custAssyPN  \n" +
                    "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN  \n" +
                    "						component c ON rla.mfgpnid=c.id  LEFT JOIN  \n" +
                    "						mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0  \n" +
                    "						WHERE rla.consolidateID=\",pconsolidateID,\" AND rla.isdeleted=0  \n" +
                    "						UNION  \n" +
                    "						SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName,c.RoHSStatusID,c.mfgCodeID,fun_getRoHSNameByID(c.RoHSStatusID) name,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,  \n" +
                    "                                c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                    "                                mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,'P' customerApproval, 1 approvedMountingType, 1 mismatchMountingTypeStep, 1 mismatchFunctionalCategoryStep,  \n" +
                    "                                c.isCustom,c.custAssyPN  \n" +
                    "						  FROM component c  \n" +
                    "						  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0  \n" +
                    "						  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=\",pconsolidateID,\" AND rla.isDeleted=0))  \n" +
                    "						  AND c.id NOT IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate ra  WHERE ra.consolidateID=\",pconsolidateID,\" AND ra.isDeleted=0) AND c.isdeleted=0)a \");  \n" +
                    "			PREPARE query1 FROM @SQLStatement1;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "			SET @SQLStatement2 = CONCAT(\"SELECT id,qtyid FROM rfq_consolidate_mfgpn_lineitem_quantity WHERE consolidateid=\",pconsolidateID,\" AND isdeleted=0\");  \n" +
                    "			PREPARE query2 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query2;  \n" +
                    "			DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "			ELSE  \n" +
                    "			SET @SQLStatement1 = CONCAT(\"SELECT a.* FROM  \n" +
                    "				(SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName  \n" +
                    "						,c.RoHSStatusID  \n" +
                    "						,c.mfgCodeID  \n" +
                    "						,fun_getRoHSNameByID(c.RoHSStatusID) name  \n" +
                    "						,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                    "						mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,  \n" +
                    "                        c.isCustom,c.custAssyPN  \n" +
                    "					FROM rfq_lineitems_alternatepart rla LEFT JOIN  \n" +
                    "					component c ON rla.mfgpnid=c.id  LEFT JOIN  \n" +
                    "					mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0  \n" +
                    "					WHERE rla.rfqLineItemsID=\",pconsolidateID,\" AND rla.isdeleted=0  \n" +
                    "					UNION  \n" +
                    "					SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName,c.RoHSStatusID,c.mfgCodeID,fun_getRoHSNameByID(c.RoHSStatusID) name,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,  \n" +
                    "							c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                    "							mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,  \n" +
                    "							fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,0 isApproved,  \n" +
                    "                            c.isCustom,c.custAssyPN  \n" +
                    "					  FROM component c  \n" +
                    "					  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0  \n" +
                    "						  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart rla WHERE rla.rfqLineItemsID=\",pconsolidateID,\" AND rla.isDeleted=0))  \n" +
                    "						  AND c.id NOT IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart ra  WHERE ra.rfqLineItemsID=\",pconsolidateID,\" AND ra.isDeleted=0) AND c.isdeleted=0)a \");  \n" +
                    "			PREPARE query1 FROM @SQLStatement1;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "			SELECT 1;  \n" +
                    "			END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                    "IN ppartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                    "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                    "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                    "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                    "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                    "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                    "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                    "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                    "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                    "        ELSE 'N/A' END) AS programingStatus,  \n" +
                    "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                    "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                    "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                    "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                    "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                    " a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                    "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                    "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                    "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                    "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                    "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                    "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                    "a.isObsoleteLine,  \n" +
                    "a.customerApprovalForQPAREFDESStep,  \n" +
                    "a.customerApprovalForBuyStep,  \n" +
                    "a.customerApprovalForPopulateStep,  \n" +
                    "a.dnpQPARefDesStep,  \n" +
                    "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "a.customerApprovalForDNPBuyStep,  \n" +
                    "a.customerApprovalCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                    "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                    "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                    "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                    "ac.description AS additionalComment,  \n" +
                    "ac.id AS additionalCommentId,  \n" +
                    "a.programmingMappingPendingRefdesCount,  \n" +
                    "a.refDesigCount,  \n" +
                    "a.dnpDesigCount  \n" +
                    "FROM rfq_lineitems a  \n" +
                    "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                    "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                    "  \n" +
                    "SELECT b.id,  \n" +
                    "b.lineID,  \n" +
                    "b.cust_lineID,  \n" +
                    "b.qpa,  \n" +
                    "b.refDesig,  \n" +
                    "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                    "a.mfgCodeID,  \n" +
                    "mcm.acquisitionDetail,  \n" +
                    "a.mfgPN,  \n" +
                    "a.mfgPNID,  \n" +
                    "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                    "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                    "a.distMfgCodeID,  \n" +
                    "a.distPN,  \n" +
                    "a.distMfgPNID,  \n" +
                    "b.custPN,  \n" +
                    "b.custPNID,  \n" +
                    "b.isCustPN,  \n" +
                    "b.uomID,  \n" +
                    "b.programingStatus,  \n" +
                    "b.substitutesAllow,  \n" +
                    "b.allocatedInKit,  \n" +
                    "a.description descriptionAlternate,  \n" +
                    "b.description,  \n" +
                    "b.numOfPosition,  \n" +
                    "b.numOfRows,  \n" +
                    "b.customerRev,  \n" +
                    "b.isCustPNProgrammingRequire,  \n" +
                    "b.customerDescription,  \n" +
                    "b.customerPartDesc,  \n" +
                    "b.isInstall,  \n" +
                    "b.isPurchase,  \n" +
                    "b.isNotRequiredKitAllocation,  \n" +
                    "b.isSupplierToBuy,  \n" +
                    "b.dnpQty,  \n" +
                    "b.dnpDesig,  \n" +
                    "a.id AS rfqAlternatePartID,  \n" +
                    "b.qpaDesignatorStep,  \n" +
                    "b.restrictCPNUseWithPermissionStep,  \n" +
                    "b.restrictCPNUsePermanentlyStep,  \n" +
                    "b.restrictCPNUseInBOMStep,  \n" +
                    "b.requireMountingTypeStep,  \n" +
                    "b.requireFunctionalTypeStep,  \n" +
                    "b.requireMountingTypeError,  \n" +
                    "b.requireFunctionalTypeError,  \n" +
                    "b.isBuyDNPQty,  \n" +
                    "b.isObsoleteLine,  \n" +
                    "b.customerApprovalForQPAREFDESStep,  \n" +
                    "b.customerApprovalForBuyStep,  \n" +
                    "b.customerApprovalForPopulateStep,  \n" +
                    "b.dnpQPARefDesStep,  \n" +
                    "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "b.customerApprovalForDNPBuyStep,  \n" +
                    "b.customerApprovalCPN,  \n" +
                    "b.qpaCustomerApprovalComment,  \n" +
                    "b.dnpqpaCustomerApprovalComment,  \n" +
                    "b.buyCustomerApprovalComment,  \n" +
                    "b.buyDNPCustomerApprovalComment,  \n" +
                    "b.populateCustomerApprovalComment,  \n" +
                    "b.cpnCustomerApprovalComment,  \n" +
                    "b.isCustomerApprovedQPA,  \n" +
                    "b.isCustomerApprovedBuy,  \n" +
                    "b.isCustomerApprovedDNPQPA,  \n" +
                    "b.isCustomerApprovedBuyDNP,  \n" +
                    "b.isCustomerApprovedPopulate,  \n" +
                    "b.isCustomerApprovedCPN,  \n" +
                    "b.kitAllocationNotRequiredComment,  \n" +
                    "b.isNotRequiredKitAllocationApproved,  \n" +
                    "a.mfgVerificationStep,  \n" +
                    "a.mfgDistMappingStep,  \n" +
                    "a.mfgCodeStep,  \n" +
                    "a.customerApproval,  \n" +
                    "a.isCustomerUnAppoval,  \n" +
                    "a.org_mfgCode,  \n" +
                    "a.org_mfgPN,  \n" +
                    "a.org_distributor,  \n" +
                    "a.org_distPN,  \n" +
                    "a.distVerificationStep,  \n" +
                    "a.distCodeStep,  \n" +
                    "a.getMFGPNStep,  \n" +
                    "a.obsoletePartStep,  \n" +
                    "a.mfgGoodPartMappingStep,  \n" +
                    "a.mfgPNStep,  \n" +
                    "a.distPNStep,  \n" +
                    "a.badMfgPN,  \n" +
                    "a.distGoodPartMappingStep,  \n" +
                    "a.nonRohsStep,  \n" +
                    "a.epoxyStep,  \n" +
                    "a.invalidConnectorTypeStep,  \n" +
                    "a.duplicateMPNInSameLineStep,  \n" +
                    "a.mismatchMountingTypeStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.restrictUseWithPermissionStep,  \n" +
                    "a.restrictUsePermanentlyStep,  \n" +
                    "a.partPinIsLessthenBOMPinStep,  \n" +
                    "a.mismatchRequiredProgrammingStep,  \n" +
                    "a.mappingPartProgramStep,  \n" +
                    "a.exportControlledStep,  \n" +
                    "a.tbdPartStep,  \n" +
                    "a.userData1,  \n" +
                    "a.userData2,  \n" +
                    "a.userData3,  \n" +
                    "a.userData4,  \n" +
                    "a.userData5,  \n" +
                    "a.userData6,  \n" +
                    "a.userData7,  \n" +
                    "a.userData8,  \n" +
                    "a.userData9,  \n" +
                    "a.userData10,  \n" +
                    "a.pickupPadRequiredStep,  \n" +
                    "a.matingPartRquiredStep,  \n" +
                    "a.suggestedGoodPartStep,  \n" +
                    "a.suggestedGoodDistPartStep,  \n" +
                    "a.driverToolsRequiredStep,  \n" +
                    "a.functionalTestingRequiredStep,  \n" +
                    "a.mismatchCustomPartStep,  \n" +
                    "a.mismatchValueStep,  \n" +
                    "a.approvedMountingType,  \n" +
                    "a.mismatchPackageStep,  \n" +
                    "a.mismatchPowerStep,  \n" +
                    "a.mismatchToleranceStep,  \n" +
                    "a.mismatchTempratureStep,  \n" +
                    "a.mismatchNumberOfRowsStep,  \n" +
                    "a.uomMismatchedStep,  \n" +
                    "a.programingRequiredStep,  \n" +
                    "a.mismatchProgrammingStatusStep,  \n" +
                    "a.mismatchColorStep,  \n" +
                    "a.restrictUseInBOMStep,  \n" +
                    "a.restrictUseInBOMWithPermissionStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "a.restrictUseExcludingAliasStep,  \n" +
                    "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "a.unknownPartStep,  \n" +
                    "a.defaultInvalidMFRStep,  \n" +
                    "a.isUnlockApprovedPart,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnPart.partTypeName  \n" +
                    "ELSE  \n" +
                    "part.partTypeName END) AS parttypeID,  \n" +
                    "a.parttypeID AS functionalID,  \n" +
                    "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnMount.name  \n" +
                    "ELSE  \n" +
                    "mount.name END) AS mountingtypeID,  \n" +
                    "a.mountingtypeID AS mountingID,  \n" +
                    "cat.categoryname partcategoryID,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                    "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                    "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                    "CASE WHEN  \n" +
                    "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                    "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                    "THEN 1 ELSE 0 END isObsolete,  \n" +
                    "co.PIDCode,  \n" +
                    "co.mfgPNDescription,  \n" +
                    "co.pitch,  \n" +
                    "co.noOfRows,  \n" +
                    "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                    "co.value,  \n" +
                    "co.tolerance,  \n" +
                    "co.voltage,  \n" +
                    "co.isCustom,  \n" +
                    "co.packaging,  \n" +
                    "co.deviceMarking,  \n" +
                    "co.powerRating,  \n" +
                    "co.minOperatingTemp,  \n" +
                    "co.maxOperatingTemp,  \n" +
                    "co.connecterTypeID,  \n" +
                    "co.driverToolRequired,  \n" +
                    "co.matingPartRquired,  \n" +
                    "co.pickupPadRequired,  \n" +
                    "co.programingRequired,  \n" +
                    "co.dataSheetLink,  \n" +
                    "co.isCPN,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                    "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                    "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                    "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                    "co.isTemperatureSensitive,  \n" +
                    "co.noOfPosition AS componentLead,  \n" +
                    "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                    "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                    "co.createdBy,  \n" +
                    "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                    "co.color,  \n" +
                    "co.uom AS partUOMID,  \n" +
                    "co.serialNumber,  \n" +
                    "CASE WHEN  \n" +
                    "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                    "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                    "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                    "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                    "b.additionalComment ,  \n" +
                    "b.additionalCommentId,  \n" +
                    "a.suggestedByApplicationMsg,  \n" +
                    "a.suggestedByApplicationStep,  \n" +
                    "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                    "a.mismatchPitchStep,  \n" +
                    "b.programmingMappingPendingRefdesCount,  \n" +
                    "b.refDesigCount,  \n" +
                    "b.dnpDesigCount,co.feature ,  \n" +
                    "a.mismatchCustpartRevStep,  \n" +
                    "a.mismatchCPNandCustpartRevStep  \n" +
                    "FROM tempRfq_lineitems b  \n" +
                    "left JOIN rfq_lineitems_alternatepart a   ON a.rfqLineItemsID = b.id and a.isDeleted = 0  \n" +
                    "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                    "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                    "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                    "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                    "WHERE b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5430,'2.00','V1','User Story 37958: Improvement points given by JV on Oddly Named REF DES, ES, Epoxy logic changes [21/10/2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5430:
                allDbChangesArray.push(
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */	
                    "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                    "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pIsUpdateRequired BOOL;  \n" +
                    "	DECLARE pLiveInternalVersion INT;  \n" +
                    "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                    "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                    "	DECLARE newUOM VARCHAR(50);  \n" +
                    "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                    "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "	DECLARE pCompanyName VARCHAR(100);  \n" +
                    "	DECLARE pErrorNarrative TEXT;  \n" +
                    "	DECLARE pErrorDisplayName TEXT;  \n" +
                    "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                    "	DECLARE pErrorCode VARCHAR(100);  \n" +
                    "	SET pIsUpdateRequired = FALSE;  \n" +
                    "  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                    "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "	IF pLiveInternalVersion > 0 THEN  \n" +
                    "  \n" +
                    "		IF NEW.lineID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item(Line#)\",  \n" +
                    "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Cust BOM Line#\",  \n" +
                    "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.qpa IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                    "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"RefDes\",  \n" +
                    "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.custPN IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                    "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                    "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                    "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Non-Kitting Item\",  \n" +
                    "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                    "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN Rev\",  \n" +
                    "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                    "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Pin Per RefDes on PCB\",  \n" +
                    "				NULL, CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.numOfRows IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"No. of Rows\",  \n" +
                    "				NULL, CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty\",  \n" +
                    "				NULL, CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP RefDes\",  \n" +
                    "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			IF NEW.uomID IS NOT NULL  \n" +
                    "				THEN  \n" +
                    "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                    "				ELSE  \n" +
                    "					SET newUOM = '';  \n" +
                    "			END IF;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                    "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                    "			IF NEW.substitutesAllow = 3 THEN  \n" +
                    "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                    "				SET newSubstitutesAllow = 'No';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                    "				SET newSubstitutesAllow = '';  \n" +
                    "			END IF;  \n" +
                    "			IF newSubstitutesAllow != '' THEN  \n" +
                    "				SET pIsUpdateRequired = TRUE;  \n" +
                    "				INSERT INTO rfq_assembly_history  \n" +
                    "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "					oldValue,newValue,changeVersion,  \n" +
                    "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                    "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			IF NEW.programingStatus = 1 THEN  \n" +
                    "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                    "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                    "				SET newProgramingStatus = 'Post-Assy';  \n" +
                    "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                    "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                    "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                    "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                    "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                    "				SET newProgramingStatus = 'Who Will Program';  \n" +
                    "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                    "				SET newProgramingStatus = 'N/A';  \n" +
                    "			END IF;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
                    "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                    "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
                    "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                    "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                    "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                    "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                    "			SET pIsUpdateRequired = TRUE;  \n" +
                    "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                    "  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF pIsUpdateRequired = TRUE THEN  \n" +
                    "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "END;  \n" +	
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                    "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                    "    FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pIsUpdateRequired BOOL;  \n" +
                    "	DECLARE pLiveInternalVersion INT;  \n" +
                    "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                    "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                    "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                    "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                    "	DECLARE oldUOM VARCHAR(50);  \n" +
                    "	DECLARE newUOM VARCHAR(50);  \n" +
                    "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                    "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                    "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                    "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                    "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                    "	DECLARE pCompanyName VARCHAR(100);  \n" +
                    "	DECLARE pErrorNarrative TEXT;  \n" +
                    "	DECLARE pErrorDisplayName TEXT;  \n" +
                    "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                    "	DECLARE pErrorCode VARCHAR(100);  \n" +
                    "  \n" +
                    "	SET pIsUpdateRequired = FALSE;  \n" +
                    "  \n" +
                    "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                    "  \n" +
                    "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                    "  \n" +
                    "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                    "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                    "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                    "	ELSE  \n" +
                    "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                    "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                    "		ELSE  \n" +
                    "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                    "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                    "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                    "  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                    "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"RefDes\",  \n" +
                    "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                    "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                    "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                    "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Non-Kitting Item\",  \n" +
                    "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                    "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                    "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                    "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per RefDes on PCB\",  \n" +
                    "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                    "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                    "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                    "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                    "		IF OLD.uomID IS NOT NULL  \n" +
                    "			THEN  \n" +
                    "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                    "			ELSE  \n" +
                    "				SET oldUOM = '';  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.uomID IS NOT NULL  \n" +
                    "			THEN  \n" +
                    "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                    "			ELSE  \n" +
                    "				SET newUOM = '';  \n" +
                    "		END IF;  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                    "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                    "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                    "			IF OLD.substitutesAllow = 3 THEN  \n" +
                    "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                    "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                    "				SET oldSubstitutesAllow = 'No';  \n" +
                    "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                    "				SET oldSubstitutesAllow = '';  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                    "			IF NEW.substitutesAllow = 3 THEN  \n" +
                    "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                    "				SET newSubstitutesAllow = 'No';  \n" +
                    "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                    "				SET newSubstitutesAllow = '';  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                    "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                    "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                    "			IF OLD.programingStatus = 1 THEN  \n" +
                    "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                    "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                    "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                    "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                    "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                    "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                    "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                    "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                    "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                    "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                    "				SET oldProgramingStatus = 'N/A';  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                    "			IF NEW.programingStatus = 1 THEN  \n" +
                    "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                    "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                    "				SET newProgramingStatus = 'Post-Assy';  \n" +
                    "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                    "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                    "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                    "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                    "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                    "				SET newProgramingStatus = 'Who Will Program';  \n" +
                    "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                    "				SET newProgramingStatus = 'N/A';  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                    "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                    "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		INSERT INTO rfq_assembly_history  \n" +
                    "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "			oldValue,newValue,changeVersion,  \n" +
                    "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                    "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                    "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                    "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                    "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                    "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                    "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                    "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                    "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                    "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode  \n" +
                    "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                    "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                    "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                    "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                    "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  /*  \n" +
                    "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                    "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  */  \n" +
                    "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                    "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                    "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                    " 			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                    "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                    "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                    "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                    "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                    "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 2 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "            INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or RefDes\",  \n" +
                    "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved comments of QPA or RefDes: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or RefDes\",  \n" +
                    "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				'Customer approval pending for QPA or RefDes Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                    "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 3 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "            INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                    "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved comments of Buy: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                    "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                    "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 4 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "            INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                    "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				CONCAT('Approved comments of Populate: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                    "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                    "        FROM rfq_lineitems_errorcode  \n" +
                    "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                    "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                    "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                    "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                    "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                    "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 18 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "            INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				#@resuleErrorMessage,  \n" +
                    "                CONCAT('Approved comments of DNP Qty RefDes: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                    "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "		SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 17 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                    "        INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				#@resuleErrorMessage,  \n" +
                    "                CONCAT('Approved comments of Buy DNP Qty: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "        	INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                    "		SET pIsUpdateRequired = TRUE;  \n" +
                    "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                    "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                    "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                    "			INSERT INTO rfq_assembly_history  \n" +
                    "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                    "				oldValue,newValue,changeVersion,  \n" +
                    "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                    "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                    "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                    "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF pIsUpdateRequired = TRUE THEN  \n" +
                    "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                    "	END IF;  \n" +
                    "END;  \n" +	
                    /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5431,'2.00','V1','User Story 37958: Improvement points given by JV on Oddly Named REF DES, ES, Epoxy logic changes [21/10/2021] - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;          
                case 5431:
                    allDbChangesArray.push(
				    /* **************************** New Script -> 26-10-2021  ********************************* */ 
				   "ALTER TABLE component_sid_stock ADD isReservedStock TINYINT DEFAULT 0;  \n" +
				    /* **************************** Add Script Version -> 26-10-2021 ************************** */
				 "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
				 "VALUES (5432,'2.00','V1','User Story 37433: UMID Creation screen changes change related to customer consigned / CPN parts UMID creation - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
				 );
				break;
            case 5432:
                allDbChangesArray.push(
				 /* **************************** New Script -> 26-10-2021  ********************************* */ 
				"DROP TRIGGER IF EXISTS `Trg_AI_component_sid_stock`;  \n" +
				"CREATE TRIGGER `Trg_AI_component_sid_stock` AFTER INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
				"	DECLARE vWarehouseID INT;  \n" +
				"    DECLARE vDeptWHID INT;  \n" +
				"    DECLARE vStockInventoryType VARCHAR(50);  \n" +
				"    DECLARE vTransType VARCHAR(1000);  \n" +
				"  \n" +
				"    SELECT b.warehouseID, 	w.parentWHID  \n" +
				"    INTO vWarehouseID,		vDeptWHID  \n" +
				"    FROM binmst b  \n" +
				"    JOIN warehousemst w ON b.warehouseID = w.id  \n" +
				"    AND b.id = new.binID;  \n" +
				"  \n" +
				"    SELECT css.stockInventoryType INTO vStockInventoryType FROM component_sid_stock css  WHERE css.id = new.id;  \n" +
				"	IF(vStockInventoryType = 'NI') THEN  \n" +
				"		SET vTransType = 'UMID Creation - New Incoming Stock';  \n" +
				"	ELSEIF(vStockInventoryType = 'OI') THEN  \n" +
				"		SET vTransType = 'UMID Creation - Move Non-Q2C to Q2C Stock';  \n" +
				"	ELSEIF(vStockInventoryType = 'AI') THEN  \n" +
				"		SET vTransType = 'UMID Creation - Non-UMID Assembly Stock';  \n" +
				"	ELSEIF(vStockInventoryType = 'SI') THEN  \n" +
				"		SET vTransType = 'UMID Creation - Split UMID';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	INSERT INTO component_sid_stock_history  \n" +
				"		(  \n" +
				"			transType, 			actionPerformed, 	refUIDId, 		uid,  \n" +
				"            fromUIDId, 			fromUID,			parentUIDId, 	parentUID,  \n" +
				"            refcompid, 			binID, 				warehouseID, 	deptWHID,  \n" +
				"            orgQty, 			orgUnit, 			currentQty, 	currentUnit,  \n" +
				"            uom, 				isDeleted, 			createdBy, 		createdAt,  \n" +
				"            updatedBy, 			updatedAt,          createByRoleId, updateByRoleId,  \n" +
				"            deleteByRoleId  \n" +
				"		)  \n" +
				"	VALUES  \n" +
				"		(  \n" +
				"			vTransType, 	'UMID Created',		new.id,			new.uid,  \n" +
				"            new.fromUIDId, 		new.fromUID,		new.parentUIDId, 	new.parentUID,  \n" +
				"            new.refcompid,		new.binID,			vWarehouseID,	vDeptWHID,  \n" +
				"            new.orgQty,			new.orgPkgUnit,		new.pkgQty,		new.pkgUnit,  \n" +
				"            new.uom,			0,					new.createdBy,	new.createdAt,  \n" +
				"            new.createdBy,		new.createdAt,      new.createByRoleId, new.updateByRoleId,  \n" +
				"            new.deleteByRoleId  \n" +
				"		);  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_RetrieveAssemblyWorkorderList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrieveAssemblyWorkorderList`(  \n" +
				"	pWorkorderNumber VARCHAR(255)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	SELECT 		vusr.woID,  \n" +
				"			vusr.woNumber,  \n" +
				"			vusr.partID,  \n" +
				"			c.mfgcodeID mfgCodeId,  \n" +
				"			c.id mfgId,  \n" +
				"			c.mfgPN,  \n" +
				"			c.PIDCode,  \n" +
				"			c.isCPN,  \n" +
				"			vusr.availableQty,  \n" +
				"			vusr.binID,  \n" +
				"			vusr.totalUMIDCount,  \n" +
				"			vusr.totalUMIDCountAfterShipped,  \n" +
				"			vusr.binName,  \n" +
				"			wo.proposedUmidQty AS woUMIDProposedQty,  \n" +
				"            CONCAT(vusr.woNumber,', ',c.PIDCode,', ',c.mfgPN) AS woAssyNumber  \n" +
				"	FROM 		(  \n" +
				"				SELECT  \n" +
				"  \n" +
				"				`atk`.`partID`                    AS `partID`,  \n" +
				"				`atk`.`woID`                      AS `woID`,  \n" +
				"				`atk`.`woNumber`                  AS `woNumber`,  \n" +
				"				`FUN_GETBINNAMEBYID`(`atk`.`binID`)  AS `binName`,  \n" +
				"				`atk`.`binID`                     AS `binID`,  \n" +
				"				IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCount`,  \n" +
				"				IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCountAfterShipped`,  \n" +
				"				((SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`,0)) AS `availableQty`  \n" +
				"			      FROM (`assemblystock` `atk`  \n" +
				"				 LEFT JOIN (SELECT  \n" +
				"					      `css`.`woID`                       AS `woId`,  \n" +
				"					      `css`.`woNumber`                   AS `woNumber`,  \n" +
				"					      SUM(`css`.`pkgQty`)                AS `pkgQty`  \n" +
				"					    FROM `component_sid_stock` `css`  \n" +
				"					    WHERE ((`css`.`isDeleted` = 0)  \n" +
				"						   AND (`css`.`woNumber` IS NOT NULL))  \n" +
				"					    GROUP BY `css`.`woID`,`css`.`woNumber`) `css`  \n" +
				"				   ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
				"			      WHERE (`atk`.`isDeleted` = 0)  \n" +
				"			      GROUP BY `atk`.`woNumber`,`atk`.`partID`,`atk`.`whID`,`atk`.`binID`,`atk`.`woID`,`atk`.`woNumber`,`css`.`pkgQty`  \n" +
				"			) AS vusr  \n" +
				"  \n" +
				"	LEFT JOIN 	workorder wo ON wo.`woID` = vusr.`woID`  \n" +
				"	INNER JOIN	COMPONENT c ON c.id = vusr.partID  \n" +
				"	WHERE 		(  \n" +
				"				CASE  \n" +
				"					WHEN pWorkorderNumber IS NOT NULL THEN  \n" +
				"						vusr.woNumber = pWorkorderNumber  \n" +
				"					ELSE  \n" +
				"						1 = 1  \n" +
				"				END  \n" +
				"			);  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
				"CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
				"    IN pWhereClause VARCHAR(16383),  \n" +
				"    IN puserID VARCHAR(50),  \n" +
				"    IN pnickName VARCHAR(20),  \n" +
				"    IN pprefix VARCHAR(20),  \n" +
				"    IN pIsFromUID TINYINT,  \n" +
				"    IN pComponentID INT,  \n" +
				"    IN pCustomerID INT,  \n" +
				"    IN pCPN BOOL,  \n" +
				"    IN pMFGAvailabel BOOL,  \n" +
				"    IN pRefCpnMfgID INT,  \n" +
				"    IN pAssyID INT,  \n" +
				"    IN pSalesOrderDetailID INT,  \n" +
				"    IN pReceiveMaterialType VARCHAR(255),  \n" +
				"    IN pkitAssemblyID INT,  \n" +
				"    IN pBarcodeID INT,  \n" +
				"    IN pBOMLineID INT,  \n" +
				"    IN pSupplierID INT,  \n" +
				"    IN pCategory VARCHAR(2),  \n" +
				"    IN pInventoryType VARCHAR(2),  \n" +
				"    IN pCallFrom VARCHAR(50),  \n" +
				"    IN pExcludeStatus INT,  \n" +
				"    IN pBinID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
				"	DECLARE v_delimiter VARCHAR(10);  \n" +
				"	DECLARE v_length INT;  \n" +
				"	DECLARE v_fieldType INT;  \n" +
				"	DECLARE v_entityId INT;  \n" +
				"	DECLARE v_dataElementId INT;  \n" +
				"	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
				"	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
				"	DECLARE strLabel VARCHAR(2000);  \n" +
				"	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
				"	DECLARE StaticField VARCHAR(100);  \n" +
				"	DECLARE DynamicField VARCHAR(100);  \n" +
				"	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
				"	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
				"	DECLARE plen,slen INT;  \n" +
				"	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
				"	DECLARE pbr_Separator VARCHAR(50);  \n" +
				"	DECLARE barcode_type_id INT;  \n" +
				"	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
				"	DECLARE UpdateValue VARCHAR(16383);  \n" +
				"	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
				"	DECLARE v_SupplierID INT;  \n" +
				"	DECLARE v_BarcodeType VARCHAR(20);  \n" +
				"	DECLARE v_barcode_id INT;  \n" +
				"	DECLARE v_barcode_count INT;  \n" +
				"	DECLARE v_NumberOfPart INT;  \n" +
				"	DECLARE v_rfqLineItemsID INT;  \n" +
				"	DECLARE v_componentCount INT;  \n" +
				"	DECLARE v_componentId INT;  \n" +
				"	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
				"	DECLARE v_partMFG INT;  \n" +
				"	DECLARE v_isGoodPart TINYINT;  \n" +
				"	DECLARE v_restrictUsePermanently TINYINT;  \n" +
				"	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
				"	DECLARE v_restrictUseInBOM TINYINT;  \n" +
				"	DECLARE v_isInstall TINYINT;  \n" +
				"	DECLARE v_isBOMLineClean TINYINT;  \n" +
				"	DECLARE v_BOMLineId INT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
				"	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
				"	DECLARE v_PIDCode VARCHAR(110);  \n" +
				"	DECLARE v_isPurchase TINYINT;  \n" +
				"	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
				"	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
				"	DECLARE v_BOMLineCount INT;  \n" +
				"	DECLARE v_AlternateLineId INT;  \n" +
				"	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
				"	DECLARE v_BOMAssyId INT;  \n" +
				"	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
				"	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
				"	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
				"	DECLARE v_isCPNFlag TINYINT;  \n" +
				"	DECLARE v_dateCodeFormatID INT;  \n" +
				"	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
				"  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
				"	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
				"	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
				"	DECLARE v_MFRList VARCHAR(10000);  \n" +
				"	DECLARE v_barcode_status INT;  \n" +
				"	DECLARE v_category INT;  \n" +
				"	DECLARE v_partType INT;  \n" +
				"    DECLARE v_pendingPartCount INT;  \n" +
				"  \n" +
				"	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
				"	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
				"	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
				"	(  \n" +
				"		errorText LONGTEXT,  \n" +
				"		IsSuccess VARCHAR (2),  \n" +
				"		MFGPart VARCHAR(10000)  \n" +
				"	);  \n" +
				"  \n" +
				"	/* Temp table for Packing Slip */  \n" +
				"	IF (pCategory = 'P') THEN  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
				"		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
				"		(  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			poNumber VARCHAR(100),  \n" +
				"			supplierSONumber VARCHAR(100),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50)  \n" +
				"		);  \n" +
				"	ELSE /* Temp table for MFR */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
				"		(  \n" +
				"			refcompid INT,  \n" +
				"			pkgQty DECIMAL(18,6),  \n" +
				"			dateCode VARCHAR(10),  \n" +
				"			lotCode VARCHAR(255),  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			createdBy VARCHAR(255),  \n" +
				"			uid VARCHAR(14),  \n" +
				"			prefix VARCHAR(20),  \n" +
				"			nickName VARCHAR(50),  \n" +
				"			cpn TINYINT,  \n" +
				"			mfgAvailabel TINYINT,  \n" +
				"			refCPNMFGPNID INT,  \n" +
				"			customerID INT,  \n" +
				"			assyID INT,  \n" +
				"			receiveMaterialType VARCHAR(255),  \n" +
				"			refSupplierPartId INT,  \n" +
				"			mfrDateCode VARCHAR(50),  \n" +
				"			poNumber VARCHAR(50),  \n" +
				"			supplierSONumber VARCHAR(50),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50),  \n" +
				"			binName VARCHAR(100),  \n" +
				"			packaging VARCHAR(100),  \n" +
				"			packingSlipDetailNickname VARCHAR(50)  \n" +
				"		);  \n" +
				"  \n" +
				"		/* Temp table for data element value */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
				"		(  \n" +
				"			entityid INT,  \n" +
				"			dataelementid INT,  \n" +
				"			`value` LONGTEXT,  \n" +
				"			createdBy VARCHAR(255)  \n" +
				"		);  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	-- get data from barcode templates with seprator  \n" +
				"	# return error code  \n" +
				"	# 0: Mfgcode and MfgpartNO is not Found  \n" +
				"	# 0: Barcode template does not exist, Please add template  \n" +
				"	# 1: Validation Clear  \n" +
				"	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
				"	# 3: Mfgcode is not found  \n" +
				"	# 4: MFG PN does not exist  \n" +
				"	# 5: Multiple MFG PN found  \n" +
				"	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
				"	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
				"	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
				"	# 9:  Multiple barcode template found.  \n" +
				"	# 10: Scanned MFG Part is not CPN, Please check  \n" +
				"	# 11: MFG PN is incorrect part  \n" +
				"	# 12: PID PID1 was restricted part at part master level.  \n" +
				"	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
				"	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
				"	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
				"	# 17: PID is contain more than 1 BOM line.  \n" +
				"	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
				"	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
				"	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
				"	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
				"	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
				"    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
				"    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
				"    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
				"  \n" +
				"	block1: BEGIN  \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
				"		IF (pBarcodeID IS NULL) THEN  \n" +
				"			/* Get barcode from labelstring */  \n" +
				"			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
				"			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
				"				/* Get More than 1 barcode then give validation */  \n" +
				"				IF (v_barcode_count > 1) THEN  \n" +
				"					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
				"  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					SET pBarcodeID = v_barcode_id;  \n" +
				"				END IF;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			/* Get data from barcode id */  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		/* If data not get from barcode then concat none in label string find in table */  \n" +
				"		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
				"			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
				"			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
				"			SET pBarcodeID = v_barcode_id;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
				"			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
				"			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '2D';  \n" +
				"		ELSE /* barcode 1D */  \n" +
				"			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
				"			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '1D';  \n" +
				"		END IF;  \n" +
				"	END block1;  \n" +
				"  \n" +
				"	/* If error is not found then continue else select error */  \n" +
				"	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"		block2: BEGIN  \n" +
				"			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
				"			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
				"				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
				"				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
				"			-- declare exit loop if data not found  \n" +
				"			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
				"			-- if any record match found than  check for delimiter and its value  \n" +
				"			IF (pbr_template_ID > 0) THEN  \n" +
				"				-- create temporary table for deliemeter and component dataelement  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
				"					pentityId INT,  \n" +
				"					pdataElementId INT,  \n" +
				"					pdelimiter_value VARCHAR(200)  \n" +
				"				);  \n" +
				"				-- create temporary table for separator string values  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
				"				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
				"  \n" +
				"				-- prefix length and suffix lenght to get actual string  \n" +
				"				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
				"				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
				"				-- open cursor  \n" +
				"				OPEN barcodeMatch_cursor;  \n" +
				"				-- set str label as whereclause  \n" +
				"				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
				"				-- if prefix is found than remove those from actual string match  \n" +
				"				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
				"					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
				"					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
				"				 END IF;  \n" +
				"  \n" +
				"				-- if suffix is found than remove those from actual string match  \n" +
				"				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
				"					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"				 END IF;  \n" +
				"				-- insert all values after seprator split  \n" +
				"				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
				"				PREPARE stmt1 FROM @SQL;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				IF (pCategory = 'P') THEN  \n" +
				"					-- create dynamic query to insert in packing slip  \n" +
				"					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
				"				ELSE  \n" +
				"					-- create dynamic query to insert in recieving material  \n" +
				"					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
				"				END IF;  \n" +
				"  \n" +
				"  \n" +
				"				-- loop item till all records found in string match of barcode template  \n" +
				"				barcodeMatch_loop:LOOP  \n" +
				"					-- get all five selected values  \n" +
				"					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
				"					-- exit loop if no record found for barcode match  \n" +
				"					IF exit_loop THEN  \n" +
				"						CLOSE barcodeMatch_cursor;  \n" +
				"						LEAVE barcodeMatch_loop;  \n" +
				"					END IF;  \n" +
				"					-- dynamic query to get dellimeter string with values from string  \n" +
				"					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
				"					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
				"					EXECUTE stmtdelimiter;  \n" +
				"					DEALLOCATE PREPARE stmtdelimiter;  \n" +
				"  \n" +
				"					-- get delimiter values from string  \n" +
				"					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
				"					-- check for field type is static or dynamic  \n" +
				"					-- if static field than check for mfg code and mfg part number  \n" +
				"					IF v_fieldType = 0  THEN  \n" +
				"						-- component_sid_stock  \n" +
				"						-- get static field name from barcode table delimiter data element id  \n" +
				"						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
				"						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgpn\") THEN  \n" +
				"							SET MFG_Part_No = delimiter_value_data;  \n" +
				"							/* If component id is not found */  \n" +
				"							IF(pComponentID = 0)  \n" +
				"                            THEN  \n" +
				"								/* Get component data */  \n" +
				"								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
				"								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
				"								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
				"								) a  \n" +
				"								UNION  \n" +
				"								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
				"                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
				"								) a  \n" +
				"								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
				"  \n" +
				"								IF (pSupplierID IS NOT NULL) THEN  \n" +
				"									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  \n" +
				"								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
				"								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
				"								   ELSE  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								IF (v_componentCount > 1) THEN  \n" +
				"									/* If component is more that one then remove supplier from list */  \n" +
				"									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
				"									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
				"									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
				"  \n" +
				"									/* After remove supplier if get only one record then  */  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
				"									IF (v_componentCount < 2) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"										FROM 	temp_component_supplier_detail;  \n" +
				"									END IF;  \n" +
				"								ELSE  \n" +
				"									IF (pSupplierID IS NULL) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"										FROM 	temp_component_detail;  \n" +
				"									ELSE  \n" +
				"										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
				"											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
				"										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
				"											SET v_componentCount=0;  \n" +
				"											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
				"										ELSE  \n" +
				"											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
				"										END IF;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"							ELSE  \n" +
				"								/* If component id is found */  \n" +
				"								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Remove from cursor if found more that one component */  \n" +
				"							IF v_componentCount > 1 THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* If inventory is opening inventory and type is assembly */  \n" +
				"							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* If bad part found */  \n" +
				"							IF (v_isGoodPart != 1) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction */  \n" +
				"							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction with packaging */  \n" +
				"							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Barcode MFR and Part MFR mismatch */  \n" +
				"							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
				"								SET BarcodeMFGMatch = 'Mismatch';  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Found DIST then set id of MFR of that DIST */  \n" +
				"							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
				"							IF (@MFGType = 'DIST') THEN  \n" +
				"								SET v_SupplierID = v_componentId;  \n" +
				"								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check kit allocation */  \n" +
				"							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
				"								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
				"								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
				"								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
				"										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
				"								FROM 	(  \n" +
				"										SELECT 	*  \n" +
				"										FROM  \n" +
				"											(  \n" +
				"												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
				"												FROM 		component_packagingalias cp  \n" +
				"												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
				"												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
				"												GROUP BY 	custPNID, rla.partID  \n" +
				"											) b  \n" +
				"										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
				"										GROUP BY b.lineID, b.assyId  \n" +
				"									) a;  \n" +
				"  \n" +
				"								/* BOM line not found  */  \n" +
				"								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								/* Found More then one BOM line */  \n" +
				"								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								ELSE  \n" +
				"									/* Restrict use bom */  \n" +
				"									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"  \n" +
				"									/* BOM line contain any error */  \n" +
				"									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
				"									IF (v_isBOMLineClean = 0) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								/* Part not install, purchase and not dnp  */  \n" +
				"								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Set dynamic query for component */  \n" +
				"							IF  v_componentCount = 1 THEN  \n" +
				"								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
				"								ELSE  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Not in use */  \n" +
				"						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for pkgQty */  \n" +
				"						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for lotcode */  \n" +
				"						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for mfrdatecode and datecode */  \n" +
				"						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
				"							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
				"								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
				"								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
				"							ELSE  \n" +
				"								SET exit_loop = FALSE;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for binid */  \n" +
				"						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packaging */  \n" +
				"						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for nickname */  \n" +
				"						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for po number */  \n" +
				"						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for so number */  \n" +
				"						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packing slip number */  \n" +
				"						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for invoice number */  \n" +
				"						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"					ELSE  \n" +
				"						/* Set dynamic query for other than system generated */  \n" +
				"						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
				"							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
				"						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
				"							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
				"					END IF;  \n" +
				"				END LOOP barcodeMatch_loop;  \n" +
				"  \n" +
				"				-- check if mfg and component both found than  \n" +
				"				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					IF (v_isGoodPart = 2) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
				"				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					IF (v_isCPNFlag = 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
				"				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
				"					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
				"                    IF(v_pendingPartCount = 0) THEN  \n" +
				"						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', @binName ,'</b> bin does not have pending UMID stock of <b>', v_PIDCode ,'</b> part or no UMID stock is set as true, check with Pending UMID stock once.<br/>Click on Go to Pending UMID Parts to check stock for scanned Part.'),24,v_PIDCode);  \n" +
				"                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
				"						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
				"								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
				"						FROM vu_umid_creation_pending vu  \n" +
				"                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
				"                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
				"								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
				"						IF(@packingSlipModeStatus = 'D') THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
				"                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
				"							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
				"                        END IF;  \n" +
				"                    END IF;  \n" +
				"                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
				"					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
				"					IF @Mfgmatched = 0  THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSE  \n" +
				"					IF @mfgCount = 0 THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
				"						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pCPN = 1) THEN  \n" +
				"					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
				"					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
				"					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF (@isCPNPart != 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"  \n" +
				"				IF (pIsFromUID = 1) THEN  \n" +
				"					/* If not fire any validation */  \n" +
				"					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"  \n" +
				"						-- must call statements in sequence  \n" +
				"						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
				"						PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
				"  \n" +
				"						IF (pprefix IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
				"                        END IF;  \n" +
				"  \n" +
				"						IF (pnickName IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pCustomerID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pAssyID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (v_SupplierID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						SET @sql2 = UpdateValue;  \n" +
				"						PREPARE stmt2 FROM @SQL2;  \n" +
				"						EXECUTE stmt2;  \n" +
				"						DEALLOCATE PREPARE stmt2;  \n" +
				"  \n" +
				"						/* Add success result in save error table */  \n" +
				"						IF (pkitAssemblyID IS NULL) THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"						ELSE  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
				"						END IF;  \n" +
				"						/* Add data in table of delimeter table */  \n" +
				"						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
				"							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
				"							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
				"						END IF;  \n" +
				"						/* select detail of error table */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"  \n" +
				"						/* select detail in temp table of component sid stock table  */  \n" +
				"						SELECT * FROM temp_Component_Sid_Stock;  \n" +
				"  \n" +
				"						/* Select data of component */  \n" +
				"						SELECT 	c.*,  \n" +
				"							mg.mfgcode AS mfgCode,  \n" +
				"							mg.mfgName AS mfgName,  \n" +
				"							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
				"							csup.minimum AS supplierMinimum,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"  \n" +
				"						/* select data of data element of component sid stock */  \n" +
				"						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
				"						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
				"						LEFT OUTER JOIN `dataelement` AS dl  \n" +
				"						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
				"						/* select data of cpn */  \n" +
				"						SELECT 	id, refComponentID, refCPNPartID  \n" +
				"						FROM 	component_cust_alias_rev_pn  \n" +
				"						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
				"  \n" +
				"						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
				"						) AND isDeleted = 0;  \n" +
				"  \n" +
				"						/* select detail of bom */  \n" +
				"						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
				"								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
				"						FROM 		rfq_lineitems_alternatepart rla  \n" +
				"						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
				"						WHERE 		rla.isDeleted = 0  \n" +
				"									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
				"									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
				"									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
				"  \n" +
				"					ELSE  \n" +
				"						/* Found any error then select error  */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					END IF;  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					/* generate dynamic query and save in temp in case of packing slip */  \n" +
				"					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
				"						PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						DEALLOCATE PREPARE stmt1;  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					/* Add success data in temp error table */  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"  \n" +
				"					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"  \n" +
				"					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
				"					IF (pCategory = 'M') THEN  \n" +
				"						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.id AS supplierMFGPNID,  \n" +
				"							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
				"							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"			ELSE  \n" +
				"				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
				"  \n" +
				"				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"				SELECT 1;  \n" +
				"  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"				SELECT 1;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"		END block2;  \n" +
				"	ELSE  \n" +
				"		IF (pIsFromUID = 1) THEN  \n" +
				"			SELECT * FROM tempUIDSuccessDetail;  \n" +
				"		ELSE  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"			SELECT 1;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
				"CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
				"	IN pVerificationType VARCHAR(100),  \n" +
				"	IN pUID VARCHAR(15),  \n" +
				"	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
				"	IN pScanPID VARCHAR(50),  \n" +
				"	IN pScanCPN VARCHAR(50),  \n" +
				"	IN pScanUID VARCHAR(15),  \n" +
				"	IN pScanMFGPN VARCHAR(100),  \n" +
				"	IN pCreatedBy VARCHAR(255),  \n" +
				"	IN pMFRId INT,  \n" +
				"	IN pBarcodeId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
				"	DECLARE v_mfgcodeID INT;  \n" +
				"	DECLARE v_mfgPN VARCHAR(100);  \n" +
				" 	DECLARE v_PIDCode VARCHAR(100);  \n" +
				" 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
				"	DECLARE v_RoHSStatusID INT;  \n" +
				"	DECLARE v_compStockID INT;  \n" +
				"	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
				"	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
				" 	DECLARE v_uom VARCHAR(255);  \n" +
				" 	DECLARE v_string2PartID INT;  \n" +
				" 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
				" 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
				" 	DECLARE v_packingSlipId INT;  \n" +
				"	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
				"	DECLARE	v_packingSlipSupplierId INT;  \n" +
				"	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
				"	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
				"	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
				"	DECLARE v_componentId INT;  \n" +
				"	DECLARE v_successId INT;  \n" +
				"	DECLARE v_refcompid INT;  \n" +
				"    DECLARE v_mountingTypeID INT;  \n" +
				"    DECLARE v_partPackage VARCHAR(255);  \n" +
				"    DECLARE v_uomClassID INT;  \n" +
				"    DECLARE v_spq DECIMAL(18,8);  \n" +
				"    DECLARE v_orgQty DECIMAL(18,8);  \n" +
				"	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
				"    DECLARE v_imageURL VARCHAR(1000);  \n" +
				"    DECLARE v_documentPath VARCHAR(1000);  \n" +
				"    DECLARE v_mfgCode VARCHAR(255);  \n" +
				"    DECLARE v_mfgName VARCHAR(255);  \n" +
				"    DECLARE v_mfgType VARCHAR(20);  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
				"		SELECT 		*,  \n" +
				"				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
				"		FROM 		(  \n" +
				"					SELECT 		*,  \n" +
				"							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
				"							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
				"                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
				"											(  \n" +
				"												CASE  \n" +
				"													WHEN stockInventoryType = 'NI' THEN  \n" +
				"														fun_getUMIDPackingSlipNameByID(id)  \n" +
				"													WHEN stockInventoryType = 'SI' THEN  \n" +
				"														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
				"													ELSE  \n" +
				"														uid  \n" +
				"												END  \n" +
				"											)ELSE NULL END) cOfCValue  \n" +
				"					FROM 		(  \n" +
				"								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
				"											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
				"										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
				"										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
				"								FROM 		component_sid_stock cs  \n" +
				"								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
				"								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
				"								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
				"								WHERE 		cs.uid =  pUID  \n" +
				"								AND 		cs.isDeleted = 0  \n" +
				"								LIMIT 		1  \n" +
				"							) AS a  \n" +
				"				) AS b;  \n" +
				"  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
				"		scanString1 VARCHAR(1000) NULL,  \n" +
				"		scanString2 VARCHAR(1000) NULL,  \n" +
				"		string1PartID INT(11) NULL,  \n" +
				"		scanString1MFG VARCHAR(100) NULL,  \n" +
				"		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
				"		string2PartID INT(11) NULL,  \n" +
				"		scanString2MFG VARCHAR(100) NULL,  \n" +
				"		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
				"		STATUS VARCHAR(100) NULL,  \n" +
				"		packingSlipId INT(11) NULL,  \n" +
				"		packingSlipNumber VARCHAR(255) NULL,  \n" +
				"		packingSlipSupplierId INT(11) NULL,  \n" +
				"		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
				"		cOfCValue VARCHAR(100) NULL,  \n" +
				"		isDeleted TINYINT(1) DEFAULT '0',  \n" +
				"		createdBy VARCHAR(255) NULL,  \n" +
				"		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
				"	);  \n" +
				"  \n" +
				"	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
				"					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
				"					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
				"					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
				"					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
				"	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
				"		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
				"		NULL string2PartID,  \n" +
				"		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
				"		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
				"		supplierCode,			cOfCValue  \n" +
				"	FROM 	tempUIDDet UH;  \n" +
				"  \n" +
				"	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
				"			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
				"            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
				"	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
				"			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
				"            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
				"	FROM 	tempUIDDet u;  \n" +
				"  \n" +
				"	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
				"		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
				"			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
				"				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL,NULL);  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
				"				SELECT * FROM tempUIDSuccessDetail;  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
				"				SELECT * FROM tempUIDComponentDetail;  \n" +
				"				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
				"				IF (v_successId = 1) THEN  \n" +
				"					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
				"					IF (v_componentId = v_refcompid) THEN  \n" +
				"						SET uidVerified = 1;  \n" +
				"					END IF;  \n" +
				"				ELSE  \n" +
				"					SET uidVerified = 0;  \n" +
				"				END IF;  \n" +
				"			-- END IF;  \n" +
				"		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
				"			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
				"			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
				"			FROM 	component c  \n" +
				"			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
				"			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
				"				SET uidVerified = 1;  \n" +
				"			END IF	;  \n" +
				"		ELSEIF (pUID = pScanUID) THEN  \n" +
				"			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
				"			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
				"			FROM 	tempUIDDet c;  \n" +
				"			SET uidVerified = 1;  \n" +
				"		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
				"			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
				"				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
				"				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
				"				FROM 	tempUIDDet c;  \n" +
				"				SET uidVerified = 1;  \n" +
				"			ELSE  \n" +
				"				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
				"				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
				"				FROM 	component c  \n" +
				"				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
				"			END IF;  \n" +
				"		END IF;  \n" +
				"		UPDATE 	tempUIDHistory  \n" +
				"		SET 	string2PartID = v_string2PartID,  \n" +
				"			scanString2MFG = v_scanString2MFG,  \n" +
				"			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
				"	ELSE  \n" +
				"		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
				"				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
				"						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
				"						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
				"						`status`,  \n" +
				"						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
				"	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
				"		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
				"		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
				"		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
				"		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
				"		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
				"	FROM 	tempUIDHistory UH;  \n" +
				"  \n" +
				"	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
				"		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
				"        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
				"		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
				"		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
				"		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
				"		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
				"		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
				"	FROM 	uid_verification_history  \n" +
				"	WHERE 	id = LAST_INSERT_ID();  \n" +
				"  \n" +
				"	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
				"		SELECT * FROM tempUIDSuccessDetail;  \n" +
				"	ELSE  \n" +
				"		SELECT 1;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_MatchBarCode`;  \n" +
				"CREATE PROCEDURE `Sproc_MatchBarCode`(  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN puserID VARCHAR(50),  \n" +
				"	IN pnickName VARCHAR(20),  \n" +
				"	IN pprefix VARCHAR(20),  \n" +
				"	IN puid VARCHAR(20),  \n" +
				"	IN pComponentID INT,  \n" +
				"	IN pCustomerID INT,  \n" +
				"	IN pCPN BOOL,  \n" +
				"	IN pMFGAvailabel BOOL,  \n" +
				"	IN pRefCpnMfgID INT,  \n" +
				"	IN pAssyID INT,  \n" +
				"	IN pSalesOrderDetailID INT,  \n" +
				"	IN pReceiveMaterialType VARCHAR(255),  \n" +
				"	IN pkitAssemblyID INT,  \n" +
				"	IN pBarcodeID INT,  \n" +
				"	IN pBOMLineID INT,  \n" +
				"	IN pSupplierID INT,  \n" +
				"	IN pCategory VARCHAR(2),  \n" +
				"	IN pInventoryType VARCHAR(2),  \n" +
				"	IN pCallFrom VARCHAR(50),  \n" +
				"    IN pExcludeStatus INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	CALL Sproc_MatchBarCodeAndSaveDelimiters (pWhereClause,puserID,pnickName,pprefix,false,pComponentID,pCustomerID,pCPN,pMFGAvailabel,pRefCpnMfgID,pAssyID,pSalesOrderDetailID,pReceiveMaterialType,pkitAssemblyID,pBarcodeID,pBOMLineID,pSupplierID,pCategory,pInventoryType,pCallFrom,pExcludeStatus,NULL);  \n" +
				"	SELECT * FROM tempUIDSuccessDetail;  \n" +
				"	IF (pCategory = 'P') THEN  \n" +
				"		SELECT * FROM temp_packing_slip_material_receive;  \n" +
				"	ELSE  \n" +
				"		SELECT * FROM tempUIDComponentDetail;  \n" +
				"        SELECT * FROM temp_Component_Sid_Stock;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  tempUIDSuccessDetail;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  tempUIDComponentDetail;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP VIEW IF EXISTS `vu_availablestocks`; \n" +
				"CREATE VIEW `vu_availablestocks` AS  \n" +
				"    SELECT  \n" +
				"        `component_sid_stock`.`id` AS `id`,  \n" +
				"        `component_sid_stock`.`receiveMaterialType` AS `receiveMaterialType`,  \n" +
				"        SUM(IFNULL(`component_sid_stock`.`pkgQty`, 0)) AS `stock`,  \n" +
				"        `component_sid_stock`.`refcompid` AS `refcompid`  \n" +
				"    FROM  \n" +
				"        `component_sid_stock`  \n" +
				"    WHERE  \n" +
				"        ((IFNULL(`component_sid_stock`.`isDeleted`, 0) = 0)  \n" +
				"            AND (`component_sid_stock`.`isReservedStock` = 0)  \n" +
				"            AND `component_sid_stock`.`id` IN (SELECT  \n" +
				"                `ka`.`refUIDId`  \n" +
				"            FROM  \n" +
				"                `kit_allocation` `ka`  \n" +
				"            WHERE  \n" +
				"                (`ka`.`STATUS` <> 'A'))  \n" +
				"            IS FALSE)  \n" +
				"    GROUP BY `component_sid_stock`.`refcompid`;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP function IF EXISTS `fun_getAvilableStockOfCPN`;  \n" +
				"CREATE FUNCTION `fun_getAvilableStockOfCPN`(  \n" +
				"		pLineItemId INT,  \n" +
				"		pAssyId INT,  \n" +
				"		pSaleOrderDetailId INT  \n" +
				"	) RETURNS decimal(18,8)  \n" +
				"BEGIN  \n" +
				"		DECLARE result DECIMAL(18,6);  \n" +
				"		DECLARE v_ToUom INT;  \n" +
				"		DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
				"		DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
				"		DECLARE v_NonUMIDStock DECIMAL(18,8);  \n" +
				"  \n" +
				"		SELECT uomID INTO v_ToUom FROM kit_allocation_lineitems WHERE refRfqLineitem = pLineItemId AND refSalesOrderDetID = pSaleOrderDetailId AND partID = pAssyId AND isDeleted = 0;  \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS tempStockRawCPNDet;  \n" +
				"		CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawCPNDet AS  \n" +
				"		SELECT 	id, receiveMaterialType, fun_convertUOM(uom, -1, pkgUnit) pkgUnit  \n" +
				"		FROM 	component_sid_stock  \n" +
				"		WHERE 	refcompid IN (  \n" +
				"					SELECT 	 custPNID  \n" +
				"					FROM 	kit_allocation_lineitems  \n" +
				"					WHERE 	refSalesOrderDetID = pSaleOrderDetailId  \n" +
				"							AND partID = pAssyId  \n" +
				"							AND refRfqLineitem = pLineItemId  \n" +
				"							AND isDeleted = 0  \n" +
				"				)  \n" +
				"				AND IFNULL(isDeleted,0) = 0  \n" +
				"				AND receiveMaterialType = 'CP';  \n" +
				"  \n" +
				"		-- v_TotalStockInSystemRecord  \n" +
				"		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalStockInSystemRecord  \n" +
				"		FROM 	tempStockRawCPNDet;  \n" +
				"  \n" +
				"		-- v_AllocatedToKitStock  \n" +
				"		SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedToKitStock  \n" +
				"		FROM 	kit_allocation  \n" +
				"		WHERE 	refUIDId IN (SELECT id FROM tempStockRawCPNDet)  \n" +
				"		AND 	STATUS = 'A';  \n" +
				"  \n" +
				"		-- v_NonUMIDStock  \n" +
				"		SELECT 	fun_convertUOM(uom, -1, nonUMIDStock) INTO v_NonUMIDStock  \n" +
				"		FROM 	(  \n" +
				"			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.uom  \n" +
				"			FROM 		vu_umid_creation_pending vu  \n" +
				"			INNER JOIN 	component c ON c.id = vu.PartId  \n" +
				"			WHERE 		vu.PartId IN (  \n" +
				"						SELECT custPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pSaleOrderDetailId AND refRfqLineitem = pLineItemId AND isDeleted = 0  \n" +
				"					) AND BalanceQty > 0  \n" +
				"		) a;  \n" +
				"		SET result = IFNULL(v_TotalStockInSystemRecord,0) - IFNULL(v_AllocatedToKitStock,0) + IFNULL(v_NonUMIDStock, 0);  \n" +
				"  \n" +
				"		RETURN result;  \n" +
				"	END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP function IF EXISTS `fun_getAvilableStockWithPackagingAliasForConsolidate`;  \n" +
				"CREATE FUNCTION `fun_getAvilableStockWithPackagingAliasForConsolidate`(  \n" +
				"		pSaleOrderDetailId INT,  \n" +
				"		pRefRfqLineItemIds VARCHAR(1000)  \n" +
				"	) RETURNS decimal(18,8)  \n" +
				"BEGIN  \n" +
				"	DECLARE result DECIMAL(18,8);  \n" +
				"	DECLARE v_AssyIds VARCHAR(1000);  \n" +
				"	DECLARE	v_MainAssyId INT;  \n" +
				"	DECLARE v_ToUom INT;  \n" +
				"	DECLARE v_MFRCPNIds VARCHAR(1000);  \n" +
				"	DECLARE v_PendingMFRCPNIds VARCHAR(1000);  \n" +
				"	DECLARE v_TotalReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
				"	DECLARE v_NonUMIDStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AvailableStock DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);  \n" +
				"	DECLARE v_PackagingAliasStock DECIMAL(18,8);  \n" +
				"  \n" +
				"	SET SESSION group_concat_max_len = 500000;  \n" +
				"  \n" +
				"	SELECT GROUP_CONCAT(partId) INTO v_AssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId;  \n" +
				"	SELECT partId INTO v_MainAssyId FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId AND bomAssyLevel = 0;  \n" +
				"	SELECT uomID INTO v_ToUom FROM kit_allocation_lineitems WHERE FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds) AND refSalesOrderDetID = pSaleOrderDetailId AND partID = v_MainAssyId AND isDeleted = 0 GROUP BY uomID;  \n" +
				"	SELECT GROUP_CONCAT(mfgPNID) INTO v_MFRCPNIds  \n" +
				"	FROM 	(  \n" +
				"			SELECT DISTINCT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)  \n" +
				"			UNION  \n" +
				"			SELECT DISTINCT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)  \n" +
				"		) a;  \n" +
				"  \n" +
				"	SELECT GROUP_CONCAT(mfgPNID) INTO v_PendingMFRCPNIds  \n" +
				"	FROM 	(  \n" +
				"			SELECT DISTINCT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)  \n" +
				"			UNION  \n" +
				"			SELECT DISTINCT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE isDeleted = 0 AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)  \n" +
				"			UNION  \n" +
				"			SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"				SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, v_MFRCPNIds) AND isDeleted = 0  \n" +
				"			) AND isDeleted = 0  \n" +
				"		) a;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempSidStockRawDet;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempSidStockRawDet AS  \n" +
				"	SELECT 	id, receiveMaterialType, fun_convertUOM(uom, v_ToUom, pkgUnit) pkgUnit  \n" +
				"	FROM 	component_sid_stock  \n" +
				"	WHERE 	FIND_IN_SET(refcompid, v_MFRCPNIds)  \n" +
				"			AND isDeleted = 0;  \n" +
				"	-- v_TotalReservedStock  \n" +
				"	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalReservedStock  \n" +
				"	FROM 	tempSidStockRawDet  \n" +
				"	WHERE 	isReservedStock = 1;  \n" +
				"  \n" +
				"	-- v_AllocatedReservedStock  \n" +
				"	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedStock  \n" +
				"	FROM 	tempSidStockRawDet  \n" +
				"	WHERE 	isReservedStock = 1  \n" +
				"	AND	id  IN (  \n" +
				"		SELECT 	refUIDId  \n" +
				"		FROM 	kit_allocation  \n" +
				"		WHERE 	`status` = 'A'  \n" +
				"	);  \n" +
				"  \n" +
				"	-- v_TotalStockInSystemRecord  \n" +
				"	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalStockInSystemRecord  \n" +
				"	FROM 	tempSidStockRawDet;  \n" +
				"  \n" +
				"	-- v_AllocatedToKitStock  \n" +
				"	SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedToKitStock  \n" +
				"	FROM 	kit_allocation  \n" +
				"	WHERE 	refUIDId IN (SELECT id FROM tempSidStockRawDet)  \n" +
				"	AND 	STATUS = 'A';  \n" +
				"  \n" +
				"	-- v_NonUMIDStock  \n" +
				"	SELECT 	fun_convertUOM(uom, v_ToUom, nonUMIDStock) INTO v_NonUMIDStock  \n" +
				"	FROM 	(  \n" +
				"		SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.uom  \n" +
				"		FROM 		vu_umid_creation_pending vu  \n" +
				"		INNER JOIN 	component c ON c.id = vu.PartId  \n" +
				"		WHERE 		FIND_IN_SET(vu.PartId, v_PendingMFRCPNIds)  \n" +
				"					AND BalanceQty > 0  \n" +
				"	) a;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasSidStockRawDet;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasSidStockRawDet AS  \n" +
				"	SELECT 	c.id,  \n" +
				"		c.refcompid,  \n" +
				"		c.receiveMaterialType,  \n" +
				"		fun_convertUOM(uom, v_ToUom, c.pkgUnit) pkgUnit  \n" +
				"	FROM 	component_sid_stock c, component_packagingalias cp  \n" +
				"	WHERE 	c.refcompid = cp.componentID  \n" +
				"		AND 	c.isDeleted = 0  \n" +
				"		AND	cp.componentID NOT IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(partID, v_AssyIds) AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds))  \n" +
				"		AND	cp.aliasgroupID IN (SELECT packaginggroupID FROM component WHERE FIND_IN_SET(id, v_MFRCPNIds))  \n" +
				"		AND 	cp.isDeleted = 0;  \n" +
				"  \n" +
				"	-- v_TotalPackagingReservedStock  \n" +
				"	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingReservedStock  \n" +
				"	FROM tempPackagingAliasSidStockRawDet  \n" +
				"	WHERE receiveMaterialType = 'PR';  \n" +
				"  \n" +
				"	-- v_AllocatedReservedPackagingStock  \n" +
				"	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedPackagingStock  \n" +
				"	FROM 	tempPackagingAliasSidStockRawDet  \n" +
				"	WHERE 	receiveMaterialType = 'PR'  \n" +
				"	AND	id IN (SELECT refUIDId FROM kit_allocation WHERE STATUS = 'A');  \n" +
				"  \n" +
				"	-- V_TotalPackagingStockInSystemRecord  \n" +
				"	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecord  \n" +
				"	FROM 	tempPackagingAliasSidStockRawDet;  \n" +
				"  \n" +
				"	-- v_AllocatedPackagingStockToKitStock  \n" +
				"	SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedPackagingStockToKitStock  \n" +
				"	FROM 	kit_allocation  \n" +
				"	WHERE 	refUIDId IN (SELECT id FROM tempPackagingAliasSidStockRawDet)  \n" +
				"	AND 	STATUS = 'A';  \n" +
				"	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;  \n" +
				"	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_AllocatedToKitStock);  \n" +
				"	SET v_ReservedPackagingPhysicalStock = v_TotalPackagingReservedStock - v_AllocatedReservedPackagingStock;  \n" +
				"	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_ReservedPackagingPhysicalStock - v_AllocatedPackagingStockToKitStock);  \n" +
				"	SET result = v_AvailableStock + v_PackagingAliasStock + IFNULL(v_NonUMIDStock, 0);  \n" +
				"  \n" +
				"	RETURN result;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP function IF EXISTS `fun_getComponentStock`;  \n" +
				"CREATE FUNCTION `fun_getComponentStock`(  \n" +
				"		pComponentID INT  \n" +
				"	) RETURNS int  \n" +
				"BEGIN  \n" +
				"	DECLARE result DECIMAL(18,6);  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempCompStockRawDet;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempCompStockRawDet AS  \n" +
				"	SELECT 	id,	receiveMaterialType,	pkgQty,		pkgUnit, isReservedStock  \n" +
				"	FROM 	component_sid_stock  \n" +
				"	WHERE 	refcompid = pComponentID  \n" +
				"	AND 	IFNULL(isDeleted,0) = 0;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempCompStockRawDet;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempCompStockRawDet WHERE isReservedStock = 1;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock  \n" +
				"	FROM 	kit_allocation  \n" +
				"	WHERE 	refUIDId IN (SELECT id FROM tempCompStockRawDet)  \n" +
				"	AND 	STATUS = 'A';  \n" +
				"  \n" +
				"	SELECT 	IFNULL(SUM(pkgQty), 0) INTO @allocatedReservedStock  \n" +
				"	FROM 	tempCompStockRawDet  \n" +
				"	WHERE 	isReservedStock = 1  \n" +
				"	AND		id  IN (SELECT refUIDId FROM kit_allocation  \n" +
				"	WHERE 	STATUS = 'A') ;  \n" +
				"  \n" +
				"	SET @reservedPhysicalStock = @totalReservedStock - @allocatedReservedStock ;  \n" +
				"	SET @availableStock = (@totalStockInSystemRecord - @reservedPhysicalStock - @allocatedToKitStock);  \n" +
				"  \n" +
				"	RETURN @availableStock;  \n" +
				"    END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
				"CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
				"	IN ppageIndex INT,  \n" +
				"	IN precordPerPage INT,  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pWHId INT,  \n" +
				"	IN pBinId INT,  \n" +
				"	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
				"	IN pMountingTypeIDs VARCHAR(16383),  \n" +
				"	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
				"	IN pAssyIDs VARCHAR(16383),  \n" +
				"	IN pRestrictPart TINYINT,  \n" +
				"	IN pExpireMaterial TINYINT,  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pIsShowPackagingAlias TINYINT,  \n" +
				"	IN pStandardIDs VARCHAR(16383),  \n" +
				"	IN pStandardsClassIDs VARCHAR(16383),  \n" +
				"	IN pCostCategoryIDs VARCHAR(16383),  \n" +
				"	IN pDateCode VARCHAR(16383),  \n" +
				"	IN pIsAvailableToSell TINYINT,  \n" +
				"	IN pIsRestrictedUMID TINYINT,  \n" +
				"	IN pIsInternalStock TINYINT,  \n" +
				"	IN pIsCustomerStock TINYINT,  \n" +
				"	IN pdepartmentIDs VARCHAR(16383),  \n" +
				"	IN pwarehouseType VARCHAR(255),  \n" +
				"	IN pWarehouse VARCHAR(16383),  \n" +
				"	IN pExpiredDay INT,  \n" +
				"	IN pRohsStatusIDs VARCHAR(16383),  \n" +
				"	IN pCustomerId INT,  \n" +
				"	IN pFromDate DATE,  \n" +
				"	IN pToDate DATE,  \n" +
				"	IN pSearchTextAttribute LONGTEXT,  \n" +
				"    IN pMfgCodeIDs VARCHAR(16383),  \n" +
				"    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
				"	IN pInventoryType VARCHAR(255),  \n" +
				"    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
				"    IN pIsNonCofc TINYINT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"	DECLARE attributeSearchString LONGTEXT;  \n" +
				"	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
				"	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
				"	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
				"	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
				"    DECLARE v_ExpiryDate datetime;  \n" +
				"    DECLARE v_PartIDs VARCHAR(16383);  \n" +
				"    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"	SET v_DescriptionWhereClause = '';  \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
				"		SET pWhereClause = ' 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
				"		SET pInnerQueryWhereClause = ' ';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF(pIsNonCofc = 1) THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    /* Non COFc records filter */  \n" +
				"	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
				"		IF(pIsShowPackagingAlias = 1) THEN  \n" +
				"			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
				"            into	v_PartIDs  \n" +
				"			FROM 	component c  \n" +
				"			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
				"			WHERE 	c.id = pPartId  \n" +
				"			AND 	c.isDeleted = 0;  \n" +
				"		ELSE  \n" +
				"			select pPartId into v_PartIDs;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	/*below query need to refactor*/  \n" +
				"	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
				"		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
				"		SET attributeSearchString = pSearchTextAttribute;  \n" +
				"		do_this:  \n" +
				"		LOOP  \n" +
				"			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
				"			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
				"			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
				"			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
				"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
				"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
				"			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
				"				LEAVE do_this;  \n" +
				"			END IF;  \n" +
				"		END LOOP do_this;  \n" +
				"	END IF;  \n" +
				"	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
				"		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
				"		FROM 	kit_allocation_assy_detail  \n" +
				"		WHERE 	isDeleted = 0  \n" +
				"			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
				"	END IF;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
				"	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
				"		SELECT 	k.refUIDId  \n" +
				"		FROM 	kit_allocation k  \n" +
				"		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
				"		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
				"		AND	k.status = 'A';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    DROP temporary table if exists temp_component_sid_stock;  \n" +
				"    CREATE temporary table temp_component_sid_stock(  \n" +
				"		  id int NOT NULL DEFAULT '0',  \n" +
				"		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
				"		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
				"		  uid varchar(15) DEFAULT NULL,  \n" +
				"		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
				"		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
				"		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
				"		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
				"		  fromUIDId int DEFAULT NULL,  \n" +
				"		  fromUID varchar(15) DEFAULT NULL,  \n" +
				"		  parentUIDId int DEFAULT NULL,  \n" +
				"		  parentUID varchar(15) DEFAULT NULL,  \n" +
				"		  mfgcodeID int NOT NULL,  \n" +
				"		  mfg text,  \n" +
				"		  refcompid int DEFAULT NULL,  \n" +
				"		  mfgPN varchar(100) NOT NULL,  \n" +
				"		  PIDCode varchar(109) NOT NULL,  \n" +
				"		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
				"		  mslLevel varchar(58) DEFAULT NULL,  \n" +
				"		  RoHSStatusID int NOT NULL,  \n" +
				"		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
				"		  rohsName varchar(50) DEFAULT NULL,  \n" +
				"		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
				"		  spq decimal(18,8) DEFAULT NULL,  \n" +
				"		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
				"		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
				"		  uom int DEFAULT NULL,  \n" +
				"          uomClassID int DEFAULT NULL,  \n" +
				"		  uomName varchar(100) NOT NULL,  \n" +
				"		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
				"		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
				"		  packaginggroupID int DEFAULT NULL,  \n" +
				"		  packaging int DEFAULT NULL,  \n" +
				"		  packagingName varchar(100) NOT NULL,  \n" +
				"		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
				"		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
				"		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
				"		  costCategoryID int DEFAULT NULL,  \n" +
				"		  costCategory varchar(147) DEFAULT NULL,  \n" +
				"		  lotCode varchar(255) DEFAULT NULL,  \n" +
				"		  dateCode varchar(10) DEFAULT NULL,  \n" +
				"		  UMIDrohsStatusID int NOT NULL,  \n" +
				"		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
				"		  binID int DEFAULT NULL,  \n" +
				"		  location varchar(110) DEFAULT NULL,  \n" +
				"		  side varchar(5) NOT NULL DEFAULT '',  \n" +
				"		  warehouseID int DEFAULT NULL,  \n" +
				"		  warehouse varchar(50) NOT NULL,  \n" +
				"		  warehouseType varchar(50) DEFAULT NULL,  \n" +
				"		  department varchar(50) NOT NULL,  \n" +
				"		  departmentID int NOT NULL DEFAULT '0',  \n" +
				"		  fromBin int DEFAULT NULL,  \n" +
				"		  fromBinName varchar(110) DEFAULT NULL,  \n" +
				"		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
				"		  fromWarehouse int DEFAULT NULL,  \n" +
				"		  fromWHName varchar(50) NOT NULL,  \n" +
				"		  fromDepartment int DEFAULT NULL,  \n" +
				"		  fromDepartmentName varchar(50) NOT NULL,  \n" +
				"		  orgRecBin int DEFAULT NULL,  \n" +
				"		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
				"		  orgRecWarehouse int DEFAULT NULL,  \n" +
				"		  orgRecWHName varchar(50) NOT NULL,  \n" +
				"		  orgRecDepartment int DEFAULT NULL,  \n" +
				"		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
				"		  expiryDate date DEFAULT NULL,  \n" +
				"		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
				"		  pcbPerArray int DEFAULT NULL,  \n" +
				"		  nickName varchar(50) DEFAULT NULL,  \n" +
				"		  specialNote varchar(1000) DEFAULT NULL,  \n" +
				"		  isinStk tinyint(1) DEFAULT NULL,  \n" +
				"		  woNumber varchar(255) DEFAULT NULL,  \n" +
				"		  refRestrictUMIDId int DEFAULT NULL,  \n" +
				"		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
				"		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
				"		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
				"		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
				"		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
				"		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
				"		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
				"		  mountingTypeID int NOT NULL,  \n" +
				"		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
				"		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
				"		  partPackage varchar(50) DEFAULT NULL,  \n" +
				"		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
				"		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
				"		  detailDescription text,  \n" +
				"		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
				"		  customerID int DEFAULT NULL,  \n" +
				"		  customer text,  \n" +
				"		  assyID int DEFAULT NULL,  \n" +
				"		  assembly varchar(109),  \n" +
				"		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
				"          cpnMFGCodeID INT DEFAULT NULL,  \n" +
				"		  cpnMFGCode text,  \n" +
				"		  refCPNMFGPNID int DEFAULT NULL,  \n" +
				"		  cpnMFGPN varchar(100),  \n" +
				"		  refSupplierPartId int DEFAULT NULL,  \n" +
				"		  supplierMFGCode text,  \n" +
				"		  supplieMFGPN varchar(100),  \n" +
				"		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
				"		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
				"		  isTransit varchar(10) DEFAULT NULL,  \n" +
				"		  searchUser varchar(50) DEFAULT NULL,  \n" +
				"		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
				"		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
				"		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
				"		  createdAt varchar(50) DEFAULT NULL,  \n" +
				"		  createdBy varchar(255) NOT NULL,  \n" +
				"		  createdByName varchar(50) DEFAULT NULL,  \n" +
				"		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
				"		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
				"		  updatedAt varchar(50) DEFAULT NULL,  \n" +
				"		  updatedBy varchar(255) DEFAULT NULL,  \n" +
				"		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
				"		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
				"		  allocatedToKit text,  \n" +
				"		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
				"		  packingSupplierName text,  \n" +
				"		  packingSlipId int DEFAULT NULL,  \n" +
				"		  packingSlipSupplierId int DEFAULT NULL,  \n" +
				"          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
				"          cocDocumentCount int default 0,  \n" +
				"          parentCofCDocumentCount int default 0,  \n" +
				"          createByRoleId int default null,  \n" +
				"          updateByRoleId int default null,  \n" +
				"          isReservedStock TINYINT DEFAULT FALSE,  \n" +
				"          reservedStock VARCHAR(10)  \n" +
				"		);  \n" +
				"	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
				"					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
				"							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
				"                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
				"                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
				"                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
				"                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
				"                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
				"                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
				"                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
				"                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
				"                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
				"                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
				"                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
				"                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
				"                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
				"                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
				"                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
				"                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
				"                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
				"                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
				"                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
				"                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock)  \n" +
				"					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
				"							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
				"							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
				"							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
				"							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
				"                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
				"                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
				"							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
				"							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
				"							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
				"							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
				"							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
				"							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
				"							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
				"							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
				"							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
				"							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
				"                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
				"							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
				"							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
				"                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
				"                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock  \n" +
				"		FROM 		(  \n" +
				"					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
				"								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
				"										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
				"										ELSE NULL  \n" +
				"								END) displayReceiveMaterialType,  \n" +
				"								css.stockInventoryType,  \n" +
				"								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
				"										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
				"										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
				"										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
				"										ELSE NULL  \n" +
				"								END) displayStockInventoryType,  \n" +
				"								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
				"								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
				"								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
				"								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
				"								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
				"                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
				"                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
				"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
				"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
				"                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
				"								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
				"								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
				"								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
				"								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
				"								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
				"								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
				"								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
				"								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
				"								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
				"								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
				"								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
				"								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
				"								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
				"								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
				"								css.assyID,					assy.PIDCode assembly,  \n" +
				"								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
				"								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
				"								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
				"								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
				"								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
				"								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
				"								null isTransit,  \n" +
				"								null searchUser,  \n" +
				"								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
				"								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
				"								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
				"								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
				"								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
				"								kit.kitname allocatedToKit,  \n" +
				"								null packingSlipName,  \n" +
				"								null packingSupplierName,  \n" +
				"								null packingSlipId,  \n" +
				"								null packingSlipSupplierId,  \n" +
				"                                NULL packingSlipNumber,  \n" +
				"                                css.isReservedStock,  \n" +
				"                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock  \n" +
				"					FROM 		component_sid_stock css  \n" +
				"					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
				"						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
				"						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
				"                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
				"                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
				"						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
				"								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
				"								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
				"								else ''  \n" +
				"                        end),  \n" +
				"                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
				"                        /*below query need to refactor*/  \n" +
				"                        (case when (pIsAvailableToSell = 1) THEN  \n" +
				"							' AND not exists (  \n" +
				"									SELECT 	1  \n" +
				"									FROM 	rfq_lineitems_alternatepart a  \n" +
				"									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
				"									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
				"									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
				"									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
				"									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
				"								)  \n" +
				"						' else '' end),  \n" +
				"					\"  \n" +
				"					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
				"					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
				"					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
				"					inner join uoms u on css.uom = u.id  \n" +
				"					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
				"					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
				"					inner join binmst b on css.binID = b.id \" ,  \n" +
				"						(Case  \n" +
				"							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
				"							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
				"							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
				"                            else ''  \n" +
				"						end),  \n" +
				"					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
				"						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
				"                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
				"						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
				"					\"inner join binmst fb on css.fromBin = fb.id  \n" +
				"					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
				"					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
				"					inner join binmst ob on css.orgRecBin = ob.id  \n" +
				"					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
				"					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
				"					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
				"					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
				"					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
				"					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
				"					left join (  \n" +
				"								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
				"								FROM 		component_sid_stock_history cssh  \n" +
				"								where 		cssh.scrappedUnit > 0  \n" +
				"								GROUP BY 	cssh.refUIDId  \n" +
				"					) cssh on css.id = cssh.refUIDId  \n" +
				"                   left join (  \n" +
				"								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
				"								FROM 		vu_material_consumption_scrapped_det vu  \n" +
				"                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
				"								WHERE 		vu.scrappedunit > 0  \n" +
				"								GROUP BY 	vu.umidid  \n" +
				"					) vuu on vuu.umidid = css.id  \n" +
				"					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
				"					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
				"					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
				"					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
				"					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
				"					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
				"					left join (  \n" +
				"						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
				"						from (  \n" +
				"							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
				"									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
				"							from component_sid_stock_restrict_umid rest_umid  \n" +
				"						) css_rst where css_rst.rnk = 1  \n" +
				"					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
				"					left join (  \n" +
				"						SELECT 		k.refUIDId,  \n" +
				"									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
				"						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
				"						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
				"						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
				"						INNER JOIN	component c ON k.assyID = c.id  \n" +
				"						WHERE 		k.status = 'A'  \n" +
				"						GROUP BY 	k.refUIDId  \n" +
				"					) kit  ON kit.refUIDId = css.id  \n" +
				"					WHERE 	css.isdeleted = 0\",  \n" +
				"						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
				"							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
				"							  when (pCustomerId IS NOT NULL) then  \n" +
				"								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
				"                            else ''  \n" +
				"						end),  \n" +
				"                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
				"                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
				"                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
				"						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
				"						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
				"						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
				"						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
				"                        (case when (pExpireMaterial = 1) THEN  \n" +
				"									(case when (pExpiredDay = 0) THEN  \n" +
				"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone ')  \n" +
				"									ELSE  \n" +
				"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
				"									END)  \n" +
				"							  else ''  \n" +
				"						end),  \n" +
				"                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
				"							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
				"							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
				"							 else ''  \n" +
				"                        end),  \n" +
				"						v_DescriptionWhereClause,  \n" +
				"                        pInnerQueryWhereClause,  \n" +
				"				\") As tempUMID\"  \n" +
				"			);  \n" +
				"	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
				"	EXECUTE tempSQLQuery;  \n" +
				"	DEALLOCATE PREPARE tempSQLQuery;  \n" +
				"  \n" +
				"    # Update count for self documents  \n" +
				"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
				"	set t.cocDocumentCount = g.cofcCount  \n" +
				"	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
				"  \n" +
				"	# Update count for parent documents  \n" +
				"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
				"	set t.parentCofCDocumentCount = g.cofcCount  \n" +
				"	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
				"  \n" +
				"    # Update CofC detail  \n" +
				"	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
				"	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
				"											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
				"										else null  \n" +
				"								  end),  \n" +
				"			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
				"			t.packingSlipId = ps.packingSlipId,  \n" +
				"			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
				"            t.packingSlipNumber = ps.packingSlipNumber  \n" +
				"	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
				"	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
				"  \n" +
				"	# Update CofC detail  \n" +
				"	Update 	temp_component_sid_stock t  \n" +
				"	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
				"	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
				"	and		t.packingSlipId is null  \n" +
				"	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
				"  \n" +
				"    # Update created by role  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join roles r on r.id = t.createByRoleId  \n" +
				"	set t.createdbyRole = r.name;  \n" +
				"  \n" +
				"    # Update updated by role  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join roles r on r.id = t.updateByRoleId  \n" +
				"	set t.updatedbyRole = r.name;  \n" +
				"  \n" +
				"    # Update created by name  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join users u on u.id = t.createdBy  \n" +
				"    inner join employees emp on emp.id = u.employeeID  \n" +
				"	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
				"  \n" +
				"    # Update updated by name  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join users u on  u.id = t.updatedBy  \n" +
				"    inner join employees emp  on emp.id = u.employeeID  \n" +
				"	set t.umidModifiedBy = emp.initialName ;  \n" +
				"  \n" +
				"    # Update MFR Date Code Format  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
				"	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
				"  \n" +
				"    # Update In Transit Data  \n" +
				"	Update temp_component_sid_stock t  \n" +
				"    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
				"	set t.isTransit = 'Yes',  \n" +
				"		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
				"							when (messagetype = 1001) then 'Unauthorized'  \n" +
				"							else ''  \n" +
				"                        end);  \n" +
				"  \n" +
				"	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
				"	PREPARE query3 FROM @SQLStatement3;  \n" +
				"	EXECUTE query3;  \n" +
				"	DEALLOCATE PREPARE query3;  \n" +
				"  \n" +
				"    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
				"	PREPARE query4 FROM @SQLStatement4;  \n" +
				"	EXECUTE query4;  \n" +
				"	DEALLOCATE PREPARE query4;  \n" +
				"  \n" +
				"	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
				"    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
				"CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
				"	IN pPackagingID INT,  \n" +
				"	IN pBinID INT,  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pUIDId INT,  \n" +
				"    IN pType VARCHAR(50)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_PackingSlipId INT;  \n" +
				"    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
				"    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
				"    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
				"  \n" +
				"    IF(pType = 'UC') THEN  \n" +
				"		SELECT			vucp.packingSlipID,			vucp.PartId,	vucp.packingSlipDetID,  \n" +
				"						vucp.packingSlipNumber,  	vucp.packingSlipSerialNumber,  \n" +
				"                        c.umidSPQ AS partPackagingMinQty,  \n" +
				"						vucp.BinID,  \n" +
				"                        fun_getBinNameByID(vucp.BinID) AS binName,  \n" +
				"						vucp.packagingID AS packaging,  \n" +
				"                        fun_getPackagingNameByID(vucp.packagingID) AS packagingType,  \n" +
				"						vucp.InQty AS receivedQty,					vucp.UMIDCreatedQty,  \n" +
				"                        vucp.returnQty,  			vucp.BalanceQty,  \n" +
				"						vucp.receivedStatus,    	ps.packingSlipModeStatus,  \n" +
				"                        IF(vucp.receivedStatus = 'P' OR vucp.receivedStatus = 'R' OR ps.packingSlipModeStatus = 'D',TRUE,FALSE) AS isDisable,  \n" +
				"                        ps.isCustConsigned,			ps.CustomerID,  \n" +
				"                        psd.isLineCustConsigned, 	psd.LineCustomerID  \n" +
				"				FROM 		vu_umid_creation_pending vucp  \n" +
				"				INNER JOIN 	component c on c.id = vucp.partId AND c.isdeleted = 0  \n" +
				"				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
				"				JOIN	packing_slip_material_receive_det psd on psd.id = vucp.packingSlipDetID AND psd.isdeleted = 0  \n" +
				"				WHERE 		vucp.BalanceQty > 0 AND vucp.BinID = pBinID AND vucp.partId = pPartId GROUP BY vucp.packingSlipDetID;  \n" +
				"    ELSE  \n" +
				"		SELECT  \n" +
				"				 p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus  \n" +
				"			INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus  \n" +
				"			FROM  \n" +
				"				component_sid_stock c  \n" +
				"				JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
				"				JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
				"				JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
				"				AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
				"  \n" +
				"		SELECT  \n" +
				"			packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
				"			fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
				"			fun_getBinNameByID(BinID) binName,  \n" +
				"			fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
				"			fun_getPackagingNameByID(packagingID) packaging,  \n" +
				"			fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
				"		FROM  \n" +
				"			vu_umid_creation_pending vu  \n" +
				"		WHERE  \n" +
				"			EXISTS(SELECT  \n" +
				"				1  \n" +
				"				FROM  \n" +
				"				component_sid_stock t WHERE  \n" +
				"					t.fromBin = vu.BinID  \n" +
				"					AND t.refcompid = vu.PartId  \n" +
				"					AND t.packaging = vu.packagingID  \n" +
				"					AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
				"  \n" +
				"		SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
				"    END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDListForCustomerPackingSlip`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pExpiredDay INT,  \n" +
				"	IN pPackingSlipDetId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"    DECLARE vUMIDWhereClause VARCHAR(1000);  \n" +
				"	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
				"    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
				"	DECLARE vExpireDaysLeftBeforeShipment INT ;  \n" +
				"  \n" +
				"	select `values` into vExpireDaysLeftBeforeShipment  \n" +
				"	from systemconfigrations  \n" +
				"	where `key` = 'ExpireDaysLeftBeforeShipment'  \n" +
				"	and isDeleted =0 ;  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"  \n" +
				"	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';  \n" +
				"	# Get AVL part list of CPN part  \n" +
				"    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart  \n" +
				"	FROM  component_cust_alias_rev_pn  \n" +
				"    WHERE refCPNPartID = pPartId  \n" +
				"    AND isDeleted = 0;  \n" +
				"	#Get Packaging Alias part list  \n" +
				"	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart  \n" +
				"	FROM component_packagingalias   a  \n" +
				"	WHERE a.aliasgroupID IN  \n" +
				"	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)  \n" +
				"	AND a.componentID <> pPartId  \n" +
				"	AND a.isDeleted = 0;  \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
				"		SET pWhereClause = ' 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	/*IF(pExpireMaterial = 1) THEN  \n" +
				"		IF(pExpiredDay = 0) THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');  \n" +
				"		END IF;  \n" +
				"	END IF;	                */  \n" +
				"  \n" +
				"#select    pPartId;  \n" +
				"	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"#select    vPackagingAliasPart;  \n" +
				"    IF vPackagingAliasPart IS NOT NULL THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');  \n" +
				"    END IF;  \n" +
				"#select    vCplAvlPart;  \n" +
				"    IF vCplAvlPart IS NOT NULL THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');  \n" +
				"    END IF;  \n" +
				"#select     vUMIDWhereClause;  \n" +
				"    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');  \n" +
				"    END IF;  \n" +
				"    IF pPackingSlipDetId IS NOT NULL THEN  \n" +
				"		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );  \n" +
				"        IF vPackagingAliasPart IS NOT NULL THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');  \n" +
				"		END IF;  \n" +
				"		IF vCplAvlPart IS NOT NULL THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');  \n" +
				"		END IF;  \n" +
				"		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');  \n" +
				"	END IF;  \n" +
				"    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
				"	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
				"		SELECT 	k.refUIDId  \n" +
				"		FROM 	kit_allocation k  \n" +
				"		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
				"		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
				"		AND	k.status = 'A';  \n" +
				"		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');  \n" +
				"	END IF;                      */  \n" +
				"  \n" +
				"	SET @vFromSQLQuery = CONCAT(\"  \n" +
				"					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom,  \n" +
				"							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode,  \n" +
				"							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode,  \n" +
				"							packaginggroupID,	mfg,				packageQty,  \n" +
				"							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,  \n" +
				"							location,		warehouse,			department, 		        customerID,			receiveMaterialType,  \n" +
				"							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType,  \n" +
				"							isReservedStock,	customer,			pkgUnit,   		        orgPkgUnit,  \n" +
				"							cpn,				mfgAvailable, 		        customerConsign,  \n" +
				"							refCPNMFGPNID, 		        mfgPNDescription,		nickName,  \n" +
				"							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName,  \n" +
				"							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,  \n" +
				"							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse,  \n" +
				"							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment,  \n" +
				"							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt,  \n" +
				"							createdBy,		createdByName,			isinStk,			packingSlipId,  \n" +
				"							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,  \n" +
				"							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,  \n" +
				"							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,  \n" +
				"							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,  \n" +
				"							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,  \n" +
				"									               externalPartPackage,		partPackage,			createdUserCode,  \n" +
				"							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,  \n" +
				"							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,  \n" +
				"							detailDescription ,reservedForCustomer,isEachUOM ,\",vExpireDaysLeftBeforeShipment,\" as expireDaysLeftBeforeShipmentFromKey,  \n" +
				"                            (if (expiryDate <= date_add(current_Date(),interval \",vExpireDaysLeftBeforeShipment,\" day) , 1 ,0)) isNearByExpiry  \n" +
				"		FROM 		(  \n" +
				"					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,  \n" +
				"							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,  \n" +
				"							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,  \n" +
				"							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,  \n" +
				"							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,		c.packageQty,  \n" +
				"							css.prefix umidPrefix,  \n" +
				"                            c.RoHSStatusID,  \n" +
				"							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,  \n" +
				"							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,  \n" +
				"							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,  \n" +
				"							fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
				"                            fun_getWarehouseIDByBinID(css.binID) warehouseID,  \n" +
				"                            fun_getDepartmentNameByBinID(css.binID) department,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN (css.cpn = 0) THEN 'No'  \n" +
				"									WHEN (css.cpn = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS cpn,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'  \n" +
				"									WHEN (css.mfgAvailabel = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS mfgAvailable,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.customerConsign = 0) THEN 'No'  \n" +
				"									WHEN (css.customerConsign = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS customerConsign,  \n" +
				"							css.refCPNMFGPNID,  \n" +
				"							c.mfgPNDescription,			css.receiveMaterialType,  \n" +
				"                            css.spq,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN  css.receiveMaterialType = 'PP' THEN  \n" +
				"										'Purchased Part'  \n" +
				"									WHEN  css.receiveMaterialType = 'CP' THEN  \n" +
				"										'Customer Consigned Part'  \n" +
				"									ELSE  \n" +
				"										NULL  \n" +
				"								END  \n" +
				"  \n" +
				"							) displayReceiveMaterialType,  \n" +
				"                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,  \n" +
				"							css.stockInventoryType,  		css.isReservedStock,  \n" +
				"							css.pcbPerArray,				css.nickName,					css.packaging,  \n" +
				"							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId,  \n" +
				"							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,  \n" +
				"							css.expiryDate,  \n" +
				"                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,  \n" +
				"							css.orgQty,					css.specialNote,				css.fromBin,  \n" +
				"							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,  \n" +
				"							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,  \n" +
				"							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,  \n" +
				"							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,  \n" +
				"							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,  \n" +
				"							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,  \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
				"							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,  \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"							css.createdAt createdAtFilter,  \n" +
				"							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,  \n" +
				"							css.isinStk,  \n" +
				"							fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
				"		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN  css.stockInventoryType in ('NI','SI') THEN  \n" +
				"										CONCAT('(', a.mfgCode, ') ', a.mfgName)  \n" +
				"									ELSE  \n" +
				"										NULL  \n" +
				"								END  \n" +
				"							) packingSupplierName,  \n" +
				"							a.packingSlipId,  \n" +
				"							 fun_getDepartmentIDByBinID(css.binID) departmentID,  \n" +
				"							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'  \n" +
				"									ELSE NULL  \n" +
				"								END  \n" +
				"							) AS expiredStatus,  \n" +
				"							refRestrictUMIDId, 				  	isUMIDRestrict,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'  \n" +
				"									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS UMIDRestricted,  \n" +
				"							c.restrictUsePermanently,						c.restrictUSEwithpermission,  \n" +
				"							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,  \n" +
				"							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
				"							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,  \n" +
				"							c.partPackage externalPartPackage,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackage,  \n" +
				"							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,  \n" +
				"							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
				"							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,  \n" +
				"							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,  \n" +
				"							c.detailDescription,  \n" +
				"                            (case when css.uom = -1 then true else false end) isEachUOM  \n" +
				"					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)  \n" +
				"					INNER JOIN 	component c on css.refcompid = c.id  \n" +
				"					LEFT JOIN 	(  \n" +
				"								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId  \n" +
				"								FROM 		component_sid_stock_packing_detail cspd  \n" +
				"								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
				"								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
				"								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
				"								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id  \n" +
				"							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)  \n" +
				"					WHERE 	(css.isdeleted is null or css.isdeleted = 0)\",  \n" +
				"								vUMIDWhereClause,\") As tempUMID  \n" +
				"				WHERE \", pWhereClause  \n" +
				"			);  \n" +
				"  \n" +
				"-- select @vFromSQLQuery;  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);  \n" +
				"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
				"CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
				"	pPageIndex INT,  \n" +
				"	pRecordPerPage INT,  \n" +
				"	pBinID INT,  \n" +
				"	pGlobalSearchUIDString VARCHAR(1000),  \n" +
				"	pSearchUIDString VARCHAR(1000),  \n" +
				"	pSearchString VARCHAR(100),  \n" +
				"	pClusterWHID INT,  \n" +
				"	pKitSalesOrderDetID INT,  \n" +
				"	pKitAssyID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_Where VARCHAR(10000);  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"  \n" +
				"	SET v_Where = \"\";  \n" +
				"  \n" +
				"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
				"				SELECT 	id  \n" +
				"				FROM 	component_sid_stock  \n" +
				"				WHERE 	deletedAt IS NULL  \n" +
				"						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
				"			)  \n" +
				"		)\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
				"			SELECT 	id  \n" +
				"			FROM 	component_sid_stock  \n" +
				"			WHERE 	deletedAt IS NULL  \n" +
				"					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
				"		)\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
				"			SELECT 	id  \n" +
				"			FROM 	component_sid_stock  \n" +
				"			WHERE 	deletedAt IS NULL  \n" +
				"					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
				"		)\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pBinID IS NOT NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pClusterWHID IS NOT NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND IFNULL(css.isdeleted,0) = 0)\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pSearchString IS NOT NULL) THEN  \n" +
				"		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
				"	SET @SQLStatement1 = CONCAT(\"  \n" +
				"				SELECT 		css.id,  \n" +
				"						css.scanlabel,  \n" +
				"						css.pkgQty,  \n" +
				"						css.uid,  \n" +
				"						c.PIDCode,  \n" +
				"						c.mfgcodeID,  \n" +
				"						c.mfgPN,  \n" +
				"						mfg.mfgCode,  \n" +
				"						mfg.mfgName,  \n" +
				"						ro.rohsIcon,  \n" +
				"						ro.name AS rohsName,  \n" +
				"						css.nickName,  \n" +
				"						css.binID,  \n" +
				"						cast(NULL as char(50)) binName,  \n" +
				"						0 warehouseID,  \n" +
				"						cast(NULL as char(50)) warehouseName,  \n" +
				"						0 parentWHID,  \n" +
				"						cast(NULL as char(50)) deptName,  \n" +
				"						css.uom,  \n" +
				"						cast('' as char(100)) uomName,  \n" +
				"						false isAllocatedToKit,  \n" +
				"						css.receiveMaterialType,  \n" +
				"						css.refcompid,  \n" +
				"						css.pkgUnit,  \n" +
				"						false isBelongsToSameKit,  \n" +
				"						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
				"						0 refSalesOrderDetID, 	0 assyID,  \n" +
				"						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
				"						cast(NULL as char(50)) warehouseType,  \n" +
				"						c.isCustom,  \n" +
				"						css.updatedAt  \n" +
				"				FROM 		component_sid_stock css  \n" +
				"				LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0  \n" +
				"				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0  \n" +
				"				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0  \n" +
				"				WHERE		IFNULL(css.isdeleted,0) = 0  \n" +
				"							AND css.isinStk = 1  \n" +
				"			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
				"		);  \n" +
				"  \n" +
				"	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
				"	PREPARE query1 FROM @SQLStatementCount;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
				"	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
				"	PREPARE mainQuery FROM @SQLStatement1;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"  \n" +
				"	-- SET Bin name  \n" +
				"	UPDATE 	Results r, binmst b  \n" +
				"	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
				"	WHERE	r.binID = b.id;  \n" +
				"  \n" +
				"	-- SET warehouse name  \n" +
				"	UPDATE 	Results r, warehousemst w  \n" +
				"	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
				"	WHERE	r.warehouseID = w.id;  \n" +
				"  \n" +
				"	-- SET department name  \n" +
				"	UPDATE 	Results r, warehousemst w  \n" +
				"	SET   	r.deptName = w.Name  \n" +
				"	WHERE	r.parentWHID = w.id;  \n" +
				"  \n" +
				"	-- Set UOM  \n" +
				"	UPDATE 	Results r, uoms u  \n" +
				"	SET   	r.uomName = u.unitName  \n" +
				"	WHERE	r.uom = u.id;  \n" +
				"  \n" +
				"	-- Set UMID is allocated to kit  \n" +
				"	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
				"		UPDATE 	Results r, kit_allocation k  \n" +
				"		SET   	r.isAllocatedToKit = TRUE,  \n" +
				"			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
				"			r.assyID = k.assyID,  \n" +
				"			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
				"		WHERE	r.id = k.refUIDId  \n" +
				"		AND 	k.status = 'A'  \n" +
				"		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
				"		AND 	k.assyID = pKitAssyID;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \"); -- order by isBelongsToSameKit desc  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
				"CREATE PROCEDURE `Sproc_GetStockStatus`(  \n" +
				"	pComponentID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalCustomerConsignStock DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);  \n" +
				"	DECLARE v_CustomerConsignStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalAvailableInHouseStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalAvailableInHouseStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedCustomerConsignStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AvailableStock DECIMAL(18,8);  \n" +
				"	DECLARE v_PackaginggroupID INT;  \n" +
				"	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);  \n" +
				"	DECLARE v_PackagingAliasStock DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalInHouseStock DECIMAL(18,8);  \n" +
				"	DECLARE v_SafetyStock DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedLogicalStock DECIMAL(18,8);  \n" +
				"	DECLARE v_Shortage DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalUnitInUmid DECIMAL(18,8);  \n" +
				"	DECLARE v_MainPartNonUmidStock DECIMAL(18,8);  \n" +
				"	DECLARE v_MainPartInitialStock DECIMAL(18,8);  \n" +
				"	DECLARE v_PackagingPartNonUMIDStock DECIMAL(18,8);  \n" +
				"	DECLARE v_PackagingPartNonUMIDStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalPackagingStockInSystemRecordInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalPackagingReservedStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedReservedPackagingStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_AllocatedPackagingStockToKitStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_ReservedPackagingPhysicalStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_TotalInHouseStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_AvailableStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_PackagingAliasStockInUnit DECIMAL(18,8);  \n" +
				"	DECLARE v_IsCPN TINYINT;  \n" +
				"	DECLARE v_PartIds VARCHAR(10000);  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS  \n" +
				"	SELECT 	id,  \n" +
				"		receiveMaterialType,  \n" +
				"		isReservedStock,  \n" +
				"		customerID,  \n" +
				"		fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
				"		pkgQty,  \n" +
				"		pkgUnit,  \n" +
				"		customerConsign  \n" +
				"	FROM 	component_sid_stock  \n" +
				"	WHERE 	refcompid = pComponentID  \n" +
				"			AND isDeleted = 0;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalStockInSystemRecord FROM tempStockRawDet;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalReservedStock FROM tempStockRawDet WHERE isReservedStock = 1  ;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalCustomerConsignStock FROM tempStockRawDet WHERE customerConsign = 1;  \n" +
				"  \n" +
				"	SELECT 	IFNULL(SUM(allocatedQty), 0) INTO v_AllocatedToKitStock  \n" +
				"	FROM 	kit_allocation  \n" +
				"	WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)  \n" +
				"			AND `status` = 'A';  \n" +
				"  \n" +
				"	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedReservedStock  \n" +
				"	FROM 	tempStockRawDet  \n" +
				"	WHERE 	isReservedStock = 1  \n" +
				"			AND id IN (  \n" +
				"				SELECT 	refUIDId  \n" +
				"				FROM 	kit_allocation  \n" +
				"				WHERE 	`status` = 'A'  \n" +
				"			);  \n" +
				"  \n" +
				"	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedCustomerConsignStock  \n" +
				"	FROM 	tempStockRawDet  \n" +
				"	WHERE 	customerConsign = 1  \n" +
				"			AND id IN (  \n" +
				"				SELECT 	refUIDId  \n" +
				"				FROM 	kit_allocation  \n" +
				"				WHERE 	`status` = 'A'  \n" +
				"			);  \n" +
				"  \n" +
				"	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;  \n" +
				"	SET v_CustomerConsignStock = v_TotalCustomerConsignStock - v_AllocatedCustomerConsignStock;  \n" +
				"	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_ReservedPhysicalStock - v_CustomerConsignStock - v_AllocatedToKitStock);  \n" +
				"  \n" +
				"    -- Start Calculate Cumulative Stock  \n" +
				"    # Calculate UMID Pending tock  \n" +
				"    SELECT 	SUM(IFNULL(nonUMIDStock, 0)) INTO v_MainPartNonUmidStock  \n" +
				"	FROM 	(  \n" +
				"			SELECT 	IFNULL(SUM(vu.BalanceQty), 0) nonUMIDStock  \n" +
				"			FROM 	vu_umid_creation_pending vu  \n" +
				"			WHERE 	vu.PartId = pComponentID  \n" +
				"					AND BalanceQty > 0  \n" +
				"	) AS a;  \n" +
				"  \n" +
				"     # Calculate UMID Initial tock  \n" +
				"	SELECT 	SUM(IFNULL(initialUMIDStock, 0)) INTO v_MainPartInitialStock  \n" +
				"	FROM 	(  \n" +
				"			SELECT 	IFNULL(SUM(availableQty), 0) initialUMIDStock  \n" +
				"			FROM 	vu_customer_packing_slip_qty  \n" +
				"			WHERE 	partID = pComponentID  \n" +
				"	) AS a;  \n" +
				"  \n" +
				"	SET v_TotalAvailableInHouseStock = IFNULL(v_AvailableStock, 0) + IFNULL(v_CustomerConsignStock, 0) + IFNULL(v_MainPartNonUmidStock, 0)+ IFNULL(v_MainPartInitialStock, 0) + IFNULL(v_ReservedPhysicalStock, 0);  \n" +
				"	SELECT packaginggroupID INTO v_PackaginggroupID FROM component WHERE id = pComponentID;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS  \n" +
				"	SELECT 	c.id,  \n" +
				"		c.refcompid,  \n" +
				"		c.receiveMaterialType,  \n" +
				"		c.pkgQty,  \n" +
				"		c.pkgUnit  \n" +
				"	FROM 	component_sid_stock c, component_packagingalias cp  \n" +
				"	WHERE 	c.refcompid = cp.componentID  \n" +
				"			AND IFNULL(c.isDeleted,0) = 0  \n" +
				"			AND cp.componentID != pComponentID  \n" +
				"			AND cp.aliasgroupID = v_PackaginggroupID  \n" +
				"			AND IFNULL(cp.isDeleted,0) = 0;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;  \n" +
				"	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecordInUnit FROM tempPackagingAliasStockRawDet;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(allocatedQty), 0), IFNULL(SUM(allocatedUnit), 0)  \n" +
				"	INTO v_AllocatedPackagingStockToKitStock, v_AllocatedPackagingStockToKitStockInUnit  \n" +
				"	FROM 	kit_allocation  \n" +
				"	WHERE 	refUIDId IN (  \n" +
				"			SELECT 	id  \n" +
				"			FROM 	tempPackagingAliasStockRawDet  \n" +
				"		)  \n" +
				"		AND `status` = 'A';  \n" +
				"  \n" +
				"	SELECT 		IFNULL(SUM(vu.BalanceQty), 0) AS packagingNonUMIDStock, SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS packagingNonUMIDStockInUnit  \n" +
				"	INTO	 	v_PackagingPartNonUMIDStock, v_PackagingPartNonUMIDStockInUnit  \n" +
				"	FROM 		vu_umid_creation_pending vu  \n" +
				"	INNER JOIN 	component c ON c.id = vu.PartId  \n" +
				"	WHERE 		vu.PartId IN (  \n" +
				"					SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"						SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pComponentID  \n" +
				"					) AND isDeleted = 0 AND componentID != pComponentID  \n" +
				"				)  \n" +
				"				AND BalanceQty > 0;  \n" +
				"  \n" +
				"	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_AllocatedPackagingStockToKitStock);  \n" +
				"	SET v_PackagingAliasStockInUnit = (v_TotalPackagingStockInSystemRecordInUnit - v_AllocatedPackagingStockToKitStockInUnit);  \n" +
				"	-- End Calculate Cumulative Stock  \n" +
				"  \n" +
				"	SELECT IFNULL(fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock),0) INTO v_TotalAvailableInHouseStockInUnit;  \n" +
				"  \n" +
				"	SET v_TotalInHouseStock = v_TotalAvailableInHouseStock + v_PackagingAliasStock;  \n" +
				"	SET v_TotalInHouseStockInUnit = v_TotalAvailableInHouseStockInUnit + v_PackagingAliasStockInUnit;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(saftyStock),0) INTO v_SafetyStock FROM component WHERE id = pComponentID;  \n" +
				"  \n" +
				"	SELECT IFNULL(SUM(r.count), 0) INTO v_ReservedLogicalStock FROM reserve_stock_request r WHERE r.partid = pComponentID AND r.isDeleted = 0;  \n" +
				"  \n" +
				"	SET v_Shortage = (v_TotalAvailableInHouseStock) - (v_SafetyStock + v_ReservedLogicalStock);  \n" +
				"  \n" +
				"	SELECT 	v_AvailableStock availableStock, 			v_CustomerConsignStock customerConsignStock, 			v_MainPartNonUmidStock mainPartNonUmidStock,  \n" +
				"		v_MainPartInitialStock mainPartInitialStock,	v_ReservedPhysicalStock reservedPhysicalStock,			v_TotalAvailableInHouseStock totalAvailableInHouseStock,  \n" +
				"        v_ReservedLogicalStock reservedLogicalStock,  	v_AllocatedToKitStock allocatedStock,					v_PackagingAliasStock packagingAliasStock,  \n" +
				"        v_PackagingPartNonUMIDStock packagingPartNonUMIDStock,  												v_TotalInHouseStock totalInHouseStock,  \n" +
				"        v_SafetyStock safetyStock,						v_Shortage shortage;  \n" +
				"  \n" +
				"	SELECT 	fun_getStockInDefaultUnit(pComponentID,v_AvailableStock) availableStock,				fun_getStockInDefaultUnit(pComponentID,v_CustomerConsignStock) customerConsignStock,  \n" +
				"		fun_getStockInDefaultUnit(pComponentID,v_MainPartNonUmidStock) mainPartNonUmidStock,		fun_getStockInDefaultUnit(pComponentID,v_MainPartInitialStock) mainPartInitialStock,  \n" +
				"        fun_getStockInDefaultUnit(pComponentID,v_ReservedPhysicalStock) reservedPhysicalStock,  	fun_getStockInDefaultUnit(pComponentID,v_TotalAvailableInHouseStock) totalAvailableInHouseStock,  \n" +
				"        fun_getStockInDefaultUnit(pComponentID,v_ReservedLogicalStock) reservedLogicalStock,  		fun_getStockInDefaultUnit(pComponentID,v_AllocatedToKitStock) allocatedStock,  \n" +
				"        v_PackagingAliasStockInUnit packagingAliasStock,  											v_PackagingPartNonUMIDStockInUnit packagingPartNonUMIDStock,  \n" +
				"		v_TotalInHouseStockInUnit totalInHouseStock,                  								fun_getStockInDefaultUnit(pComponentID,v_SafetyStock) safetyStock,  \n" +
				"		fun_getStockInDefaultUnit(pComponentID,v_Shortage) shortage;  \n" +
				"  \n" +
				"	SELECT 	abbreviation, measurementTypeID AS uomClassID  \n" +
				"	FROM 	uoms  \n" +
				"	WHERE 	measurementTypeID = (  \n" +
				"			SELECT 	measurementTypeID  \n" +
				"			FROM 	uoms  \n" +
				"			WHERE 	id = (  \n" +
				"				SELECT 	uom  \n" +
				"				FROM 	component  \n" +
				"				WHERE 	id = pComponentID  \n" +
				"						AND isDeleted = 0  \n" +
				"				)  \n" +
				"				AND isDeleted = 0  \n" +
				"			)  \n" +
				"			AND defaultUOM = 1  \n" +
				"			AND isDeleted = 0;  \n" +
				"  \n" +
				"	SELECT 		customerID, 				fun_getMfgCodeAndNameByID(customerID) customerFullName,  \n" +
				"				SUM(pkgQty) totalQty,     	fun_getStockInDefaultUnit(pComponentID, SUM(pkgQty)) totalUnit  \n" +
				"	FROM 		tempStockRawDet  \n" +
				"	WHERE 		customerConsign = 1  \n" +
				"	GROUP BY 	customerID;  \n" +
				"  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetComponentKitScrappedQty`;  \n" +
				"CREATE PROCEDURE `Sproc_GetComponentKitScrappedQty`(  \n" +
				"	IN pPartID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	SELECT a.*,  \n" +
				"			((a.scrappedUnit/a.orgPkgUnit) * 100) perScrapQty  \n" +
				"	FROM  \n" +
				"		(SELECT  \n" +
				"				vu.id as partId,  \n" +
				"				vu.poNumber,  \n" +
				"				vu.salesOrderNumber,  \n" +
				"				vu.kitNumber,  \n" +
				"				vu.refSalesOrderId,  \n" +
				"				vu.AssyID,  \n" +
				"				vu.assyPN,  \n" +
				"				vu.assypartid,  \n" +
				"				vu.umidid,  \n" +
				"               vu.orgPkgUnit,  \n" +
				"				SUM(vu.scrappedunit) AS scrappedUnit  \n" +
				"				FROM vu_material_consumption_scrapped_det vu  \n" +
				"		WHERE 	vu.scrappedunit > 0 AND (CASE WHEN pPartID IS NOT NULL THEN vu.id = pPartID ELSE 1 = 1 END)  \n" +
				"		GROUP BY vu.refSalesOrderId  \n" +
				"	) AS a;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetComponentCPNAliasSearch`;  \n" +
				"CREATE PROCEDURE `Sproc_GetComponentCPNAliasSearch`(  \n" +
				"	IN pGoodPart VARCHAR(100),  \n" +
				"	IN pSearch VARCHAR(100),  \n" +
				"	IN pMfgCodeId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	SELECT * FROM (  \n" +
				"				SELECT 		`com`.`id`,  \n" +
				"						CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
				"						`com`.`mfgPN` orgMfgPN,  \n" +
				"						`com`.`PIDCode`,  \n" +
				"						`com`.`isGoodPart`,  \n" +
				"                        `com`.`mfgPNDescription`,  \n" +
				"						`mfgCodemst`.`id` AS `mfgcodeID`,  \n" +
				"						`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
				"						`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
				"                        `mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
				"						`com`.`restrictUsePermanently`,  \n" +
				"						`com`.`restrictUSEwithpermission`,  \n" +
				"						`com`.`restrictPackagingUsePermanently`,  \n" +
				"						`com`.`restrictPackagingUseWithpermission`  \n" +
				"				FROM 		`component` AS `com`  \n" +
				"				INNER JOIN 	`mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND `mfgCodemst`.`deletedAt` IS NULL  \n" +
				"				WHERE 		`com`.`deletedAt` IS NULL  \n" +
				"							AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`)  \n" +
				"							AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
				"							AND `com`.`isCPN` = TRUE  \n" +
				"		) AS a  \n" +
				"	WHERE 	(  \n" +
				"			(pSearch IS NULL AND 1=1)  \n" +
				"			OR (  \n" +
				"				pSearch IS NOT NULL AND (  \n" +
				"					mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
				"						OR EXISTS (  \n" +
				"								SELECT 	1  \n" +
				"								FROM 	component_otherpn opn  \n" +
				"								WHERE 	opn.refcomponentid = `a` .`id`  \n" +
				"										AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
				"							)  \n" +
				"				)  \n" +
				"			)  \n" +
				"	)  \n" +
				"	ORDER BY mfgPN;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(  \n" +
				"	IN pumID INT,  \n" +
				"    In pFromdate date,  \n" +
				"    In pTodate date,  \n" +
				"    IN pRequiredCount tinyint(1)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"  \n" +
				"     IF(pRequiredCount)  \n" +
				"	THEN  \n" +
				"		SELECT  \n" +
				"			count(1) totalCount  \n" +
				"		FROM component_sid_stock css  \n" +
				"			INNER JOIN 	component c ON css.refcompid = c.id  \n" +
				"			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
				"			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);  \n" +
				"	ELSE  \n" +
				"		SELECT css.id,  \n" +
				"				css.uid,  \n" +
				"                parentUIDId,  \n" +
				"                parentUID,  \n" +
				"                fromUIDId,  \n" +
				"                fromUID,  \n" +
				"				css.receiveMaterialType,  \n" +
				"				css.refcompid AS partID,  \n" +
				"				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,  \n" +
				"				m.mfgType mfgType,  \n" +
				"				c.mfgPN,  \n" +
				"				c.PIDCode,  \n" +
				"				css.pkgQty,  \n" +
				"				css.pkgUnit,  \n" +
				"                css.orgQty,  \n" +
				"                css.orgPkgUnit,  \n" +
				"				fun_getUnitNameByID(css.uom) uomName,  \n" +
				"				css.dateCode,  \n" +
				"				css.lotCode,  \n" +
				"				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,  \n" +
				"				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,  \n" +
				"				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,  \n" +
				"				c.mfgPNDescription,  \n" +
				"				IF(css.customerConsign = 0 , 'No', 'Yes') AS customerConsign,  \n" +
				"                IF(css.isReservedStock = 0 , 'No', 'Yes') AS reservedStock,  \n" +
				"				fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
				"                pd.refPackingSlipMaterialRecID AS packingSlipID,  \n" +
				"				FUN_GETPACKINGSLIPNUMBERBYID(pd.refPackingSlipMaterialRecID) AS packingSlipNumber,  \n" +
				"                ps.packingSlipNumber AS packingSlipNumber,  \n" +
				"				css.binID,  \n" +
				"				fun_getBinNameByID(css.binID) location,  \n" +
				"				fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
				"				fun_getDepartmentNameByBinID(css.binID) department,  \n" +
				"				css.expiryDate,  \n" +
				"				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
				"				css.isDeleted  \n" +
				"		FROM component_sid_stock css  \n" +
				"		INNER JOIN component c ON css.refcompid = c.id  \n" +
				"		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
				"        LEFT JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = css.id AND cp.isDeleted = 0  \n" +
				"		LEFT JOIN packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID AND pd.isDeleted = 0  \n" +
				"		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
				"			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
				"						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
				"							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
				"						ELSE 1 = 1 END) GROUP BY css.id;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 26-10-2021 ************************** */
				 "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
				 "VALUES (5433,'2.00','V1','User Story 37433: UMID Creation screen changes change related to customer consigned / CPN parts UMID creation - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
				 );
				break;
            case 5433:
                allDbChangesArray.push(
                /* **************************** New Script -> 26-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(1000);  \n" +
                "    DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" and (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0	where sodet.isDeleted = 0  \n" +
                "															and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%')	))\");  \n" +
                "		SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%' )\");  \n" +
                "                                        /*OR soDetail.refSalesOrderID in (select id from salesordermst where isDeleted = 0  \n" +
                "																		and (salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "																			or poNumber like '%\",pSearchText,\"%')))\");    */  \n" +
                "    ELSE  \n" +
                "        SET detailWhereClause = '1=1';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by soDate desc, soId desc \", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workorderDet.woNumberList) woComment  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select salesOrderDetailID,group_concat(wo.woNumber) woNumberList from workorder_salesorder_details woSo  join workorder wo  \n" +
                "                on woSo.woID = wo.woID and woSo.isDeleted = 0 where wo.isDeleted = 0 group by woSo.salesOrderDetailID) as workorderDet on workorderDet.salesOrderDetailID =  sod.id  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "				/*PIDCode, mfgPN, rohsName, rohsIcon, */  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "				cpsIndex  \n" +
                "                 -- woNumberList  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex  \n" +
                "               -- workorderDet.woNumberList  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                where  \" , detailWhereClause);  \n" +
                "  -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-10-2021  *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5434,'2.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5434:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  	isPurchaseWithDNP AS isPurchase,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailableQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailablePins  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  		a.isPurchaseWithDNP,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  		isPurchaseWithDNP,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  	isPurchase,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	#SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5435,'2.00','V1','Bug 37955: Showing incorrect Shortage Pin count on Show Build Feasibility Shortage Line pop-up - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5435:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `specialNote` `specialNote` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `purchasingComment` `purchasingComment` VARCHAR(2000) NULL DEFAULT NULL;  \n" +

                "ALTER TABLE `component_history`  \n" +
                "ADD COLUMN `valueDataType` VARCHAR(30) NULL;  \n" +
                "  \n" +
                "ALTER TABLE `component_history`  \n" +
                "CHANGE COLUMN `Oldval` `Oldval` VARCHAR(2000) NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `Newval` `Newval` VARCHAR(2000) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5436,'2.00','V1',' Bug 29337 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break; 
            case 5436:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
                "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
                "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','specialNote'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			OLD.updatedAtApi,	NEW.updatedAtApi,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','updatedAtApi'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','supplier'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveInternalVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','exteranalAPICallStatus'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MISC Comment',  \n" +
                "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','purchasingComment'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "     INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					valueDataType,				Tablename,  \n" +
                "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId )  \n" +
                "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
                "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
                "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentHistory`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentHistory = CONCAT(\"  \n" +
                "    select a.*,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "                fun_getRoleByID(a.createByRoleId) updatedbyRoleValue  \n" +
                "		from  \n" +
                "        (SELECT h.id,  			h.Colname,  			h.Oldval,  \n" +
                "			h.Newval,  			fun_getUserNameByID(h.updatedBy) ModifiedUser,  \n" +
                "			h.updatedAt,		h.valueDataType,				h.createByRoleId  \n" +
                "	FROM component_history h  \n" +
                "	WHERE h.refComponentID = \",pPartID,  \n" +
                "    \" union all  \n" +
                "					SELECT h.id,  						h.Colname,  						h.Oldval,  \n" +
                "						h.Newval,  						fun_getUserNameByID(h.createdBy) AS ModifiedUser,  \n" +
                "						h.updatedAt,                          h.valueDataType,				h.createByRoleId  \n" +
                "					FROM common_longtext_history h  \n" +
                "					WHERE h.tablename = 'component'  \n" +
                "					and h.refTransId = \",pPartID,\" ) as a\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentHistory,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*SELECT co.id,  \n" +
                "			fun_getUserNameByID(co.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(co.createByRoleId) createdbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,vTimeZone, vDateTimeDisplayFormat) createdAtValue,  \n" +
                "            m.mfgType  \n" +
                "	FROM component co  \n" +
                "    join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	WHERE co.id = pPartID;  */  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5437,'2.00','V1',' Bug 29337 - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break; 
            case 5437:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-10-2021 *********************************** */                
                "update systemconfigrations set `values` =  \n" +
                "'{  \n  \\\"UnitPrice\\\": {  \n \\\"Decimal\\\": \\\"5\\\",  \n \\\"Step\\\": \\\"0.00001\\\",  \n \\\"Report\\\": \\\"\''$\''#,0.00000;(\''$\''#,0.00000)\\\"  \n },  \n" +
                "\\\"SixDigitUnit\\\": {  \n \\\"Decimal\\\": \\\"6\\\",  \n \\\"Step\\\": \\\"0.000001\\\",  \n \\\"Report\\\": \\\"\''$\''#,0.000000;(\''$\''#,0.000000)\\\"  \n },  \n" +
                " \n  \\\"Unit\\\": {  \n    \\\"Decimal\\\": \\\"5\\\",  \n \\\"Step\\\": \\\"0.00001\\\",  \n \\\"Report\\\": \\\"#,0;(#,0)\\\"  \n }, \n  \n" +
                " \\\"Amount\\\": {  \n \\\"Decimal\\\": \\\"2\\\",  \n \\\"Step\\\": \\\"0.01\\\",  \n \\\"Report\\\": \\\"\''$\''#,0.00;(\''$\''#,0.00)\\\"  \n  } \n}'  \n" +
                "where `key`  ='CommonNumberFormat';  \n" +
                /* **************************** Add Script Version -> 25-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5438,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5438:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-10-2021  ********************************* */
                "DROP VIEW IF EXISTS `vu_umid_creation_pending`;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`packingSlipID` AS `packingSlipID`,  \n" +
                "        FUN_GETPACKINGSLIPNUMBERBYID(`a`.`packingSlipID`) AS `packingSlipNumber`,  \n" +
                "        `a`.`packingSlipDetID` AS `packingSlipDetID`,  \n" +
                "        `a`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "        `a`.`packagingID` AS `packagingID`,  \n" +
                "        `a`.`BinID` AS `BinID`,  \n" +
                "        `a`.`warehouseID` AS `warehouseID`,  \n" +
                "        `a`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `a`.`partId` AS `PartId`,  \n" +
                "        `a`.`nickname` AS `nickname`,  \n" +
                "        SUM(`a`.`InQty`) AS `InQty`,  \n" +
                "        IFNULL(`a`.`UMIDCreatedQty`, 0) AS `UMIDCreatedQty`,  \n" +
                "        SUM(`a`.`returnQty`) AS `returnQty`,  \n" +
                "        ((SUM(IFNULL(`a`.`InQty`, 0)) - IFNULL(`a`.`UMIDCreatedQty`, 0)) - SUM(IFNULL(`a`.`returnQty`, 0))) AS `BalanceQty`,  \n" +
                "        `a`.`receivedStatus` AS `receivedStatus`,  \n" +
                "        `a`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psd`.`packagingID` AS `packagingID`,  \n" +
                "                `psd`.`binID` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psd`.`partID` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                `psd`.`receivedQty` AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "                `psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "        FROM  \n" +
                "            `packing_slip_material_receive_det` `psd`  \n" +
                "        WHERE  \n" +
                "            (EXISTS( SELECT  \n" +
                "                    1  \n" +
                "                FROM  \n" +
                "                    `packing_slip_material_receive` `p`  \n" +
                "                WHERE  \n" +
                "                    ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)  \n" +
                "                        AND (`p`.`receiptType` = 'P')  \n" +
                "                        AND (`p`.`isDeleted` = 0)))  \n" +
                "                AND (`psd`.`binID` IS NOT NULL)  \n" +
                "                AND (`psd`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psds`.`refPackingSlipId` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psds`.`packagingId` AS `packagingID`,  \n" +
                "                `psds`.`binId` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psds`.`partId` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                `psds`.`qty` AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "                `psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "        FROM  \n" +
                "            ((`packing_slip_material_receive_det_stock` `psds`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`psd`.`id` = `psds`.`refPackingSlipDetId`)))  \n" +
                "        JOIN `warehousemst` `w` ON (((`w`.`ID` = `psd`.`warehouseID`)  \n" +
                "            AND (`psd`.`refPackingSlipMaterialRecID` = `psds`.`refPackingSlipId`)  \n" +
                "            AND (`psd`.`packagingID` = `psds`.`packagingId`)  \n" +
                "            AND (`psd`.`binID` = `psds`.`binId`)  \n" +
                "            AND (`psd`.`partID` = `psds`.`partId`))))  \n" +
                "        WHERE  \n" +
                "            ((`psds`.`type` = 'PU')  \n" +
                "                AND (`psds`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`isDeleted` = 0))) `a`  \n" +
                "    WHERE  \n" +
                "        (`a`.`isNonUMIDStock` = 0)  \n" +
                "    GROUP BY `a`.`packingSlipID` , `a`.`packagingID` , `a`.`BinID` , `a`.`partId` , `a`.`receivedStatus` , `a`.`packingSlipDetID`;  \n" +
                /* **************************** Add Script Version -> 27-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5439,'2.00','V1','Bug 38079: QA Testing Bugs for User Story 37433: UMID Creation screen changes change related to customer consigned/CPN parts UMID creation - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5439:
                allDbChangesArray.push(
                    /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN prfqAssyID INT,  \n" +
                    "	IN puserID INT,  \n" +
                    "	IN pleadTime INT,  \n" +
                    "	IN ppackageing TINYINT,  \n" +
                    "	IN pcustomerID INT  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "	    DECLARE pOffset INT;  \n" +
                    "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "	    SET @SQLString = NULL;  \n" +
                    "	    SET @HavingClause = NULL;  \n" +
                    "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "		ELSE  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                    "			SET pWhereClause = '1=1' ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "		ELSE  \n" +
                    "			SET rowNumWhere = '';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                    "		FROM (  \n" +
                    "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                    "					CONCAT(  \n" +
                    "						'Max((IF(ra.requestQty = ''',  \n" +
                    "							ra.requestQty,  \n" +
                    "						''', (IFNULL(rq.leadTime,0)), null))) AS ''',  \n" +
                    "							ra.requestQty,''''  \n" +
                    "						)  \n" +
                    "						) AS QtyColumn,  \n" +
                    "					NULL GroupColumn  \n" +
                    "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "			WHERE rl.rfqAssyID = prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL  \n" +
                    "		UNION  \n" +
                    "			SELECT 	NULL QtyColumn,  \n" +
                    "				GROUP_CONCAT(DISTINCT  \n" +
                    "					CONCAT(  \n" +
                    "						'Max((IF(ra.requestQty = ''',  \n" +
                    "							ra.requestQty,  \n" +
                    "						''', rq.finalPrice, null))) AS ''',  \n" +
                    "							pg.name,''''  \n" +
                    "						))AS GroupColumn  \n" +
                    "			   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "			   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "			   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                    "			   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                    "			   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "			   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                    "		)a;  \n" +
                    "  \n" +
                    "		SELECT GROUP_CONCAT(DISTINCT  \n" +
                    "				CONCAT(  \n" +
                    "					'((Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', (IFNULL(rq.leadTime,0)), null)))))'  \n" +
                    "					) SEPARATOR ' OR '  \n" +
                    "					)  \n" +
                    "				INTO @HavingClause  \n" +
                    "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                    "  \n" +
                    "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                    "							SELECT 	rl.id, \",  \n" +
                    "							@SQLString,  \n" +
                    "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                    "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                    "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                    "		EXECUTE stmtMain;  \n" +
                    "		DEALLOCATE PREPARE stmtMain;  \n" +
                    "  \n" +
                    "		SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                    "								SELECT  rl.id,  \n" +
                    "									rl.isPurchase,  \n" +
                    "									rl.numOfPosition,  \n" +
                    "									rl.lineID,  \n" +
                    "									rl.rfqLineItemID,  \n" +
                    "									rl.rfqAssyID,  \n" +
                    "									rl.uomID,  \n" +
                    "									rl.consolidatedpartlineID,  \n" +
                    "									fun_getUnitAbbrivationByID(rl.uomID) unitName,  \n" +
                    "									rl.isqpaMismatch,  \n" +
                    "                                    custP.PIDCode as CPNPID,  \n" +
                    "									rl.custPNID,  \n" +
                    "									custp.custAssyPN as cpncustAssyPN,  \n" +
                    "									fun_getRoHSIconByID(custp.RoHSStatusID) as CPNRoHSIcon,  \n" +
                    "									fun_getRoHSNameByID(custp.RoHSStatusID) as CPNRoHSName,  \n" +
                    "									rl.restrictCPNUseInBOMStep,  \n" +
                    "									rl.restrictCPNUsePermanentlyStep,  \n" +
                    "									rl.restrictCPNUseWithPermissionStep,  \n" +
                    "									(SELECT fun_getMountingTypeOfConsolidatePart(rl.id)) AS `name`,  \n" +
                    "									(SELECT fun_getPartTypeOfConsolidatePart(rl.id)) AS `partTypeName`,  \n" +
                    "									rl.qpa,',  \n" +
                    "									(SELECT fun_getCommonConsolidateLineMFGPN_New(ppackageing,prfqAssyID,pcustomerID)),  \n" +
                    "								' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "								JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                    "								JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                    "                                Left Join component custP on custp.id = rl.custPNID  \n" +
                    "								WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',prfqAssyID,'');  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "			PREPARE stmt FROM @SQLStatement;  \n" +
                    "			EXECUTE stmt;  \n" +
                    "			DEALLOCATE PREPARE stmt;  \n" +
                    "  \n" +
                    "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp  co JOIN consolidatedQtytemp coq ON coq.id = co.id  where \", pWhereClause );  \n" +
                    "			PREPARE query1 FROM @SQLStatement1;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "  \n" +
                    "			SET @SQLStatement2 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co  \n" +
                    "										JOIN consolidatedQtytemp coq ON coq.id = co.id  \n" +
                    "											where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "			PREPARE query2 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query2;  \n" +
                    "			DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "			-- To Get Pricing service status data  \n" +
                    "			SELECT  id,  \n" +
                    "				rfqAssyID,  \n" +
                    "				pricingApiName,  \n" +
                    "				`status`,  \n" +
                    "				msg,  \n" +
                    "				errorMsg,  \n" +
                    "				userID,  \n" +
                    "				consolidateID,  \n" +
                    "				isPurchaseApi,  \n" +
                    "				pricingSupplierID  \n" +
                    "			FROM rfq_lineitem_autopricingstatus  \n" +
                    "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                    "  \n" +
                    "			-- To Get rfq turn time price group details  \n" +
                    "			SELECT 	qtyTimeID,  \n" +
                    "				turnTime,  \n" +
                    "				unitOfTime,  \n" +
                    "				rfqAssyQtyID,  \n" +
                    "				requestQty,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				priceGroup  \n" +
                    "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                    "			WHERE rfqAssyID = prfqAssyID;  \n" +
                    "			-- To Get Selected Part details  \n" +
                    "			SELECT 	requestQty,  \n" +
                    "				finalPrice,  \n" +
                    "				unitPrice,  \n" +
                    "				supplier,  \n" +
                    "				`min`,  \n" +
                    "				mult,  \n" +
                    "				selectedMpn,  \n" +
                    "				selectionMode,  \n" +
                    "				qtyID,  \n" +
                    "				currentStock,  \n" +
                    "				leadTime,  \n" +
                    "				supplierStock,  \n" +
                    "				grossStock,  \n" +
                    "				componentid,  \n" +
                    "				selectedPIDCode,  \n" +
                    "				pricingSuppliers,  \n" +
                    "				packaging,  \n" +
                    "				rfqQtySupplierID,  \n" +
                    "				unitEachPrice,  \n" +
                    "				quoteQtyEach,  \n" +
                    "				supplierEachStcok,  \n" +
                    "				ApiNoOfPosition,  \n" +
                    "				qpa,  \n" +
                    "				abbreviation,  \n" +
                    "				quoteQty,  \n" +
                    "				connecterTypeID,  \n" +
                    "				noOfRows,  \n" +
                    "				pricenotselectreason,  \n" +
                    "				isBomUpdate,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				priceGroupName,  \n" +
                    "				consolidatedQty,  \n" +
                    "				authorizeType,  \n" +
                    "				consolidateID  \n" +
                    "			FROM vu_getselectedPartDetail  \n" +
                    "			WHERE rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "			-- To Get total price of consolidated lines  \n" +
                    "			SELECT 	qtyID,  \n" +
                    "				requestQty,  \n" +
                    "				TotalExtendedPrice,  \n" +
                    "				TotalUnitPrice,  \n" +
                    "				TotalAssemblyPrice,  \n" +
                    "				TotalExcessPrice,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				qty,  \n" +
                    "				priceGroupName  \n" +
                    "			FROM vu_getTotalPrice  \n" +
                    "			WHERE rfqAssyid = prfqAssyID;  \n" +
                    "  \n" +
                    "			-- To Get list of all line with custom or non custom  \n" +
                    "			SELECT 	rl.id,  \n" +
                    "				MAX(c.iscustom) AS custom  \n" +
                    "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                    "			INNER JOIN component c ON ra.mfgpnid=c.id  \n" +
                    "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                    "			GROUP BY rl.id;  \n" +
                    "  \n" +
                    "			-- To Get result of all line have resticted parts  \n" +
                    "			SELECT 	r.mfgPN,  \n" +
                    "				r.mfgPNID,  \n" +
                    "				r.consolidateID  \n" +
                    "			FROM vu_rfq_consolidate_restic_part r  \n" +
                    "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN prfqAssyID INT,  \n" +
                    "	IN puserID INT,  \n" +
                    "	IN ppackageing TINYINT,  \n" +
                    "	IN pcustomerID INT  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "	    DECLARE pOffset INT;  \n" +
                    "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "	    SET @SQLString = NULL;  \n" +
                    "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "		ELSE  \n" +
                    "			SET pOrderBy = \"ORDER BY `lineId` asc\";  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                    "			SET pWhereClause = '1=1' ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "		ELSE  \n" +
                    "			SET rowNumWhere = '';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                    "		FROM (  \n" +
                    "		SELECT  \n" +
                    "                     GROUP_CONCAT(DISTINCT  \n" +
                    "				CONCAT(  \n" +
                    "					'Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', rq.finalPrice, null))) AS ''',  \n" +
                    "						ra.requestQty,''''  \n" +
                    "					)  \n" +
                    "					) AS QtyColumn,  \n" +
                    "					NULL GroupColumn  \n" +
                    "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL  \n" +
                    "	UNION  \n" +
                    "            SELECT NULL QtyColumn,  \n" +
                    "			GROUP_CONCAT(DISTINCT  \n" +
                    "				CONCAT(  \n" +
                    "					'Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', rq.finalPrice, null))) AS ''',  \n" +
                    "						pg.name,''''  \n" +
                    "					)) AS  GroupColumn  \n" +
                    "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                    "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                    "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "		   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                    "	   )a;  \n" +
                    "  \n" +
                    "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                    "							SELECT 	rl.id, \",  \n" +
                    "							@SQLString,  \n" +
                    "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                    "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                    "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\");  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                    "		EXECUTE stmtMain;  \n" +
                    "		DEALLOCATE PREPARE stmtMain;  \n" +
                    "  \n" +
                    "		SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                    "						SELECT  \n" +
                    "						rl.id,rl.isPurchase,  \n" +
                    "						rl.numOfPosition,  \n" +
                    "						rl.lineID,  \n" +
                    "						rl.rfqLineItemID,  \n" +
                    "						rl.rfqAssyID,  \n" +
                    "						rl.uomID,  \n" +
                    "                        fun_getUnitAbbrivationByID(rl.uomID) unitName,  \n" +
                    "						rl.isqpaMismatch,  \n" +
                    "						custP.PIDCode as CPNPID,  \n" +
                    "						rl.custPNID,  \n" +
                    "                        custp.custAssyPN as cpncustAssyPN,  \n" +
                    "                        fun_getRoHSIconByID(custp.RoHSStatusID) as CPNRoHSIcon,  \n" +
                    "						fun_getRoHSNameByID(custp.RoHSStatusID) as CPNRoHSName,  \n" +
                    "                        rl.restrictCPNUseInBOMStep,  \n" +
                    "						rl.restrictCPNUsePermanentlyStep,  \n" +
                    "						rl.restrictCPNUseWithPermissionStep,  \n" +
                    "						(select partTypeName from rfq_parttypemst where id=co.functionalcategoryid) partTypeName,  \n" +
                    "						rm.name,  \n" +
                    "						rl.refDesig,  \n" +
                    "						rl.qpa,rl.consolidatedpartlineID,  \n" +
                    "						fun_getPartStatusNameByID(co.PartStatus) as PartStatus ,  \n" +
                    "						co.ltbDate AS LTBDate,  \n" +
                    "						co.eolDate AS EOLDate,',  \n" +
                    "						(SELECT fun_getCommonConsolidateLineMFGPN_New(ppackageing,prfqAssyID,pcustomerID)),  \n" +
                    "						' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "						JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                    "						JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  and ra.deletedAt is NULL  \n" +
                    "						left Join component custP on custp.id = rl.custPNID  \n" +
                    "						LEFT JOIN component co ON co.id=rq.componentid  \n" +
                    "						LEFT JOIN rfq_mountingtypemst rm ON co.mountingTypeID=rm.id  \n" +
                    "						WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',prfqAssyID,'  \n" +
                    "						AND ((co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR co.partstatus NOT IN (1))  \n" +
                    "						GROUP BY rl.id,rl.isPurchase,rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyID,rl.uomID,  \n" +
                    "						       rl.isqpaMismatch,rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,  \n" +
                    "						       co.functionalcategoryid,rm.name,rl.refDesig,rl.qpa,rl.consolidatedpartlineID,co.PartStatus,co.ltbDate,co.eolDate');  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "		PREPARE stmt FROM @SQLStatement;  \n" +
                    "		EXECUTE stmt;  \n" +
                    "		DEALLOCATE PREPARE stmt;  \n" +
                    "  \n" +
                    "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause );  \n" +
                    "		PREPARE query1 FROM @SQLStatement1;  \n" +
                    "		EXECUTE query1;  \n" +
                    "		DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "  \n" +
                    "		SET @SQLStatement2 = CONCAT(\" SELECT co.*, coq.* FROM  consolidatetemp co  \n" +
                    "										JOIN consolidatedQtytemp coq ON coq.id = co.id  \n" +
                    "										where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "		PREPARE query2 FROM @SQLStatement2;  \n" +
                    "		EXECUTE query2;  \n" +
                    "		DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "				-- To Get Pricing service status data  \n" +
                    "		SELECT  id,  \n" +
                    "			rfqAssyID,  \n" +
                    "			pricingApiName,  \n" +
                    "			`status`,  \n" +
                    "			msg,  \n" +
                    "			errorMsg,  \n" +
                    "			userID,  \n" +
                    "			consolidateID,  \n" +
                    "			isPurchaseApi,  \n" +
                    "			pricingSupplierID  \n" +
                    "		FROM rfq_lineitem_autopricingstatus  \n" +
                    "		WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                    "  \n" +
                    "		-- To Get rfq turn time price group details  \n" +
                    "		SELECT 	qtyTimeID,  \n" +
                    "			turnTime,  \n" +
                    "			unitOfTime,  \n" +
                    "			rfqAssyQtyID,  \n" +
                    "			requestQty,  \n" +
                    "			rfqPriceGroupId,  \n" +
                    "			priceGroup  \n" +
                    "		FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                    "		WHERE rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "		-- To Get Selected Part details  \n" +
                    "		SELECT 	requestQty,  \n" +
                    "			finalPrice,  \n" +
                    "			unitPrice,  \n" +
                    "			supplier,  \n" +
                    "			`min`,  \n" +
                    "			mult,  \n" +
                    "			selectedMpn,  \n" +
                    "			selectionMode,  \n" +
                    "			qtyID,  \n" +
                    "			currentStock,  \n" +
                    "			leadTime,  \n" +
                    "			supplierStock,  \n" +
                    "			grossStock,  \n" +
                    "			componentid,  \n" +
                    "			selectedPIDCode,  \n" +
                    "			pricingSuppliers,  \n" +
                    "			packaging,  \n" +
                    "			rfqQtySupplierID,  \n" +
                    "			unitEachPrice,  \n" +
                    "			quoteQtyEach,  \n" +
                    "			supplierEachStcok,  \n" +
                    "			ApiNoOfPosition,  \n" +
                    "			qpa,  \n" +
                    "			abbreviation,  \n" +
                    "			quoteQty,  \n" +
                    "			connecterTypeID,  \n" +
                    "			noOfRows,  \n" +
                    "			pricenotselectreason,  \n" +
                    "			isBomUpdate,  \n" +
                    "			rfqPriceGroupId,  \n" +
                    "			priceGroupName,  \n" +
                    "			consolidatedQty,  \n" +
                    "			authorizeType,  \n" +
                    "			consolidateID  \n" +
                    "		FROM vu_getselectedPartDetail  \n" +
                    "		WHERE rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "		-- To Get total price of consolidated lines  \n" +
                    "		SELECT 	qtyID,  \n" +
                    "			requestQty,  \n" +
                    "			TotalExtendedPrice,  \n" +
                    "			TotalUnitPrice,  \n" +
                    "			TotalAssemblyPrice,  \n" +
                    "			TotalExcessPrice,  \n" +
                    "			rfqPriceGroupId,  \n" +
                    "			qty,  \n" +
                    "			priceGroupName  \n" +
                    "		FROM vu_getTotalPrice  \n" +
                    "		WHERE rfqAssyid = prfqAssyID;  \n" +
                    "  \n" +
                    "		-- To Get list of all line with custom or non custom  \n" +
                    "		SELECT 	rl.id,  \n" +
                    "			MAX(c.iscustom) AS custom  \n" +
                    "		FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "		INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                    "		INNER JOIN component c ON ra.mfgpnid=c.id  \n" +
                    "		WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                    "		GROUP BY rl.rfqAssyID, rl.id;  \n" +
                    "  \n" +
                    "		-- To Get result of all line have resticted parts  \n" +
                    "		SELECT 	r.mfgPN,  \n" +
                    "			r.mfgPNID,  \n" +
                    "			r.consolidateID  \n" +
                    "		FROM vu_rfq_consolidate_restic_part r  \n" +
                    "		WHERE r.rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "    END;  \n" +		
                    /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereColumnName VARCHAR(255),  \n" +
                    "	IN pWhereFilterValue VARCHAR(255),  \n" +
                    "	IN pCustomWhere INT,  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN prfqAssyID INT,  \n" +
                    "	IN puserID INT,  \n" +
                    "	IN ppackageing TINYINT,  \n" +
                    "	IN pcustomerID INT  \n" +
                    "  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "	    DECLARE pOffset INT;  \n" +
                    "	    DECLARE ppartid INT;  \n" +
                    "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                    "	    DECLARE defaultOrder INT;  \n" +
                    "	    SET defaultOrder = 0;  \n" +
                    "	    SET @PERString = NULL;  \n" +
                    "  \n" +
                    "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	    ELSE  \n" +
                    "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID = prfqAssyID AND ra.rfqPriceGroupId IS NULL ORDER BY ra.requestQty ASC LIMIT 1;  \n" +
                    "		IF(defaultOrder > 0) THEN  \n" +
                    "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");  \n" +
                    "		ELSE  \n" +
                    "			SET pOrderBy = \"`lineID` ASC\";  \n" +
                    "		END IF;  \n" +
                    "	    END IF;  \n" +
                    "  \n" +
                    "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                    "			SET pWhereClause = '1=1' ;  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "		ELSE  \n" +
                    "			SET rowNumWhere = '';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                    "		FROM (  \n" +
                    "			SELECT	GROUP_CONCAT(DISTINCT  \n" +
                    "				CONCAT(  \n" +
                    "					'100*Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', rq.unitPrice * rl.qpa, null)))/Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',  \n" +
                    "						ra.requestQty,''''  \n" +
                    "					)) AS QtyColumn,  \n" +
                    "					NULL GroupColumn  \n" +
                    "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "			WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                    "		UNION  \n" +
                    "			SELECT NULL QtyColumn,  \n" +
                    "			  GROUP_CONCAT(DISTINCT  \n" +
                    "				CONCAT(  \n" +
                    "					'100*Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', rq.unitPrice * rl.qpa, null)))/Max((IF(ra.requestQty = ''',  \n" +
                    "						ra.requestQty,  \n" +
                    "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',  \n" +
                    "						pg.name,''''  \n" +
                    "					)  \n" +
                    "					) AS GroupColumn  \n" +
                    "			   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                    "			   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                    "			   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                    "			   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                    "			   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                    "			   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                    "		)a;  \n" +
                    "  \n" +
                    "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                    "							SELECT 	rl.id, \",  \n" +
                    "							@SQLString,  \n" +
                    "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                    "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                    "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\");  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                    "		EXECUTE stmtMain;  \n" +
                    "		DEALLOCATE PREPARE stmtMain;  \n" +
                    "  \n" +
                    "		SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                    "  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "		PREPARE stmt FROM @SQLStatement;  \n" +
                    "		-- SELECT @SQLStatement;  \n" +
                    "		EXECUTE stmt;  \n" +
                    "		DEALLOCATE PREPARE stmt;  \n" +
                    "  \n" +
                    "		SET @SQLStatement12 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetempFinal AS SELECT  \n" +
                    "														co.isPurchase,  \n" +
                    "														co.numOfPosition,  \n" +
                    "														co.lineID,  \n" +
                    "														co.rfqLineItemID,  \n" +
                    "														co.rfqAssyID,  \n" +
                    "														co.uomID,  \n" +
                    "														co.unitName,  \n" +
                    "														co.isqpaMismatch,  \n" +
                    "														co.qpa,  \n" +
                    "														co.refDesig,  \n" +
                    "														co.consolidatedpartlineID,  \n" +
                    "														co.consolidateRestrictPartDetail,  \n" +
                    "														co.CPNPID,  \n" +
                    "														co.custPNID,  \n" +
                    "														co.cpncustAssyPN,  \n" +
                    "                                                        co.CPNRoHSIcon,  \n" +
                    "														co.CPNRoHSName,  \n" +
                    "														co.restrictCPNUseInBOMStep,  \n" +
                    "														co.restrictCPNUsePermanentlyStep,  \n" +
                    "														co.restrictCPNUseWithPermissionStep,  \n" +
                    "														co.`name`,  \n" +
                    "														co.`partTypeName`,  \n" +
                    "														co.mfgPN,  \n" +
                    "														coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON co.id = coq.id;\" );  \n" +
                    "		PREPARE query12 FROM @SQLStatement12;  \n" +
                    "		EXECUTE query12;  \n" +
                    "		DEALLOCATE PREPARE query12;  \n" +
                    "			# IF searched with dynamic column than do filter with temporary table logic  \n" +
                    "			IF pCustomWhere IS NOT NULL THEN  \n" +
                    "		# Create new temporary table for save record with row number with higher price descending details  \n" +
                    "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                    "				PREPARE query_Temp FROM @SQLStatement_Temp;  \n" +
                    "				EXECUTE query_Temp;  \n" +
                    "				DEALLOCATE PREPARE query_Temp;  \n" +
                    "  \n" +
                    "				# temporary tables not allow to join with same table so create another table  \n" +
                    "				# Create new temporary table for save record with row number with higher price descending details  \n" +
                    "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                    "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;  \n" +
                    "				EXECUTE query_Temp1;  \n" +
                    "				DEALLOCATE PREPARE query_Temp1;  \n" +
                    "				# temporary tables not allow to join with same table so create another table  \n" +
                    "				# Create new temporary table for save record with row number with higher price descending details  \n" +
                    "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                    "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;  \n" +
                    "				EXECUTE query_Temp2;  \n" +
                    "				DEALLOCATE PREPARE query_Temp2;  \n" +
                    "				# Concate  \n" +
                    "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");  \n" +
                    "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);  \n" +
                    "			ELSE  \n" +
                    "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM consolidatetempFinal where \", pWhereClause );  \n" +
                    "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetempFinal where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "			END IF;  \n" +
                    "			PREPARE query1 FROM @SQLStatement1;  \n" +
                    "			EXECUTE query1;  \n" +
                    "			DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "			PREPARE query2 FROM @SQLStatement2;  \n" +
                    "			EXECUTE query2;  \n" +
                    "			DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "			-- To Get Pricing service status data  \n" +
                    "			SELECT  id,  \n" +
                    "				rfqAssyID,  \n" +
                    "				pricingApiName,  \n" +
                    "				`status`,  \n" +
                    "				msg,  \n" +
                    "				errorMsg,  \n" +
                    "				userID,  \n" +
                    "				consolidateID,  \n" +
                    "				isPurchaseApi,  \n" +
                    "				pricingSupplierID  \n" +
                    "			FROM rfq_lineitem_autopricingstatus  \n" +
                    "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                    "  \n" +
                    "			SELECT 	qtyTimeID,  \n" +
                    "				turnTime,  \n" +
                    "				unitOfTime,  \n" +
                    "				rfqAssyQtyID,  \n" +
                    "				requestQty,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				priceGroup  \n" +
                    "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                    "			WHERE rfqAssyID = rfqAssyID;  \n" +
                    "  \n" +
                    "			-- To Get Selected Part details  \n" +
                    "			SELECT 	requestQty,  \n" +
                    "				finalPrice,  \n" +
                    "				unitPrice,  \n" +
                    "				supplier,  \n" +
                    "				`min`,  \n" +
                    "				mult,  \n" +
                    "				selectedMpn,  \n" +
                    "				selectionMode,  \n" +
                    "				qtyID,  \n" +
                    "				currentStock,  \n" +
                    "				leadTime,  \n" +
                    "				supplierStock,  \n" +
                    "				grossStock,  \n" +
                    "				componentid,  \n" +
                    "				selectedPIDCode,  \n" +
                    "				pricingSuppliers,  \n" +
                    "				packaging,  \n" +
                    "				rfqQtySupplierID,  \n" +
                    "				unitEachPrice,  \n" +
                    "				quoteQtyEach,  \n" +
                    "				supplierEachStcok,  \n" +
                    "				ApiNoOfPosition,  \n" +
                    "				qpa,  \n" +
                    "				abbreviation,  \n" +
                    "				quoteQty,  \n" +
                    "				connecterTypeID,  \n" +
                    "				noOfRows,  \n" +
                    "				pricenotselectreason,  \n" +
                    "				isBomUpdate,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				priceGroupName,  \n" +
                    "				consolidatedQty,  \n" +
                    "				authorizeType,  \n" +
                    "				consolidateID  \n" +
                    "			FROM vu_getselectedPartDetail  \n" +
                    "			WHERE rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "			-- To Get total price of consolidated lines  \n" +
                    "			SELECT 	qtyID,  \n" +
                    "				requestQty,  \n" +
                    "				TotalExtendedPrice,  \n" +
                    "				TotalUnitPrice,  \n" +
                    "				TotalAssemblyPrice,  \n" +
                    "				TotalExcessPrice,  \n" +
                    "				rfqPriceGroupId,  \n" +
                    "				qty,  \n" +
                    "				priceGroupName  \n" +
                    "			FROM vu_getTotalPrice  \n" +
                    "			WHERE rfqAssyid = prfqAssyID;  \n" +
                    "  \n" +
                    "			-- To Get list of all line with custom or non custom  \n" +
                    "			SELECT 	rl.id,  \n" +
                    "				MAX(c.iscustom) AS custom  \n" +
                    "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                    "			INNER JOIN component c ON ra.mfgpnid=c.id  \n" +
                    "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                    "			GROUP BY rl.rfqAssyID, rl.id;  \n" +
                    "  \n" +
                    "			-- To Get result of all line have resticted parts  \n" +
                    "			SELECT 	r.mfgPN,  \n" +
                    "				r.mfgPNID,  \n" +
                    "				r.consolidateID  \n" +
                    "			FROM vu_rfq_consolidate_restic_part r  \n" +
                    "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                    "  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatetempFinal;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                    "    END;  \n" +		
                            /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems_New`;  \n" +
                    "CREATE FUNCTION `fun_getCommonConsolidateLineItems_New`(  \n" +
                    "pRfqAssyID INT,  \n" +
                    "pCustomerID INT,  \n" +
                    "pIsPackaging TINYINT  \n" +
                    ") RETURNS longtext CHARSET utf8mb4  \n" +
                    "BEGIN  \n" +
                    "	DECLARE result TEXT;  \n" +
                    "  \n" +
                    "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                    "					SELECT 	rl.id,  \n" +
                    "						rl.isPurchase,  \n" +
                    "						rl.numOfPosition,  \n" +
                    "						rl.lineID,  \n" +
                    "						rl.rfqLineItemID,  \n" +
                    "						rl.rfqAssyID,  \n" +
                    "						rl.uomID,  \n" +
                    "						fun_getUnitAbbrivationByID(rl.uomID) unitName,  \n" +
                    "						rl.isqpaMismatch,  \n" +
                    "						rl.qpa,  \n" +
                    "						rl.refDesig,  \n" +
                    "						rl.consolidatedpartlineID,  \n" +
                    "						rl.consolidateRestrictPartDetail,  \n" +
                    "						custP.PIDCode as CPNPID,  \n" +
                    "						rl.custPNID,  \n" +
                    "                        custp.custAssyPN as cpncustAssyPN,  \n" +
                    "                        fun_getRoHSIconByID(custp.RoHSStatusID) as CPNRoHSIcon,  \n" +
                    "						fun_getRoHSNameByID(custp.RoHSStatusID) as CPNRoHSName,  \n" +
                    "						ifnull(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,  \n" +
                    "						ifnull(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "						ifnull(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "						fun_getMountingTypeOfConsolidatePart(rl.id)`name`,  \n" +
                    "						fun_getPartTypeOfConsolidatePart(rl.id) `partTypeName`,',  \n" +
                    "						(SELECT fun_getCommonConsolidateLineMFGPN_New(pIsPackaging,pRfqAssyID,pCustomerID)),'  \n" +
                    "						FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                    "                         left Join component custP on custp.id = rl.custPNID  \n" +
                    "						WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',pRfqAssyID,'')  INTO @result;  \n" +
                    "      	SET result = @result;  \n" +
                    "	RETURN result;  \n" +
                    "    END;  \n" +		
                    /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                    "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(  \n" +
                    "	IN prfqAssyIDORrefSalesOrderdetID INT,  \n" +
                    "    IN ppartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE v_GroupConcatSeparator text;  \n" +
                    "	SET SESSION group_concat_max_len = 500000;  \n" +
                    "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                    "       -- Create leavel wise assembly BOM data  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                    "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
                    "		WITH RECURSIVE cte AS  \n" +
                    "		(  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                    "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
                    "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
                    "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
                    "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				/*  \n" +
                    "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,  \n" +
                    "				*/  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				/* we not required this in functionaly this will be used for check in detail  \n" +
                    "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                    "				*/  \n" +
                    "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                    "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, comp.RoHSStatusID as AssyRoHSID, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0  \n" +
                    "			)  \n" +
                    "			UNION ALL  \n" +
                    "			(  \n" +
                    "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
                    "				rl.refDesig,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS qpacount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.qpa,0)  \n" +
                    "				) AS kitqpacount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS dnpQty,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.dnpQty,0)  \n" +
                    "				) AS kitdnpQty,  \n" +
                    "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.refDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.qpa,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.qpa,0)  \n" +
                    "					END)  \n" +
                    "				) AS qpa1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END)*  \n" +
                    "  (CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.qpa,0)  \n" +
                    "  END)  \n" +
                    "				) AS kitqpa1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END)*  \n" +
                    "					(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
                    "								IFNULL(rl.dnpDesigCount,0)  \n" +
                    "							ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "						END)  \n" +
                    "						ELSE IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS dnpQPA1,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "				(CASE WHEN rl.uomID = -1 THEN  \n" +
                    "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
                    "					ELSE  \n" +
                    "						IFNULL(rl.dnpQty,0)  \n" +
                    "					END)  \n" +
                    "				) AS kitdnpQPA1,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.refDesigCount,0)  \n" +
                    "				) refDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) * IFNULL(rl.refDesigCount,0)  \n" +
                    "				) AS kitrefDesigCount,  \n" +
                    "				(  \n" +
                    "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) dnpDesigCount,  \n" +
                    "                (  \n" +
                    "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(cte.qpa1)  \n" +
                    "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(cte.dnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(cte.dnpQPA1 + cte.qpa1)  \n" +
                    "					END) *  \n" +
                    "					IFNULL(rl.dnpDesigCount,0)  \n" +
                    "				) kitdnpDesigCount,  \n" +
                    "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
                    "						1  \n" +
                    "					ELSE rl.qpaDesignatorStep  \n" +
                    "				END) AS qpaDesignatorStep ,  \n" +
                    "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
                    "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
                    "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
                    "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
                    "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
                    "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
                    "				#com.packaginggroupID,  \n" +
                    "				/* we not required this in functionaly this will be used for check in detail  \n" +
                    "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
                    "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
                    "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
                    "				*/  \n" +
                    "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
                    "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, comp.RoHSStatusID as AssyRoHSID, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
                    "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
                    "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                    "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
                    "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
                    "				FROM  rfq_lineitems rl  \n" +
                    "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                    "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
                    "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
                    "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
                    "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0  \n" +
                    "			)  \n" +
                    "		)  \n" +
                    "		SELECT cte.* FROM cte  \n" +
                    "		ORDER BY lineItemID;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                    "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS  \n" +
                    "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
                    "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
                    "					MIN(a.mountingTypeID)  \n" +
                    "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
                    "					MAX(approvedMountingTypeID)  \n" +
                    "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
                    "        (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN  /* Matched funcitonal Type */  \n" +
                    "					MIN(a.partType)  \n" +
                    "			WHEN MIN(a.partType) !=  MAX(a.partType)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval funcitonal Type */  \n" +
                    "					MAX(approvedFunctionalTypeID)  \n" +
                    "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD funcitonal type*/ END) partType,  \n" +
                    "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
                    "			MIN(a.connecterTypeID)  \n" +
                    "		ELSE  \n" +
                    "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
                    "		END) AS connecterTypeID,  \n" +
                    "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
                    "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
                    "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
                    "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
                    "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
                    "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
                    "      a.approvedMountingType,' | ',  \n" +
                    "      ifnull(a.custAssyPN,''),' | ',  \n" +
                    "      ifnull(a.isCustom,0)  \n" +
                    "      ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
                    "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
                    "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
                    "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
                    "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
                    "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
                    "      ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
                    "      ' | Approved Mounting Type:', approvedMountingTypeName,  \n" +
                    "      ' | Approved Functional Type:', approvedFunctionalTypeName,  \n" +
                    "      ' | Custom PartNum:', ifnull(custAssyPN,''),  \n" +
                    "      ' | isCustom:', ifnull(isCustom,''),  \n" +
                    "      ' | AssyPN:', AssyPN,  \n" +
                    "      ' | partID:', partID,  \n" +
                    "      ' | assyCustPN:', assyCustPN,  \n" +
                    "      ' | mfgPN:', mfgPN,  \n" +
                    "      ' | RoHSName:', fun_getRoHSNameByID(RoHSStatusID),  \n" +
                    "      ' | RoHSIcon:', fun_getRoHSIconByID(RoHSStatusID),  \n" +
                    "      ' | AssyRoHSName:', fun_getRoHSNameByID(a.AssyRoHSID),  \n" +
                    "      ' | AssyRoHSIcon:', fun_getRoHSIconByID(a.AssyRoHSID),  \n" +
                    "      '}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
                    "		FROM  \n" +
                    "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID,x.AssyPN,x.assyCustPN,x.AssyRoHSID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
                    "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.custAssyPN, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
                    "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
                    "  x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
                    "  x.approvedMountingTypeID, x.approvedMountingTypeName, x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                    "				FROM  \n" +
                    "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, al.AssyPN, al.assyCustPN, al.AssyRoHSID,  \n" +
                    "						IFNULL(d.id, c.id) AS mfgPNID,  \n" +
                    "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
                    "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
                    "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.custAssyPN, c.custAssyPN) AS custAssyPN, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
                    "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
                    "      IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
                    "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
                    "						(CASE WHEN al.approvedMountingType = 1 THEN c.functionalCategoryID ELSE -1 END) approvedFunctionalTypeID,  \n" +
                    "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getPartTypeNameByID(c.functionalCategoryID) ELSE '' END) approvedFunctionalTypeName,  \n" +
                    "      al.mismatchMountingTypeStep,  \n" +
                    "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                    "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
                    "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
                    "							ELSE	 /*Packaging Alias*/  \n" +
                    "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                    "						END) AS restrictUsePermanentlyStep,  \n" +
                    "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
                    "							ELSE   /*Packaging Alias*/  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasStep,  \n" +
                    "						(CASE  \n" +
                    "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
                    "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
                    "							ELSE  \n" +
                    "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                    "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
                    "				FROM  \n" +
                    "					leveldata al  \n" +
                    "				INNER JOIN component c ON al.mfgPNID = c.id  \n" +
                    "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
                    "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
                    "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
                    "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
                    "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
                    "			) AS X  \n" +
                    "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID ,x.AssyPN,x.assyCustPN,x.AssyRoHSID, x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.custAssyPN, x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
                    "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
                    "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
                    "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName,x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
                    "		) a  \n" +
                    "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
                    "  \n" +
                    "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
                    "		EXECUTE query2;  \n" +
                    "		DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	-- Create Temporary table for level wise lineitem detail  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                    "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS  \n" +
                    "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,  \n" +
                    "				 a.numOfPosition,  \n" +
                    "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
                    "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
                    "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
                    "					THEN (a.qpa1)  \n" +
                    "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
                    "				END) qpa,  /* QPA count for Pricing */  \n" +
                    "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							0  \n" +
                    "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
                    "							(a.kitqpa1)  \n" +
                    "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
                    "							(a.kitdnpQPA1)  \n" +
                    "						ELSE  \n" +
                    "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
                    "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
                    "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */  \n" +
                    "                 IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
                    "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
                    "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
                    "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
                    "						' | RefDes Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP RefDes Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
                    "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, ' | assyCustPN:', a.assyCustPN, ' | AssyPN:', a.AssyPN, ' | AssyRoHSName:', fun_getRoHSNameByID(a.AssyRoHSID), ' | AssyRoHSIcon:', fun_getRoHSIconByID(a.AssyRoHSID),  '}') AS partlineID,  \n" +
                    "				(CASE WHEN a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isqpaMismatchflag,  \n" +
                    "				(CASE WHEN a.uomID = - 1  \n" +
                    "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
                    "				ELSE 0  \n" +
                    "				END) isdnpQPAMismatchflag,  \n" +
                    "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
                    "					THEN 1  \n" +
                    "				ELSE 0  \n" +
                    "				END) isPurchaseWithDNP  \n" +
                    "		FROM  \n" +
                    "			leveldata a  \n" +
                    "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level, a.rfqlineitemsid , a.partid, a.lineID , a.uomID,  a.isInstall,  \n" +
                    "        a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
                    "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;  \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "        -- Create Consolidated data in temp table  \n" +
                    "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                    "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS  \n" +
                    "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
                    "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
                    "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
                    "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
                    "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
                    "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
                    "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
                    "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
                    "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
                    "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
                    "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
                    "				GROUP_CONCAT(tal.mfgPartsWithPackagings SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidateRestrictPartDetail  \n" +
                    "		FROM  \n" +
                    "				temp_LevleWiseLineItemDetail tl  \n" +
                    "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
                    "		GROUP BY  \n" +
                    "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
                    "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
                    "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
                    "   tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
                    "		ORDER BY rfqlineitemsid\");  \n" +
                    "  \n" +
                    "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
                    "		EXECUTE query3;  \n" +
                    "		DEALLOCATE PREPARE query3;  \n" +
                    "  \n" +
                    "        -- Drop temporary tables generated for generate consolidate data  \n" +
                    "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
                    "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
                    "  \n" +
                    "END;  \n" +		
                    /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5440,'2.00','V1','Bug 38091: BOM: While changing a UOM from EACH to PIN and verify QPA without Ref Des then allowing to approval. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;             
            case 5440:
                allDbChangesArray.push(
                /* **************************** New Script -> 26-10-2021  *********************************** */
                "select pageID into  @parentPageID from page_detail where pageRoute ='app.transaction.customercreditnote';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "set parentPageID = @parentPageID  \n" +
                "where pageRoute in ('app.transaction.customercreditnote.summary','app.transaction.customercreditnote.detail');  \n" +
                /* **************************** Add Script Version -> 26-10-2021  *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5441,'2.00','V1','Update parent page for  Customer Credit Note Summary & Detail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5441:
                allDbChangesArray.push(
                /* **************************** New Script -> 27-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckPackingSlipMaterialValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckPackingSlipMaterialValidation`(  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN pPackingSlipMaterialID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pUpdatedReceivedQty DECIMAL(18,8),  \n" +
                "	IN pPackagingId INT,  \n" +
                "	IN pSpq INT,  \n" +
                "    IN pIsNonUMIDStock boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOldReceivedQty DECIMAL(18,8);  \n" +
                "	DECLARE vUMIDCreatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vPackagingId INT;  \n" +
                "	DECLARE vPackagingAliesComponentId VARCHAR(5000);  \n" +
                "  \n" +
                "	-- Return packing slip detail if it's invoice status is Paid  \n" +
                "	SELECT 		1 errorCode,  \n" +
                "			p.id packingSlipID,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			p.packingSlipDate,  \n" +
                "			p.status packingSlipStatus,  \n" +
                "			i.id invoiceID,  \n" +
                "			i.invoiceNumber,  \n" +
                "			i.invoiceDate,  \n" +
                "			i.status invoiceStatus  \n" +
                "	FROM 		packing_slip_material_receive p  \n" +
                "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                "	WHERE 		p.id = pPackingSlipID  \n" +
                "				AND 	i.status = 'P'  \n" +
                "				AND 	p.isDeleted = 0;  \n" +
                "  \n" +
                "	-- Return packing slip line detail if it's invoice line status is Approve or Disapprove  \n" +
                "	SELECT 		6 errorCode,  \n" +
                "			p.id packingSlipID,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			p.packingSlipDate,  \n" +
                "			p.status packingSlipStatus,  \n" +
                "			i.id invoiceID,  \n" +
                "			i.invoiceNumber,  \n" +
                "			i.invoiceDate,  \n" +
                "			i.status invoiceStatus,  \n" +
                "			inv_d.packingSlipSerialNumber invoiceSerialNumber,  \n" +
                "			inv_d.status invoiceLineStatus  \n" +
                "	FROM 		packing_slip_material_receive p  \n" +
                "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                "	LEFT JOIN	packing_slip_material_receive_det pkg_d ON pkg_d.refPackingSlipMaterialRecID = p.id AND pkg_d.id = pPackingSlipMaterialID AND pkg_d.deletedAt IS NULL  \n" +
                "	LEFT JOIN	packing_slip_material_receive_det inv_d ON inv_d.refPackingSlipMaterialRecID = i.id AND pkg_d.packingSlipSerialNumber = inv_d.packingSlipSerialNumber AND inv_d.deletedAt IS NULL  \n" +
                "	WHERE 		p.id = pPackingSlipID  \n" +
                "				AND 	(inv_d.status = 'A' OR inv_d.status = 'D')  \n" +
                "				AND 	p.isDeleted = 0;  \n" +
                "  \n" +
                "	-- Get detail of any UMID is created or not for particular line  \n" +
                "	SELECT packagingID INTO vPackagingId FROM packing_slip_material_receive_det WHERE id = pPackingSlipMaterialID AND deletedAt IS NULL;  \n" +
                "	IF (pPackagingId != vPackagingId) THEN  \n" +
                "		SELECT 	4 errorCode,  \n" +
                "			csspd.refPackingSlipDetailID,  \n" +
                "			csspd.refComponentSidStockID  \n" +
                "		FROM 	component_sid_stock_packing_detail csspd  \n" +
                "		WHERE	deletedAt IS NULL  \n" +
                "				AND refPackingSlipDetailID = pPackingSlipMaterialID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- Get detail of pending UMID part if it is existing in same bin of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                "    IF pIsNonUMIDStock = FALSE THEN  \n" +
                "		SELECT 		2 errorCode,  \n" +
                "				psd.id,  \n" +
                "				p.packingSlipNumber,  \n" +
                "				psd.refPackingSlipMaterialRecID,  \n" +
                "				psd.partID,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				p.mfgCodeID,  \n" +
                "				mfg.mfgCode,  \n" +
                "				mfg.mfgName,  \n" +
                "				psd.binID,  \n" +
                "				b.Name binName  \n" +
                "		FROM 		packing_slip_material_receive_det psd  \n" +
                "		INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                "		INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                "		INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                "		INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                "		WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                "					AND 	psd.umidCreated = 0  \n" +
                "					AND	p.id != pPackingSlipID  \n" +
                "					AND 	psd.binID = pBinID  \n" +
                "					AND 	psd.partID = pPartID  \n" +
                "					AND		psd.deletedAt IS NULL  \n" +
                "                    AND		psd.isNonUMIDStock = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- Get detail of pending UMID part if it is existing in same bin with packaging alies and same packaging and same spq of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                "	SELECT 	GROUP_CONCAT(componentID)  \n" +
                "	INTO 	vPackagingAliesComponentId  \n" +
                "	FROM 	component_packagingalias  \n" +
                "	WHERE 	aliasgroupID = (SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pPartID AND deletedAt IS NULL LIMIT 1);  \n" +
                "  IF pIsNonUMIDStock = FALSE THEN  \n" +
                "	SELECT 		5 errorCode,  \n" +
                "			psd.id,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			psd.refPackingSlipMaterialRecID,  \n" +
                "			psd.partID,  \n" +
                "			c.mfgPN,  \n" +
                "			c.PIDCode,  \n" +
                "			p.mfgCodeID,  \n" +
                "			mfg.mfgCode,  \n" +
                "			mfg.mfgName,  \n" +
                "			psd.binID,  \n" +
                "			b.Name binName  \n" +
                "	FROM 		packing_slip_material_receive_det psd  \n" +
                "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                "	INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                "	INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                "	INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                "	WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                "				AND 	psd.umidCreated = 0  \n" +
                "				AND	p.id != pPackingSlipID  \n" +
                "				AND 	psd.binID = pBinID  \n" +
                "				AND 	FIND_IN_SET(psd.partID, IFNULL(vPackagingAliesComponentId, CAST(pPartID AS CHAR(11))))  \n" +
                "				AND 	c.minimum = pSpq  \n" +
                "				AND		psd.deletedAt IS NULL  \n" +
                "                AND		psd.isNonUMIDStock = 0;  \n" +
                "    END IF;  \n" +
                "        -- Get old received quantity to check further validation  \n" +
                "        SELECT	receivedQty  \n" +
                "        INTO 	vOldReceivedQty  \n" +
                "        FROM 	packing_slip_material_receive_det  \n" +
                "        WHERE 	id = pPackingSlipMaterialID  \n" +
                "			AND isDeleted = 0;  \n" +
                "        IF(pUpdatedReceivedQty > vOldReceivedQty) THEN  \n" +
                "		-- Update UMID created flag to false from API  \n" +
                "		SELECT 	0 errorCode,  \n" +
                "			partID,  \n" +
                "			orderedQty,  \n" +
                "			receivedQty,  \n" +
                "			0 updateUMIDCreated  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	id = pPackingSlipMaterialID  \n" +
                "				AND 	isDeleted = 0;  \n" +
                "	ELSEIF(pUpdatedReceivedQty < vOldReceivedQty) THEN  \n" +
                "		-- Get total UMID create qty  \n" +
                "		SELECT 		SUM(orgQty) INTO vUMIDCreatedQty  \n" +
                "		FROM 		component_sid_stock css  \n" +
                "		INNER JOIN 	component_sid_stock_packing_detail cssp ON css.id = cssp.refComponentSidStockID AND cssp.isDeleted = 0  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det psd ON cssp.refPackingSlipDetailID = psd.id  \n" +
                "					AND psd.id = pPackingSlipMaterialID  \n" +
                "					AND psd.isDeleted = 0  \n" +
                "		WHERE 		css.isdeleted = 0;  \n" +
                "  \n" +
                "		IF(vUMIDCreatedQty > pUpdatedReceivedQty) THEN  \n" +
                "			-- Restrict to user if created UMID qty is greater than updated qty  \n" +
                "			SELECT 	3 errorCode,  \n" +
                "				partID,  \n" +
                "				orderedQty,  \n" +
                "				receivedQty,  \n" +
                "				vUMIDCreatedQty umidCreatedQty  \n" +
                "			FROM 	packing_slip_material_receive_det  \n" +
                "			WHERE 	id = pPackingSlipMaterialID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			SELECT 	0 errorCode,  \n" +
                "				partID,  \n" +
                "				orderedQty,  \n" +
                "				receivedQty,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (vUMIDCreatedQty = pUpdatedReceivedQty) THEN  \n" +
                "							1  \n" +
                "						ELSE  \n" +
                "							0  \n" +
                "					END  \n" +
                "				) updateUMIDCreated  \n" +
                "			FROM 	packing_slip_material_receive_det  \n" +
                "			WHERE 	id = pPackingSlipMaterialID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 8 errorCode,  \n" +
                "		qty RMAQty  \n" +
                "	FROM  \n" +
                "		packing_slip_material_receive_det_stock  \n" +
                "	WHERE refPackingSlipId = pPackingSlipID  \n" +
                "        AND partId = pPartID  \n" +
                "        AND packagingId = pPackagingId  \n" +
                "        AND binId = pBinID  \n" +
                "        AND isdeleted = 0  \n" +
                "        and qty > pUpdatedReceivedQty;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                vups.poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.partType=4 and a.poWorkingStatus=\"C\" then \"C\" else ifnull(a.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.poWorkingStatus=\"C\" then \"C\" when a.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5442,'2.00','V1',' Bug 38031: QA Testing findings for User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5442:
                allDbChangesArray.push(
                /* **************************** New Script -> 27-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem,  \n" +
                "                p.isLineCustConsigned, p.isNonUMIDStock,  \n" +
                "                CASE WHEN p.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                p.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "                c.isCPN  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "        LEFT JOIN	mfgcodemst mc  on mc.id = p.LineCustomerID  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5443,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
        case 5443:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-10-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "    # Customer Invoice Master table details  \n" +
                "    SELECT  cp.id,  \n" +
                "		cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "		cp.packingSlipNumber,  \n" +
                "		cp.packingSlipDate,  \n" +
                "		cp.poDate,  \n" +
                "		cp.poNumber,  \n" +
                "        cp.poRevision,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,  \n" +
                "		cp.packingSlipComment,  \n" +
                "        cp.status,  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '  \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,  \n" +
                "        cp.billingAddress,  \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,  \n" +
                "        cp.systemID AS legalnumber,  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension,  \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '1.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "                LEFT JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "           LEFT JOIN  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "	SELECT  \n" +
                "		cpd.id,  \n" +
                "		cpd.partId,  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,  \n" +
                "		cpd.lineID,  \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,  \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,  \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		  WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = cpID)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE  \n" +
                "			  ''  \n" +
                "			END) AS mfgPN ,  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			'Other Charges'  \n" +
                "		ELSE  \n" +
                "			fun_getMfgNameByPartID(cpd.partId)  \n" +
                "			END) AS  mfgName,  \n" +
                "		IFNULL(c.rev, '') AS revision,  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,  \n" +
                "		cpd.shipQty AS qty,  \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,  \n" +
                "		CONCAT(  \n" +
                "		IFNULL(replace(cpd.assyDescription,'  \n" +
                "','<br/>'), ''),'<br/>',  \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "                IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),  \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,  \n" +
                "            IFNULL(replace(cpd.shippingNotes,'  \n" +
                "','<br/>'),'')) AS DESCRIPTION  \n" +
                "  \n" +
                "	FROM  \n" +
                "		customer_packingslip_det cpd  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "	WHERE  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;  \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report  \n" +
                "    SELECT get_totalCustomerInvoiceReceivedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.shipQty * cpd.unitPrice),0) AS totalLinePrice,  \n" +
                "		IFNULL(SUM(totalLineMiscPrice),0) AS totalLineMiscPrice,  \n" +
                "        IFNULL(@totalRecvAmt,0) As totalRecvAmt  \n" +
                "	FROM  customer_packingslip_det cpd  \n" +
                "	LEFT JOIN (SELECT refCustomerPackingSlipDetID, SUM(cpod.qty * cpod.price) AS totalLineMiscPrice  \n" +
                "				FROM customer_packingslip_otherexpense_details cpod WHERE cpod.isdeleted = 0  \n" +
                "		GROUP BY cpod.refCustomerPackingSlipDetID) cpod ON cpod.refCustomerPackingSlipDetID = cpd.id  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND  cpd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(  \n" +
                "	IN pid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    # Purchase Order Master details  \n" +
                "    SELECT  po.id,  \n" +
                "		po.status,  \n" +
                "		po.poNumber,  \n" +
                "        po.poRevision,  \n" +
                "        po.poDate,  \n" +
                "        po.poWorkingStatus,  \n" +
                "        po.supplierAddress,  \n" +
                "		po.shippingAddress,  \n" +
                "        po.intermediateAddress,  \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        po.shippingInsurance,  \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,  \n" +
                "        po.poComment,  \n" +
                "        po.serialNumber,  \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension  ,  \n" +
                "        '1.00' AS docNumber  \n" +
                "	FROM purchase_order_mst po  \n" +
                "         INNER JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "        INNER JOIN  \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;  \n" +
                "  \n" +
                "	# Purchase Order Line details  \n" +
                "    SELECT  pod.lineID,  \n" +
                "		pod.id AS pODetID,  \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,  \n" +
                "		(CASE WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE ''  END) AS mfgPN ,  \n" +
                "        IFNULL(c.rev, '') AS revision,  \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,  \n" +
                "		pod.supplierQuoteNumber,  \n" +
                "        pod.internalRef,  \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,  \n" +
                "        pod.qty,  \n" +
                "        'EA' uom,  \n" +
                "        pod.price,  \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,  \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,  \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,  \n" +
                "        CONCAT(IFNULL(replace(pod.partDescription,'  \n" +
                "','<br/>'), ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,  \n" +
                "            IFNULL(CONCAT(  \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,  \n" +
                "        pod.lineComment  \n" +
                "	 FROM purchase_order_det pod  \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)  \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid  \n" +
                "	 ORDER BY pod.lineID ASC;  \n" +
                "  \n" +
                "	# Get purchase order Total Price table details  \n" +
                "	SELECT  \n" +
                "        IFNULL(SUM(IF(c.partType <> 4,(pd.qty * pd.price), 0)),0) AS totalLinePrice,  \n" +
                "        IFNULL(SUM(IF(c.partType = 4,(pd.qty * pd.price), 0)),0)AS totalPOMiscPrice,  \n" +
                "        IFNULL(SUM(pod.totalLineMiscPrice),0) AS totalLineMiscPrice  \n" +
                "    FROM purchase_order_det pd  \n" +
                "    LEFT JOIN (SELECT refPurchaseOrderDetID, SUM(pod.qty * pod.price) AS totalLineMiscPrice  \n" +
                "					FROM purchase_order_line_othercharges pod WHERE pod.isdeleted = 0  \n" +
                "			GROUP BY pod.refPurchaseOrderDetID) pod ON pod.refPurchaseOrderDetID = pd.id  \n" +
                "	INNER JOIN COMPONENT c ON c.id = pd.mfgPartID AND c.isDeleted = 0  \n" +
                "	WHERE pd.refPurchaseOrderID = pid AND pd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetCreditMemoReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo  DECIMAL(18,6);  \n" +
                "  \n" +
                "	# Customer Invoice Master table details  \n" +
                "		SELECT  cp.id,  \n" +
                "			cp.invoiceNumber,  \n" +
                "			cp.invoiceDate,  \n" +
                "			cp.creditMemoNumber,  \n" +
                "			cp.creditMemoDate,  \n" +
                "			cp.refDebitMemoNumber,  \n" +
                "			refDebitMemoDate,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			mg.customerSystemID,  \n" +
                "			mg.accountRef,  \n" +
                "			cp.status,  \n" +
                "			cp.billingAddress,  \n" +
                "			cp.shippingAddress,  \n" +
                "			cp.packingSlipComment,  \n" +
                "			cp.rmaNumber,  \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "			cp.systemID AS legalnumber,  \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,  \n" +
                "			us.emailAddress,  \n" +
                "			emp.phExtension,  \n" +
                "			'1.00' docNumber ,  \n" +
                "			cp.revision creditMemoVersion  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "			LEFT JOIN genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  AND gcs.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gcp ON gcp.gencCategoryID = cp.termsID AND gcp.isDeleted = 0  \n" +
                "			LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "			LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "		WHERE cp.id=cpID AND cp.isDeleted = 0  \n" +
                "		AND transType='C'  \n" +
                "		LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "		SELECT  \n" +
                "			cpd.id,  \n" +
                "			cpd.partId,  \n" +
                "			cpd.id AS refCustomerPackingSlipDetID,  \n" +
                "			cpd.lineID,  \n" +
                "			cpd.reflineID,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "				WHEN (c.iscustom=1) THEN  c.custAssyPN  \n" +
                "				WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "				ELSE  ''  END) AS mfgPN ,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN 'Other Charges'  \n" +
                "				ELSE  fun_getMfgNameByPartID(cpd.partId)  \n" +
                "				END) AS  mfgName,  \n" +
                "			IFNULL(c.rev, '') AS revision,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  'EA'  \n" +
                "				ELSE  fun_getUOMAbbreviationByID(c.uom)  \n" +
                "				END) AS uom,  \n" +
                "			cpd.shipQty AS qty,  \n" +
                "			IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "			IFNULL(cpd.extendedPrice,0) AS extPrice,  \n" +
                "			CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "					','<br/>'), ''),'<br/>',  \n" +
                "			IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "			IFNULL(CONCAT(', ',  \n" +
                "					fun_getCertificationByPartID(cpd.partid)),  \n" +
                "				''),  \n" +
                "			IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "			IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',  \n" +
                "			IFNULL(REPLACE(cpd.shippingNotes,'  \n" +
                "			','<br/>'),'')) AS DESCRIPTION  \n" +
                "  \n" +
                "		FROM  customer_packingslip_det cpd  \n" +
                "			LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "		WHERE  \n" +
                "		cpd.isDeleted = 0  \n" +
                "		AND cpd.refCustPackingSlipID = cpID  \n" +
                "		ORDER BY reflineID ASC;  \n" +
                "  \n" +
                "	# Credit Memo Total charges details which we will use at the end of report  \n" +
                "    SELECT IFNULL(SUM(paymentAmount),0)  INTO @totalCMRefundedAmt  \n" +
                "		FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cpID  AND isDeleted = 0 AND isPaymentVoided = 0;  \n" +
                "	SELECT fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.extendedPrice),0) AS totalLinePrice,  \n" +
                "        IFNULL(@totalCMRefundedAmt,0) AS totalCMRefundedAmt,  \n" +
                "        IFNULL(@totalRecvAmt,0) AS totalRecvAmt  \n" +
                "	FROM customer_packingslip_det cpd  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND cpd.isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-10-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(  \n" +
                "	IN pid INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,  \n" +
                "		sm.soDate,  \n" +
                "		sm.status,  \n" +
                "		sm.serialNumber,  \n" +
                "		sm.shippingComment,  \n" +
                "		mfg.mfgName AS customer,  \n" +
                "		gctsm.gencCategoryName AS shippingMethod,  \n" +
                "		gctpm.gencCategoryName AS paymentMethod,  \n" +
                "		-- get intermediate shipment address  \n" +
                "		CASE  \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),  \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0  \n" +
                "	) END AS intermediateShippingAddress,  \n" +
                "  \n" +
                "        -- get shipping detils of customer  \n" +
                "        CASE  \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),  \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "	) END AS shippingAddress,  \n" +
                "	-- get billing Address  \n" +
                "	CASE  \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,  \n" +
                "    '1.00' docNumber  \n" +
                "  \n" +
                "	FROM salesordermst sm  \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId  \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo  \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT  \n" +
                "    sd.lineID,  \n" +
                "    c.PIDCode,  \n" +
                "    sd.id AS sDetID,  \n" +
                "    (CONCAT(CASE  \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN  \n" +
                "        ELSE c.custAssyPN  \n" +
                "    END)) mfgPN,  \n" +
                "    c.rev revision,  \n" +
                "    CONCAT(IFNULL(replace(sd.partDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(sd.partID)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,  \n" +
                "    sd.qty,  \n" +
                "    sd.price,  \n" +
                "    sd.qty * sd.price AS extPrice,  \n" +
                "    sd.materialTentitiveDocDate,  \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,  \n" +
                "    CASE  \n" +
                "        WHEN sd.partCategory = 2 THEN NULL  \n" +
                "        ELSE sd.shippingQty  \n" +
                "    END shippingQty,  \n" +
                "    ro.rohsIcon AS rohsIcon,  \n" +
                "    ro.name AS rohsStatus,  \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,  \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,  \n" +
                "    su.emailAddress,  \n" +
                "    sd.custPOLineNumber,  \n" +
                "    CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END quoteNumber,  \n" +
                "    sd.remark,  \n" +
                "    emp.phExtension,  \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser  \n" +
                "FROM  \n" +
                "    salesorderdet sd  \n" +
                "        JOIN  \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id  \n" +
                "        AND sm.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id  \n" +
                "        AND ro.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    users su ON su.id = sm.updatedBy  \n" +
                "        LEFT JOIN  \n" +
                "    employees emp ON emp.id = su.employeeID  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = sd.partID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)  \n" +
                "        AND sm.id = pid  \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;  \n" +
                "  \n" +
                "	# get salesorder level total details  \n" +
                "    SELECT  \n" +
                "		IFNULL(SUM(sd.qty * sd.price),0) totalLinePrice,  \n" +
                "        IFNULL(SUM(IF(c.partType = 4,(sd.qty * sd.price), 0)),0) AS totalSOMiscPrice,  \n" +
                "        IFNULL(SUM(sod.totalLineMiscPrice),0) AS totalLineMiscPrice  \n" +
                "    FROM salesorderdet sd  \n" +
                "    LEFT JOIN (SELECT refSalesOrderDetID, SUM(sod.qty * sod.price) AS totalLineMiscPrice  \n" +
                "					FROM salesorder_otherexpense_details sod WHERE sod.isdeleted = 0  \n" +
                "			GROUP BY sod.refSalesOrderDetID) sod ON sod.refSalesOrderDetID = sd.id  \n" +
                "	INNER JOIN COMPONENT c ON c.id = sd.partId AND c.isDeleted = 0  \n" +
                "	WHERE sd.refsalesorderID=pid  AND sd.isdeleted =0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-10-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5444,'2.00','V1','Bug 38079: QA Testing Bugs for User Story 37433: UMID Creation screen changes change related to customer consigned/CPN parts UMID creation - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5444:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-10-2021 *********************************** */
            "select gencCategoryID into @category from genericcategory where gencCategoryName = 'Receiving' and categoryType = 'Report Category';  \n" +
            "INSERT INTO `reportmaster`  \n" +
            "(`reportName`,`rdlcReportFileName`,`reportTitle`,`createdAt`,`createdBy`,`createByRoleId`,  \n" +
            "`fileName`,`status`,`entityId`,`reportGenerationType`,`reportCategoryId`,`isDefaultReport`)  \n" +
            "VALUES  \n" +
            "('Material Receipt Inspection Requirements - V1','Material Receipt Inspection Requirements','Material Receipt Inspection Requirements',fun_DatetimetoUTCDateTime(),'1',1,  \n" +
            "'MarerialReceiptInspReq','P',-14,4,@category,1);  \n" +
            "INSERT INTO `fixed_entity_dataelement`  \n" +
            "(`tableName`, `displayColumnPKField`, `displayColumnField`, `createdAt`, `updatedAt`, `createdBy`, `isDeleted`, `filter`, `displayEntityName`,displayFormattedColumnField)  \n" +
            "VALUES  \n" +
            "('packing_slip_material_receive', 'id', 'packingSlipNumber', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', 'receiptType = \"P\"', 'Supplier Packing Slip','{\"displayFormat\": \"packingSlipNumber\",\"searchColmns\": [\"packingSlipNumber\"],\"sortBy\": [],\"alias\": \"\"}');  \n" +
            "select id into @datasourceid from `fixed_entity_dataelement` where displayEntityName = 'Supplier Packing Slip';  \n" +
            "INSERT INTO report_parameter_setting_mapping (`reportParamName`,`dbColumnName`,`displayName`,`type`,`dataSourceId`,`isDeleted`,`createdAt`,`createdBy`, `createByRoleId`)  \n" +
            "VALUES (\"Para_SupplierPackingSlipId\",\"supplierPackingSlipId\",\"Packing Slip\",\"A\",@datasourceid, 0,UTC_DATE(), 1, 1);  \n" +
            "INSERT INTO report_parameter_setting_mapping (`reportParamName`,`dbColumnName`,`displayName`,`type`,`isDeleted`,`createdAt`,`createdBy`, `createByRoleId`)  \n" +
            "VALUES (\"Para_PackingSlipLineNo\",\"packingSlipSerialNumber\",\"Packing Slip Line#\",\"TB\", 0,UTC_DATE(), 1, 1);  \n" +
            "select id INTO @reportId FROM reportmaster WHERE fileName = 'MarerialReceiptInspReq';  \n" +
            "select id INTO @parameterId1 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_SupplierPackingSlipId';  \n" +
            "select id INTO @parameterId2 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_PackingSlipLineNo';  \n" +
            "select id INTO @parameterId3 FROM report_parameter_setting_mapping WHERE reportParamName = 'Para_PartID';  \n" +
            "INSERT INTO `reportmasterparameter`  \n" +
            "(`reportId`,`parmeterMappingid`,`isRequired`,`createdBy`,`createByRoleId`,`createdAt`)  \n" +
            "VALUES  \n" +
            "(@reportId,@parameterId1,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
            "(@reportId,@parameterId2,1,'1',1,fun_DatetimetoUTCDateTime()),  \n" +
            "(@reportId,@parameterId3,1,'1',1,fun_DatetimetoUTCDateTime());  \n" +
            "INSERT INTO genericcategory(gencCategoryName, categoryType, isActive, createdBy, updatedBy, systemGenerated, createByRoleId, updateByRoleId)  \n" +
            "VALUES('Inspection Requirement Report', 'Document Type', 1, 1, 1, 1, 1, 1);  \n" +
            /* **************************** Add Script Version -> 28-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5445,'2.00','V1','User Story 37738: Create Part Requirement Accepted status into PDF - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5445:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-10-2021 *********************************** */
            "drop procedure if exists `Sproc_GetMaretialReceiptInspRequirmentDetail`;  \n" +
            "CREATE PROCEDURE `Sproc_GetMaretialReceiptInspRequirmentDetail`(  \n" +
            "	IN pPackingSlipId INT,  \n" +
            "    IN pLineNo INT,  \n" +
            "    IN pPartId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "		# Material Receipt line level inspection requirment  \n" +
            "		select rank() over(order by a.id desc) srNo, a.instruction,  \n" +
            "				case when a.inspectionStatus = 'P' then  \n" +
            "						'Pending'  \n" +
            "				when a.inspectionStatus = 'A' then  \n" +
            "						'Accepted'  \n" +
            "				when a.inspectionStatus = 'AD' then  \n" +
            "						'Accepted with Deviation'  \n" +
            "				when a.inspectionStatus = 'R' then  \n" +
            "						'Rejected'  \n" +
            "				end inspectionStatusText,  \n" +
            "				a.remark  \n" +
            "		  from packing_slip_material_receive_part_inspection_det a  \n" +
            "		 where a.requiementType = 'R'  \n" +
            "		   and exists (select 1 from packing_slip_material_receive_det b where b.id = a.lineId and b.packingSlipSerialNumber = pLineNo and b.isDeleted = 0)  \n" +
            "		   and a.partId = pPartId  \n" +
            "		 order by id desc;  \n" +
            "END;  \n" +
            "drop procedure if exists `Sproc_GetMaretialReceiptInspRequirmentHeader`;  \n" +
            "CREATE PROCEDURE `Sproc_GetMaretialReceiptInspRequirmentHeader`(  \n" +
            "	IN pPackingSlipId INT,  \n" +
            "    IN pLineNo INT,  \n" +
            "    IN pPartId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
            "  \n" +
            "		#Get Header data for report  \n" +
            "		select fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullSupplierName,  \n" +
            "				p.packingSlipNumber, p.packingSlipDate, p.poNumber, p.poDate,  \n" +
            "				co.mfgPN,  \n" +
            "				fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, v_mfgNameFormat) fullMfgName  \n" +
            "		  from packing_slip_material_receive p  \n" +
            "		  join packing_slip_material_receive_det d ON d.refPackingSlipMaterialRecID = p.id  \n" +
            "		  join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "		  join component co ON co.id = d.partID  \n" +
            "		  join mfgcodemst mfg ON mfg.id = co.mfgCodeID  \n" +
            "		 where p.receiptType = 'P'  \n" +
            "           and p.id = pPackingSlipId /*packing slip id*/  \n" +
            "		   and d.packingSlipSerialNumber = pLineNo  \n" +
            "		   and p.isDeleted = 0  \n" +
            "		   and d.isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5446,'2.00','V1','User Story 37738: Create Part Requirement Accepted status into PDF - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5446:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-10-2021 *********************************** */
            // "GRANT EXECUTE ON PROCEDURE `Sproc_GetMaretialReceiptInspRequirmentDetail` TO `ReportViewer`@`%`;  \n" +
            // "GRANT EXECUTE ON PROCEDURE `Sproc_GetMaretialReceiptInspRequirmentHeader` TO `ReportViewer`@`%`;  \n" +
            /* **************************** Add Script Version -> 28-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5447,'2.00','V1','User Story 37738: Create Part Requirement Accepted status into PDF - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5447:
             allDbChangesArray.push(
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
             "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
             "	IN pIsLockTransaction TINYINT,  \n" +
             "	IN pCustInvCMList JSON,  \n" +
             "	IN pTransType VARCHAR(10),  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
             "	IN pUserID INT,  \n" +
             "	IN pUserRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE v_oldLockStatusInvCM INT;  \n" +
             "	DECLARE v_newLockStatusInvCM INT;  \n" +
             "	DECLARE v_newLockedAt DATETIME;  \n" +
             "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
             "	DECLARE v_newLockedByRoleId INT;  \n" +
             "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
             "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
             "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
             "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
             "	DECLARE mlc INT DEFAULT 0;  \n" +
             "	DECLARE totCustInvCM INT;  \n" +
             "	DECLARE i INT DEFAULT 0;  \n" +
             "	DECLARE totRefundPMTMasterIDs INT;  \n" +
             "	DECLARE v_cntOfUnLockCM INT;  \n" +
             "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
             "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
             "  \n" +
             "	SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
             "	SET v_cntOfAlreadyLockedUnlockedInvCM  = 0;  \n" +
             "	SET v_cntOfAlreadyVoidedPMT = 0;  \n" +
             "	SET v_cntOfAlreadyLockedUnlockedPMT = 0;  \n" +
             "  \n" +
             "  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
             "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
             "		tblMstID INT NOT NULL,  \n" +
             "		invCMPMTNumber VARCHAR(150),  \n" +
             "		invCMPMTDate DATE,  \n" +
             "		entityShortCode VARCHAR(10),  \n" +
             "		entityNameForChange VARCHAR(150)  \n" +
             "	);  \n" +
             "  \n" +
             "  \n" +
             "	 /* RL - Ready to lock, LC - locked */  \n" +
             "	IF (pIsLockTransaction = 1) THEN  \n" +
             "		/* lock transaction action */  \n" +
             "		SET v_oldLockStatusPMT = NULL;  \n" +
             "		SET v_newLockStatusPMT = 'LC';  \n" +
             "		SET v_oldLockStatusInvCM = 0;  \n" +
             "		SET v_newLockStatusInvCM = 1;  \n" +
             "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
             "		SET v_newLockedBy = pUserID;  \n" +
             "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
             "  \n" +
             "	ELSE  \n" +
             "		/* unlock transaction action */  \n" +
             "		SET v_oldLockStatusPMT = 'LC';  \n" +
             "		SET v_newLockStatusPMT = NULL;  \n" +
             "		SET v_oldLockStatusInvCM = 1;  \n" +
             "		SET v_newLockStatusInvCM = 0;  \n" +
             "		SET v_newLockedAt = NULL;  \n" +
             "		SET v_newLockedBy = NULL;  \n" +
             "		SET v_newLockedByRoleId = NULL;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
             "	SELECT 	*  \n" +
             "	FROM 	JSON_TABLE(  \n" +
             "		pCustInvCMList,  \n" +
             "			\"$[*]\" COLUMNS(  \n" +
             "				`invCMMstID` INT PATH \"$.invCMMstID\" ,  \n" +
             "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
             "			)  \n" +
             "		) AS CustInvCMList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pTransType IN ('C','I')) THEN  \n" +
             "  \n" +
             "		/* check if any locked/unlocked invoice/CM there */  \n" +
             "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
             "		FROM customer_packingslip  \n" +
             "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "		AND isLocked = v_newLockStatusInvCM  \n" +
             "		AND transType = pTransType  \n" +
             "		AND isDeleted = 0 ;  \n" +
             "  \n" +
             "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
             "  \n" +
             "		/* check if any voided payment there */  \n" +
             "		SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
             "		AND isPaymentVoided = 1  \n" +
             "		AND isDeleted = 0 ;  \n" +
             "  \n" +
             "		/* check if any locked/unlocked payment there */  \n" +
             "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
             "		AND lockStatus = v_newLockStatusPMT  \n" +
             "		AND isDeleted = 0 ;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/*IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  */  \n" +
             "		IF (pIsLockTransaction = 1) THEN  \n" +
             "			/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
             "				RE-Fully Received/Full Credit Applied , NP-No Pending Credit */  \n" +
             "			SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
             "			FROM customer_packingslip  \n" +
             "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "			AND paymentStatus NOT IN ('RE','NP')  \n" +
             "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
             "			AND isDeleted = 0 ;  \n" +
             "  \n" +
             "		ELSE  \n" +
             "			SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
             "		END IF;  \n" +
             "	/*END IF;  */  \n" +
             "  \n" +
             "  \n" +
             "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0  \n" +
             "		AND v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
             "  \n" +
             "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "			/* get all invoice/CM transaction to locked/unlocked */  \n" +
             "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "			SELECT id,  \n" +
             "				(CASE WHEN pTransType = 'I' THEN invoiceNumber  \n" +
             "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoNumber ELSE NULL END) AS invCMPMTNumber,  \n" +
             "				(CASE WHEN pTransType = 'I' THEN invoiceDate  \n" +
             "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoDate ELSE NULL END) AS invCMPMTDate,  \n" +
             "				(CASE WHEN pTransType = 'I' THEN 'I'  \n" +
             "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'C' ELSE NULL END) AS entityShortCode,  \n" +
             "				(CASE WHEN pTransType = 'I' THEN 'Customer Invoice'  \n" +
             "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'Customer Credit Memo' ELSE NULL END) AS entityNameForChange  \n" +
             "			FROM customer_packingslip  \n" +
             "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
             "			AND isLocked = v_oldLockStatusInvCM  \n" +
             "			AND paymentStatus IN ('RE','NP')  \n" +
             "			AND isDeleted = 0  \n" +
             "			;  \n" +
             "		ELSE  \n" +
             "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
             "			UPDATE customer_packingslip  \n" +
             "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
             "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
             "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "			    updatedBy = v_newLockedBy  \n" +
             "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
             "			AND isLocked = v_oldLockStatusInvCM  \n" +
             "			AND paymentStatus IN ('RE','NP')  \n" +
             "			AND isDeleted = 0  \n" +
             "			;  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
             "  \n" +
             "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "				/* get all applied CM transaction to locked/unlocked */  \n" +
             "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "				SELECT refCustCreditMemoID, paymentNumber, NULL, 'CA', 'Applied Customer Credit Memo'  \n" +
             "				FROM packingslip_invoice_payment  \n" +
             "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "				AND refPaymentMode = 'CA'  \n" +
             "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "				;  \n" +
             "			ELSE  \n" +
             "				/* update all applied CM transaction to locked/unlocked */  \n" +
             "				UPDATE packingslip_invoice_payment  \n" +
             "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
             "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
             "				    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "				    updatedBy = v_newLockedBy  \n" +
             "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
             "				AND refPaymentMode = 'CA'  \n" +
             "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "				;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "  \n" +
             "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
             "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
             "			SET mlc=0;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
             "			WHILE mlc < totCustInvCM DO  \n" +
             "  \n" +
             "				/* get refund payment master ids from selected payment */  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
             "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
             "					SELECT pipd.refPayementid  \n" +
             "					FROM packingslip_invoice_payment_det pipd  \n" +
             "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
             "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
             "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
             "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
             "					GROUP BY pipd.refPayementid ;  \n" +
             "  \n" +
             "  \n" +
             "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
             "  \n" +
             "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
             "  \n" +
             "					SET i=0;  \n" +
             "  \n" +
             "					/* first inner loop of refund payment master list */  \n" +
             "					WHILE i < totRefundPMTMasterIDs DO  \n" +
             "  \n" +
             "						SET v_cntOfUnLockCM = NULL;  \n" +
             "  \n" +
             "						IF (pIsLockTransaction = 1) THEN  \n" +
             "							/* check all credit memo contain in refund transaction that all locked or not  \n" +
             "							  when view only that time no need to check current CM locked or not  \n" +
             "							  as we do actual lock above when doing lock only not while view only */  \n" +
             "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
             "							FROM customer_packingslip  \n" +
             "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
             "									FROM packingslip_invoice_payment_det  \n" +
             "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "									AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
             "											THEN refRefundCustCreditMemoID != (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
             "										ELSE 1=1 END)  \n" +
             "									)  \n" +
             "							AND isLocked != 1 ;  \n" +
             "  \n" +
             "						ELSE  \n" +
             "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
             "							SET v_cntOfUnLockCM = 0;  \n" +
             "						END IF;  \n" +
             "  \n" +
             "  \n" +
             "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
             "  \n" +
             "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "  \n" +
             "								/* get to be lock refund transaction */  \n" +
             "								INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "								SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
             "								FROM packingslip_invoice_payment  \n" +
             "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "								AND refPaymentMode = 'CR'  \n" +
             "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								;  \n" +
             "  \n" +
             "							ELSE  \n" +
             "								/* update refund transaction to locked */  \n" +
             "								UPDATE packingslip_invoice_payment  \n" +
             "								SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
             "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
             "								    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "								     updatedBy = v_newLockedBy  \n" +
             "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "								AND refPaymentMode = 'CR'  \n" +
             "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								;  \n" +
             "							END IF;  \n" +
             "						END IF;  \n" +
             "  \n" +
             "						SET i = i + 1;  \n" +
             "					END WHILE;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "					/* get to be lock all invoice which contain in applied CM with fully received */  \n" +
             "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
             "					FROM customer_packingslip cps  \n" +
             "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
             "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
             "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
             "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "										   )  \n" +
             "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "					WHERE cps.paymentStatus = 'RE'  \n" +
             "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
             "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
             "					AND cps.isDeleted = 0  \n" +
             "					;  \n" +
             "				ELSE  \n" +
             "					/* lock all invoice which contain in applied CM with fully received */  \n" +
             "					UPDATE customer_packingslip cps  \n" +
             "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
             "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
             "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
             "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "										   )  \n" +
             "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "					SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
             "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
             "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "					    cps.updatedBy = v_newLockedBy  \n" +
             "					WHERE cps.paymentStatus = 'RE'  \n" +
             "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
             "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
             "					AND cps.isDeleted = 0  \n" +
             "					;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "				SET mlc = mlc + 1;  \n" +
             "			END WHILE;  \n" +
             "  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[0] - store procedure status */  \n" +
             "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0)  \n" +
             "		OR (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
             "		SELECT 0 AS 'spStatus' ;  \n" +
             "	ELSE  \n" +
             "		SELECT 1 AS 'spStatus' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[1] - is any CM which not fully used */  \n" +
             "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
             "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[2] - is Inv/CM Already locked */  \n" +
             "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
             "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[3] - is Payment Already Voided - applied CM */  \n" +
             "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
             "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[4] - is Payment Already locked - applied CM */  \n" +
             "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
             "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[5] - view to be lock/unlock record list */  \n" +
             "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
             "  \n" +
             "	END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
             "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
             "	IN pIsLockTransaction TINYINT,  \n" +
             "	IN pCustInvoicePaymentList JSON,  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
             "	IN pUserID INT,  \n" +
             "	IN pUserRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
             "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
             "	DECLARE totRefundPMTMasterIDs INT;  \n" +
             "	DECLARE mlc INT DEFAULT 0;  \n" +
             "	DECLARE totCustInvPayments INT;  \n" +
             "	DECLARE i INT DEFAULT 0;  \n" +
             "	DECLARE v_cntOfUnLockPMT INT;  \n" +
             "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
             "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
             "	DECLARE v_oldLockStatusInv INT;  \n" +
             "	DECLARE v_newLockStatusInv INT;  \n" +
             "	DECLARE v_newLockedAt DATETIME;  \n" +
             "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
             "	DECLARE v_newLockedByRoleId INT;  \n" +
             "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
             "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
             "  \n" +
             "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
             "  \n" +
             "  \n" +
             "	 /* RL - Ready to lock, LC - locked */  \n" +
             "	IF (pIsLockTransaction = 1) THEN  \n" +
             "		/* lock transaction action */  \n" +
             "		IF (pRefPaymentMode = 'R') THEN  \n" +
             "			SET v_oldLockStatusPMT = 'RL';  \n" +
             "		ELSE  \n" +
             "			SET v_oldLockStatusPMT = NULL;  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		SET v_newLockStatusPMT = 'LC';  \n" +
             "		SET v_oldLockStatusInv = 0;  \n" +
             "		SET v_newLockStatusInv = 1;  \n" +
             "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
             "		SET v_newLockedBy = pUserID;  \n" +
             "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
             "  \n" +
             "	ELSE  \n" +
             "		/* unlock transaction action */  \n" +
             "		SET v_oldLockStatusPMT = 'LC';  \n" +
             "  \n" +
             "		IF (pRefPaymentMode = 'R') THEN  \n" +
             "			SET v_newLockStatusPMT = 'RL';  \n" +
             "		ELSE  \n" +
             "			SET v_newLockStatusPMT = NULL;  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		SET v_oldLockStatusInv = 1;  \n" +
             "		SET v_newLockStatusInv = 0;  \n" +
             "		SET v_newLockedAt = NULL;  \n" +
             "		SET v_newLockedBy = NULL;  \n" +
             "		SET v_newLockedByRoleId = NULL;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* temporary table for display to be lock/unlock records */  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
             "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
             "		tblMstID INT NOT NULL,  \n" +
             "		invCMPMTNumber VARCHAR(150),  \n" +
             "		invCMPMTDate DATE,  \n" +
             "		entityShortCode VARCHAR(10),  \n" +
             "		entityNameForChange VARCHAR(150)  \n" +
             "	);  \n" +
             "  \n" +
             "	/* get/map all Customer invoice Payment List send from UI */  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
             "	SELECT 	*  \n" +
             "	FROM 	JSON_TABLE(  \n" +
             "		pCustInvoicePaymentList,  \n" +
             "			\"$[*]\" COLUMNS(  \n" +
             "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
             "			)  \n" +
             "		) AS CustInvoicePaymentList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "	/* check if any voided payment there */  \n" +
             "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
             "	FROM packingslip_invoice_payment  \n" +
             "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
             "	AND isPaymentVoided = 1  \n" +
             "	AND isDeleted = 0 ;  \n" +
             "  \n" +
             "	/* check if any locked/unlocked payment there */  \n" +
             "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
             "	FROM packingslip_invoice_payment  \n" +
             "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
             "	AND lockStatus = v_newLockStatusPMT  \n" +
             "	AND isDeleted = 0 ;  \n" +
             "  \n" +
             "	/* when customer refund then check all records valid or not - to display list */  \n" +
             "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
             "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
             "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
             "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
             "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
             "				    ELSE NULL END) detItemCount,  \n" +
             "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
             "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
             "					WHEN refGencTransModeID = -9 THEN  \n" +
             "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
             "					ELSE NULL END) detItemNotLockedCount  \n" +
             "			FROM packingslip_invoice_payment pip  \n" +
             "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
             "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
             "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
             "			 GROUP BY pip.id , pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
             "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
             "			;  \n" +
             "  \n" +
             "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
             "			FROM tt_CustRefundValidatedList  \n" +
             "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
             "			;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
             "  \n" +
             "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "			/* get list of all payments transaction to be locked/unlocked - selected from UI */  \n" +
             "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "			SELECT id, paymentNumber, paymentDate, pRefPaymentMode,  \n" +
             "				(CASE WHEN pRefPaymentMode = 'R' THEN  'Customer Payment' WHEN pRefPaymentMode = 'WOFF' THEN 'Customer Write Off'  \n" +
             "					WHEN pRefPaymentMode = 'CR' THEN 'Customer Refund' END) AS entityNameForChange  \n" +
             "			FROM packingslip_invoice_payment  \n" +
             "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
             "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
             "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "			;  \n" +
             "		ELSE  \n" +
             "			/* update all payments transaction to locked/unlocked - selected from UI */  \n" +
             "			UPDATE packingslip_invoice_payment  \n" +
             "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
             "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
             "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "			    updatedBy = v_newLockedBy  \n" +
             "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
             "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
             "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
             "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "			;  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "		IF (pRefPaymentMode = 'R') THEN  \n" +
             "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
             "			SET mlc=0;  \n" +
             "  \n" +
             "			WHILE mlc < totCustInvPayments DO  \n" +
             "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "					/* get all payment dependent write off if any */  \n" +
             "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "					SELECT refPaymentID, paymentNumber, paymentDate, 'WOFF', 'Customer Write Off'  \n" +
             "					FROM packingslip_invoice_payment  \n" +
             "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "					AND refPaymentMode = 'WOFF'  \n" +
             "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
             "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "					;  \n" +
             "  \n" +
             "				ELSE  \n" +
             "					/* update all payment dependent write off if any. we are maintaining lockStatus NA,RL for payment only  \n" +
             "					 not for write off, refund, applied CM so condition accordingly */  \n" +
             "					UPDATE packingslip_invoice_payment  \n" +
             "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
             "							 , lockedAt = v_newLockedAt ,  \n" +
             "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
             "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "					    updatedBy = v_newLockedBy  \n" +
             "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "					AND refPaymentMode = 'WOFF'  \n" +
             "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
             "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "					;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "				SET mlc = mlc + 1;  \n" +
             "			END WHILE;  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
             "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
             "			    OR direct customer refund Lock/Unlock case */  \n" +
             "  \n" +
             "			IF (pRefPaymentMode = 'R') THEN  \n" +
             "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
             "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
             "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
             "					so set 1 as default to start outer loop*/  \n" +
             "				SELECT 1 INTO totCustInvPayments ;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "  \n" +
             "			SET mlc=0;  \n" +
             "  \n" +
             "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
             "			WHILE mlc < totCustInvPayments DO  \n" +
             "  \n" +
             "				/* get refund payment master ids from selected payment */  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
             "				IF (pRefPaymentMode = 'R') THEN  \n" +
             "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
             "						SELECT pipd.refPayementid  \n" +
             "						FROM packingslip_invoice_payment_det pipd  \n" +
             "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
             "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
             "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
             "						GROUP BY pipd.refPayementid ;  \n" +
             "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
             "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
             "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
             "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
             "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
             "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
             "  \n" +
             "						;  \n" +
             "  \n" +
             "				END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
             "  \n" +
             "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
             "  \n" +
             "					SET i=0;  \n" +
             "  \n" +
             "					/* first inner loop of refund payment master list */  \n" +
             "					WHILE i < totRefundPMTMasterIDs DO  \n" +
             "  \n" +
             "						SET v_cntOfUnLockPMT = NULL;  \n" +
             "  \n" +
             "						IF (pIsLockTransaction = 1) THEN  \n" +
             "  \n" +
             "							IF (pRefPaymentMode = 'CR') THEN  \n" +
             "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
             "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
             "							END IF;  \n" +
             "  \n" +
             "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
             "								/* check all payments contain in refund transaction that all locked or not */  \n" +
             "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
             "								FROM packingslip_invoice_payment  \n" +
             "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
             "										FROM packingslip_invoice_payment_det  \n" +
             "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "										AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
             "											THEN refRefundPaymentID != (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "											ELSE 1=1 END)  \n" +
             "										)  \n" +
             "								AND lockStatus != 'LC' ;  \n" +
             "  \n" +
             "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
             "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
             "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
             "								FROM customer_packingslip  \n" +
             "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
             "										FROM packingslip_invoice_payment_det  \n" +
             "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "										)  \n" +
             "								AND isLocked != 1 ;  \n" +
             "							ELSE  \n" +
             "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
             "								SET v_cntOfUnLockPMT = 0;  \n" +
             "							END IF;  \n" +
             "  \n" +
             "						ELSE  \n" +
             "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
             "							SET v_cntOfUnLockPMT = 0;  \n" +
             "						END IF;  \n" +
             "  \n" +
             "  \n" +
             "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
             "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "								/* for lock payment case need to display refund records too */  \n" +
             "								IF (pRefPaymentMode = 'R') THEN  \n" +
             "									/* get refund transaction to be lock/unlock */  \n" +
             "									INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "									SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
             "									FROM packingslip_invoice_payment  \n" +
             "									WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "									AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
             "										ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "									AND refPaymentMode = 'CR'  \n" +
             "									AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
             "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "									;  \n" +
             "								END IF;  \n" +
             "							ELSE  \n" +
             "								/* update refund transaction to locked/unlocked */  \n" +
             "								UPDATE packingslip_invoice_payment  \n" +
             "								SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
             "								  lockedAt = v_newLockedAt ,  \n" +
             "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
             "								    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "								     updatedBy = v_newLockedBy  \n" +
             "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
             "								AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
             "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
             "								AND refPaymentMode = 'CR'  \n" +
             "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								;  \n" +
             "							END IF;  \n" +
             "						END IF;  \n" +
             "  \n" +
             "						SET i = i + 1;  \n" +
             "					END WHILE;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "				SET mlc = mlc + 1;  \n" +
             "			END WHILE;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
             "			/* update all fully payment received invoice to locked status */  \n" +
             "  \n" +
             "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
             "			SET mlc=0;  \n" +
             "  \n" +
             "			WHILE mlc < totCustInvPayments DO  \n" +
             "  \n" +
             "				/* IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 0)) THEN  */  \n" +
             "  \n" +
             "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
             "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
             "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
             "					FROM customer_packingslip cps  \n" +
             "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
             "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "					WHERE cps.paymentStatus = 'RE'  \n" +
             "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
             "					AND cps.isLocked = v_oldLockStatusInv  \n" +
             "					AND cps.isDeleted = 0  \n" +
             "					;  \n" +
             "				ELSE  \n" +
             "					UPDATE customer_packingslip cps  \n" +
             "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
             "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
             "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
             "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "					    cps.updatedBy = v_newLockedBy  \n" +
             "					WHERE cps.paymentStatus = 'RE'  \n" +
             "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
             "					AND cps.isLocked = v_oldLockStatusInv  \n" +
             "					AND cps.isDeleted = 0  \n" +
             "					;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "				/* ELSEIF (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 1) THEN  \n" +
             "					UPDATE customer_packingslip cps  \n" +
             "						 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
             "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
             "							FROM (  \n" +
             "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
             "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
             "								FROM packingslip_invoice_payment_det pipd  \n" +
             "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
             "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
             "														FROM packingslip_invoice_payment_det  \n" +
             "														WHERE refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
             "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "														)  \n" +
             "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "								) AS tiila  \n" +
             "							 GROUP BY refCustPackingslipInvoiceID  \n" +
             "							) AS toila  \n" +
             "							ON cps.id = toila.refCustPackingslipInvoiceID AND toila.isInvLockAllowed = 1  \n" +
             "  \n" +
             "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
             "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
             "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
             "					    cps.updatedBy = v_newLockedBy  \n" +
             "					WHERE cps.paymentStatus = 'RE'  \n" +
             "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
             "					AND cps.isLocked = v_oldLockStatusInv  \n" +
             "					AND cps.isDeleted = 0  \n" +
             "					;  \n" +
             "  \n" +
             "				END IF;  */  \n" +
             "  \n" +
             "  \n" +
             "				SET mlc = mlc + 1;  \n" +
             "			END WHILE;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
             "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[0] - store procedure status */  \n" +
             "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0)  \n" +
             "		OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
             "		SELECT 0 AS 'spStatus' ;  \n" +
             "	ELSE  \n" +
             "		SELECT 1 AS 'spStatus' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[1] - is Payment Already Voided */  \n" +
             "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
             "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[2] - is Payment Already locked */  \n" +
             "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
             "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
             "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
             "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
             "	 ELSE  \n" +
             "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
             "	 END IF;  \n" +
             "  \n" +
             "	 /* resp[4] - get all validateed refund record list */  \n" +
             "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
             "  \n" +
             "	 /* Resp[5] - view to be lock/unlock record list */  \n" +
             "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
             "  \n" +
             "  \n" +
             "	END;  \n" +
            /* **************************** New Script -> 28-10-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
            "	IN pCustCreditMemoMstID INT ,  \n" +
            "	IN pCustomerPaymentMstID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "		DECLARE v_TimeZone VARCHAR(50);  \n" +
            "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
            "			cps.totalAmount ,  cps.agreedRefundAmt , cps.isLocked ,  \n" +
            "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
            "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
            "			psip.paymentNumber , psip.lockStatus,  \n" +
            "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
            "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) AS lockedAt,  \n" +
            "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
            "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
            "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
            "			cps.paymentStatus AS CMPaymentStatus,  \n" +
            "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
            "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
            "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
            "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
            "	FROM customer_packingslip AS cps  \n" +
            "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
            "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
            "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
            "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
            "	WHERE cps.id = pCustCreditMemoMstID  \n" +
            "	AND cps.isDeleted = 0  \n" +
            "		;  \n" +
            "END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */ 
             "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
             "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(  \n" +
             "	IN pVoidCustPaymentMstID INT,  \n" +
             "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
             "	IN pUserID VARCHAR(50),  \n" +
             "	IN pUserRoleID VARCHAR(50)  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE vRefCustCreditMemoMstID INT;  \n" +
             "	DECLARE vRefGencTransModeID INT;  \n" +
             "  \n" +
             "	IF (pRefPaymentModeOfInvPayment = 'R' OR pRefPaymentModeOfInvPayment = 'CA' OR pRefPaymentModeOfInvPayment = 'WOFF') THEN  \n" +
             "  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "			SELECT refCustPackingslipInvoiceID  \n" +
             "			FROM packingslip_invoice_payment_det  \n" +
             "			WHERE refPayementid = pVoidCustPaymentMstID  \n" +
             "			AND isDeleted = 0 ;  \n" +
             "  \n" +
             "  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS  \n" +
             "			SELECT refCustPackingslipInvoiceID  \n" +
             "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;  \n" +
             "  \n" +
             "		/* change invoice payment status */  \n" +
             "		UPDATE customer_packingslip cps  \n" +
             "			LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "				 FROM packingslip_invoice_payment_det  \n" +
             "				WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "				AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "				GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "			 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "		SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "						cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "						cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "					   ELSE cps.paymentStatus END  \n" +
             "					) ,  \n" +
             "			cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
             "			cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
             "			cps.updatedBy = pUserID,  \n" +
             "			cps.updateByRoleId = pUserRoleID ,  \n" +
             "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "		WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)  \n" +
             "		AND cps.isDeleted = 0	;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* if Applied Credit Memo void then change Credit Memo payment status */  \n" +
             "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN  \n" +
             "  \n" +
             "		SELECT refCustCreditMemoID INTO vRefCustCreditMemoMstID  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE id = pVoidCustPaymentMstID  \n" +
             "		AND isDeleted = 0 ;  \n" +
             "  \n" +
             "		UPDATE customer_packingslip cps  \n" +
             "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
             "					FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refRefundCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
             "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
             "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
             "					FROM packingslip_invoice_payment  \n" +
             "					WHERE refCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
             "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
             "		SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
             "  \n" +
             "					   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
             "					   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
             "								(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
             "  \n" +
             "					   ELSE cps.paymentStatus END  \n" +
             "					) ,  \n" +
             "			cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
             "			cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
             "			cps.updatedBy = pUserID,  \n" +
             "			cps.updateByRoleId = pUserRoleID ,  \n" +
             "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "		WHERE cps.id = vRefCustCreditMemoMstID  \n" +
             "		AND cps.isDeleted = 0	;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* Update payment or credit memo payment status in case of customer refund voided */  \n" +
             "	IF (pRefPaymentModeOfInvPayment = 'CR') THEN  \n" +
             "  \n" +
             "		SELECT refGencTransModeID INTO vRefGencTransModeID  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE id = pVoidCustPaymentMstID ;  \n" +
             "  \n" +
             "		IF (vRefGencTransModeID = -9) THEN  /* Customer Payment Refund */  \n" +
             "			/* update refund payment status  */  \n" +
             "			UPDATE packingslip_invoice_payment psip  \n" +
             "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
             "					FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
             "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
             "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
             "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
             "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
             "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
             "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
             "							END)  \n" +
             "						ELSE 'NA' END) ,  \n" +
             "				lockStatus =  'NA',  \n" +
             "				lockedAt = NULL ,  \n" +
             "				lockedBy = NULL ,  \n" +
             "				lockedByRoleId = NULL ,  \n" +
             "				updatedBy = pUserID,  \n" +
             "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE psip.id IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
             "			AND psip.isPaymentVoided = 0  \n" +
             "			AND psip.isDeleted = 0 ;  \n" +
             "  \n" +
             "		ELSEIF (vRefGencTransModeID = -6) THEN  /* Credit Memo Refund */  \n" +
             "			/* update customer credit memo - payment status and refund status  */  \n" +
             "			UPDATE customer_packingslip cps  \n" +
             "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
             "						FROM packingslip_invoice_payment_det  \n" +
             "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
             "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
             "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
             "				LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
             "						FROM packingslip_invoice_payment  \n" +
             "						WHERE refCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
             "						AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
             "					 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
             "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
             "  \n" +
             "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
             "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'RE'  \n" +
             "  \n" +
             "						   ELSE cps.paymentStatus END  \n" +
             "						) ,  \n" +
             "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
             "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
             "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < totalAmount THEN 'PR'  \n" +
             "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = totalAmount THEN 'FR'  \n" +
             "								END)  \n" +
             "						     ELSE 'NA' END),  \n" +
             "				cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
             "				cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
             "			AND cps.isDeleted = 0	;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
             "  \n" +
             "  \n" +
             "    END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
             "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
             "	IN pCustInvoicePaymentDetList JSON,  \n" +
             "	IN pCustomerPaymentMstID INT,  \n" +
             "	IN pMfgcodeID INT,  \n" +
             "	IN pPaymentNumber VARCHAR(50),  \n" +
             "	IN pPaymentDate DATE,  \n" +
             "	IN pPaymentAmount DECIMAL(18,8),  \n" +
             "	IN pPaymentType INT,  \n" +
             "	IN pAccountReference VARCHAR(50),  \n" +
             "	IN pBankAccountMasID INT,  \n" +
             "	IN pBankAccountNo VARCHAR(50),  \n" +
             "	IN pBankName VARCHAR(255),  \n" +
             "	IN pRemark VARCHAR(1000),  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN pTotSelectedInvOfCust INT,  \n" +
             "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
             "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
             "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
             "	IN pRefCustCreditMemoID INT,  \n" +
             "	IN pisMarkForRefund TINYINT,  \n" +
             "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
             "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
             "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
             "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
             "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
             "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
             "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
             "	IN pRefGencTransModeID INT,  \n" +
             "	IN pWriteOffReason VARCHAR(1000),  \n" +
             "	IN pUserID INT,  \n" +
             "	IN pUserRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "	DECLARE vCountExistsCheckNo INT;  \n" +
             "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
             "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
             "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);  \n" +
             "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
             "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
             "  \n" +
             "	SET vCountExistsCheckNo = 0;  \n" +
             "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
             "  \n" +
             "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
             "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
             "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE refPaymentMode = pRefPaymentMode  \n" +
             "		AND paymentNumber = pPaymentNumber  \n" +
             "		AND mfgcodeID = pMfgcodeID  \n" +
             "		AND id != pCustomerPaymentMstID  \n" +
             "		AND isPaymentVoided = 0  \n" +
             "		AND isdeleted = 0    ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pRefPaymentMode = 'R') THEN  \n" +
             "		/* get total refunded amount till now  */  \n" +
             "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
             "		FROM packingslip_invoice_payment_det  \n" +
             "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
             "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "		;  \n" +
             "  \n" +
             "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
             "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
             "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
             "		END IF;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
             "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
             "  \n" +
             "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
             "		SELECT 	*  \n" +
             "		FROM 	JSON_TABLE(  \n" +
             "			pCustInvoicePaymentDetList,  \n" +
             "				\"$[*]\" COLUMNS(  \n" +
             "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
             "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
             "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
             "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
             "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
             "					-- `newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
             "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
             "				)  \n" +
             "			) AS CustInvoicePaymentDetList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "		/* get all customer invoice > against total payment list > available in data base */  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
             "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
             "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
             "				pipd.id invPaymentDetMstID,  \n" +
             "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
             "					AND isPaymentVoided = 0  \n" +
             "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "			FROM customer_packingslip cps  \n" +
             "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
             "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
             "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
             "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
             "			AND cps.isDeleted = 0  \n" +
             "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
             "		;  \n" +
             "  \n" +
             "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
             "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
             "			SELECT tucipl.*  \n" +
             "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
             "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
             "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
             "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
             "			;  \n" +
             "  \n" +
             "  \n" +
             "		/* get all mis match amount records (compare UI data and db available data)  \n" +
             "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
             "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
             "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
             "			*/  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
             "			SELECT tucipl.* ,  \n" +
             "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
             "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
             "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
             "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
             "			WHERE (  \n" +
             "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
             "				OR  \n" +
             "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
             "				OR  \n" +
             "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
             "				)  \n" +
             "			;  \n" +
             "  \n" +
             "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
             "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
             "			-- SELECT 'update';  \n" +
             "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
             "  \n" +
             "  \n" +
             "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
             "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
             "				SELECT 	*  \n" +
             "				FROM 	JSON_TABLE(  \n" +
             "					pDeleteCustInvPaymentDetList,  \n" +
             "						\"$[*]\" COLUMNS(  \n" +
             "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
             "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
             "						)  \n" +
             "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "					SELECT refCustPackingslipInvoiceID  \n" +
             "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "  \n" +
             "				/* delete those which are unselected(from UI) inv payment det */  \n" +
             "				UPDATE packingslip_invoice_payment_det pipd  \n" +
             "					JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
             "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
             "				SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
             "					pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
             "				AND pipd.isPaymentVoided = 0  \n" +
             "				AND pipd.isDeleted = 0 ;  \n" +
             "  \n" +
             "  \n" +
             "				/* update invoice payment status */  \n" +
             "				UPDATE customer_packingslip cps  \n" +
             "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "						 FROM packingslip_invoice_payment_det  \n" +
             "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
             "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "  \n" +
             "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "  \n" +
             "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "  \n" +
             "							   ELSE cps.paymentStatus END  \n" +
             "							) ,  \n" +
             "					cps.updatedBy = pUserID,  \n" +
             "					cps.updateByRoleId = pUserRoleID ,  \n" +
             "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "				AND cps.isLocked = 0  \n" +
             "				AND cps.isDeleted = 0	;  \n" +
             "  \n" +
             "			END IF;  \n" +
             "  \n" +
             "  \n" +
             "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
             "			UPDATE packingslip_invoice_payment_det pipd  \n" +
             "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate , invoiceMstID  \n" +
             "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
             "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
             "					ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
             "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
             "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
             "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
             "				pipd.updatedBy = pUserID,  \n" +
             "				pipd.updateByRoleId = pUserRoleID ,  \n" +
             "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
             "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
             "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
             "			AND pipd.isPaymentVoided = 0  \n" +
             "			AND pipd.isDeleted = 0  \n" +
             "			;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "			/* insert newly selected inv payment det */  \n" +
             "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
             "				`appliedDate` ,  \n" +
             "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
             "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
             "				appliedDate ,  \n" +
             "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
             "			FROM temp_UI_CustInvoicePaymentDetList tucipdl  \n" +
             "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
             "			WHERE invPaymentDetMstID IS NULL  \n" +
             "			;  \n" +
             "  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "				SELECT invoiceMstID  \n" +
             "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "			/* update invoice payment status */  \n" +
             "			UPDATE customer_packingslip cps  \n" +
             "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "					 FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "  \n" +
             "						   ELSE cps.paymentStatus END  \n" +
             "						) ,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
             "  \n" +
             "			/*UPDATE customer_packingslip cps  \n" +
             "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
             "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
             "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
             "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
             "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  */  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "	ELSE  \n" +
             "  \n" +
             "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
             "  \n" +
             "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
             "			SELECT 	*  \n" +
             "			FROM 	JSON_TABLE(  \n" +
             "				pDeleteCustInvPaymentDetList,  \n" +
             "					\"$[*]\" COLUMNS(  \n" +
             "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
             "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
             "					)  \n" +
             "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "				SELECT refCustPackingslipInvoiceID  \n" +
             "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "  \n" +
             "			/* delete those which are unselected(from UI) inv payment det */  \n" +
             "			UPDATE packingslip_invoice_payment_det pipd  \n" +
             "				JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
             "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
             "			SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
             "				pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
             "			AND pipd.isPaymentVoided = 0  \n" +
             "			AND pipd.isDeleted = 0 ;  \n" +
             "  \n" +
             "  \n" +
             "			/* update invoice payment status */  \n" +
             "			UPDATE customer_packingslip cps  \n" +
             "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "					 FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "  \n" +
             "						   ELSE cps.paymentStatus END  \n" +
             "						) ,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* set up default temp table if not created temp table from above */  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
             "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
             "  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
             "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
             "  \n" +
             "  \n" +
             "	/* common update for all */  \n" +
             "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
             "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
             "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN  \n" +
             "  \n" +
             "		/* update invoice payment master details */  \n" +
             "		UPDATE packingslip_invoice_payment  \n" +
             "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
             "			paymentType = pPaymentType,  \n" +
             "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
             "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
             "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
             "			isMarkForRefund = pisMarkForRefund ,  \n" +
             "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
             "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
             "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
             "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
             "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
             "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
             "							   END)  \n" +
             "						ELSE 'NA' END)  \n" +
             "					ELSE NULL END) ,  \n" +
             "			updatedBy = pUserID,  \n" +
             "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "		WHERE id = pCustomerPaymentMstID  \n" +
             "		AND isPaymentVoided = 0  \n" +
             "		AND isDeleted = 0 ;  \n" +
             "  \n" +
             "  \n" +
             "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
             "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
             "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
             "  \n" +
             "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
             "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
             "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
             "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
             "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
             "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
             "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
             "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
             "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
             "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
             "				NULL, 0, NULL, NULL,  \n" +
             "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
             "  \n" +
             "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
             "  \n" +
             "  \n" +
             "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
             "			SELECT 	*  \n" +
             "			FROM 	JSON_TABLE(  \n" +
             "				pWriteOffCustInvoicePaymentDetList,  \n" +
             "					\"$[*]\" COLUMNS(  \n" +
             "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
             "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
             "					)  \n" +
             "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "			/* packingslip_invoice_payment_det entry for write off */  \n" +
             "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
             "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
             "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
             "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
             "			FROM temp_UI_WriteOffCustInvPaymentDetList tuwocipd  \n" +
             "				JOIN customer_packingslip cps ON tuwocipd.invoiceMstID = cps.id  \n" +
             "						AND cps.isLocked = 0 AND cps.isDeleted = 0;  \n" +
             "  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "				SELECT invoiceMstID  \n" +
             "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "			/* update invoice payment status */  \n" +
             "			UPDATE customer_packingslip cps  \n" +
             "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "					 FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "  \n" +
             "						   ELSE cps.paymentStatus END  \n" +
             "						) ,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
             "  \n" +
             "			/* update main payment amount in case of payment from credit memo  */  \n" +
             "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
             "			FROM packingslip_invoice_payment  \n" +
             "			WHERE id = pCustomerPaymentMstID  \n" +
             "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
             "  \n" +
             "			/* check db main payment and new payment not match then only update */  \n" +
             "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
             "				UPDATE packingslip_invoice_payment  \n" +
             "				SET paymentAmount = pPaymentAmount,  \n" +
             "					updatedBy = pUserID,  \n" +
             "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE id = pCustomerPaymentMstID  \n" +
             "				AND isPaymentVoided = 0  \n" +
             "				AND isDeleted = 0 ;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "			/* update customer credit memo - payment status */  \n" +
             "			IF (pRefPaymentMode = 'CA') THEN  \n" +
             "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
             "				FROM packingslip_invoice_payment_det  \n" +
             "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
             "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
             "  \n" +
             "				UPDATE customer_packingslip  \n" +
             "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
             "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
             "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
             "							   ELSE 'PE' END  \n" +
             "							) ,  \n" +
             "					updatedBy = pUserID,  \n" +
             "					updateByRoleId = pUserRoleID ,  \n" +
             "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE id = pRefCustCreditMemoID  \n" +
             "				AND isLocked = 0 AND isDeleted = 0  \n" +
             "				;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
             "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
             "			UPDATE packingslip_invoice_payment psip  \n" +
             "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
             "						FROM packingslip_invoice_payment_det psipd  \n" +
             "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
             "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
             "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
             "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
             "					ON psip.id = invPayDetTemp.refPayementid  \n" +
             "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
             "						FROM packingslip_invoice_payment_det  \n" +
             "						WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
             "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
             "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
             "  \n" +
             "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
             "								) > 0 THEN 'NA'  \n" +
             "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
             "								) = 0 THEN 'RL'  \n" +
             "						ELSE psip.lockStatus END  \n" +
             "			WHERE psip.id = pCustomerPaymentMstID  \n" +
             "			AND psip.lockStatus != 'LC'  \n" +
             "			AND psip.isPaymentVoided = 0  \n" +
             "			AND psip.isDeleted = 0  \n" +
             "			;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[0] - store procedure status */  \n" +
             "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
             "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
             "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN  \n" +
             "		SELECT 0 AS 'spStatus' ;  \n" +
             "	ELSE  \n" +
             "		SELECT 1 AS 'spStatus' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
             "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
             "  \n" +
             "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
             "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
             "	IF (vCountExistsCheckNo > 0) THEN  \n" +
             "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
             "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
             "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
             "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
             "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
             "	ELSE  \n" +
             "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "  \n" +
             "  \n" +
             "    END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
             "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
             "	IN pSystemId VARCHAR(20),  \n" +
             "	IN pRefVoidPaymentId INT,  \n" +
             "	IN pAccountReference VARCHAR(50),  \n" +
             "	IN pPaymentType INT,  \n" +
             "	IN pPaymentNumber VARCHAR(50),  \n" +
             "	IN pBankAccountMasID INT,  \n" +
             "	IN pBankAccountNo VARCHAR(50),  \n" +
             "	IN pBankName VARCHAR(255),  \n" +
             "	IN pPaymentDate DATE,  \n" +
             "	IN pRemark VARCHAR(255),  \n" +
             "	IN pPayToName VARCHAR(255),  \n" +
             "	IN pPayToAddress VARCHAR(255),  \n" +
             "	IN pVoidPaymentReason VARCHAR(255),  \n" +
             "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
             "	IN pMfgcodeID INT,  \n" +
             "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
             "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
             "	IN pUserID INT,  \n" +
             "	IN pRoleID INT  \n" +
             ")  \n" +
             "BEGIN  \n" +
             "	DECLARE vCount INT;  \n" +
             "	DECLARE vCountExistsCheckNo INT;  \n" +
             "	DECLARE vNewPaymentID INT;  \n" +
             "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
             "	DECLARE vIsAlreadyLockedTrans TINYINT;  \n" +
             "  \n" +
             "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
             "BEGIN  \n" +
             "	ROLLBACK;  \n" +
             "	RESIGNAL;  \n" +
             "END;  \n" +
             "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
             "  BEGIN  \n" +
             "	ROLLBACK;  \n" +
             "	RESIGNAL;  \n" +
             "END;  \n" +
             "  \n" +
             "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
             "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
             "	FROM 	packingslip_invoice_payment  \n" +
             "	WHERE 	id = pRefVoidPaymentId  \n" +
             "	AND isPaymentVoided = 0  \n" +
             "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
             "  \n" +
             "  \n" +
             "	SET vCountExistsCheckNo = 0;  \n" +
             "	SET vIsAlreadyLockedTrans = 0;  \n" +
             "  \n" +
             "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
             "		/*check duplicate check number validation*/  \n" +
             "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
             "		FROM 	packingslip_invoice_payment  \n" +
             "		WHERE 	isdeleted = 0  \n" +
             "		AND paymentNumber = pPaymentNumber  \n" +
             "		AND bankAccountMasID = pBankAccountMasID  \n" +
             "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
             "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
             "		/* check duplicate check number if confirmation not taken */  \n" +
             "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
             "		AND paymentNumber = pPaymentNumber  \n" +
             "		AND mfgcodeID = pMfgcodeID  \n" +
             "		AND isdeleted = 0    ;  \n" +
             "	 END IF;  \n" +
             "  \n" +
             "	 IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
             "		/* if Receivable payment already locked then not allowed to void and rereceive */  \n" +
             "		SELECT COUNT(1) INTO vIsAlreadyLockedTrans  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE id = pRefVoidPaymentId  \n" +
             "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
             "		AND lockStatus = 'LC'  \n" +
             "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vIsAlreadyLockedTrans = 0) THEN  \n" +
             "  \n" +
             "		UPDATE 	packingslip_invoice_payment  \n" +
             "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
             "			isPaymentVoided = 1,  \n" +
             "			updatedBy = pUserID,  \n" +
             "			updateByRoleId = pRoleID,  \n" +
             "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "		WHERE 	id = pRefVoidPaymentId  \n" +
             "		AND isDeleted = 0  \n" +
             "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
             "  \n" +
             "  \n" +
             "		/*insert same records for new reissue payment transaction*/  \n" +
             "		INSERT INTO packingslip_invoice_payment  \n" +
             "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
             "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
             "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
             "				billToName, billToAddress, isZeroPayment, depositBatchNumber,  \n" +
             "				lockStatus, refundStatus)  \n" +
             "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
             "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,  \n" +
             "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
             "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,  \n" +
             "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
             "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
             "					ELSE NULL END),  \n" +
             "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)  \n" +
             "		FROM 	packingslip_invoice_payment  \n" +
             "		WHERE 	id = pRefVoidPaymentId  \n" +
             "		AND isDeleted = 0  \n" +
             "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
             "  \n" +
             "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
             "  \n" +
             "		/*update payment void flag in detail table*/  \n" +
             "		UPDATE 	packingslip_invoice_payment_det  \n" +
             "		SET 	isPaymentVoided = 1,  \n" +
             "			updatedBy = pUserID,  \n" +
             "			updateByRoleId = pRoleID,  \n" +
             "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
             "		AND isDeleted = 0;  \n" +
             "  \n" +
             "		/*insert same records for new reissue payment detail transaction*/  \n" +
             "		INSERT INTO packingslip_invoice_payment_det  \n" +
             "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
             "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
             "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
             "			pUserID, pRoleID, paymentAmount,  \n" +
             "			FALSE, refCustPackingslipInvoiceID  \n" +
             "		FROM 	packingslip_invoice_payment_det  \n" +
             "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
             "		AND isDeleted = 0;  \n" +
             "  \n" +
             "		SELECT vNewPaymentID refPayementid;  \n" +
             "	ELSE  \n" +
             "		IF vCountExistsCheckNo != 0 THEN  \n" +
             "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
             "		ELSEIF vCount = 0 THEN  \n" +
             "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
             "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
             "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
             "			ELSE  \n" +
             "				SELECT 'NOT_FOUND' AS message;  \n" +
             "			END IF;  \n" +
             "		ELSEIF vIsAlreadyLockedTrans = 1 THEN  \n" +
             "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
             "		ELSE  \n" +
             "			SELECT 'NOT_FOUND' AS message;  \n" +
             "		END IF;  \n" +
             "	END IF;  \n" +
             "END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
             "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
             "	IN pCustInvoicePaymentDetList JSON,  \n" +
             "	IN pMfgcodeID INT,  \n" +
             "	IN pPaymentNumber VARCHAR(50),  \n" +
             "	IN pPaymentDate DATE,  \n" +
             "	IN pPaymentAmount DECIMAL(18,8),  \n" +
             "	IN pPaymentType INT,  \n" +
             "	IN pAccountReference VARCHAR(50),  \n" +
             "	IN pBankAccountMasID INT,  \n" +
             "	IN pBankAccountNo VARCHAR(50),  \n" +
             "	IN pBankName VARCHAR(255),  \n" +
             "	IN pRemark VARCHAR(1000),  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN pTotSelectedInvOfCust INT,  \n" +
             "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
             "	IN pSystemID VARCHAR(20),  \n" +
             "	IN pisZeroPayment INT,  \n" +
             "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
             "	IN pRefCustCreditMemoID INT,  \n" +
             "	IN pisMarkForRefund TINYINT,  \n" +
             "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
             "	IN pRefundStatus VARCHAR(5),  \n" +
             "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
             "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
             "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
             "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
             "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
             "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
             "	IN pRefGencTransModeID INT,  \n" +
             "	IN pWriteOffReason VARCHAR(1000),  \n" +
             "	IN pUserID INT,  \n" +
             "	IN pUserRoleID INT  \n" +
             "  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE insertedInvPaymentMstID INT;  \n" +
             "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
             "	DECLARE vCountExistsCheckNo INT;  \n" +
             "	DECLARE vCountSameCMApplied INT;  \n" +
             "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
             "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
             "  \n" +
             "  \n" +
             "	SET vCountExistsCheckNo = 0;  \n" +
             "	SET vCountSameCMApplied = 0;  \n" +
             "  \n" +
             "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
             "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
             "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE refPaymentMode = pRefPaymentMode  \n" +
             "		AND paymentNumber = pPaymentNumber  \n" +
             "		AND mfgcodeID = pMfgcodeID  \n" +
             "		AND isPaymentVoided = 0  \n" +
             "		AND isdeleted = 0    ;  \n" +
             "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
             "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
             "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
             "		FROM packingslip_invoice_payment  \n" +
             "		WHERE refPaymentMode = pRefPaymentMode  \n" +
             "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
             "		AND isPaymentVoided = 0  \n" +
             "		AND isdeleted = 0    ;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
             "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
             "  \n" +
             "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
             "		SELECT 	*  \n" +
             "		FROM 	JSON_TABLE(  \n" +
             "			pCustInvoicePaymentDetList,  \n" +
             "				\"$[*]\" COLUMNS(  \n" +
             "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
             "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
             "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
             "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
             "					-- `newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
             "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
             "				)  \n" +
             "			) AS CustInvoicePaymentDetList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "		/* get all customer invoice > against total payment list > available in data base */  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
             "			SELECT cps.id AS invoiceMstID,  \n" +
             "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
             "				cps.status,  \n" +
             "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
             "					AND isPaymentVoided = 0  \n" +
             "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "			FROM customer_packingslip cps  \n" +
             "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
             "			AND cps.isDeleted = 0  \n" +
             "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
             "		;  \n" +
             "  \n" +
             "		/* get all mis match amount records (compare UI data and db available data)  \n" +
             "			> if selected invoice not found from db  \n" +
             "			> original Payment Amount Of Invoice  mismatch  \n" +
             "			> invoice Total Paid Amount mismatch  \n" +
             "			*/  \n" +
             "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
             "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
             "			SELECT tucipl.*  \n" +
             "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
             "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
             "			WHERE (  \n" +
             "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
             "				OR  \n" +
             "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
             "				OR  \n" +
             "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
             "				)  \n" +
             "			;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* set up default temp table if not created */  \n" +
             "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
             "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
             "  \n" +
             "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
             "		-- select 'create';  \n" +
             "  \n" +
             "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
             "  \n" +
             "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
             "			IF (pRefPaymentMode = 'R') THEN  \n" +
             "				SET vLockStatusToBe = 'NA' ;  \n" +
             "				IF (pTotSelectedInvOfCust > 0) THEN  \n" +
             "					IF ((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
             "									FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
             "						SET vLockStatusToBe = 'RL' ;  \n" +
             "					END IF;  \n" +
             "				END IF;  \n" +
             "  \n" +
             "			ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
             "				SET vLockStatusToBe = NULL ;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
             "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
             "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
             "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
             "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
             "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
             "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
             "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
             "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
             "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
             "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
             "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
             "  \n" +
             "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
             "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
             "  \n" +
             "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
             "  \n" +
             "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
             "						`appliedDate` ,  \n" +
             "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
             "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
             "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
             "					appliedDate ,  \n" +
             "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
             "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "			END IF;  \n" +
             "  \n" +
             "  \n" +
             "			/* update customer credit memo - payment status   */  \n" +
             "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
             "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
             "				FROM packingslip_invoice_payment_det  \n" +
             "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
             "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
             "  \n" +
             "				UPDATE customer_packingslip  \n" +
             "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
             "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
             "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
             "							 ELSE 'PE' END  \n" +
             "							) ,  \n" +
             "					updatedBy = pUserID,  \n" +
             "					updateByRoleId = pUserRoleID ,  \n" +
             "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE id = pRefCustCreditMemoID  \n" +
             "				AND isDeleted = 0  \n" +
             "				;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
             "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
             "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
             "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
             "  \n" +
             "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
             "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
             "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
             "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
             "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
             "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
             "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
             "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
             "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
             "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
             "				NULL, 0, NULL, NULL,  \n" +
             "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
             "  \n" +
             "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
             "  \n" +
             "  \n" +
             "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
             "			SELECT 	*  \n" +
             "			FROM 	JSON_TABLE(  \n" +
             "				pWriteOffCustInvoicePaymentDetList,  \n" +
             "					\"$[*]\" COLUMNS(  \n" +
             "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
             "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
             "					)  \n" +
             "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
             "  \n" +
             "  \n" +
             "			/* packingslip_invoice_payment_det entry for write off */  \n" +
             "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
             "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
             "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
             "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
             "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
             "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
             "			/* update invoice payment status */  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
             "				SELECT invoiceMstID  \n" +
             "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
             "  \n" +
             "			UPDATE customer_packingslip cps  \n" +
             "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
             "					 FROM packingslip_invoice_payment_det  \n" +
             "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
             "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
             "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
             "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
             "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
             "  \n" +
             "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
             "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
             "  \n" +
             "						   ELSE cps.paymentStatus END  \n" +
             "						) ,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
             "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
             "  \n" +
             "			/*UPDATE customer_packingslip cps  \n" +
             "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
             "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
             "				cps.updatedBy = pUserID,  \n" +
             "				cps.updateByRoleId = pUserRoleID ,  \n" +
             "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
             "			-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
             "			-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
             "			AND cps.isDeleted = 0	;  */  \n" +
             "		END IF;  \n" +
             "  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	/* Resp[0] - store procedure status */  \n" +
             "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
             "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
             "		SELECT 0 AS 'spStatus' ;  \n" +
             "	ELSE  \n" +
             "		SELECT 1 AS 'spStatus' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
             "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
             "  \n" +
             "	/* Resp[2] - newly inserted payment master id  */  \n" +
             "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
             "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
             "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
             "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
             "	IF (vCountExistsCheckNo > 0) THEN  \n" +
             "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
             "	IF (vCountSameCMApplied > 0) THEN  \n" +
             "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
             "	ELSE  \n" +
             "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
             "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
             "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
             "	ELSE  \n" +
             "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
             "  \n" +
             "  \n" +
             "    END;  \n" +
             /* **************************** New Script -> 28-10-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
             "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
             "	IN ppageIndex INT,  \n" +
             "	IN precordPerPage INT,  \n" +
             "	IN pOrderBy VARCHAR(255),  \n" +
             "	IN pWhereClause VARCHAR(16383),  \n" +
             "	IN pCustomerIDs VARCHAR(16383),  \n" +
             "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
             "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
             "	IN pExactPaymentNumberSearch TINYINT,  \n" +
             "	IN pPaymentNumber VARCHAR(50),  \n" +
             "	IN pInvoiceNumber VARCHAR(50),  \n" +
             "	IN pAmount VARCHAR(50),  \n" +
             "	IN pExactPaymentAmountSearch TINYINT,  \n" +
             "	IN pFromDate DATE,  \n" +
             "	IN pToDate DATE,  \n" +
             "	IN pFromInvoiceDate DATE,  \n" +
             "	IN pToInvoiceDate DATE,  \n" +
             "	IN pFromAppliedDate DATE,  \n" +
             "	IN pToAppliedDate DATE,  \n" +
             "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN pRefPaymentMstID INT  \n" +
             ")  \n" +
             "BEGIN  \n" +
             "	DECLARE pOffset INT;  \n" +
             "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
             "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
             "	DECLARE v_TimeZone VARCHAR(50);  \n" +
             "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
             "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
             "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
             "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
             "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
             "	DECLARE v_PayStatusDetTblJoin VARCHAR(1000);  \n" +
             "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
             "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
             "  \n" +
             "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
             "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
             "  \n" +
             "	SET v_JoinWithCPSForCM = '';  \n" +
             "	SET v_FieldsForAppliedCM = '';  \n" +
             "	SET v_FieldsForAppliedWOFF = '';  \n" +
             "	SET v_TypeOfPaymentWhereClause = '';  \n" +
             "	SET v_FieldsForPayStatus = '\"\"';  \n" +
             "	SET v_PayStatusDetTblJoin = '';  \n" +
             "	SET v_PayRefundTblJoin = '';  \n" +
             "	SET v_FieldsForPayRefundTbl = '';  \n" +
             "  \n" +
             "  \n" +
             "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
             "  		SET pWhereClause = '1=1' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pAmount IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
             "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
             "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
             "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
             "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
             "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
             "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pRefPaymentMode = 'R') THEN  \n" +
             "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
             "								FROM packingslip_invoice_payment_det  \n" +
             "								WHERE refRefundPaymentID IS NOT NULL  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
             "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
             "		SET v_FieldsForPayRefundTbl = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
             "  \n" +
             "		SET v_PayStatusDetTblJoin = CONCAT(' LEFT JOIN (SELECT psipd.refPayementid, IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
             "				    FROM packingslip_invoice_payment_det psipd  \n" +
             "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
             "				     AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
             "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
             "				ON psip.id = invPayDetTemp.refPayementid ');  \n" +
             "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
             "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
             "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
             "										ELSE \"No Pending Amount\" END)  \n" +
             "							ELSE  \n" +
             "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
             "									THEN \"Not Applied\"  \n" +
             "									ELSE \"Partially Applied\" END)  \n" +
             "							END) ') ;  \n" +
             "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
             "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
             "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
             "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
             "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
             "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus ,  \n" +
             "			');  \n" +
             "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
             "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
             "            SELECT  \n" +
             "		psip.id AS paymentMstID ,  \n" +
             "                psip.mfgcodeID,  \n" +
             "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
             "                psip.paymentNumber,  \n" +
             "                psip.bankName,  \n" +
             "                psip.bankAccountNo,  \n" +
             "                psip.paymentType,  \n" +
             "                psip.bankAccountMasID,  \n" +
             "                gc.gencCategoryName paymentMethod,  \n" +
             "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
             "		psip.paymentDate,  \n" +
             "                psip.paymentAmount,  \n" +
             "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
             "		psip.refPaymentMode ,  \n" +
             "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
             "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
             "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
             "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
             "		\" , v_FieldsForAppliedCM ,\"  \n" +
             "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
             "		psipd.appliedDate ,  \n" +
             "		(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
             "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
             "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
             "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
             "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
             "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
             "	   FROM packingslip_invoice_payment psip  \n" +
             "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
             "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
             "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
             "			\",v_JoinWithCPSForCM ,\"  \n" +
             "			\",v_PayStatusDetTblJoin ,\"  \n" +
             "			\", v_PayRefundTblJoin ,\"  \n" +
             "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
             "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
             "            AND psip.isPaymentVoided = 0  \n" +
             "            AND psip.isDeleted = 0  \n" +
             "             \");  \n" +
             "  \n" +
             "  \n" +
             "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
             "		SET @Sproc_RetrieveCustomerInvoicePayment= CONCAT(@Sproc_RetrieveCustomerInvoicePayment, ' AND psipd.refPayementid = ',pRefPaymentMstID,' ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
             "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
             "	ELSE  \n" +
             "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
             "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
             "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
             "	ELSE  \n" +
             "		SET rowNumWhere = '';  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* to get total count of rows */  \n" +
             "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
             "  \n" +
             "        PREPARE query1 FROM @SQLStatement1;  \n" +
             "	EXECUTE query1;  \n" +
             "	DEALLOCATE PREPARE query1;  \n" +
             "  \n" +
             "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
             "  \n" +
             "	PREPARE query2 FROM @SQLStatement2;  \n" +
             "	EXECUTE query2;  \n" +
             "	DEALLOCATE PREPARE query2;  \n" +
             "  \n" +
             "END;  \n" +
            /* **************************** Add Script Version -> 28-10-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (5448,'2.00','V1',' lock/unlock customer payment sps merge from main to dev - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
            case 5448:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-10-2021 *********************************** */
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `specialNote` `specialNote` TEXT NULL DEFAULT NULL ,  \n" +
                "CHANGE COLUMN `purchasingComment` `purchasingComment` TEXT NULL DEFAULT NULL;  \n" +

                /* **************************** Add Script Version -> 28-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5449,'2.00','V1',' Bug 38171: Supplier Part list is not loading, showing error - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 5449:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
                "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'Special Note',			CAST(OLD.specialNote AS CHAR),  \n" +
                "				 CAST(NEW.specialNote AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'specialNote'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			OLD.updatedAtApi,	NEW.updatedAtApi,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','updatedAtApi'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','supplier'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveInternalVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','exteranalAPICallStatus'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'MISC Comment',			CAST(OLD.purchasingComment AS CHAR),  \n" +
                "				 CAST(NEW.purchasingComment AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'purchasingComment'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "     INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					valueDataType,				Tablename,  \n" +
                "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId )  \n" +
                "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
                "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
                "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5450,'2.00','V1',' Bug 38171: Supplier Part list is not loading, showing error - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5450:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "ALTER TABLE `chart_templatemst`  \n" +
                "ADD COLUMN `isSystemGenerated` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "ADD COLUMN `dataRefreshTime` INT AFTER `isSystemGenerated`;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "ALTER TABLE `chart_rawdata_category`  \n" +
                "ADD COLUMN `isSystemGenerated` TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5451,'2.00','V1',' User Story 37498: Get List of Active logged in users - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5451:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "Drop view if exists `vu_emp_detail`;  \n" +
                "CREATE VIEW `vu_emp_detail` AS  \n" +
                "    SELECT  \n" +
                "        `u`.`id` AS `id`,  \n" +
                "        `emp`.`firstName` AS `firstName`,  \n" +
                "        `emp`.`lastName` AS `lastName`,  \n" +
                "        `emp`.`email` AS `email`,  \n" +
                "        `emp`.`initialName` AS `initialName`,  \n" +
                "        `u`.`username` AS `username`,  \n" +
                "		(CASE WHEN (`u`.`onlineStatus` = 'O') THEN 'Online'  \n" +
                "        WHEN (`u`.`onlineStatus` = 'A') THEN 'Away'  \n" +
                "        WHEN (`u`.`onlineStatus` = 'D') THEN 'Do Not Disturb'  \n" +
                "        ELSE 'Offline' END) AS onlineStatus,  \n" +
                "		1 as user  \n" +
                "    FROM  \n" +
                "        `users` `u`  \n" +
                "        Left JOIN `employees` `emp` ON (`emp`.`id` = `u`.`employeeID`)  \n" +
                "        where `u`.isDeleted = 0;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "Drop PROCEDURE if Exists `Sproc_RetrieveChartRawdataCategory`; \n" +
                "CREATE PROCEDURE `Sproc_RetrieveChartRawdataCategory`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRoleID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Sproc_RetrieveChartRawdataCategory;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_RetrieveChartRawdataCategory AS  \n" +
                "			SELECT chartRawDataCatID, `name` , dbViewName, isSystemGenerated,  \n" +
                "				CASE 	WHEN pRoleID IS NULL OR pRoleID = '' THEN 0  \n" +
                "					WHEN pRoleID IS NOT NULL THEN  (SELECT COUNT(1) FROM chart_rawdata_category_access_role crcar  \n" +
                "									WHERE roleID = pRoleID  \n" +
                "									AND crcar.chartRawDataCatID = crc.chartRawDataCatID  \n" +
                "									AND crcar.`deletedAt` IS NULL AND crcar.`isDeleted`=0 )  \n" +
                "					ELSE 0  \n" +
                "				END AS isAccessByDefinedRole  \n" +
                "			FROM `chart_rawdata_category` crc  \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM temp_Sproc_RetrieveChartRawdataCategory where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  temp_Sproc_RetrieveChartRawdataCategory where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Sproc_RetrieveChartRawdataCategory;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "Drop Procedure if exists `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')), ci.name,'<br/>',ci.street1,'<br/>',ci.city,', ',ci.state,' ',ci.postalCode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ',  \n" +
                "	ci.contactNumber,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
                "		ci.personName,ci.registeredEmail,ci.faxNumber,ci.contactNumber,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5452,'2.00','V1',' User Story 37498: Get List of Active logged in users - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5452:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "INSERT INTO `chart_category` (`name`, `order`, `createdBy`) \n" +
                "VALUES \n" +
                "('Personnel','1.00', '1'); \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "INSERT INTO `chart_rawdata_category` (`name`, `dbViewName`,  `createdBy`,`isSystemGenerated`) \n" +
                "VALUES ('User Status Detail', 'vu_emp_detail', '1', 1); \n" +
                " \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "SELECT chartRawDataCatID INTO @chartRawdataCatID FROM chart_rawdata_category WHERE NAME='User Status Detail'; \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) \n" +
                "VALUES \n" +
                "((SELECT @chartRawdataCatID), 'firstName', 'First Name', 'varchar', '1', '1', '1', '1.00'), \n" +
                "((SELECT @chartRawdataCatID), 'lastName', 'Last Name', 'varchar', '1', '1', '1', '2.00'), \n" +
                "((SELECT @chartRawdataCatID), 'email', 'Email', 'varchar', '1', '1', '1', '3.00'), \n" +
                "((SELECT @chartRawdataCatID), 'initialName', 'Initial Name', 'varchar', '1', '1', '1', '4.00'), \n" +
                "((SELECT @chartRawdataCatID), 'onlineStatus', 'Online Status', 'varchar', '1', '1', '1', '5.00'), \n" +
                "((SELECT @chartRawdataCatID), 'user', 'Total Users', 'int', '1', '1', '1', '6.00'); \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "SELECT id INTO @roleId FROM roles WHERE name='Super Admin'; \n" +
                " \n" +
                "INSERT INTO `chart_rawdata_category_access_role` (`chartRawDataCatID`, `roleID`, `createdBy`, `updatedBy`) \n" +
                "VALUES \n" +
                "((SELECT @chartRawdataCatID),(SELECT @roleId), '1', '1'); \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "SELECT chartTypeID INTO @chartTypeId FROM chart_typemst WHERE name='Pie'; \n" +
                "SELECT id INTO @chartCategoryId FROM chart_category WHERE name='Personnel'; \n" +
                "INSERT INTO `chart_templatemst` (`chartTypeID`, `nameOfChart`, `xAxisVal`, `yAxisVal`, `createdBy`, `chartRawDataCatID`, `xAxisName`, `yAxisName`, `chartCatID`, `compareVariables`, `drilldown`, `isPinToDashboard`, `chartCategoryID`, `isRenderTable`,`isSystemGenerated`) \n" +
                "VALUES \n" +
                "((SELECT @chartTypeId),'User Status Details','onlineStatus', 'user','1',(SELECT @chartRawdataCatID), 'Initial Name', 'Total Users', 1,'[{\"displayName\":\"Total Users\",\"field\":\"user\"}]', 'initialName', 1,(SELECT @chartCategoryId),1,1 ); \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5453,'2.00','V1',' User Story 37498: Get List of Active logged in users - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5453:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "ALTER TABLE userpagedetail add column unqDate datetime default '2001-01-01';  \n" +
                "ALTER TABLE feature_user_mapping add column unqDate datetime default '2001-01-01';  \n" +
                "ALTER TABLE users_roles add column unqDate datetime default '2001-01-01';  \n" +
                "ALTER TABLE rolepagedetail add column unqDate datetime default '2001-01-01';  \n" +
                "ALTER TABLE feature_role_mapping add column unqDate datetime default '2001-01-01';  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5454,'2.00','V1',' User Story 37111: Page Rights: Improvement Point for Role Selection and Label changes - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5454:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_userpagedetail`;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_userpagedetail` BEFORE UPDATE ON `userpagedetail` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_feature_user_mapping`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_UNQDATE_feature_user_mapping` BEFORE UPDATE ON `feature_user_mapping` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_users_roles`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_UNQDATE_users_roles` BEFORE UPDATE ON `users_roles` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_rolepagedetail`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_UNQDATE_rolepagedetail` BEFORE UPDATE ON `rolepagedetail` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_feature_role_mapping`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_UNQDATE_feature_role_mapping` BEFORE UPDATE ON `feature_role_mapping` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5455,'2.00','V1',' User Story 37111: Page Rights: Improvement Point for Role Selection and Label changes - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    case 5455:
        allDbChangesArray.push(
            /* **************************** New Script -> 29-10-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
            "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
            "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
            "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
            "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE PORLINE_OTY INT;  \n" +
            "	DECLARE vTotalQty INT;  \n" +
            "    DECLARE vPOID INT;  \n" +
            "	DECLARE vMfgCodeFormat INT;  \n" +
            "    DECLARE vOldCustomer VARCHAR(100);  \n" +
            "    DECLARE vNewCustomer VARCHAR(100);  \n" +
            "  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
            "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
            "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
            "  \n" +
            "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	ELSE  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(vPOID IS NOT NULL) THEN  \n" +
            "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
            "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
            "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
            "		(  \n" +
            "			CASE  \n" +
            "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
            "				ELSE NULL  \n" +
            "			END  \n" +
            "		),  \n" +
            "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
            "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'qty');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
            "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "		valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
            "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'unitprice');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'unitprice');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
            "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'amount');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
            "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'amount');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'unitprice');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'qty');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "        valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
            "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "            'varchar');  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
            "		CONCAT(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
            "					ELSE 'Line# '  \n" +
            "				END  \n" +
            "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
            "		),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
            "			valueDataType)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
            "        'varchar');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
            "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
            "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
            "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
            "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
            "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
            "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 29-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5456,'2.00','V1',' User Story 37432: Material Received Screen Changed related to customer consigned Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5456:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-10-2021 *********************************** */
                 "CREATE UNIQUE INDEX IDX_UNQ_userPageD_userID_pageID_roleID ON userpagedetail(userID,pageID,roleID,isDeleted,unqDate);  \n" +
                 "CREATE UNIQUE INDEX IDX_UNQ_featureUserM_featureID_userID_roleID ON feature_user_mapping(featureID,userID,roleID,isDeleted,unqDate);  \n" +
                 "CREATE UNIQUE INDEX IDX_UNQ_usersRoles_userId_roleId ON users_roles(userId,roleId,isDeleted,unqDate);  \n" +
                 "CREATE UNIQUE INDEX IDX_UNQ_rolePageD_roleID_pageID ON rolepagedetail(roleID,pageID,isDeleted,unqDate);  \n" +
                 "CREATE UNIQUE INDEX IDX_UNQ_featureRoleM_featureID_roleID ON feature_role_mapping(featureID,roleID,isDeleted,unqDate);  \n" +
                /* **************************** New Script -> 29-10-2021 *********************************** */
                /* **************************** Add Script Version -> 29-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5457,'2.00','V1',' User Story 37111: Page Rights: Improvement Point for Role Selection and Label changes - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5457:
                allDbChangesArray.push(
                /* **************************** New Script -> 01-11-2021 *********************************** */
                "update page_detail set isReadOnlyDeveloped = true where pageRoute in  \n" +
                "('app.component.managecomponent.standards','app.component.managedistcomponent.standards',  \n" +
                "'app.component.managecomponent.document','app.component.managedistcomponent.document',  \n" +
                "'app.component.managecomponent.comments','app.component.managedistcomponent.comments',  \n" +
                "'app.component.managecomponent.datafields','app.component.managedistcomponent.datafields',  \n" +
                "'app.component.managecomponent.otherdetail','app.component.managedistcomponent.otherdetail',  \n" +
                "'app.component.managecomponent.assysalespricematrix',  \n" +
                "'app.component.managecomponent.customerloa','app.component.managedistcomponent.customerloa',  \n" +
                "'app.component.managecomponent.approveddisapprovedsupplier');  \n" +
                /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5458,'2.00','V1',' User Story 37260: Apply read-only change into Part master remain Tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 5458:
             allDbChangesArray.push(
             /* **************************** New Script -> 01-11-2021 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
             "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
             "	IN ppageIndex INT,  \n" +
             "	IN precordPerPage INT,  \n" +
             "	IN pOrderBy VARCHAR(255),  \n" +
             "	IN pWhereClause VARCHAR(16383),  \n" +
             "	IN pCustomerIDs VARCHAR(16383),  \n" +
             "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
             "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
             "	IN pExactPaymentNumberSearch TINYINT,  \n" +
             "	IN pPaymentNumber VARCHAR(1000),  \n" +
             "	IN pInvoiceNumber VARCHAR(1000),  \n" +
             "	IN pAmount VARCHAR(50),  \n" +
             "	IN pExactPaymentAmountSearch TINYINT,  \n" +
             "	IN pFromDate DATE,  \n" +
             "	IN pToDate DATE,  \n" +
             "	IN pFromAppliedDate DATE,  \n" +
             "	IN pToAppliedDate DATE,  \n" +
             "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
             "	IN pRefPaymentMode VARCHAR(10),  \n" +
             "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
             "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
             ")  \n" +
             "BEGIN  \n" +
             "	DECLARE pOffset INT;  \n" +
             "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
             "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
             "	DECLARE v_TimeZone VARCHAR(50);  \n" +
             "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
             "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
             "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
             "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
             "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
             "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
             "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
             "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
             "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
             "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
             "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
             "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);  \n" +
             "  \n" +
             "  \n" +
             "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
             "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
             "  \n" +
             "	SET v_InvoiceNumberWhereClause= '';  \n" +
             "	SET v_JoinWithCPSForCM = '';  \n" +
             "	SET v_FieldsForAppliedCM = '';  \n" +
             "	SET v_AppliedDateWhereClause = '';  \n" +
             "	SET v_AppliedDateCon = '';  \n" +
             "	SET v_FieldsForAppliedWOFF = '';  \n" +
             "	SET v_TypeOfPaymentWhereClause = '';  \n" +
             "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
             "	SET v_PayRefundTblJoin = '';  \n" +
             "	SET v_FieldsForPayRefundTbl = '';  \n" +
             "	SET v_FieldsForPayStatus = '\"\"';  \n" +
             "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
             "  \n" +
             "  \n" +
             "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
             "  		SET pWhereClause = '1=1' ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF pPaymentRefundStatusFilter IS NOT NULL THEN  \n" +
             "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* show direct payment data or customer credit memo data */  \n" +
             "  \n" +
             "  \n" +
             "	IF (pRefPaymentMode = 'R') THEN  \n" +
             "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
             "								FROM packingslip_invoice_payment_det  \n" +
             "								WHERE refRefundPaymentID IS NOT NULL  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
             "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
             "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,  \n" +
             "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText ,  \n" +
             "						IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) AS adjustmenPendingAmt , ');  \n" +
             "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
             "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
             "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
             "										ELSE \"No Pending Amount\" END)  \n" +
             "							ELSE  \n" +
             "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
             "									THEN \"Not Applied\"  \n" +
             "									ELSE \"Partially Applied\" END)  \n" +
             "							END) ') ;  \n" +
             "  \n" +
             "  \n" +
             "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
             "  \n" +
             "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
             "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
             "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
             "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
             "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
             "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(CMTotRefundDetTemp.totRefundIssuedOfCM,0) AS adjustmenPendingAmtOfCM ,  \n" +
             "			cps.paymentStatus AS CMPaymentStatus,  \n" +
             "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
             "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
             "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
             "			');  \n" +
             "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundCustCreditMemoID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfCM  \n" +
             "								FROM packingslip_invoice_payment_det  \n" +
             "								WHERE refRefundCustCreditMemoID IS NOT NULL  \n" +
             "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
             "								GROUP BY refRefundCustCreditMemoID) AS CMTotRefundDetTemp  \n" +
             "							ON cps.id = CMTotRefundDetTemp.refRefundCustCreditMemoID ');  \n" +
             "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
             "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
             "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
             "             EXISTS(  \n" +
             "			SELECT  1  \n" +
             "			FROM packingslip_invoice_payment_det  \n" +
             "			WHERE refPayementid = psip.id  \n" +
             "			AND isDeleted=0  \n" +
             "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
             "								FROM customer_packingslip  \n" +
             "								WHERE transType = \"I\"  \n" +
             "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
             "								AND isDeleted=0)  \n" +
             "			 )');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF(pAmount IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
             "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
             "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
             "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
             "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
             "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
             "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
             "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
             "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
             "		END IF;  \n" +
             "  \n" +
             "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
             "			EXISTS(  \n" +
             "				SELECT  1  \n" +
             "				FROM packingslip_invoice_payment_det  \n" +
             "				WHERE refPayementid = psip.id  \n" +
             "				',v_AppliedDateCon,'  \n" +
             "				AND isDeleted=0  \n" +
             "			 )');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
             "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
             "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
             "            SELECT  \n" +
             "		psip.id,  \n" +
             "                psip.mfgcodeID,  \n" +
             "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
             "                psip.isPaymentVoided,  \n" +
             "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
             "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
             "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
             "		psip.voidPaymentReason,  \n" +
             "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
             "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
             "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
             "										ELSE NULL END) AS voidedAt,  \n" +
             "                psip.refVoidedPaymentNumber,  \n" +
             "                psip.refVoidedPaymentId,  \n" +
             "                psip.paymentNumber,  \n" +
             "                psip.bankName,  \n" +
             "                psip.bankAccountNo,  \n" +
             "                psip.paymentType,  \n" +
             "                psip.bankAccountMasID,  \n" +
             "                psip.systemId ,  \n" +
             "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
             "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
             "                gc.gencCategoryName paymentMethod,  \n" +
             "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
             "		psip.paymentDate,  \n" +
             "                psip.paymentAmount,  \n" +
             "		psip.payToAddress payToAddress,  \n" +
             "                psip.accountReference,  \n" +
             "                psip.remark,  \n" +
             "                psip.lockStatus,  \n" +
             "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
             "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
             "		(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
             "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
             "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
             "                invPayDetTemp.invoiceNumberList,  \n" +
             "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
             "  \n" +
             "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
             "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
             "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
             "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
             "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
             "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
             "			ELSE NULL END) AS totalDocuments ,  \n" +
             "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
             "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
             "		\" , v_FieldsForAppliedCM ,\"  \n" +
             "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
             "		invPayDetTemp.totDetLevelSelectedInvCount ,  \n" +
             "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
             "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
             "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
             "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
             "	   FROM packingslip_invoice_payment psip  \n" +
             "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
             "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
             "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount ,  \n" +
             "					COUNT(1) AS totDetLevelSelectedInvCount  \n" +
             "				    FROM packingslip_invoice_payment_det psipd  \n" +
             "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
             "											AND cps.isDeleted = 0  \n" +
             "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
             "				     AND psipd.isDeleted = 0  \n" +
             "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
             "				ON psip.id = invPayDetTemp.refPayementid  \n" +
             "			\", v_JoinWithCPSForCM ,\"  \n" +
             "			\", v_PayRefundTblJoin ,\"  \n" +
             "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
             "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,  \n" +
             "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"  \n" +
             "             AND psip.isDeleted = 0 \"  \n" +
             "             );  \n" +
             "  \n" +
             "  \n" +
             "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
             "  \n" +
             "  \n" +
             "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
             "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
             "	ELSE  \n" +
             "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
             "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
             "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
             "	ELSE  \n" +
             "		SET rowNumWhere = '';  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	/* to get total count of rows */  \n" +
             "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
             "  \n" +
             "        PREPARE query1 FROM @SQLStatement1;  \n" +
             "	EXECUTE query1;  \n" +
             "	DEALLOCATE PREPARE query1;  \n" +
             "  \n" +
             "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
             "  \n" +
             "	PREPARE query2 FROM @SQLStatement2;  \n" +
             "	EXECUTE query2;  \n" +
             "	DEALLOCATE PREPARE query2;  \n" +
             "  \n" +
             "  \n" +
             "END;  \n" +
             /* **************************** Add Script Version -> 01-11-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (5459,'2.00','V1',' Sproc_RetrieveCustomerInvoicePayment - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
            case 5459:
                allDbChangesArray.push(
                    /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                    "IN ppartID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                    "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                    "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                    "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                    "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                    "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                    "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                    "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                    "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                    "        ELSE 'N/A' END) AS programingStatus,  \n" +
                    "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                    "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                    "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                    "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                    "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                    "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                    " a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                    "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                    "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                    "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                    "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                    "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                    "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                    "a.isObsoleteLine,  \n" +
                    "a.customerApprovalForQPAREFDESStep,  \n" +
                    "a.customerApprovalForBuyStep,  \n" +
                    "a.customerApprovalForPopulateStep,  \n" +
                    "a.dnpQPARefDesStep,  \n" +
                    "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "a.customerApprovalForDNPBuyStep,  \n" +
                    "a.customerApprovalCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                    "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                    "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                    "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                    "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                    "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                    "ac.description AS additionalComment,  \n" +
                    "ac.id AS additionalCommentId,  \n" +
                    "a.programmingMappingPendingRefdesCount,  \n" +
                    "a.refDesigCount,  \n" +
                    "a.dnpDesigCount  \n" +
                    "FROM rfq_lineitems a  \n" +
                    "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                    "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                    "  \n" +
                    "SELECT b.id,  \n" +
                    "b.lineID,  \n" +
                    "b.cust_lineID,  \n" +
                    "b.qpa,  \n" +
                    "b.refDesig,  \n" +
                    "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                    "a.mfgCodeID,  \n" +
                    "mcm.acquisitionDetail,  \n" +
                    "a.mfgPN,  \n" +
                    "a.mfgPNID,  \n" +
                    "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                    "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                    "a.distMfgCodeID,  \n" +
                    "a.distPN,  \n" +
                    "a.distMfgPNID,  \n" +
                    "b.custPN,  \n" +
                    "b.custPNID,  \n" +
                    "b.isCustPN,  \n" +
                    "b.uomID,  \n" +
                    "b.programingStatus,  \n" +
                    "b.substitutesAllow,  \n" +
                    "b.allocatedInKit,  \n" +
                    "a.description descriptionAlternate,  \n" +
                    "b.description,  \n" +
                    "b.numOfPosition,  \n" +
                    "b.numOfRows,  \n" +
                    "b.customerRev,  \n" +
                    "b.isCustPNProgrammingRequire,  \n" +
                    "b.customerDescription,  \n" +
                    "b.customerPartDesc,  \n" +
                    "b.isInstall,  \n" +
                    "b.isPurchase,  \n" +
                    "b.isNotRequiredKitAllocation,  \n" +
                    "b.isSupplierToBuy,  \n" +
                    "b.dnpQty,  \n" +
                    "b.dnpDesig,  \n" +
                    "a.id AS rfqAlternatePartID,  \n" +
                    "b.qpaDesignatorStep,  \n" +
                    "b.restrictCPNUseWithPermissionStep,  \n" +
                    "b.restrictCPNUsePermanentlyStep,  \n" +
                    "b.restrictCPNUseInBOMStep,  \n" +
                    "b.requireMountingTypeStep,  \n" +
                    "b.requireFunctionalTypeStep,  \n" +
                    "b.requireMountingTypeError,  \n" +
                    "b.requireFunctionalTypeError,  \n" +
                    "b.isBuyDNPQty,  \n" +
                    "b.isObsoleteLine,  \n" +
                    "b.customerApprovalForQPAREFDESStep,  \n" +
                    "b.customerApprovalForBuyStep,  \n" +
                    "b.customerApprovalForPopulateStep,  \n" +
                    "b.dnpQPARefDesStep,  \n" +
                    "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                    "b.customerApprovalForDNPBuyStep,  \n" +
                    "b.customerApprovalCPN,  \n" +
                    "b.qpaCustomerApprovalComment,  \n" +
                    "b.dnpqpaCustomerApprovalComment,  \n" +
                    "b.buyCustomerApprovalComment,  \n" +
                    "b.buyDNPCustomerApprovalComment,  \n" +
                    "b.populateCustomerApprovalComment,  \n" +
                    "b.cpnCustomerApprovalComment,  \n" +
                    "b.isCustomerApprovedQPA,  \n" +
                    "b.isCustomerApprovedBuy,  \n" +
                    "b.isCustomerApprovedDNPQPA,  \n" +
                    "b.isCustomerApprovedBuyDNP,  \n" +
                    "b.isCustomerApprovedPopulate,  \n" +
                    "b.isCustomerApprovedCPN,  \n" +
                    "b.kitAllocationNotRequiredComment,  \n" +
                    "b.isNotRequiredKitAllocationApproved,  \n" +
                    "a.mfgVerificationStep,  \n" +
                    "a.mfgDistMappingStep,  \n" +
                    "a.mfgCodeStep,  \n" +
                    "a.customerApproval,  \n" +
                    "a.isCustomerUnAppoval,  \n" +
                    "a.org_mfgCode,  \n" +
                    "a.org_mfgPN,  \n" +
                    "a.org_distributor,  \n" +
                    "a.org_distPN,  \n" +
                    "a.distVerificationStep,  \n" +
                    "a.distCodeStep,  \n" +
                    "a.getMFGPNStep,  \n" +
                    "a.obsoletePartStep,  \n" +
                    "a.mfgGoodPartMappingStep,  \n" +
                    "a.mfgPNStep,  \n" +
                    "a.distPNStep,  \n" +
                    "a.badMfgPN,  \n" +
                    "a.distGoodPartMappingStep,  \n" +
                    "a.nonRohsStep,  \n" +
                    "a.epoxyStep,  \n" +
                    "a.invalidConnectorTypeStep,  \n" +
                    "a.duplicateMPNInSameLineStep,  \n" +
                    "a.mismatchMountingTypeStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.mismatchFunctionalCategoryStep,  \n" +
                    "a.restrictUseWithPermissionStep,  \n" +
                    "a.restrictUsePermanentlyStep,  \n" +
                    "a.partPinIsLessthenBOMPinStep,  \n" +
                    "a.mismatchRequiredProgrammingStep,  \n" +
                    "a.mappingPartProgramStep,  \n" +
                    "a.exportControlledStep,  \n" +
                    "a.tbdPartStep,  \n" +
                    "a.userData1,  \n" +
                    "a.userData2,  \n" +
                    "a.userData3,  \n" +
                    "a.userData4,  \n" +
                    "a.userData5,  \n" +
                    "a.userData6,  \n" +
                    "a.userData7,  \n" +
                    "a.userData8,  \n" +
                    "a.userData9,  \n" +
                    "a.userData10,  \n" +
                    "a.pickupPadRequiredStep,  \n" +
                    "a.matingPartRquiredStep,  \n" +
                    "a.suggestedGoodPartStep,  \n" +
                    "a.suggestedGoodDistPartStep,  \n" +
                    "a.driverToolsRequiredStep,  \n" +
                    "a.functionalTestingRequiredStep,  \n" +
                    "a.mismatchCustomPartStep,  \n" +
                    "a.mismatchValueStep,  \n" +
                    "a.approvedMountingType,  \n" +
                    "a.mismatchPackageStep,  \n" +
                    "a.mismatchPowerStep,  \n" +
                    "a.mismatchToleranceStep,  \n" +
                    "a.mismatchTempratureStep,  \n" +
                    "a.mismatchNumberOfRowsStep,  \n" +
                    "a.uomMismatchedStep,  \n" +
                    "a.programingRequiredStep,  \n" +
                    "a.mismatchProgrammingStatusStep,  \n" +
                    "a.mismatchColorStep,  \n" +
                    "a.restrictUseInBOMStep,  \n" +
                    "a.restrictUseInBOMWithPermissionStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasStep,  \n" +
                    "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                    "a.restrictUseExcludingAliasStep,  \n" +
                    "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                    "a.unknownPartStep,  \n" +
                    "a.defaultInvalidMFRStep,  \n" +
                    "a.isUnlockApprovedPart,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnPart.partTypeName  \n" +
                    "ELSE  \n" +
                    "part.partTypeName END) AS parttypeID,  \n" +
                    "a.parttypeID AS functionalID,  \n" +
                    "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                    "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                    "cpnMount.name  \n" +
                    "ELSE  \n" +
                    "mount.name END) AS mountingtypeID,  \n" +
                    "a.mountingtypeID AS mountingID,  \n" +
                    "cat.categoryname partcategoryID,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                    "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                    "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                    "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                    "CASE WHEN  \n" +
                    "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                    "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                    "THEN 1 ELSE 0 END isObsolete,  \n" +
                    "co.PIDCode,  \n" +
                    "co.mfgPNDescription,  \n" +
                    "co.pitch,  \n" +
                    "co.noOfRows,  \n" +
                    "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                    "co.partPackageID,  \n" +
                    "co.value,  \n" +
                    "co.tolerance,  \n" +
                    "co.voltage,  \n" +
                    "co.isCustom,  \n" +
                    "co.packaging,  \n" +
                    "co.deviceMarking,  \n" +
                    "co.powerRating,  \n" +
                    "co.minOperatingTemp,  \n" +
                    "co.maxOperatingTemp,  \n" +
                    "co.connecterTypeID,  \n" +
                    "co.driverToolRequired,  \n" +
                    "co.matingPartRquired,  \n" +
                    "co.pickupPadRequired,  \n" +
                    "co.programingRequired,  \n" +
                    "co.dataSheetLink,  \n" +
                    "co.isCPN,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                    "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                    "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                    "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                    "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                    "co.isTemperatureSensitive,  \n" +
                    "co.noOfPosition AS componentLead,  \n" +
                    "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                    "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                    "co.createdBy,  \n" +
                    "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                    "co.color,  \n" +
                    "co.uom AS partUOMID,  \n" +
                    "co.serialNumber,  \n" +
                    "CASE WHEN  \n" +
                    "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                    "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                    "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                    "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                    "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                    "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                    "b.additionalComment ,  \n" +
                    "b.additionalCommentId,  \n" +
                    "a.suggestedByApplicationMsg,  \n" +
                    "a.suggestedByApplicationStep,  \n" +
                    "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                    "a.mismatchPitchStep,  \n" +
                    "b.programmingMappingPendingRefdesCount,  \n" +
                    "b.refDesigCount,  \n" +
                    "b.dnpDesigCount,co.feature ,  \n" +
                    "a.mismatchCustpartRevStep,  \n" +
                    "a.mismatchCPNandCustpartRevStep  \n" +
                    "FROM tempRfq_lineitems b  \n" +
                    "left JOIN rfq_lineitems_alternatepart a   ON a.rfqLineItemsID = b.id and a.isDeleted = 0  \n" +
                    "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                    "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                    "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                    "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                    "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                    "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                    "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                    "WHERE b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                    "END;  \n" +	
                    /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5460,'2.00','V1','Sproc_GetRFQLineItemsByID. - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break; 
                case 5460:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 01-11-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_GetComponentSalesPriceHistory`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetComponentSalesPriceHistory`(  \n" +
                    "	IN ppageIndex INT,  \n" +
                    "	IN precordPerPage INT,  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(16383),  \n" +
                    "	IN pmfgPnID VARCHAR(255)  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE pOffset INT;  \n" +
                    "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                    "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                    "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                    "  \n" +
                    "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                    "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                    "  \n" +
                    "    set @temp_Sproc_GetComponentPriceHistory = concat(\"  \n" +
                    "    select id,mfgPNID,rfqNumber,  \n" +
                    "            fun_getUserNameByID(a.createdBy) createdby,  \n" +
                    "            fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                    "            maxRfqAssyID,  \n" +
                    "			createdAt,  \n" +
                    "            fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue  \n" +
                    "		from (  \n" +
                    "			select  \n" +
                    "                rank() over (partition by rfqNumber order by id desc) as rnk,  \n" +
                    "                max(rfqAssyID) over (partition by rfqNumber) as maxRfqAssyID,  \n" +
                    "                cpbd.*  \n" +
                    "            from component_price_break_details as cpbd  \n" +
                    "            where  \n" +
                    "            cpbd.isDeleted = 0 and cpbd.mfgPNID = \" , pmfgPnID,\" and cpbd.type = 2 and cpbd.isHistory = 1) as a where a.rnk = 1 order by createdAt desc\");  \n" +
                    "  \n" +
                    "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	ELSE  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"createdAt desc\") ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "		SET pWhereClause = '1=1' ;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                    "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "	ELSE  \n" +
                    "		SET rowNumWhere = '';  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	/* to get total count of rows */  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentPriceHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                    "    PREPARE query2 FROM @SQLStatement2;  \n" +
                    "	EXECUTE query2;  \n" +
                    "	DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentPriceHistory,\" ) c  \n" +
                    "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "  \n" +
                    "       	PREPARE query1 FROM @SQLStatement2;  \n" +
                    "	EXECUTE query1;  \n" +
                    "	DEALLOCATE PREPARE query1;  \n" +
                    "    END;  \n" +
                    /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5461,'2.00','V1',' Task 38227: Improvement point given by Client - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break;
                case 5461:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 01-11-2021 *********************************** */
                    "DROP procedure IF EXISTS `Sproc_getSalesCommissionDetailsFromRfq`;  \n" +
                    "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(  \n" +
                    "	IN pPartId INT,  \n" +
                    "	IN pRfqQuoteNumber VARCHAR(50),  \n" +
                    "    IN pIsPushToPartMaster TINYINT,  \n" +
                    "    IN pUserId INT,  \n" +
                    "    IN pRoleId INT ,  \n" +
                    "    IN pIsCallFromPartMaster TINYINT,  \n" +
                    "    IN pProceedOverriderQuote TINYINT  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "	DECLARE alreadyExistQuote INT;  \n" +
                    "	DECLARE v_rfqAssyID INT;  \n" +
                    "	DECLARE v_quoteValidTill DATE;  \n" +
                    "  \n" +
                    "	SELECT id,quoteValidTillDate INTO v_rfqAssyID,v_quoteValidTill FROM   rfq_assemblies WHERE quoteNumber=pRfqQuoteNumber AND isdeleted=0;  \n" +
                    "	/*this SP used for two purpose 1. get quote data for assembly sales price matrix 2. push data to part master from RFQ page*/  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempSalesCommission;  \n" +
                    "  \n" +
                    "    SET alreadyExistQuote = 0;  \n" +
                    "    IF(pIsCallFromPartMaster = 1 OR pIsPushToPartMaster = 1)  \n" +
                    "    THEN  \n" +
                    "		SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND isDeleted = 0 AND isHistory = 1;  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF(alreadyExistQuote > 0 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 0)  \n" +
                    "    THEN  \n" +
                    "		SELECT alreadyExistQuote;  \n" +
                    "    ELSE  \n" +
                    "		IF(alreadyExistQuote > 0 AND pIsCallFromPartMaster = 1 AND pIsPushToPartMaster = 0 AND pProceedOverriderQuote = 1)  \n" +
                    "        THEN  \n" +
                    "			-- Revert Existing History with Same Quote number  \n" +
                    "			UPDATE component_price_break_details  \n" +
                    "					   SET isHistory = 0, updatedBy = pUserId, updateByRoleId= pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                    "				 WHERE mfgPNID = pPartId AND rfqNumber = pRfqQuoteNumber AND `type` = 2 AND isHistory = 1 AND isDeleted = 0;  \n" +
                    "  \n" +
                    "			-- Update Part Quote# Part Master  \n" +
                    "            UPDATE component  \n" +
                    "				   SET rfqNumber = pRfqQuoteNumber,quoteValidTillDate=v_quoteValidTill,  updatedBy = pUserId, updateByRoleId = pRoleId, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                    "				 WHERE id = pPartId AND isDeleted = 0;  \n" +
                    "  \n" +
                    "            -- Return reverted record to display  \n" +
                    "			SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                    "					x.salesCommissionPercentage, x.isHistory,x.salesCommissionNotes,x.rfqAssyID, v_quoteValidTill as quoteValidTillDate  \n" +
                    "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                    "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                    "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                    "        ELSE  \n" +
                    "			-- Return RFQ Quote Data if exists with Passed RFQQuoteNumber  \n" +
                    "			CREATE TEMPORARY TABLE tempSalesCommission AS  \n" +
                    "			SELECT x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,  \n" +
                    "					CASE WHEN IFNULL(x.assemblyTotalRfqPrice,0) != 0 THEN  \n" +
                    "							ROUND(((x.assemblyTotalRfqPrice - (x.assemblyTotalRfqPrice - x.salesCommissionAmount)) *100/ (x.assemblyTotalRfqPrice - x.salesCommissionAmount)),2)  \n" +
                    "						END salesCommissionPercentage,  \n" +
                    "						FALSE isHistory,  \n" +
                    "                        NULL salesCommissionNotes,  \n" +
                    "                        v_rfqAssyID rfqAssyID  \n" +
                    "			  FROM (SELECT a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,  \n" +
                    "							SUM(CASE WHEN qdfm.isCommission = 1 THEN raqac.amount ELSE 0 END) salesCommissionAmount,  \n" +
                    "							fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice  \n" +
                    "					  FROM rfq_assy_quotations a  \n" +
                    "					  LEFT JOIN rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id AND raqac.isDeleted = 0  \n" +
                    "					  LEFT JOIN quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID AND qdfm.isCommission = 1 AND qdfm.isDeleted = 0 AND qdfm.quoteAttributeType='R'  \n" +
                    "					  JOIN rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID  \n" +
                    "					  JOIN rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID  \n" +
                    "					 WHERE EXISTS (SELECT 1 FROM rfq_assemblies ra WHERE ra.id = a.rfqAssyID AND a.isDeleted = 0 AND ra.partID = pPartId )  \n" +
                    "					   AND EXISTS (SELECT 1 FROM rfq_assemblies_quotation_submitted b WHERE b.id = a.refSubmittedQuoteID AND b.quoteNumber = pRfqQuoteNumber)  \n" +
                    "					   AND a.isDeleted = 0  \n" +
                    "					 GROUP BY a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) X;  \n" +
                    "  \n" +
                    "			-- Check If data have to Push into part Master from RFQ Quote  \n" +
                    "			IF pIsPushToPartMaster = TRUE THEN  \n" +
                    "				SELECT COUNT(1) INTO alreadyExistQuote FROM component_price_break_details WHERE mfgPNID = pPartId AND  \n" +
                    "						rfqNumber = pRfqQuoteNumber AND isDeleted = 0;  \n" +
                    "				-- Check Same RFQ Quote Number Record Exist  \n" +
                    "				IF(alreadyExistQuote >= 1)  \n" +
                    "				THEN  \n" +
                    "					-- Check Same RFQ Quote Number Record Exist Then set all record for that Quote as Delete  \n" +
                    "					UPDATE component_price_break_details  \n" +
                    "					SET isDeleted = 1,  \n" +
                    "						isHistory = 0,  \n" +
                    "						deletedBy = pUserId,  \n" +
                    "						deleteByRoleId= pRoleId,  \n" +
                    "						deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                    "					 WHERE mfgPNID = pPartId  \n" +
                    "					   AND `type` = 2  \n" +
                    "                       AND rfqNumber = pRfqQuoteNumber  \n" +
                    "					   -- and isHistory = 0  \n" +
                    "					   AND isDeleted = 0;  \n" +
                    "				END IF;  \n" +
                    "					-- Update Other Quote# record as History  \n" +
                    "					UPDATE component_price_break_details  \n" +
                    "						   SET  isHistory = 1,  \n" +
                    "								updatedBy = pUserId,  \n" +
                    "								updateByRoleId= pRoleId,  \n" +
                    "								updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                    "					 WHERE mfgPNID = pPartId  \n" +
                    "					   AND rfqNumber != pRfqQuoteNumber  \n" +
                    "					   AND `type` = 2  \n" +
                    "					   AND isHistory = 0  \n" +
                    "					   AND isDeleted = 0;  \n" +
                    "				-- END IF;  \n" +
                    "  \n" +
                    "				-- Update Part Quote# Part Master  \n" +
                    "				UPDATE component  \n" +
                    "				   SET rfqNumber = pRfqQuoteNumber,  \n" +
                    "						updatedBy = pUserId,  \n" +
                    "						quoteValidTillDate=v_quoteValidTill,  \n" +
                    "						updateByRoleId = pRoleId,  \n" +
                    "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                    "				 WHERE id = pPartId  \n" +
                    "				   AND isDeleted = 0;  \n" +
                    "  \n" +
                    "                -- Insert RFQ Quote Detail into Comonent Price Break Detail(sales Price Metrix)  \n" +
                    "				INSERT INTO component_price_break_details  \n" +
                    "						(mfgPNID, priceBreak, unitPrice, isDeleted, createdAt, createdBy, updatedAt, updatedBy, updatedOn,  \n" +
                    "						createByRoleId, updateByRoleId, `type`, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, rfqNumber, isHistory,rfqAssyID)  \n" +
                    "				SELECT pPartId, priceBreak, unitPrice, 0 /*isDeleted*/, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(), pUserId, fun_DatetimetoUTCDateTime(),  \n" +
                    "						pRoleId, pRoleId, 2/*type*/, turnTime, unitOfTime, salesCommissionPercentage, salesCommissionAmount, pRfqQuoteNumber,FALSE isHistory ,rfqAssyID  \n" +
                    "				 FROM tempSalesCommission;  \n" +
                    "  \n" +
                    "                SELECT x.id, x.priceBreak, x.turnTime, x.unitOfTime, x.unitPrice, x.salesCommissionAmount,  \n" +
                    "					x.salesCommissionPercentage, x.isHistory, x.salesCommissionNotes,x.rfqAssyID  \n" +
                    "			  FROM component_price_break_details AS X WHERE x.mfgPNID = pPartId  \n" +
                    "                 AND x.rfqNumber = pRfqQuoteNumber AND x.`type` = 2 AND x.isHistory = 0 AND x.isDeleted = 0  \n" +
                    "                 ORDER BY priceBreak,turnTime ASC;  \n" +
                    "			ELSE  \n" +
                    "				SELECT * FROM tempSalesCommission ORDER BY priceBreak,turnTime ASC;  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "    END IF;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (5462,'2.00','V1',' Task 38227: Improvement point given by Client - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break;
        case 5462:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-11-2021 *********************************** */
                "ALTER TABLE `mfgcodealias`  \n" +
                "DROP INDEX `unq_mfgcodealias` ,  \n" +
                "ADD UNIQUE INDEX `unq_mfgcodealias` (`mfgcodeId` ASC,`alias` ASC, `unqDate` ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version -> 01-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5463,'2.00','V1','Bug 37656: Manufacturer/Customer : Parallel Testing findings on Dev Branch - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5463:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
           "alter table salesshippingmst add column isReadyToShip TINYINT DEFAULT 0;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5464,'2.00','V1','Add Column IN salesshippingmst table  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5464:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`)  \n" +
            "VALUES ('Allow to View/Update Comments at Shipment Summary', '1', '0', '2021-02-27', '1');  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5465,'2.00','V1','Add feature entry  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5465:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
            "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
            "	IN psalesorderDetID INT ,  \n" +
            "	IN packingSlipID INT,  \n" +
            "	IN ppackingslipDetID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "      SELECT ss.shippingID,  \n" +
            "        ss.sDetId,  \n" +
            "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
            "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
            "        ss.qty,  \n" +
            "        ss.shippingDate,  \n" +
            "        (CASE WHEN ss.description is not null THEN CONCAT_WS(',',ss.releaseNotes,  ss.description)  \n" +
            "			 ELSE ss.releaseNotes END ) releaseNotes,  \n" +
            "        sd.tentativeBuild,  \n" +
            "        sd.qty AS poQty,  \n" +
            "        sd.partID,  \n" +
            "        sd.price,  \n" +
            "        sd.lineID,  \n" +
            "        sd.internalComment,  \n" +
            "        sd.partDescription,  \n" +
            "        sd.remark,  \n" +
            "        c.iscustom,  \n" +
            "		c.mfgpn,  \n" +
            "		c.mfgpndescription,  \n" +
            "		c.pidcode,  \n" +
            "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
            "		c.nickName,  \n" +
            "		c.mfgcodeID,  \n" +
            "		sd.originalPOQty,  \n" +
            "		fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
            "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
            "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
            "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
            "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
            "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
            "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
            "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
            "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
            "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
            "		(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
            "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
            "			AND cpd.isdeleted=0) shippedQty ,  \n" +
            "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
            "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
            "		c.partType,  \n" +
            "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
            "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
            "        sd.refRFQGroupID,  \n" +
            "        sd.refRFQQtyTurnTimeID  ,  \n" +
            "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
            "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
            "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
            "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
            "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
            "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
            "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
            "		c.category partCategory  \n" +
            "	FROM salesshippingmst ss  \n" +
            "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
            "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
            "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
            "	WHERE sd.id=psalesorderDetID  \n" +
            "	AND  sd.isDeleted = 0 AND  \n" +
            "	(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
            "		ss.qty > (SELECT  IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
            "			AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
            "		ELSE  ss.qty=ss.qty  END)  \n" +
            "	AND ss.isdeleted=0  \n" +
            "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
            "  \n" +
            "-- all list of shipping line with other charges  \n" +
            "	SELECT NULL AS shippingID,  \n" +
            "			sDetId,  \n" +
            "			custPOLineNumber,  \n" +
            "			NULL releaseNumber,  \n" +
            "			qty,  \n" +
            "			NULL shippingDate,  \n" +
            "			releaseNotes,  \n" +
            "			tentativeBuild,  \n" +
            "			poQty,  \n" +
            "			partID,  \n" +
            "			price,  \n" +
            "			lineID,  \n" +
            "			partDescription,  \n" +
            "			mfgPN,  \n" +
            "			mfgPNDescription,  \n" +
            "			unitMeaser,  \n" +
            "			nickName,  \n" +
            "			pidcode,  \n" +
            "			NULL shippingMethodID,  \n" +
            "			NULL shippingAddressID,  \n" +
            "			mfgcodeID,  \n" +
            "			mfgName,  \n" +
            "			rohsIcon,  \n" +
            "			rohsName,  \n" +
            "			rohsStatusID,  \n" +
            "			standards,  \n" +
            "			shippedQty   ,  \n" +
            "			remark,  \n" +
            "			internalcomment,  \n" +
            "			mfgPnwihLineId,  \n" +
            "			refSODetID,  \n" +
            "			refSOReleaseLineID,  \n" +
            "			frequency,  \n" +
            "			originalPOQty,  \n" +
            "			frequencyType  \n" +
            "    FROM (SELECT  \n" +
            "			NULL AS shippingID,  \n" +
            "			sd.id AS sDetId,  \n" +
            "			sd.custPOLineNumber custPOLineNumber,  \n" +
            "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
            "			NULL releaseNumber,  \n" +
            "			sd.qty,  \n" +
            "			NULL shippingDate,  \n" +
            "			sd.remark releaseNotes,  \n" +
            "			sd.tentativeBuild,  \n" +
            "			sd.qty AS poQty,  \n" +
            "			sd.partID,  \n" +
            "			sd.price,  \n" +
            "			sd.lineID,  \n" +
            "			sd.partDescription,  \n" +
            "			c.mfgPN,  \n" +
            "			c.mfgPNDescription,  \n" +
            "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
            "			c.nickName,  \n" +
            "			c.pidcode,  \n" +
            "			sd.refSODetID,  \n" +
            "			sd.refSOReleaseLineID,  \n" +
            "			sd.frequency,  \n" +
            "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
            "			NULL shippingMethodID,  \n" +
            "			NULL shippingAddressID,  \n" +
            "			c.mfgcodeID,  \n" +
            "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
            "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
            "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
            "			c.rohsStatusID,  \n" +
            "			sd.originalPOQty,  \n" +
            "			fun_getCertificationByPartID(c.id)standards,  \n" +
            "			sd.frequencyType,  \n" +
            "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
            "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
            "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
            "			sd.remark,  \n" +
            "			sd.internalcomment  \n" +
            "		FROM salesorderdet sd  \n" +
            "		LEFT JOIN component c ON c.id=sd.partid  \n" +
            "		WHERE sd.refSODetID=psalesorderDetID  \n" +
            "		AND sd.isdeleted=0  \n" +
            "    ) a;  \n" +
            "  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5466,'2.00','V1','Sproc_GetPendingSalesShippingDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5466:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
            "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
            "	IN psoposearch LONGTEXT,  \n" +
            "	IN salesorderID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
            "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
            "       SELECT som.id FROM salesordermst som  \n" +
            "     WHERE som.id IN  \n" +
            "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
            "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.isdeleted=0 AND sm.id=sd.refSalesOrderID) AND sd.isdeleted=0  \n" +
            "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
            "							JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
            "							WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
            "                       )) OR som.id=salesorderID;  \n" +
            "  \n" +
            " SET @pWhereClause=\"1=1\";  \n" +
            "  \n" +
            " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
            "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
            "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
            "		so.termsID , so.shippingAddressID,  \n" +
            "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
            "		so.poDate,  \n" +
            "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
            "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
            "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
            "		concat('(',m.mfgcode,') ',m.mfgName, ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
            "		m.mfgName,  \n" +
            "		so.status,so.isLegacyPO,so.isRmaPO ,  \n" +
            "        so.billingAddress, so.shippingAddress, so.intermediateAddress  \n" +
            "	from salesordermst so  \n" +
            "		join mfgcodemst m on m.id=so.customerID  \n" +
            "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
            "  \n" +
            "  IF(salesorderID IS NOT NULL)THEN  \n" +
            "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
            "  END IF;  \n" +
            "	IF(psoposearch IS NOT NULL)THEN  \n" +
            "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
            "  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5467,'2.00','V1','Sproc_GetPendingSalesorderDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5467:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
            "	IN invoiceID INT      ,  \n" +
            "    IN pTransType VARCHAR(5)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE vTimeZone VARCHAR(50);  \n" +
            "  \n" +
            "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
            "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
            "	                 SELECT inv.id,   inv.transType,  \n" +
            "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
            "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
            "                        cps.id packingSlipID,  \n" +
            "						inv.refSalesOrderId  ,  \n" +
            "                        inv.systemID,  \n" +
            "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
            "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
            "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
            "						inv.soNumber,inv.soDate,  \n" +
            "                        inv.packingSlipType,inv.`status`,  \n" +
            "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
            "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
            "						inv.invoiceNumber,inv.invoiceDate,  \n" +
            "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
            "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
            "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
            "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
            "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
            "                        inv.intermediateShipmentId ,  \n" +
            "						inv.billingAddress,  \n" +
            "						inv.shippingAddress,  \n" +
            "						inv.intermediateAddress,  \n" +
            "                        inv.isLocked,  \n" +
            "                        inv.subStatus,  \n" +
            "                        inv.paymentStatus,  \n" +
            "                        inv.packingSlipType,  \n" +
            "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
            "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
            "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
            "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
            "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
            "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
            "                        inv.isZeroValue,  \n" +
            "                        inv.revision,  \n" +
            "                        cps.subStatus packingSlipSubStatus,  \n" +
            "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
            "						ELSE '' END) materialStatus ,  \n" +
            "                        inv.isAlreadyPublished ,  \n" +
            "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
            "			cps.revision packingSlipVersion,  \n" +
            "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
            "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
            "			ELSE NULL END) receivedAmount,  \n" +
            "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
            "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
            "			(CASE WHEN inv.transType = 'C' THEN  \n" +
            "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
            "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
            "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
            "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
            "				END) AS paymentStatusCode,  \n" +
            "			inv.refundStatus,  \n" +
            "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
            "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
            "				sm.isRmaPO,  \n" +
            "				sm.isLegacyPO,  \n" +
            "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
            "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
            "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
            "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
            "			inv.isAskForVersionConfirmation,  \n" +
            "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
            "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  \n" +
            "		FROM customer_packingslip inv  \n" +
            "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
            "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
            "                 WHERE inv.id = invoiceID  \n" +
            "                 AND inv.transType = pTransType  \n" +
            "                 AND inv.isDeleted = 0;  \n" +
            "  \n" +
            "  \n" +
            "				 SELECT cpd.refSalesorderDetid,  \n" +
            "					cpd.id,  \n" +
            "                    cpd.refCustPackingSlipID,  \n" +
            "					cpd.custPOLineID,  \n" +
            "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
            "                    cpd.lineID,  \n" +
            "                    co.PIDCode,  \n" +
            "                    co.mfgcodeID,  \n" +
            "                    ss.releaseNumber,  \n" +
            "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
            "					co.mfgpn,  \n" +
            "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
            "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
            "                    cpd.partId,  \n" +
            "                    cpd.refChargesTypeID,  \n" +
            "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
            "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
            "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
            "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
            "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
            "                    othercharges AS lineOtherCharges,  \n" +
            "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
            "					cpd.shippingNotes,  \n" +
            "                    cpd.internalComment,  \n" +
            "                    cpd.assyDescription,  \n" +
            "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
            "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
            "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
            "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
            "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
            "                    co.partType,  \n" +
            "                    vu.packingLineID,  \n" +
            "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
            "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
            "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
            "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
            "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
            "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
            "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
            "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
            "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
            "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
            "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
            "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
            "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
            "                    cpd.isZeroValue,  \n" +
            "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
            "				 FROM customer_packingslip_det cpd  \n" +
            "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
            "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
            "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
            "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
            "                 ORDER BY cpd.lineID ASC;  \n" +
            "  \n" +
            "                 SELECT cpOther.id,  \n" +
            "						cpOther.refCustomerPackingSlipDetID,  \n" +
            "						cpOther.partID,  \n" +
            "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
            "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
            "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
            "                        cpOther.qty,  \n" +
            "                        cpOther.price,  \n" +
            "                        cpOther.lineComment,  \n" +
            "                         cpOther.lineInternalComment,  \n" +
            "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
            "                        cpOther.frequency ,  \n" +
            "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
            "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
            "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
            "								ELSE ''  \n" +
            "						END) AS frequencyName,  \n" +
            "			cpOther.frequencyType,  \n" +
            "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
            "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
            "								ELSE ''  \n" +
            "						END) AS frequencyTypeName  \n" +
            "                 FROM  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "                   customer_packingslip_otherexpense_details cpOther  \n" +
            "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
            "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
            "                 AND cpOther.isdeleted=0;  \n" +
            "  \n" +
            "                  --  Tracking Number  \n" +
            "                SELECT id,trackNumber  \n" +
            "                FROM customer_packing_slip_track_number  \n" +
            "                WHERE refCustPackingSlipID = invoiceID  \n" +
            "                AND isDeleted = 0;  \n" +
            "  \n" +
            "                -- sales commission attribute  \n" +
            "                SELECT cca.id,  \n" +
            "		    cca.refCustPackingSlipDetID,  \n" +
            "                    cca.unitPrice,  \n" +
            "                    cca.commissionPercentage,  \n" +
            "                    cca.commissionValue,  \n" +
            "                    cca.quoted_commissionPercentage,  \n" +
            "                    cca.quoted_commissionValue,  \n" +
            "                    cca.poQty,  \n" +
            "                    cca.partId,  \n" +
            "                    cca.quotedQty,  \n" +
            "                    cca.type,  \n" +
            "                    cca.rfqAssyID,  \n" +
            "                    cca.commissionCalculateFrom,  \n" +
            "                    cca.salesCommissionNotes,  \n" +
            "                    cca.refComponentSalesPriceBreakID,  \n" +
            "                    cca.quoted_unitPrice  \n" +
            "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
            "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
            "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
            "                 AND cca.isdeleted=0;  \n" +
            "                 -- sales commission child attribute  \n" +
            "                SELECT cca.id,  \n" +
            "		    cca.refCustPackingSlipDetID,  \n" +
            "		    cca.refcustInvoiceCommissionID,  \n" +
            "                    cca.unitPrice,  \n" +
            "                    cca.refQuoteAttributeId,  \n" +
            "                    cca.commissionPercentage,  \n" +
            "                    cca.commissionValue,  \n" +
            "                    cca.org_commissionPercentage,  \n" +
            "                    cca.org_commissionValue,  \n" +
            "                    cca.category,  \n" +
            "                    cca.partId,  \n" +
            "                    cca.refComponentSalesPriceBreakID,  \n" +
            "                    cca.org_unitPrice,  \n" +
            "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
            "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
            "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
            "				FROM customer_packingslip_commission_attribute cca  \n" +
            "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
            "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
            "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
            "                 AND cca.isdeleted=0;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5468,'2.00','V1','Sproc_GetCustomerInvoiceDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5468:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP FUNCTION IF EXISTS fun_GetSalesOrderHeaderWorkStatus;  \n" +
            "CREATE FUNCTION `fun_GetSalesOrderHeaderWorkStatus`(  \n" +
            "	 pSalesOrderId INT  \n" +
            ") RETURNS tinyint  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE vCompletedDetailCount INT DEFAULT 0;  \n" +
            "    DECLARE vDetailCount INT DEFAULT 0;  \n" +
            "    DECLARE vSOWorkingStatus TINYINT;  \n" +
            "    DECLARE vCancelDetailCount INT DEFAULT 0;  \n" +
            "  \n" +
            "    SELECT COUNT(1) , SUM(CASE WHEN salesOrderDetStatus = 2 THEN 1 ELSE  0 END),SUM(CASE WHEN iscancle=1 THEN 1 ELSE 0 END )  \n" +
            "    INTO vDetailCount,vCompletedDetailCount,vCancelDetailCount  \n" +
            "    FROM SalesOrderDet sod  \n" +
            "    WHERE sod.refSalesOrderId = pSalesOrderId  \n" +
            "    AND isDeleted = 0;  \n" +
            "	# 1-In Progress 2- Completed  \n" +
            "	IF vDetailCount = vCompletedDetailCount THEN  \n" +
            "		SET vSOWorkingStatus = 2 ;  \n" +
            "    ELSEIF  vDetailCount= vCancelDetailCount THEN  \n" +
            "       SET vSOWorkingStatus = -1 ;  \n" +
            "     ELSE  \n" +
            "    	SET vSOWorkingStatus = 1 ;  \n" +
            "    END IF;  \n" +
            "    -- SELECT vSOWorkingStatus AS `SOWorkingStatus`;  \n" +
            "	RETURN vSOWorkingStatus;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5469,'2.00','V1','fun_GetSalesOrderHeaderWorkStatus  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5469:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP VIEW IF EXISTS vu_salesorder_workorder_list;  \n" +
            "CREATE VIEW `vu_salesorder_workorder_list` AS  \n" +
            "    SELECT  \n" +
            "        `woso`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
            "        `woso`.`partID` AS `partID`,  \n" +
            "        `wo`.`woNumber` AS `woNumber`  \n" +
            "    FROM  \n" +
            "        (`workorder_salesorder_details` `woso`  \n" +
            "        JOIN `workorder` `wo` ON (((`woso`.`woID` = `wo`.`woID`)  \n" +
            "            AND (`wo`.`isDeleted` = 0))))  \n" +
            "    WHERE  \n" +
            "        (`woso`.`isDeleted` = 0)  \n" +
            "    UNION SELECT  \n" +
            "        `ass`.`refSalesOrderDetID` AS `salesOrderDetailID`,  \n" +
            "        `ass`.`partID` AS `partID`,  \n" +
            "        `ass`.`woNumber` AS `woNumber`  \n" +
            "    FROM  \n" +
            "        `assemblystock` `ass`  \n" +
            "    WHERE  \n" +
            "        ((`ass`.`isDeleted` = 0)  \n" +
            "            AND (`ass`.`type` = 'OS'));  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5470,'2.00','V1',' vu_salesorder_workorder_list - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5470:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderReleaseLineDetails;  \n" +
            "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
            "IN pSalesOrderDetID  INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "          SELECT ss.shippingID,  \n" +
            "                 ss.qty,  \n" +
            "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
            "                 ss.shippingDate,  \n" +
            "                 ss.shippingAddressID,  \n" +
            "                 ss.description,  \n" +
            "                 ss.priority,  \n" +
            "                 ss.packingSlipNo,  \n" +
            "                 ss.invoiceNo,  \n" +
            "                 ss.releaseNotes,  \n" +
            "                 ss.releaseNumber,  \n" +
            "                 ss.requestedDockDate,  \n" +
            "                 ss.carrierID,  \n" +
            "                 ss.carrierAccountNumber,  \n" +
            "                 ss.promisedShipDate,  \n" +
            "                 ss.shippingMethodID,  \n" +
            "                 ss.revisedRequestedDockDate,  \n" +
            "                 ss.revisedRequestedShipDate,  \n" +
            "                 ss.revisedRequestedPromisedDate,  \n" +
            "                 ss.isAgreeToShip,  \n" +
            "                 1 AS isShippingDateConfirm,  \n" +
            "                 1 AS isrequestedDockDateConfirm,  \n" +
            "                 1 AS promisedShipDateConfirm,  \n" +
            "                 1 AS isRevisedShippingDateConfirm,  \n" +
            "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
            "                 1 AS revisedPromisedShipDateConfirm,  \n" +
            "                 ss.customerReleaseLine,  \n" +
            "                 shp.shippedQty,  \n" +
            "                 ss.isReadyToShip  \n" +
            "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
            "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
            "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
            "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
            "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
            "  \n" +
            "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
            "  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5471,'2.00','V1','Sproc_getSalesOrderReleaseLineDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5471:
        allDbChangesArray.push(
        /* **************************** New Script -> 2-12-2021 *********************************** */
            "DROP PROCEDURE  IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
            "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pCustomerID INT,  \n" +
            "    IN pSearchText VARCHAR(1000) ,  \n" +
            "    IN pSoDetCompletedStatus TINYINT,  \n" +
            "    IN pAllowToUpdateComment TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vMfgCodeFormat INT;  \n" +
            "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
            "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
            "   	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
            "  \n" +
            "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pCustomerID IS NOT NULL THEN  \n" +
            "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
            "	ELSE  \n" +
            "		SET headerWhereClause = ' 1=1 ';  \n" +
            "    END IF;  \n" +
            "    /*IF pIncludeCompletedPO IS NOT NULL OR pIncludeCompletedPO  = 1 THEN  \n" +
            "  \n" +
            "    END IF;*/  \n" +
            "    IF pSearchText IS NOT NULL  THEN  \n" +
            "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
            "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
            "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
            "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
            "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
            "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
            "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
            "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
            "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
            "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
            "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
            "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
            "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
            "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
            "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
            "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
            "		/*SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
            "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
            "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
            "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
            "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
            "                                        OR soDetail.woComment like '%\",pSearchText,\"%' )\");  */  \n" +
            "    /*ELSE  \n" +
            "        SET detailWhereClause = '1=1';  */  \n" +
            "    END IF;  \n" +
            "-- select headerWhereClause;  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
            "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
            "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
            "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
            "						customerID, mfgCode, mfgName, customerName,  \n" +
            "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
            "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
            "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus  \n" +
            "    from (select som.id as soId, som.salesOrderNumber,  \n" +
            "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
            "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
            "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
            "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
            "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
            "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
            "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
            "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
            "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
            "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
            "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
            "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
            "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
            "            fun_GetSalesOrderHeaderWorkStatus(som.id) workingStatus  \n" +
            "	from salesordermst som  \n" +
            "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
            "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
            "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
            "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
            "    where som.isDeleted = 0  \n" +
            "    ) salesOrder where (salesOrder.workingStatus in (1,-1) OR salesOrder.workingStatus = \",ifnull(pSoDetCompletedStatus,1),\") and \",headerWhereClause, \"  \n" +
            "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
            "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
            "        order by mfgName\", rowNumWhere) ;  \n" +
            "-- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
            "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
            "    select soDetId,  \n" +
            "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
            "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
            "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,partSpecialNote,  \n" +
            "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  , cancelStatus, isHotJob,isDetHalt,  \n" +
            "                soWorkingStatus, materialTentitiveDocDate  \n" +
            "	from (select  sod.id as soDetId,  \n" +
            "				sod.refSalesOrderID,  \n" +
            "				sod.partID,  \n" +
            "				sod.lineID,  \n" +
            "				sod.qty as custPOQty,  \n" +
            "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
            "				sod.internalComment,  \n" +
            "				sod.remark as shippingComment,  \n" +
            "				sod.isCancle,  \n" +
            "                ifnull(sod.partDescription,'-') partDescription,  \n" +
            "                sod.salesOrderDetStatus,  \n" +
            "                sod.custPOLineNumber,  \n" +
            "				co.PIDCode,  \n" +
            "				co.mfgPN,  \n" +
            "                co.mfgcodeID,  \n" +
            "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
            "				rohs.name AS rohsName,  \n" +
            "				rohs.rohsIcon,  \n" +
            "                co.nickName,  \n" +
            "                co.partType,  \n" +
            "                co.isCustom,  \n" +
            "                co.specialNote partSpecialNote,  \n" +
            "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
            "                cpd.shippedQty,  \n" +
            "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
            "                sod.isCancle cancelStatus,  \n" +
            "                sod.isHotJob,  \n" +
            "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
            "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
            "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
            "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
            "                materialTentitiveDocDate  \n" +
            "		from salesorderdet sod  \n" +
            "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
            "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
            "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
            "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
            "					from customer_packingslip_det  cpd  \n" +
            "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
            "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
            "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
            "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
            "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
            "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
            "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
            "			on holdTrans.refTransid = sod.id  \n" +
            "		where sod.isDeleted = 0  \n" +
            "	) a;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
            "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
            "    select soDetId,  \n" +
            "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
            "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
            "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
            "                 cpsDetailCnt, cpsIndex ,isReadyToShip  \n" +
            "	from (select  sod.id as soDetId,  \n" +
            "				sod.refSalesOrderID,  \n" +
            "				sod.partID,  \n" +
            "				sod.lineID,  \n" +
            "				sod.qty as custPOQty,  \n" +
            "				sod.internalComment,  \n" +
            "				sod.remark as shippingComment,  \n" +
            "                soship.releaseNotes releaseLineComment,  \n" +
            "				sod.isCancle,  \n" +
            "                soship.shippingID releaseId,  \n" +
            "				soship.releaseNumber,  \n" +
            "				soship.promisedShipDate,  \n" +
            "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
            "				cpd.refCustPackingSlipID,  \n" +
            "                cpd.id packingSlipDetId,  \n" +
            "				cpd.shipQty AS shippedQty,  \n" +
            "                cp.packingSlipDate ,  \n" +
            "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
            "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
            "                soship.isReadyToShip  \n" +
            "		from salesorderdet sod  \n" +
            "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
            "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
            "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
            "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
            "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
            "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
            "		where sod.isDeleted = 0  \n" +
            "	) a;  \n" +
            "  \n" +
            "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
            "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
            "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
            "-- select @SQLStatement1 ;  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  */  \n" +
            "	SELECT * from temp_so_mst;  \n" +
            "  \n" +
            "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
            "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID \");  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            " 	SELECT * from temp_so_rel_detail;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 2-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5472,'2.00','V1',' Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5472:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-11-2021  ********************************* */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'In Progress'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** Add Script Version -> 02-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(  \n" +
                "	pExcludeCanceled TINYINT,  \n" +
                "	pSalesOrderDetailID INT,  \n" +
                "	pSearch VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = \"	SELECT  k.*,  \n" +
                "								IF(numberOfSubAssy > 0 ,  CONCAT(searchQuery,', (', numberOfSubAssy , ')') , searchQuery)  AS salescolumn  \n" +
                "						FROM (  \n" +
                "								SELECT  \n" +
                "									`Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`,  \n" +
                "									AssyDescr,			AssySpecialNote,  \n" +
                "                                    fun_replaceSpecialCharacters(`Po Number`) poNumwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy ID`) AssyIDwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy Name`) AssyNamewithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`kitNumber`) kitNumberwithoutSpecialChar,  \n" +
                "									`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`,  \n" +
                "									`NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`,  \n" +
                "									`RohsIcon`,   `materialDueDate`,  `shippingDate`,  `Company Name`, 	  `Po Date`,  \n" +
                "									`kitNumber`,   `isSkipKitCreation`,  `Company Code`,  \n" +
                "									CONCAT(`Assy ID`, ', ',`Po Number`,', ',`Sales Order`,', ',`PO Qty`,', ',`kitNumber`) searchQuery,  \n" +
                "									(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy  \n" +
                "									FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 ) as k WHERE 1 = 1\";  \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `Status` != 'Canceled'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pSalesOrderDetailID IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");  \n" +
                "    END IF;  \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT  s.* FROM (  \n" +
                "								\",@SQLStatement1,\"	) as s WHERE  \n" +
                "							salescolumn LIKE '%\", pSearch ,\"%' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*, IF(scrappedUnit > 0, ROUND(((IFNULL(scrappedUnit ,0)/requiredQtyBuild) * 100), 2), 0) perScrapQty  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  	isPurchase,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            (IFNULL(consumeUnits,0) -  IFNULL(c.requiredQtyBuild,0)) scrappedUnit,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID,				scrappedUnit  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pLineId LONGTEXT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId  \n" +
                "		FROM kit_allocation ka  \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id  \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND  \n" +
                "				ka.status = 'A' AND  \n" +
                "                css.isdeleted = 0 AND  \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE  \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*,  IF(scrappedUnit > 0, ROUND(((IFNULL(scrappedUnit ,0)/requireQty) * 100), 2), 0) perScrapQty  \n" +
                "		FROM	(  \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  	isPurchaseWithDNP AS isPurchase,  \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "					uomID, 			unitName,    			uomClassID,						isInstall,				c.connecterTypeID,  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName as name,  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,  \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,  \n" +
                "					allocatedPins,		scrapedPins,  \n" +
                "					(IFNULL(consumeUnits,0) -  IFNULL(requireQty,0)) scrappedUnit,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildPins,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailableQty,  \n" +
                "                    (  \n" +
                "						CASE  \n" +
                "							WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "							ELSE  \n" +
                "								CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END  \n" +
                "						END  \n" +
                "					) shortagePerBuildWithAvailablePins  \n" +
                "				FROM	(  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,  		a.isPurchaseWithDNP,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
                "							a.restrictCPNUseInBOMStep,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,  \n" +
                "							a.uomID, 				u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "							a.isInstall,			a.connecterTypeID,  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
                "							',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
                "							',fun_getMFRPNIdsWithPackagingforkit(pRefSalesOrderDetID),',  \n" +
                "							a.numOfPosition,  \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a  \n" +
                "                    INNER JOIN 	uoms u ON a.uomID = u.id AND u.isDeleted = 0  \n" +
                "					INNER JOIN 	(  \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,  \n" +
                "										SUM(b.scrapedPins) scrapedPins  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a  \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
                "				) AS  c  \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)  \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,  		isPurchaseWithDNP,  \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID,  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,  \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,  \n" +
                "						consumeQty,		allocatedPins,			scrapedPins,		uomClassID,		scrappedUnit  \n" +
                "		)  \n" +
                "		AS  mainQuery  \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5473,'2.00','V1','User Story 33849: Implement Scrapped material concept into KIT/UMID/PART level - For Kit allocation changes - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5473:
            allDbChangesArray.push(
            /* **************************** New Script -> 2-12-2021 *********************************** */
                "drop PROCEDURE if exists Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "       SELECT som.id FROM salesordermst som  \n" +
                "     WHERE som.id IN  \n" +
                "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.isdeleted=0 AND sm.id=sd.refSalesOrderID) AND sd.isdeleted=0  \n" +
                "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "							JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "							WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "                       )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat('(',m.mfgcode,') ',m.mfgName, ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 2-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5474,'2.00','V1','Sproc_GetPendingSalesorderDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    case 5474:
          allDbChangesArray.push(
          /* **************************** New Script -> 02-11-2021 *********************************** */
            "ALTER TABLE supplier_mapping_mst ADD COLUMN isCustMapping INT default 0;  \n" +
          /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `TRG_AI_supplier_mapping_mst`;  \n" +
            "CREATE TRIGGER `TRG_AI_supplier_mapping_mst` AFTER INSERT ON `supplier_mapping_mst` FOR EACH ROW BEGIN  \n" +
            "	SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;  \n" +
            "  \n" +
            "	IF @mfgtype='DIST' THEN  \n" +
            "		IF (NEW.isCustMapping = 0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Manufacturer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "		ELSE  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Customer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	ELSE  \n" +
            "		IF @iscustordisty=1 THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "			VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Added Customer Mapping',NULL, CAST(fun_getMfgCodeAndNameByID(NEW.refmfgcodemstid) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
          /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP TRIGGER IF EXISTS `TRG_AU_supplier_mapping_mst`;  \n" +
            "CREATE TRIGGER `TRG_AU_supplier_mapping_mst` AFTER UPDATE ON `supplier_mapping_mst` FOR EACH ROW BEGIN  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
            "		SELECT mfgtype,iscustordisty INTO @mfgtype,@iscustordisty FROM mfgcodemst WHERE id=NEW.supplierid;  \n" +
            "		IF @mfgtype='DIST' THEN  \n" +
            "			IF (NEW.isCustMapping = 0) THEN  \n" +
            "				INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "				VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Manufacturer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "			ELSE  \n" +
            "				INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "				VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Customer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "			END IF;  \n" +
            "		ELSE  \n" +
            "			IF @iscustordisty=1 THEN  \n" +
            "				INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
            "				VALUES('SUPPLIERMAPPINGMST',CAST(NEW.id AS CHAR),'Removed Customer Mapping',CAST(fun_getMfgCodeAndNameByID(OLD.refmfgcodemstid) AS CHAR), NULL,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
          /* **************************** Add Script Version -> 02-11-2021 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5475,'2.00','V1',' User Story 37431 and 37432 : Improvement point given by client in purchase order and packing slip page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
          );
        break;
    case 5475:
        allDbChangesArray.push(
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
            "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	-- IN pIsMFG TINYINT(1),  \n" +
            "	IN pmfgType VARCHAR(20),  \n" +
            "	IN pisCustOrDisty TINYINT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
            "    DECLARE vTimeZone VARCHAR(50);  \n" +
            "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
            "  \n" +
            "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
            "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
            "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
            "		mc.isSupplierEnable,  \n" +
            "		mc.externalSupplierOrder,  \n" +
            "		mc.systemID,mc.customerSystemID,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
            "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
            "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
            "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
            "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
            "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
            "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
            "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
            "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
            "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
            "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
            "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and scm.isCustMapping=0 and smm.isDeleted= 0) mappingMfr,  \n" +
            "        (SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(scm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst scm WHERE scm.supplierid=mc.id and scm.isCustMapping=1 and scm.isDeleted= 0) customerMapping,  \n" +
            "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
            "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
            "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
            "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
            "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
            "            wbw.acquired,  \n" +
            "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
            "        '@@@',fun_getUserNameByID(createdBy),  \n" +
            "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
            "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
            "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
            "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
            "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
            "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
            "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
            "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
            "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
            "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
            "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
            "		 ,gc.gencCategoryName,  \n" +
            "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
            "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
            "		END AS isCustOrDistyText,  \n" +
            "        mc.displayOrder,  \n" +
            "        mc.invoicesRequireManagementApproval,  \n" +
            "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
            "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
            "		mc.taxID,  \n" +
            "        mc.accountRef,  \n" +
            "        mc.paymentMethodID,  \n" +
            "		pc.gencCategoryName paymentMethodName,  \n" +
            "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
            "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
            "		mc.acctId  \n" +
            "	FROM mfgcodemst mc  \n" +
            "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
            "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
            "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
            "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
            "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
            "			FROM  who_bought_who wbwi  \n" +
            "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
            "            AND wbwi.isDeleted = 0) wbw  \n" +
            "			ON wbw.buyTo = mc.id  \n" +
            "	WHERE mc.isdeleted = 0  \n" +
            "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
            "  \n" +
            "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "   /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	 PREPARE query1 FROM @SQLStatement2;  \n" +
            "	 EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetActiveSalesOrderDetailList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetActiveSalesOrderDetailList`(  \n" +
            "	IN pPartID INT(11),  \n" +
            "	IN pWOID INT(11),  \n" +
            "	IN pCustomerID INT(11)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE whereClause VARCHAR(500);  \n" +
            "	SET whereClause = \"AND co.category = 3 AND co.deletedAt IS NULL\";  \n" +
            "  \n" +
            "	-- fca then default get all assy  \n" +
            "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1) > 0 THEN  \n" +
            "	 	SET pCustomerID = NULL;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pCustomerID IS NOT NULL THEN  \n" +
            "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.mfgcodeID in(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\"  and smm.isCustMapping=0)) and  \n" +
            "		(sm.customerID=\",pCustomerID,\" or sm.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\" and smm.isCustMapping=0)  \n" +
            "		)\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "		SELECT  	sd.id id,  \n" +
            "				sd.refSalesOrderID refSalesOrderID,  \n" +
            "				sd.qty qty,  \n" +
            "				sd.price price,  \n" +
            "				sd.mrpQty mrpQty,  \n" +
            "				sd.shippingQty shippingQty,  \n" +
            "				sd.remark remark,  \n" +
            "				sd.isHotJob isHotJob,  \n" +
            "				sd.partID partID,  \n" +
            "				sd.lineID lineID,  \n" +
            "				sd.isCancle isCancle,  \n" +
            "				sm.salesOrderNumber salesOrderNumber,  \n" +
            "				sm.poNumber poNumber,  \n" +
            "				sm.poDate poDate,  \n" +
            "				sm.customerID customerID,  \n" +
            "				sm.revision revision,  \n" +
            "				sm.status `status`,  \n" +
            "				sm.soDate soDate,  \n" +
            "				co.PIDCODE AS PIDCode,  \n" +
            "				co.mfgPN AS mfgPN,  \n" +
            "				ro.rohsIcon,  \n" +
            "				`ro`.`name` AS `rohsName` ,  \n" +
            "				(  \n" +
            "					CASE  \n" +
            "						WHEN 	sd.partID = \",pPartID,\" THEN  \n" +
            "								1  \n" +
            "						ELSE  \n" +
            "								2  \n" +
            "					END  \n" +
            "				) AS AssyType,  \n" +
            "				(  \n" +
            "					SELECT perAssyBuildQty  \n" +
            "					FROM 	kit_allocation_assy_detail  \n" +
            "					WHERE 	refSalesorderdetid = sd.id  \n" +
            "							AND partId = \",pPartID,\"  \n" +
            "							AND isDeleted = 0  \n" +
            "				) AS qpaa,  \n" +
            "				(  \n" +
            "					CASE 	WHEN 	\",IFNULL(pWOID,0),\" = 0 THEN 0  \n" +
            "						ELSE 	(  \n" +
            "								SELECT 	IFNULL(SUM(wsd.poQty),0) - IFNULL(SUM(wsd.scrapQty),0)  \n" +
            "								FROM 	workorder_salesorder_details wsd  \n" +
            "								WHERE 	wsd.salesOrderDetailID = sd.id  \n" +
            "										AND wsd.parentPartID = sd.partID  \n" +
            "										AND wsd.deletedAt IS NULL  \n" +
            "										AND IFNULL(wsd.isDeleted,0)= 0  \n" +
            "										AND wsd.woID <> \",IFNULL(pWOID,0),\"  \n" +
            "							)  \n" +
            "					END  \n" +
            "				) AS totalAssignedQty , astk.initialStockCount  \n" +
            "		FROM 		salesorderdet sd  \n" +
            "		LEFT JOIN 	salesordermst sm ON (sm.id = sd.refSalesOrderID AND sm.deletedAt IS NULL AND IFNULL(sm.isDeleted,0)=0)  \n" +
            "		LEFT JOIN 	component co ON sd.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
            "		LEFT JOIN 	rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
            "		LEFT JOIN 	mfgcodemst mfg ON co.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
            "        LEFT JOIN	vu_salesorder_updatedlist_report vsur ON sd.id = vsur.SalesOrderDetailId  \n" +
            "        LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
            "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
            "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
            "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
            "		WHERE 		sd.isDeleted =0  \n" +
            "					AND sd.partCategory=3  \n" +
            "					AND IFNULL(sd.isCancle,0) = 0  \n" +
            "					AND sd.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\")\",  \n" +
            "                    \"AND sd.salesOrderDetStatus = 1 \", whereClause,'  \n" +
            "		order by 	co.PIDCode  \n" +
            "	');  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetAllOtherComponentList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "      DECLARE pmfgCodeID INT;  \n" +
            "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
            "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
            "  \n" +
            "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
            "      FROM supplier_mapping_mst  \n" +
            "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
            "  \n" +
            "      #get component having mfg as iscompany and part type other  \n" +
            "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
            "      cp.name AS packagingName,  \n" +
            "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
            "      c.frequencyType  \n" +
            "      FROM component c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
            "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
            "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
            "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
            "      WHERE c.partType=4  \n" +
            "      AND c.isdeleted=0  \n" +
            "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
            "      AND c.isGoodPart  = 1;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5476,'2.00','V1',' User Story 37431 and 37432 : Improvement point given by client in purchase order and packing slip page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5476:
        allDbChangesArray.push(
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC`;  \n" +
            "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
            "	IN pCustomerID INT,  \n" +
            "	IN pSearch VARCHAR(300),  \n" +
            "	IN pPartID INT,  \n" +
            "	IN pisFromSO TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
            "		customerID INT  \n" +
            "    );  \n" +
            "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
            "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
            "		SET pCustomerID = NULL;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
            "    IF 	pCustomerID IS NOT NULL THEN  \n" +
            "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
            "        INSERT INTO temp_Customers  \n" +
            "		SELECT buyTo AS customerID  \n" +
            "		FROM acquireCustomers;  \n" +
            "        INSERT INTO temp_Customers  \n" +
            "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
            "		FROM supplier_mapping_mst smm  \n" +
            "		WHERE smm.supplierID = pCustomerID  \n" +
            "        AND smm.isDeleted = 0  \n" +
            "        AND smm.isCustMapping=0;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
            "	SELECT *  \n" +
            "    FROM (  \n" +
            "		SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
            "				co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
            "				ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
            "				co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,  \n" +
            "				mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
            "				cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
            "		FROM 	component co  \n" +
            "		INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  \n" +
            "												AND mfg.isDeleted = 0  \n" +
            "												AND mfg.mfgType = 'MFG'  \n" +
            "												-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)  \n" +
            "												AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
            "														THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = mfg.id))  \n" +
            "														ELSE 1 = 1  \n" +
            "													END)  \n" +
            "		INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
            "		INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
            "		LEFT JOIN (  \n" +
            "			SELECT 	csd.componentID,  \n" +
            "					GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
            "					GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
            "											THEN cs.fullName  \n" +
            "										ELSE  \n" +
            "											(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
            "											FROM standard_class s  \n" +
            "											WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
            "								END  \n" +
            "								ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
            "								SEPARATOR ', ') standards  \n" +
            "			FROM component_standard_details csd  \n" +
            "			INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
            "			WHERE csd.isDeleted = 0  \n" +
            "			GROUP BY csd.componentID  \n" +
            "		) cst ON co.id = cst.componentID  \n" +
            "		WHERE co.id > 0  \n" +
            "		AND co.id = IFNULL(pPartID, co.id)  \n" +
            "		AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
            "		AND co.isDeleted = 0  \n" +
            "		AND co.isGoodPart = 1  \n" +
            "		AND co.partType != 4  \n" +
            "    ) AS co  \n" +
            "    WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
            "				THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
            "				ELSE 1 = 1  \n" +
            "		END);  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
            "	IN pSearch VARCHAR(300),  \n" +
            "	IN pId INT,  \n" +
            "	IN pMfgType VARCHAR(50),  \n" +
            "	IN pRoHSStatusID VARCHAR(100),  \n" +
            "	IN pMfgCodeId INT,  \n" +
            "	IN pCategoryID INT,  \n" +
            "	IN pIsContainCPN TINYINT,  \n" +
            "	IN prefSupplierMfgpnComponentID INT,  \n" +
            "	IN ppackagingID INT,  \n" +
            "	IN pstrictCustomPart TINYINT,  \n" +
            "	IN psupplierID INT,  \n" +
            "	IN pofftheself TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	IF (pstrictCustomPart=1) THEN  \n" +
            "		/*<===this logic is added to compare invert rohs category */  \n" +
            "		/* this logic used in purchase order when supplier is strictly custom part */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS tempcomponent;  \n" +
            "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
            "			SELECT smm.refMfgCodeMstID  \n" +
            "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID  \n" +
            "			UNION  \n" +
            "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
            "			UNION  \n" +
            "			SELECT psupplierID AS refMfgCodeMstID;  \n" +
            "		ELSE  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
            "			SELECT psupplierID AS refMfgCodeMstID  \n" +
            "			UNION  \n" +
            "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
            "			UNION  \n" +
            "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
            "			UNION  \n" +
            "			SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;  \n" +
            "		END IF;  \n" +
            "		SELECT * FROM  \n" +
            "			(  \n" +
            "				SELECT `com`.`id`,  \n" +
            "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
            "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
            "					`com`.`mfgPN` orgMfgPN,  \n" +
            "					`com`.`packaginggroupID`,  \n" +
            "					`com`.`packagingID`,  \n" +
            "					`com`.`PIDCode`,  \n" +
            "					`com`.`isGoodPart`,  \n" +
            "					`com`.`RoHSStatusID`,  \n" +
            "					`com`.`rohsgroupID`,  \n" +
            "					`com`.`mfgcodeID`,  \n" +
            "					`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
            "					`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
            "					`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
            "					`com`.`category`,  \n" +
            "					`com`.`imageURL`,  \n" +
            "					`com`.`documentPath`,  \n" +
            "					`com`.`mfgPNDescription`,  \n" +
            "					`com`.`minOperatingTemp`,  \n" +
            "					`com`.`maxOperatingTemp`,  \n" +
            "					`com`.`value`,  \n" +
            "					`com`.`partPackage`,  \n" +
            "					`com`.`powerRating`,  \n" +
            "					`com`.`functionalCategoryID`,  \n" +
            "					`com`.`mountingTypeID`,  \n" +
            "					`com`.`connecterTypeID`,  \n" +
            "					`com`.`noOfPosition`,  \n" +
            "					`com`.`noOfRows`,  \n" +
            "					`com`.`pitch`,  \n" +
            "					`com`.`pitchMating`,  \n" +
            "					`com`.`length`,  \n" +
            "					`com`.`width`,  \n" +
            "					`com`.`height`,  \n" +
            "					`com`.`voltage`,  \n" +
            "					`com`.`weight`,  \n" +
            "					`com`.`feature`,  \n" +
            "					`com`.`color`,  \n" +
            "					`com`.`partStatus`,  \n" +
            "					`com`.`uom`,  \n" +
            "					`com`.`uomClassID`,  \n" +
            "					`com`.`unit`,  \n" +
            "					`com`.`restrictUsePermanently`,  \n" +
            "					`com`.`restrictUSEwithpermission`,  \n" +
            "					`com`.`restrictPackagingUsePermanently`,  \n" +
            "					`com`.`restrictPackagingUseWithpermission`,  \n" +
            "					`u`.`abbreviation` AS uomName,  \n" +
            "					`u`.`unitName` AS  unitName,  \n" +
            "					`r`.`rohsIcon`,  \n" +
            "					`r`.`name` AS rohsName,  \n" +
            "					`com`.`partPackageID`,  \n" +
            "					`com`.`bomLock`,  \n" +
            "					`com`.`businessRisk`,  \n" +
            "					`com`.`costCategoryID`,  \n" +
            "					`com`.`deviceMarking`,  \n" +
            "					`com`.`driverToolRequired`,  \n" +
            "					`com`.`eau`,  \n" +
            "					`com`.`epicorType`,  \n" +
            "					`com`.`functionalTestingRequired`,  \n" +
            "					`com`.`heightText`,  \n" +
            "					`com`.`isCPN`,  \n" +
            "					`com`.`isCustom`,  \n" +
            "					`com`.`leadTime`,  \n" +
            "					`com`.`matingPartRquired`,  \n" +
            "					`com`.`maxPriceLimit`,  \n" +
            "					`com`.`maxQtyonHand`,  \n" +
            "					`com`.`minimum`,  \n" +
            "					`com`.`mult`,  \n" +
            "					`com`.`packageQty`,  \n" +
            "					`com`.`partType`,  \n" +
            "					`com`.`pcbPerArray`,  \n" +
            "					`com`.`pickupPadRequired`,  \n" +
            "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
            "					`com`.`plannedValuePerBuild`,  \n" +
            "					`com`.`programingRequired`,  \n" +
            "					`com`.`rfqOnly`,  \n" +
            "					`com`.`saftyStock`,  \n" +
            "					`com`.`scrapRatePercentagePerBuild`,  \n" +
            "					`com`.`scrapValuePerBuild`,  \n" +
            "					`com`.`selfLifeDays`,  \n" +
            "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
            "					`com`.`temperatureCoefficient`,  \n" +
            "					`com`.`temperatureCoefficientUnit`,  \n" +
            "					`com`.`temperatureCoefficientValue`,  \n" +
            "					`com`.`trackSerialNumber`,  \n" +
            "					`com`.`refSupplierMfgpnComponentID`,  \n" +
            "					`com`.`refMfgPNMfgCodeId`,  \n" +
            "					`com`.`internalReference`,  \n" +
            "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
            "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
            "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
            "				FROM `component` AS `com`  \n" +
            "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
            "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
            "						AND (`mfgCodemst`.`isDeleted`=0  \n" +
            "                        AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
            "				JOIN `rfq_rohsmst` AS `r`  \n" +
            "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
            "				JOIN  `uoms` AS `u`  \n" +
            "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
            "				WHERE `com`.`isdeleted`=0  \n" +
            "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
            "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
            "					AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
            "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
            "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
            "					AND `com`.`mfgcodeid` IN (SELECT refMfgCodeMstID FROM tempcomponent)  \n" +
            "					AND (`com`.`isGoodPart`=1)  \n" +
            "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
            "			) AS a  \n" +
            "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
            "			OR (pSearch IS NOT NULL  \n" +
            "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
            "					OR pidcode LIKE CONCAT('%', pSearch , '%')  \n" +
            "					OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "	ELSEIF (pofftheself=1 AND pstrictCustomPart=0) THEN  \n" +
            "		/* this logic used in purchase order  \n" +
            "		packing slip  \n" +
            "		UMID management  \n" +
            "		Component Master  \n" +
            "		Reserve Stock  \n" +
            "		Component Assy DFM  \n" +
            "		Reports  \n" +
            "		Price Break Update  \n" +
            "		Customer Part  \n" +
            "		Good-Bad Mapping Part  \n" +
            "		Supplier Quote  \n" +
            "		Supplier RMA */  \n" +
            "		SELECT * FROM  \n" +
            "			(  \n" +
            "				SELECT `com`.`id`,  \n" +
            "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
            "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
            "					`com`.`mfgPN` orgMfgPN,  \n" +
            "					`com`.`packaginggroupID`,  \n" +
            "					`com`.`packagingID`,  \n" +
            "					`com`.`PIDCode`,  \n" +
            "					`com`.`isGoodPart`,  \n" +
            "					`com`.`RoHSStatusID`,  \n" +
            "					`com`.`rohsgroupID`,  \n" +
            "					`com`.`mfgcodeID`,  \n" +
            "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
            "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
            "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
            "					`com`.`category`,  \n" +
            "					`com`.`imageURL`,  \n" +
            "					`com`.`documentPath`,  \n" +
            "					`com`.`mfgPNDescription`,  \n" +
            "					`com`.`minOperatingTemp`,  \n" +
            "					`com`.`maxOperatingTemp`,  \n" +
            "					`com`.`value`,  \n" +
            "					`com`.`partPackage`,  \n" +
            "					`com`.`powerRating`,  \n" +
            "					`com`.`functionalCategoryID`,  \n" +
            "					`com`.`mountingTypeID`,  \n" +
            "					`com`.`connecterTypeID`,  \n" +
            "					`com`.`noOfPosition`,  \n" +
            "					`com`.`noOfRows`,  \n" +
            "					`com`.`pitch`,  \n" +
            "					`com`.`pitchMating`,  \n" +
            "					`com`.`length`,  \n" +
            "					`com`.`width`,  \n" +
            "					`com`.`height`,  \n" +
            "					`com`.`voltage`,  \n" +
            "					`com`.`weight`,  \n" +
            "					`com`.`feature`,  \n" +
            "					`com`.`color`,  \n" +
            "					`com`.`partStatus`,  \n" +
            "					`com`.`uom`,  \n" +
            "					`com`.`uomClassID`,  \n" +
            "					`com`.`unit`,  \n" +
            "					`com`.`restrictUsePermanently`,  \n" +
            "					`com`.`restrictUSEwithpermission`,  \n" +
            "					`com`.`restrictPackagingUsePermanently`,  \n" +
            "					`com`.`restrictPackagingUseWithpermission`,  \n" +
            "					`u`.`abbreviation` AS uomName,  \n" +
            "					`u`.`unitName` AS unitName,  \n" +
            "					`r`.`rohsIcon`,  \n" +
            "					`r`.`name` AS rohsName,  \n" +
            "					`com`.`partPackageID`,  \n" +
            "					`com`.`bomLock`,  \n" +
            "					`com`.`businessRisk`,  \n" +
            "					`com`.`costCategoryID`,  \n" +
            "					`com`.`deviceMarking`,  \n" +
            "					`com`.`driverToolRequired`,  \n" +
            "					`com`.`eau`,  \n" +
            "					`com`.`epicorType`,  \n" +
            "					`com`.`functionalTestingRequired`,  \n" +
            "					`com`.`heightText`,  \n" +
            "					`com`.`isCPN`,  \n" +
            "					`com`.`isCustom`,  \n" +
            "					`com`.`leadTime`,  \n" +
            "					`com`.`matingPartRquired`,  \n" +
            "					`com`.`maxPriceLimit`,  \n" +
            "					`com`.`maxQtyonHand`,  \n" +
            "					`com`.`minimum`,  \n" +
            "					`com`.`mult`,  \n" +
            "					`com`.`packageQty`,  \n" +
            "					`com`.`partType`,  \n" +
            "					`com`.`pcbPerArray`,  \n" +
            "					`com`.`pickupPadRequired`,  \n" +
            "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
            "					`com`.`plannedValuePerBuild`,  \n" +
            "					`com`.`programingRequired`,  \n" +
            "					`com`.`rfqOnly`,  \n" +
            "					`com`.`saftyStock`,  \n" +
            "					`com`.`scrapRatePercentagePerBuild`,  \n" +
            "					`com`.`scrapValuePerBuild`,  \n" +
            "					`com`.`selfLifeDays`,  \n" +
            "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
            "					`com`.`temperatureCoefficient`,  \n" +
            "					`com`.`temperatureCoefficientUnit`,  \n" +
            "					`com`.`temperatureCoefficientValue`,  \n" +
            "					`com`.`trackSerialNumber`,  \n" +
            "					`com`.`refSupplierMfgpnComponentID`,  \n" +
            "					`com`.`refMfgPNMfgCodeId`,  \n" +
            "					`com`.`internalReference`,  \n" +
            "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
            "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
            "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
            "				FROM `component` AS `com`  \n" +
            "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
            "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
            "						AND (`mfgCodemst`.`isDeleted`=0  \n" +
            "						AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
            "				JOIN `rfq_rohsmst` AS `r`  \n" +
            "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
            "				JOIN  `uoms` AS `u`  \n" +
            "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
            "				WHERE (`com`.`isdeleted`=0)  \n" +
            "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
            "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
            "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
            "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
            "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
            "					AND `com`.`iscustom`=0  \n" +
            "                    AND `com`.`category`=2  \n" +
            "                    AND `com`.`iscpn`=FALSE  \n" +
            "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
            "			) AS a  \n" +
            "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
            "			OR (pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
            "				OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
            "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "	ELSE  \n" +
            "		/* this logic used in purchase order  \n" +
            "		packing slip  \n" +
            "		UMID management  \n" +
            "		Component Master  \n" +
            "		Reserve Stock  \n" +
            "		Component Assy DFM  \n" +
            "		Reports  \n" +
            "		Price Break Update  \n" +
            "		Customer Part  \n" +
            "		Good-Bad Mapping Part  \n" +
            "		Supplier Quote  \n" +
            "		Supplier RMA */  \n" +
            "		SELECT * FROM  \n" +
            "			(  \n" +
            "				SELECT `com`.`id`,  \n" +
            "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
            "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
            "					`com`.`mfgPN` orgMfgPN,  \n" +
            "					`com`.`packaginggroupID`,  \n" +
            "					`com`.`packagingID`,  \n" +
            "					`com`.`PIDCode`,  \n" +
            "					`com`.`isGoodPart`,  \n" +
            "					`com`.`RoHSStatusID`,  \n" +
            "					`com`.`rohsgroupID`,  \n" +
            "					`com`.`mfgcodeID`,  \n" +
            "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
            "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
            "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
            "					`com`.`tolerance`,  \n" +
            "					`com`.`category`,  \n" +
            "					`com`.`imageURL`,  \n" +
            "					`com`.`documentPath`,  \n" +
            "					`com`.`mfgPNDescription`,  \n" +
            "					`com`.`minOperatingTemp`,  \n" +
            "					`com`.`maxOperatingTemp`,  \n" +
            "					`com`.`value`,  \n" +
            "					`com`.`partPackage`,  \n" +
            "					`com`.`powerRating`,  \n" +
            "					`com`.`functionalCategoryID`,  \n" +
            "					`com`.`mountingTypeID`,  \n" +
            "					`com`.`connecterTypeID`,  \n" +
            "					`com`.`noOfPosition`,  \n" +
            "					`com`.`noOfRows`,  \n" +
            "					`com`.`pitch`,  \n" +
            "					`com`.`pitchMating`,  \n" +
            "					`com`.`length`,  \n" +
            "					`com`.`width`,  \n" +
            "					`com`.`height`,  \n" +
            "					`com`.`voltage`,  \n" +
            "					`com`.`weight`,  \n" +
            "					`com`.`feature`,  \n" +
            "					`com`.`color`,  \n" +
            "					`com`.`partStatus`,  \n" +
            "					`com`.`uom`,  \n" +
            "					`com`.`uomClassID`,  \n" +
            "					`com`.`unit`,  \n" +
            "					`com`.`restrictUsePermanently`,  \n" +
            "					`com`.`restrictUSEwithpermission`,  \n" +
            "					`com`.`restrictPackagingUsePermanently`,  \n" +
            "					`com`.`restrictPackagingUseWithpermission`,  \n" +
            "					`com`.`packaging`,  \n" +
            "					`u`.`abbreviation` AS uomName,  \n" +
            "					`u`.`unitName` AS unitName,  \n" +
            "					`r`.`rohsIcon`,  \n" +
            "					`r`.`name` AS rohsName,  \n" +
            "					`com`.`partPackageID`,  \n" +
            "					`com`.`bomLock`,  \n" +
            "					`com`.`businessRisk`,  \n" +
            "					`com`.`costCategoryID`,  \n" +
            "					`com`.`deviceMarking`,  \n" +
            "					`com`.`driverToolRequired`,  \n" +
            "					`com`.`eau`,  \n" +
            "					`com`.`epicorType`,  \n" +
            "					`com`.`functionalTestingRequired`,  \n" +
            "					`com`.`heightText`,  \n" +
            "					`com`.`isCPN`,  \n" +
            "					`com`.`isCustom`,  \n" +
            "					`com`.`leadTime`,  \n" +
            "					`com`.`matingPartRquired`,  \n" +
            "					`com`.`maxPriceLimit`,  \n" +
            "					`com`.`maxQtyonHand`,  \n" +
            "					`com`.`minimum`,  \n" +
            "					`com`.`mult`,  \n" +
            "					`com`.`packageQty`,  \n" +
            "					`com`.`partType`,  \n" +
            "					`com`.`pcbPerArray`,  \n" +
            "					`com`.`pickupPadRequired`,  \n" +
            "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
            "					`com`.`plannedValuePerBuild`,  \n" +
            "					`com`.`programingRequired`,  \n" +
            "					`com`.`rfqOnly`,  \n" +
            "					`com`.`saftyStock`,  \n" +
            "					`com`.`scrapRatePercentagePerBuild`,  \n" +
            "					`com`.`scrapValuePerBuild`,  \n" +
            "					`com`.`selfLifeDays`,  \n" +
            "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
            "					`com`.`temperatureCoefficient`,  \n" +
            "					`com`.`temperatureCoefficientUnit`,  \n" +
            "					`com`.`temperatureCoefficientValue`,  \n" +
            "					`com`.`trackSerialNumber`,  \n" +
            "					`com`.`refSupplierMfgpnComponentID`,  \n" +
            "					`com`.`refMfgPNMfgCodeId`,  \n" +
            "					`com`.`internalReference`,  \n" +
            "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
            "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
            "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
            "				FROM `component` AS `com`  \n" +
            "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
            "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
            "						AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
            "				JOIN `rfq_rohsmst` AS `r`  \n" +
            "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
            "				JOIN `uoms` AS `u`  \n" +
            "					ON `u`.`id`= `com`.`uom`  \n" +
            "						AND `u`.`isdeleted`=0  \n" +
            "				WHERE `com`.`isdeleted`=0  \n" +
            "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
            "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
            "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
            "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
            "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
            "					AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)  \n" +
            "					AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
            "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
            "			) AS a  \n" +
            "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
            "			OR (pSearch IS NOT NULL  \n" +
            "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
            "                OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
            "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
            "	IN pGoodPart VARCHAR(100),  \n" +
            "	IN pSearch VARCHAR(500),  \n" +
            "	IN pId INT,  \n" +
            "	IN pMfgType VARCHAR(50),  \n" +
            "	IN pRoHSStatusID VARCHAR(100),  \n" +
            "	IN pMfgCodeId INT,  \n" +
            "	IN pMountingType VARCHAR(50),  \n" +
            "	IN pMountingTypeId INT,  \n" +
            "	IN pCategoryID INT,  \n" +
            "	IN pIsContainCPN TINYINT,  \n" +
            "	IN pRohsMainCategoryID INT,  \n" +
            "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
            "	IN prefSupplierMfgpnComponentID INT ,  \n" +
            "	IN ppackagingID INT,  \n" +
            "	IN pstrictCustomPart TINYINT,  \n" +
            "	IN psupplierID INT,  \n" +
            "    IN pPartType int,  \n" +
            "    IN pExcludeStatus INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vRohsMainCategoryID INT;  \n" +
            "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
            "	/*===>this logic is added to compare invert rohs category*/  \n" +
            "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
            "		IF pRohsMainCategoryID = -1 THEN  \n" +
            "			SET vRohsMainCategoryID = -2;  \n" +
            "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
            "			SET vRohsMainCategoryID = -1;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	/*<===this logic is added to compare invert rohs category*/  \n" +
            "	/* this logic used in purchase order when supplier is strictly custom part */  \n" +
            "	IF(pstrictCustomPart = 1)THEN  \n" +
            "		SELECT *  \n" +
            "		FROM  \n" +
            "		(  \n" +
            "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
            "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
            "					c.mfgcodeID,          					c.rev,  \n" +
            "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
            "					c.category,								c.imageURL,						c.documentPath,  \n" +
            "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
            "					c.value,								c.partPackage,					c.powerRating,  \n" +
            "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
            "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
            "					c.pitchMating,							c.length,						c.width,  \n" +
            "					c.height,								c.voltage,						c.weight,  \n" +
            "					c.feature,								c.color,						c.partStatus,  \n" +
            "					c.uom,									c.uomClassID,					c.unit,  \n" +
            "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
            "					c.restrictPackagingUseWithpermission,  \n" +
            "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
            "					r.rohsIcon,								r.name AS rohsName,  \n" +
            "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
            "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
            "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
            "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
            "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
            "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
            "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
            "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
            "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
            "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
            "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
            "			FROM 	component c  \n" +
            "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
            "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
            "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND 	c.id = IFNULL(pId, c.id)  \n" +
            "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
            "									FROM supplier_mapping_mst smm  \n" +
            "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
            "			)  \n" +
            "			AND c.category != 3  \n" +
            "			AND c.iscustom = 1  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
            "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
            "													WHERE opn.refcomponentid = a.id  \n" +
            "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
            "											)  \n" +
            "										)  \n" +
            "				)  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "  \n" +
            "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  \n" +
            "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
            "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
            "		SELECT * FROM  \n" +
            "		(  \n" +
            "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
            "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
            "					c.mfgcodeID,					    c.rev,  \n" +
            "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
            "					c.category,							c.imageURL,								c.documentPath,  \n" +
            "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
            "					c.value,							c.partPackage,							c.powerRating,  \n" +
            "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
            "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
            "					c.pitchMating,        				c.length,								c.width,  \n" +
            "					c.height,        					c.voltage,								c.weight,  \n" +
            "					c.feature,        					c.color,								c.partStatus,  \n" +
            "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
            "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
            "					c.restrictPackagingUseWithpermission,  \n" +
            "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
            "					r.rohsIcon,							r.name AS rohsName,  \n" +
            "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
            "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
            "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
            "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
            "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
            "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
            "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
            "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
            "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
            "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
            "					c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
            "			FROM 	component c  \n" +
            "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
            "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
            "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
            "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
            "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
            "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
            "													WHERE opn.refcomponentid = a.id  \n" +
            "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
            "											)  \n" +
            "										)  \n" +
            "				)  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "  \n" +
            "	ELSE  \n" +
            "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
            "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
            "  \n" +
            "		select *  \n" +
            "		from  \n" +
            "		(  \n" +
            "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
            "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
            "					c.mfgcodeID,          		c.rev,  \n" +
            "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
            "					c.tolerance,				c.category,							c.imageURL,  \n" +
            "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
            "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
            "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
            "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
            "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
            "					c.width,            		c.height,							c.voltage,  \n" +
            "					c.weight,            		c.feature,            				c.color,  \n" +
            "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
            "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
            "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
            "					c.packagingID,				c.packaging,  \n" +
            "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
            "					r.rohsIcon,					r.name AS rohsName,  \n" +
            "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
            "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
            "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
            "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
            "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
            "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
            "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
            "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
            "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
            "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
            "					c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName,  \n" +
            "					vu.mfgPN supplierPartMfgPn,  \n" +
            "					vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
            "			from component c  \n" +
            "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
            "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
            "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.id = IFNULL(pId, c.id)  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
            "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
            "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND  \n" +
            "					(  \n" +
            "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
            "						EXISTS( SELECT  1  \n" +
            "								FROM 	component_otherpn opn  \n" +
            "								WHERE 	opn.refcomponentid = a.id  \n" +
            "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
            "					)  \n" +
            "				)  \n" +
            "			)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5477,'2.00','V1',' User Story 37431 and 37432 : Improvement point given by client in purchase order and packing slip page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5477:
        allDbChangesArray.push(
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetPIDList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetPIDList`(  \n" +
            "	IN pCustomerID VARCHAR(500),  \n" +
            "	IN passyIds VARCHAR (16000),  \n" +
            "	IN pisFromSalesOrder TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE mfgCodeID INT;  \n" +
            "	DECLARE whereClause VARCHAR(500);  \n" +
            "	DECLARE partstatusID INT;  \n" +
            "	SELECT cp.id INTO partstatusID FROM component_partstatusmst cp WHERE cp.name = 'Obsolete';  \n" +
            "	SET whereClause = \"WHERE c.category = 3 AND c.isDeleted = 0\";  \n" +
            "    IF(pisFromSalesOrder = 1)THEN  \n" +
            "		SET whereClause = \"WHERE (c.category = 3 or c.iscustom = 1) AND c.isDeleted = 0\";  \n" +
            "	END IF;  \n" +
            "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1)>0 THEN -- fca then default get all assy  \n" +
            "		SET pCustomerID = NULL;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pCustomerID IS NOT NULL THEN  \n" +
            "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND (c.mfgcodeID in (  \n" +
            "														select buyTo from acquireCustomers  \n" +
            "                                                        union  \n" +
            "														select smm.refMfgCodeMstID from supplier_mapping_mst smm  \n" +
            "                                                        where smm.isDeleted = 0 and smm.isCustMapping=0 and smm.supplierID = \", pCustomerID, \")) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF passyIds IS NOT NULL THEN  \n" +
            "		SET whereClause = CONCAT(whereClause,\" or (c.id in (\",passyIds,\") AND c.isDeleted = 0) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(  \n" +
            "			\"SELECT c.id,			c.mfgPN, 		c.PIDCode, 		c.RoHSStatusID, 	c.rohsDeviation,  \n" +
            "					c.rev, 			c.nickName, 	c.assyCode, 	c.id AS partID, 	c.mfgPN,  \n" +
            "                    c.mfgPNDescription AS description,				ro.rohsIcon,        ro.name AS rohsName,  \n" +
            "                    c.mfgCodeID,	c.isCustom,		c.assemblyType, mfg.mfgCode,		c.parttype,  \n" +
            "                    c.category,		mfg.mfgName,	c.specialNote, 	c.liveVersion, 		c.isGoodPart,  \n" +
            "                    c.partStatus, 	c.businessRisk,	u.unitName,		u.id unitID, c.custAssyPN,  \n" +
            "					(SELECT COUNT(rl.id) FROM rfq_lineitems rl WHERE rl.partID = c.id AND rl.isDeleted = 0 ) AS lineItemCount,  \n" +
            "					(SELECT ra.id FROM rfq_assemblies ra WHERE ra.partID = c.id AND ra.isDeleted = 0 LIMIT 1) AS QuoteGroup,  \n" +
            "					CASE c.partStatus WHEN \", partstatusID, \" THEN FALSE ELSE TRUE END AS isActive  \n" +
            "			FROM component c  \n" +
            "			INNER JOIN uoms u ON c.uom = u.id AND u.isDeleted = 0  \n" +
            "			INNER JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
            "			INNER JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id AND mfg.isDeleted = 0 \", whereClause,' order by c.PIDCode');  \n" +
            "	#select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "    EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetSOPIDList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
            "	IN pCustomerID INT(11),  \n" +
            "	IN pPartID INT(11)  ,  \n" +
            "	IN psubAssyID INT(11) ,  \n" +
            "    IN pSearchObj VARCHAR(500),  \n" +
            "    IN pSalesOrderDetID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE mfgCodeID INT(11);  \n" +
            "	DECLARE whereClause VARCHAR(500);  \n" +
            "	DECLARE partStatusID INT(11);  \n" +
            "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
            "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
            "	SET whereClause = \" a.partCategory = 3 \";  \n" +
            "  \n" +
            "	-- fca then default get all assy  \n" +
            "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
            "		SET pCustomerID=NULL;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pCustomerID IS NOT NULL THEN  \n" +
            "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
            "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
            "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
            "		)\");  \n" +
            "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
            "	END IF;  \n" +
            "  -- Added to search  Sales order number  \n" +
            "    IF pSearchObj IS NOT NULL THEN  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
            "    END IF;  \n" +
            "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
            "    END IF;  \n" +
            "	IF(pPartID IS NOT NULL) THEN  \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
            "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
            "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
            "		c.partStatus, c.isGoodPart,  \n" +
            "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
            "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
            "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
            "		(SELECT  perAssyBuildQty  \n" +
            "			FROM 	kit_allocation_assy_detail  \n" +
            "			WHERE 	refSalesorderdetid = sd.id  \n" +
            "		AND 	partId = \",pPartID,\"  \n" +
            "			AND 	isDeleted = 0) AS qpaa,  \n" +
            "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
            "        sd.partCategory,  \n" +
            "        astk.initialStockCount  \n" +
            "		FROM salesorderdet sd  \n" +
            "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
            "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
            "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
            "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
            "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
            "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
            "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
            "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
            "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
            "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
            "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
            "	        -- SELECT @SQLStatement2;  \n" +
            "  \n" +
            "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
            "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
            "		-- 	 SELECT @SQLStatement2;  \n" +
            "	ELSE  \n" +
            "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
            "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
            "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
            "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
            "			1 AssyType,  \n" +
            "			(SELECT  perAssyBuildQty  \n" +
            "				FROM 	kit_allocation_assy_detail  \n" +
            "				WHERE 	refSalesorderdetid = sd.id  \n" +
            "			AND 	partId = sd.partID  \n" +
            "				AND 	isDeleted = 0) AS qpaa,  \n" +
            "			CASE c.partStatus  \n" +
            "			WHEN \", partStatusID, \" THEN FALSE  \n" +
            "			ELSE TRUE  \n" +
            "			END AS isActive ,  \n" +
            "            sd.partCategory , c.partStatus , astk.initialStockCount  \n" +
            "			FROM salesorderdet sd  \n" +
            "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
            "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
            "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
            "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
            "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
            "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
            "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
            "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
            "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
            "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
            "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
            "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
            "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
            "			-- SELECT @SQLStatement2;  \n" +
            "	END IF;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_RetrieveCustomComponentNotAddedList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustomComponentNotAddedList`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "    IN pSupplierID INT,  \n" +
            "	IN pSearch VARCHAR(255),  \n" +
            "	IN pMappedComponents TINYINT(1)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "    DECLARE v_Search VARCHAR(3000);  \n" +
            "    DECLARE v_WhereClause VARCHAR(300);  \n" +
            "  \n" +
            "    SET v_Search='';  \n" +
            "    SET v_WhereClause='';  \n" +
            "  \n" +
            "	IF (pSearch IS NOT NULL AND pSearch != '') THEN  \n" +
            "		 SET v_Search = CONCAT(v_Search,\" AND (co.PIDCode LIKE  '%\", pSearch ,\"%'  \n" +
            "										  OR co.mfgPN LIKE  '%\", pSearch ,\"%'  \n" +
            "										  OR pt.partTypeName LIKE  '%\", pSearch ,\"%'  \n" +
            "										  OR mt.`name` LIKE  '%\", pSearch ,\"%'  \n" +
            "										  OR pt.partTypeName  LIKE  '%\", pSearch ,\"%'  \n" +
            "                                          )\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF(pMappedComponents=1) THEN  \n" +
            "		 SET v_WhereClause = CONCAT(v_WhereClause,\" AND EXISTS  \n" +
            "		 (select s.refMfgCodeMstID FROM supplier_mapping_mst s  \n" +
            "		 WHERE s.supplierID= \",pSupplierID,\"  \n" +
            "		 AND s.refMfgCodeMstID = co.mfgcodeID  \n" +
            "         AND s.isCustMapping=0  \n" +
            "		 AND s.isDeleted = 0 )  \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    SET @temp_Sproc_RetrieveCustomComponentNotAddedList= CONCAT(\"  \n" +
            "	SELECT     co.id, co.PIDCode,     co.mfgPN,    	co.mfgPNDescription,  co.isCustom ,  \n" +
            "	ro.name rohsStatus, ro.rohsIcon rohsIcon,  co.documentPath, co.imageURL,  \n" +
            "	pt.partTypeName functionalCategoryName,mt.`name` as mountingType  \n" +
            "	FROM component co  \n" +
            "		INNER JOIN rfq_rohsmst ro ON co.roHSStatusID = ro.id  \n" +
            "		INNER JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
            "		INNER JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
            "	WHERE  \n" +
            "		co.isDeleted = 0 AND co.isCPN = 0 AND co.isCustom = 1  \n" +
            "	    AND ro.isDeleted = 0 AND pt.isDeleted = 0 AND mt.isDeleted = 0 \",v_WhereClause);  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetrieveCustomComponentNotAddedList_main = CONCAT(@temp_Sproc_RetrieveCustomComponentNotAddedList,\"  \n" +
            "						  AND NOT EXISTS (SELECT 1 FROM component_approved_supplier_mst cas  \n" +
            "						  WHERE cas.supplierID = \",pSupplierID,\"  \n" +
            "							AND cas.partID = co.id  \n" +
            "							AND cas.isDeleted = 0)\");  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    /* to get total count of rows without excluding disapproved records*/  \n" +
            "  	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecordWithNoExclude from ( \",@temp_Sproc_RetrieveCustomComponentNotAddedList,\" ) c \");  \n" +
            "    -- SELECT @SQLStatementCount;  \n" +
            "    PREPARE countQuery FROM @SQLStatementCount;  \n" +
            "	EXECUTE countQuery;  \n" +
            "	DEALLOCATE PREPARE countQuery;  \n" +
            "  \n" +
            "  /* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomComponentNotAddedList_main,\" ) c \");  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveCustomComponentNotAddedList_main,\" ) c  \", rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 02-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5478,'2.00','V1',' User Story 37431 and 37432 : Improvement point given by client in purchase order and packing slip page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5478:
        allDbChangesArray.push(
            /* **************************** New Script -> 02-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
            "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
            "    IN pWhereClause VARCHAR(16383),  \n" +
            "    IN puserID VARCHAR(50),  \n" +
            "    IN pnickName VARCHAR(20),  \n" +
            "    IN pprefix VARCHAR(20),  \n" +
            "    IN pIsFromUID TINYINT,  \n" +
            "    IN pComponentID INT,  \n" +
            "    IN pCustomerID INT,  \n" +
            "    IN pCPN BOOL,  \n" +
            "    IN pMFGAvailabel BOOL,  \n" +
            "    IN pRefCpnMfgID INT,  \n" +
            "    IN pAssyID INT,  \n" +
            "    IN pSalesOrderDetailID INT,  \n" +
            "    IN pReceiveMaterialType VARCHAR(255),  \n" +
            "    IN pkitAssemblyID INT,  \n" +
            "    IN pBarcodeID INT,  \n" +
            "    IN pBOMLineID INT,  \n" +
            "    IN pSupplierID INT,  \n" +
            "    IN pCategory VARCHAR(2),  \n" +
            "    IN pInventoryType VARCHAR(2),  \n" +
            "    IN pCallFrom VARCHAR(50),  \n" +
            "    IN pExcludeStatus INT,  \n" +
            "    IN pBinID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
            "	DECLARE v_delimiter VARCHAR(10);  \n" +
            "	DECLARE v_length INT;  \n" +
            "	DECLARE v_fieldType INT;  \n" +
            "	DECLARE v_entityId INT;  \n" +
            "	DECLARE v_dataElementId INT;  \n" +
            "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
            "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
            "	DECLARE strLabel VARCHAR(2000);  \n" +
            "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
            "	DECLARE StaticField VARCHAR(100);  \n" +
            "	DECLARE DynamicField VARCHAR(100);  \n" +
            "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
            "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
            "	DECLARE plen,slen INT;  \n" +
            "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
            "	DECLARE pbr_Separator VARCHAR(50);  \n" +
            "	DECLARE barcode_type_id INT;  \n" +
            "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
            "	DECLARE UpdateValue VARCHAR(16383);  \n" +
            "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
            "	DECLARE v_SupplierID INT;  \n" +
            "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
            "	DECLARE v_barcode_id INT;  \n" +
            "	DECLARE v_barcode_count INT;  \n" +
            "	DECLARE v_NumberOfPart INT;  \n" +
            "	DECLARE v_rfqLineItemsID INT;  \n" +
            "	DECLARE v_componentCount INT;  \n" +
            "	DECLARE v_componentId INT;  \n" +
            "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
            "	DECLARE v_partMFG INT;  \n" +
            "	DECLARE v_isGoodPart TINYINT;  \n" +
            "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
            "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
            "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
            "	DECLARE v_isInstall TINYINT;  \n" +
            "	DECLARE v_isBOMLineClean TINYINT;  \n" +
            "	DECLARE v_BOMLineId INT;  \n" +
            "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
            "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
            "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
            "	DECLARE v_PIDCode VARCHAR(110);  \n" +
            "	DECLARE v_isPurchase TINYINT;  \n" +
            "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
            "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
            "	DECLARE v_BOMLineCount INT;  \n" +
            "	DECLARE v_AlternateLineId INT;  \n" +
            "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
            "	DECLARE v_BOMAssyId INT;  \n" +
            "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
            "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
            "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
            "	DECLARE v_isCPNFlag TINYINT;  \n" +
            "	DECLARE v_dateCodeFormatID INT;  \n" +
            "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
            "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
            "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
            "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
            "	DECLARE v_MFRList VARCHAR(10000);  \n" +
            "	DECLARE v_barcode_status INT;  \n" +
            "	DECLARE v_category INT;  \n" +
            "	DECLARE v_partType INT;  \n" +
            "    DECLARE v_pendingPartCount INT;  \n" +
            "  \n" +
            "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
            "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
            "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
            "	(  \n" +
            "		errorText LONGTEXT,  \n" +
            "		IsSuccess VARCHAR (2),  \n" +
            "		MFGPart VARCHAR(10000)  \n" +
            "	);  \n" +
            "  \n" +
            "	/* Temp table for Packing Slip */  \n" +
            "	IF (pCategory = 'P') THEN  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
            "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
            "		(  \n" +
            "			scanlabel VARCHAR(1000),  \n" +
            "			poNumber VARCHAR(100),  \n" +
            "			supplierSONumber VARCHAR(100),  \n" +
            "			packingSlipNumber VARCHAR(50),  \n" +
            "			invoiceNumber VARCHAR(50)  \n" +
            "		);  \n" +
            "	ELSE /* Temp table for MFR */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
            "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
            "		(  \n" +
            "			refcompid INT,  \n" +
            "			pkgQty DECIMAL(18,6),  \n" +
            "			dateCode VARCHAR(10),  \n" +
            "			lotCode VARCHAR(255),  \n" +
            "			scanlabel VARCHAR(1000),  \n" +
            "			createdBy VARCHAR(255),  \n" +
            "			uid VARCHAR(14),  \n" +
            "			prefix VARCHAR(20),  \n" +
            "			nickName VARCHAR(50),  \n" +
            "			cpn TINYINT,  \n" +
            "			mfgAvailabel TINYINT,  \n" +
            "			refCPNMFGPNID INT,  \n" +
            "			customerID INT,  \n" +
            "			assyID INT,  \n" +
            "			receiveMaterialType VARCHAR(255),  \n" +
            "			refSupplierPartId INT,  \n" +
            "			mfrDateCode VARCHAR(50),  \n" +
            "			poNumber VARCHAR(50),  \n" +
            "			supplierSONumber VARCHAR(50),  \n" +
            "			packingSlipNumber VARCHAR(50),  \n" +
            "			invoiceNumber VARCHAR(50),  \n" +
            "			binName VARCHAR(100),  \n" +
            "			packaging VARCHAR(100),  \n" +
            "			packingSlipDetailNickname VARCHAR(50)  \n" +
            "		);  \n" +
            "  \n" +
            "		/* Temp table for data element value */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
            "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
            "		(  \n" +
            "			entityid INT,  \n" +
            "			dataelementid INT,  \n" +
            "			`value` LONGTEXT,  \n" +
            "			createdBy VARCHAR(255)  \n" +
            "		);  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	-- get data from barcode templates with seprator  \n" +
            "	# return error code  \n" +
            "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
            "	# 0: Barcode template does not exist, Please add template  \n" +
            "	# 1: Validation Clear  \n" +
            "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
            "	# 3: Mfgcode is not found  \n" +
            "	# 4: MFG PN does not exist  \n" +
            "	# 5: Multiple MFG PN found  \n" +
            "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
            "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
            "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
            "	# 9:  Multiple barcode template found.  \n" +
            "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
            "	# 11: MFG PN is incorrect part  \n" +
            "	# 12: PID PID1 was restricted part at part master level.  \n" +
            "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
            "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
            "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
            "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
            "	# 17: PID is contain more than 1 BOM line.  \n" +
            "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
            "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
            "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
            "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
            "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
            "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
            "    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
            "    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
            "    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
            "  \n" +
            "	block1: BEGIN  \n" +
            "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
            "		IF (pBarcodeID IS NULL) THEN  \n" +
            "			/* Get barcode from labelstring */  \n" +
            "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
            "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
            "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
            "  \n" +
            "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
            "				/* Get More than 1 barcode then give validation */  \n" +
            "				IF (v_barcode_count > 1) THEN  \n" +
            "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
            "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
            "  \n" +
            "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
            "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
            "  \n" +
            "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
            "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
            "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
            "				ELSE  \n" +
            "					SET pBarcodeID = v_barcode_id;  \n" +
            "				END IF;  \n" +
            "			END IF;  \n" +
            "		ELSE  \n" +
            "			/* Get data from barcode id */  \n" +
            "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		/* If data not get from barcode then concat none in label string find in table */  \n" +
            "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
            "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
            "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
            "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
            "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
            "			SET pBarcodeID = v_barcode_id;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
            "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
            "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
            "			SET v_BarcodeType = '2D';  \n" +
            "		ELSE /* barcode 1D */  \n" +
            "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
            "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
            "			SET v_BarcodeType = '1D';  \n" +
            "		END IF;  \n" +
            "	END block1;  \n" +
            "  \n" +
            "	/* If error is not found then continue else select error */  \n" +
            "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
            "		block2: BEGIN  \n" +
            "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
            "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
            "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
            "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
            "			-- declare exit loop if data not found  \n" +
            "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
            "			-- if any record match found than  check for delimiter and its value  \n" +
            "			IF (pbr_template_ID > 0) THEN  \n" +
            "				-- create temporary table for deliemeter and component dataelement  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
            "					pentityId INT,  \n" +
            "					pdataElementId INT,  \n" +
            "					pdelimiter_value VARCHAR(200)  \n" +
            "				);  \n" +
            "				-- create temporary table for separator string values  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
            "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
            "  \n" +
            "				-- prefix length and suffix lenght to get actual string  \n" +
            "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
            "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
            "				-- open cursor  \n" +
            "				OPEN barcodeMatch_cursor;  \n" +
            "				-- set str label as whereclause  \n" +
            "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
            "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
        "				-- if prefix is found than remove those from actual string match  \n" +
        "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
        "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
        "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
        "				 END IF;  \n" +
        "  \n" +
        "				-- if suffix is found than remove those from actual string match  \n" +
        "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
        "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
        "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
        "				 END IF;  \n" +
        "				-- insert all values after seprator split  \n" +
        "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
        "				PREPARE stmt1 FROM @SQL;  \n" +
        "				EXECUTE stmt1;  \n" +
        "				DEALLOCATE PREPARE stmt1;  \n" +
        "				IF (pCategory = 'P') THEN  \n" +
        "					-- create dynamic query to insert in packing slip  \n" +
        "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
        "				ELSE  \n" +
        "					-- create dynamic query to insert in recieving material  \n" +
        "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
        "				END IF;  \n" +
        "  \n" +
        "  \n" +
        "				-- loop item till all records found in string match of barcode template  \n" +
        "				barcodeMatch_loop:LOOP  \n" +
        "					-- get all five selected values  \n" +
        "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
        "					-- exit loop if no record found for barcode match  \n" +
        "					IF exit_loop THEN  \n" +
        "						CLOSE barcodeMatch_cursor;  \n" +
        "						LEAVE barcodeMatch_loop;  \n" +
        "					END IF;  \n" +
        "					-- dynamic query to get dellimeter string with values from string  \n" +
        "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
        "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
        "					EXECUTE stmtdelimiter;  \n" +
        "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
        "  \n" +
        "					-- get delimiter values from string  \n" +
        "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
        "					-- check for field type is static or dynamic  \n" +
        "					-- if static field than check for mfg code and mfg part number  \n" +
        "					IF v_fieldType = 0  THEN  \n" +
        "						-- component_sid_stock  \n" +
        "						-- get static field name from barcode table delimiter data element id  \n" +
        "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
        "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
        "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
        "							SET MFG_Part_No = delimiter_value_data;  \n" +
        "							/* If component id is not found */  \n" +
        "							IF(pComponentID = 0)  \n" +
        "                            THEN  \n" +
        "								/* Get component data */  \n" +
        "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
        "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
        "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
        "								(  \n" +
        "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
        "									FROM 	component c  \n" +
        "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
        "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
        "									UNION  \n" +
        "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
        "									FROM 		component_otherpn co  \n" +
        "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
        "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
        "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
        "								) a  \n" +
        "								UNION  \n" +
        "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
        "								(  \n" +
        "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
        "									FROM 	component c  \n" +
        "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
        "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
        "									UNION  \n" +
        "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
        "									FROM 		component_otherpn co  \n" +
        "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
        "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
        "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
        "								) a  \n" +
        "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
        "  \n" +
        "								IF (pSupplierID IS NOT NULL) THEN  \n" +
        "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
        "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
        "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
        "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
        "								   ELSE  \n" +
        "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
        "								END IF;  \n" +
        "  \n" +
        "								IF (v_componentCount > 1) THEN  \n" +
        "									/* If component is more that one then remove supplier from list */  \n" +
        "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
        "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
        "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
        "  \n" +
        "									/* After remove supplier if get only one record then  */  \n" +
        "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
        "									IF (v_componentCount < 2) THEN  \n" +
        "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
        "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
        "										FROM 	temp_component_supplier_detail;  \n" +
        "									END IF;  \n" +
        "								ELSE  \n" +
        "									IF (pSupplierID IS NULL) THEN  \n" +
        "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
        "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
        "										FROM 	temp_component_detail;  \n" +
        "									ELSE  \n" +
        "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
        "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
        "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
        "											SET v_componentCount=0;  \n" +
        "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
        "										ELSE  \n" +
        "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
        "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
        "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
        "										END IF;  \n" +
        "									END IF;  \n" +
        "								END IF;  \n" +
        "							ELSE  \n" +
        "								/* If component id is found */  \n" +
        "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
        "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
        "								FROM 	component  \n" +
        "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Remove from cursor if found more that one component */  \n" +
        "							IF v_componentCount > 1 THEN  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* If inventory is opening inventory and type is assembly */  \n" +
        "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* If bad part found */  \n" +
        "							IF (v_isGoodPart != 1) THEN  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Check all type of restriction */  \n" +
        "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Check all type of restriction with packaging */  \n" +
        "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Barcode MFR and Part MFR mismatch */  \n" +
        "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
        "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
        "								CLOSE barcodeMatch_cursor;  \n" +
        "								LEAVE barcodeMatch_loop;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Found DIST then set id of MFR of that DIST */  \n" +
        "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
        "							IF (@MFGType = 'DIST') THEN  \n" +
        "								SET v_SupplierID = v_componentId;  \n" +
        "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
        "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Check kit allocation */  \n" +
        "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
        "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
        "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
        "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
        "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
        "								FROM 	(  \n" +
        "										SELECT 	*  \n" +
        "										FROM  \n" +
        "											(  \n" +
        "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
        "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
        "												FROM 		component_packagingalias cp  \n" +
        "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
        "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
        "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
        "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
        "												UNION  \n" +
        "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
        "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
        "												FROM 		rfq_lineitems_alternatepart rla  \n" +
        "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
        "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
        "												UNION  \n" +
        "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
        "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
        "												FROM 		rfq_lineitems_alternatepart rla  \n" +
        "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
        "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
        "												GROUP BY 	custPNID, rla.partID  \n" +
        "											) b  \n" +
        "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
        "										GROUP BY b.lineID, b.assyId  \n" +
        "									) a;  \n" +
        "  \n" +
        "								/* BOM line not found  */  \n" +
        "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
        "									CLOSE barcodeMatch_cursor;  \n" +
        "									LEAVE barcodeMatch_loop;  \n" +
        "								/* Found More then one BOM line */  \n" +
        "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
        "									CLOSE barcodeMatch_cursor;  \n" +
        "									LEAVE barcodeMatch_loop;  \n" +
        "								ELSE  \n" +
        "									/* Restrict use bom */  \n" +
        "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
        "										CLOSE barcodeMatch_cursor;  \n" +
        "										LEAVE barcodeMatch_loop;  \n" +
        "									END IF;  \n" +
        "  \n" +
        "									/* BOM line contain any error */  \n" +
        "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
        "									IF (v_isBOMLineClean = 0) THEN  \n" +
        "										CLOSE barcodeMatch_cursor;  \n" +
        "										LEAVE barcodeMatch_loop;  \n" +
        "									END IF;  \n" +
        "								END IF;  \n" +
        "  \n" +
        "								/* Part not install, purchase and not dnp  */  \n" +
        "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
        "									CLOSE barcodeMatch_cursor;  \n" +
        "									LEAVE barcodeMatch_loop;  \n" +
        "								END IF;  \n" +
        "							END IF;  \n" +
        "  \n" +
        "							/* Set dynamic query for component */  \n" +
        "							IF  v_componentCount = 1 THEN  \n" +
        "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
        "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
        "								ELSE  \n" +
        "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
        "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
        "								END IF;  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Not in use */  \n" +
        "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
        "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for pkgQty */  \n" +
        "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for lotcode */  \n" +
        "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
        "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
        "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
        "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
        "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
        "							ELSE  \n" +
        "								SET exit_loop = FALSE;  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for binid */  \n" +
        "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for packaging */  \n" +
        "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for nickname */  \n" +
        "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for po number */  \n" +
        "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for so number */  \n" +
        "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for packing slip number */  \n" +
        "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						/* Set dynamic query for invoice number */  \n" +
        "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
        "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
        "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
        "							ELSE  \n" +
        "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
        "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
        "							END IF;  \n" +
        "						END IF;  \n" +
        "					ELSE  \n" +
        "						/* Set dynamic query for other than system generated */  \n" +
        "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
        "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
        "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
        "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
        "					END IF;  \n" +
        "				END LOOP barcodeMatch_loop;  \n" +
        "  \n" +
        "				-- check if mfg and component both found than  \n" +
        "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
        "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
        "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
        "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
        "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
        "				ELSEIF (v_componentCount > 1) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
        "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
        "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
        "					IF (v_isGoodPart = 2) THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
        "					ELSE  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
        "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
        "					IF (v_isCPNFlag = 1) THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
        "					ELSE  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
        "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
        "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
        "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
        "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
        "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
        "				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
        "					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
        "                    IF(v_pendingPartCount = 0) THEN  \n" +
        "						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', @binName ,'</b> bin does not have pending UMID stock of <b>', v_PIDCode ,'</b> part or no UMID stock is set as true, check with Pending UMID stock once.<br/>Click on Go to Pending UMID Parts to check stock for scanned Part.'),24,v_PIDCode);  \n" +
        "                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
        "						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
        "								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
        "						FROM vu_umid_creation_pending vu  \n" +
        "                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
        "                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
        "								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
        "						IF(@packingSlipModeStatus = 'D') THEN  \n" +
        "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
        "                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
        "							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
        "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
        "                        END IF;  \n" +
        "                    END IF;  \n" +
        "                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
        "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
        "					IF @Mfgmatched = 0  THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "				ELSE  \n" +
        "					IF @mfgCount = 0 THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "  \n" +
        "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
        "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "				END IF;  \n" +
        "				IF (pCPN = 1) THEN  \n" +
        "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
        "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
        "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "  \n" +
        "					IF (@isCPNPart != 1) THEN  \n" +
        "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
        "					END IF;  \n" +
        "				END IF;  \n" +
        "  \n" +
        "				IF (pIsFromUID = 1) THEN  \n" +
        "					/* If not fire any validation */  \n" +
        "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
        "  \n" +
        "						-- must call statements in sequence  \n" +
        "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
        "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
        "						PREPARE stmt1 FROM @SQL1;  \n" +
        "						EXECUTE stmt1;  \n" +
        "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
        "  \n" +
        "						IF (pprefix IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
        "                        END IF;  \n" +
        "  \n" +
        "						IF (pnickName IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						IF (pCustomerID IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						IF (pAssyID IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
        "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
        "						END IF;  \n" +
        "  \n" +
        "						SET @sql2 = UpdateValue;  \n" +
        "						PREPARE stmt2 FROM @SQL2;  \n" +
        "						EXECUTE stmt2;  \n" +
        "						DEALLOCATE PREPARE stmt2;  \n" +
        "  \n" +
        "						/* Add success result in save error table */  \n" +
        "						IF (pkitAssemblyID IS NULL) THEN  \n" +
        "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
        "						ELSE  \n" +
        "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
        "						END IF;  \n" +
        "						/* Add data in table of delimeter table */  \n" +
        "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
        "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
        "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
        "						END IF;  \n" +
        "						/* select detail of error table */  \n" +
        "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
        "  \n" +
        "						/* select detail in temp table of component sid stock table  */  \n" +
        "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
        "  \n" +
        "						/* Select data of component */  \n" +
        "						SELECT 	c.*,  \n" +
        "							mg.mfgcode AS mfgCode,  \n" +
        "							mg.mfgName AS mfgName,  \n" +
        "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
        "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
        "							csup.packageQty AS supplierPkgQty,  \n" +
        "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
        "							csup.mfgcodeID AS supplierMfgId,  \n" +
        "							mcm.mfgcode AS supplierMFGCode,  \n" +
        "							mcm.mfgName AS supplierMFGName,  \n" +
        "							csup.mfgPN AS supplierMFGPN,  \n" +
        "							csup.packagingID AS supplierPackagingId,  \n" +
        "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
        "							csup.minimum AS supplierMinimum,  \n" +
        "							ccpn.id AS cpnID,  \n" +
        "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
        "							rfqroh.rohsIcon AS rohsIcon,  \n" +
        "							rfqroh.name AS rohsName,  \n" +
        "							rfqmou.name AS mountingTypeName,  \n" +
        "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
        "							um.unitName AS uomName,  \n" +
        "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
        "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
        "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
        "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
        "						FROM component AS c  \n" +
        "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
        "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
        "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
        "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
        "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
        "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
        "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
        "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
        "						WHERE c.id = v_componentId;  \n" +
        "  \n" +
        "						/* select data of data element of component sid stock */  \n" +
        "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
        "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
        "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
        "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
        "						/* select data of cpn */  \n" +
        "						SELECT 	id, refComponentID, refCPNPartID  \n" +
        "						FROM 	component_cust_alias_rev_pn  \n" +
        "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
        "  \n" +
        "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
        "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
        "						) AND isDeleted = 0;  \n" +
        "  \n" +
        "						/* select detail of bom */  \n" +
        "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
        "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
        "						FROM 		rfq_lineitems_alternatepart rla  \n" +
        "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
        "						WHERE 		rla.isDeleted = 0  \n" +
        "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
        "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
        "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
        "  \n" +
        "					ELSE  \n" +
        "						/* Found any error then select error  */  \n" +
        "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
        "					END IF;  \n" +
        "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
        "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
        "				ELSE  \n" +
        "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
        "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
        "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
        "						PREPARE stmt1 FROM @SQL1;  \n" +
        "						EXECUTE stmt1;  \n" +
        "						DEALLOCATE PREPARE stmt1;  \n" +
        "					END IF;  \n" +
        "  \n" +
        "					/* Add success data in temp error table */  \n" +
        "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
        "  \n" +
        "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
        "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
        "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
        "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
        "  \n" +
        "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
        "					IF (pCategory = 'M') THEN  \n" +
        "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
        "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
        "						SELECT 	c.*,  \n" +
        "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
        "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
        "							csup.packageQty AS supplierPkgQty,  \n" +
        "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
        "							csup.mfgcodeID AS supplierMfgId,  \n" +
        "							mcm.mfgcode AS supplierMFGCode,  \n" +
        "							mcm.mfgName AS supplierMFGName,  \n" +
        "							csup.packagingID AS supplierPackagingId,  \n" +
        "							csup.mfgPN AS supplierMFGPN,  \n" +
        "							csup.id AS supplierMFGPNID,  \n" +
        "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
        "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
        "							ccpn.id AS cpnID,  \n" +
        "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
        "							rfqroh.rohsIcon AS rohsIcon,  \n" +
        "							rfqroh.name AS rohsName,  \n" +
        "							rfqmou.name AS mountingTypeName,  \n" +
        "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
        "							um.unitName AS uomName,  \n" +
        "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
        "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
        "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
        "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
        "						FROM component AS c  \n" +
        "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
        "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
        "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
        "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
        "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
        "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
        "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
        "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
        "						WHERE c.id = v_componentId;  \n" +
        "					END IF;  \n" +
        "				END IF;  \n" +
        "			ELSE  \n" +
        "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
        "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
        "  \n" +
        "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
        "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
        "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
        "				SELECT 1;  \n" +
        "  \n" +
        "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
        "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
        "				SELECT 1;  \n" +
        "			END IF;  \n" +
        "  \n" +
        "		END block2;  \n" +
        "	ELSE  \n" +
        "		IF (pIsFromUID = 1) THEN  \n" +
        "			SELECT * FROM tempUIDSuccessDetail;  \n" +
        "		ELSE  \n" +
        "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
        "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
        "			SELECT 1;  \n" +
        "		END IF;  \n" +
        "	END IF;  \n" +
        "END;  \n" +
            /* **************************** Add Script Version -> 02-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5479,'2.00','V1',' User Story 37431 and 37432 : Improvement point given by client in purchase order and packing slip page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5479:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-11-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(  \n" +
                "	IN pumID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_sid_stock css  \n" +
                "			INNER JOIN 	component c ON css.refcompid = c.id  \n" +
                "			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);  \n" +
                "	ELSE  \n" +
                "		SELECT css.id,  \n" +
                "				css.uid,  \n" +
                "                parentUIDId,  \n" +
                "                parentUID,  \n" +
                "                fromUIDId,  \n" +
                "                fromUID,  \n" +
                "				css.receiveMaterialType,  \n" +
                "				css.refcompid AS partID,  \n" +
                "				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,  \n" +
                "				m.mfgType mfgType,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				css.pkgQty,  \n" +
                "				css.pkgUnit,  \n" +
                "                css.orgQty,  \n" +
                "                css.orgPkgUnit,  \n" +
                "				fun_getUnitNameByID(css.uom) uomName,  \n" +
                "				css.dateCode,  \n" +
                "				css.lotCode,  \n" +
                "				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,  \n" +
                "				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,  \n" +
                "				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,  \n" +
                "				c.mfgPNDescription,  \n" +
                "				IF(css.customerConsign = 0 , 'No', 'Yes') AS customerConsign,  \n" +
                "                IF(css.isReservedStock = 0 , 'No', 'Yes') AS reservedStock,  \n" +
                "				fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
                "                pd.refPackingSlipMaterialRecID AS packingSlipID,  \n" +
                "				FUN_GETPACKINGSLIPNUMBERBYID(pd.refPackingSlipMaterialRecID) AS packingSlipNumber,  \n" +
                "				css.binID,  \n" +
                "				fun_getBinNameByID(css.binID) location,  \n" +
                "				fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "				fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "				css.expiryDate,  \n" +
                "				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "				css.isDeleted  \n" +
                "		FROM component_sid_stock css  \n" +
                "		INNER JOIN component c ON css.refcompid = c.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = css.id AND cp.isDeleted = 0  \n" +
                "		LEFT JOIN packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID AND pd.isDeleted = 0  \n" +
                "		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END) GROUP BY css.id;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5480,'2.00','V1','Task 38330: Manage Customer Consign UMID changes - UMID Elastic search changes - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    case 5480:
        allDbChangesArray.push(
        /* **************************** New Script -> 03-11-2021 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
            "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	-- IN pIsMFG TINYINT(1),  \n" +
            "	IN pmfgType VARCHAR(20),  \n" +
            "	IN pisCustOrDisty TINYINT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
            "    DECLARE vTimeZone VARCHAR(50);  \n" +
            "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
            "  \n" +
            "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
            "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
            "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
            "		mc.isSupplierEnable,  \n" +
            "		mc.externalSupplierOrder,  \n" +
            "		mc.systemID,mc.customerSystemID,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
            "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
            "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
            "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
            "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
            "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
            "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
            "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
            "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
            "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
            "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
            "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
            "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isCustMapping=0 and smm.isDeleted= 0) mappingMfr,  \n" +
            "        (SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(scm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst scm WHERE scm.supplierid=mc.id and scm.isCustMapping=1 and scm.isDeleted= 0) customerMapping,  \n" +
            "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
            "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
            "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
            "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
            "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
            "            wbw.acquired,  \n" +
            "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
            "        '@@@',fun_getUserNameByID(createdBy),  \n" +
            "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
            "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
            "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
            "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
            "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
            "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
            "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
            "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
            "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
            "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
            "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
            "		 ,gc.gencCategoryName,  \n" +
            "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
            "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
            "		END AS isCustOrDistyText,  \n" +
            "        mc.displayOrder,  \n" +
            "        mc.invoicesRequireManagementApproval,  \n" +
            "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
            "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
            "		mc.taxID,  \n" +
            "        mc.accountRef,  \n" +
            "        mc.paymentMethodID,  \n" +
            "		pc.gencCategoryName paymentMethodName,  \n" +
            "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
            "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
            "		mc.acctId  \n" +
            "	FROM mfgcodemst mc  \n" +
            "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
            "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
            "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
            "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
            "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
            "			FROM  who_bought_who wbwi  \n" +
            "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
            "            AND wbwi.isDeleted = 0) wbw  \n" +
            "			ON wbw.buyTo = mc.id  \n" +
            "	WHERE mc.isdeleted = 0  \n" +
            "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
            "  \n" +
            "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "   /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	 PREPARE query1 FROM @SQLStatement2;  \n" +
            "	 EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 03-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5481,'2.00','V1',' getting error from Sproc_GetManufacturer sp - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5481:
        allDbChangesArray.push(
        /* **************************** New Script -> 03-12-2021 *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
            "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
            "	IN psalesorderDetID INT ,  \n" +
            "	IN packingSlipID INT,  \n" +
            "	IN ppackingslipDetID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "      SELECT ss.shippingID,  \n" +
            "        ss.sDetId,  \n" +
            "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
            "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
            "        ss.qty,  \n" +
            "        ss.shippingDate,  \n" +
            "        (CASE WHEN ss.description is not null THEN CONCAT_WS(',',ss.releaseNotes,  ss.description)  \n" +
            "			 ELSE ss.releaseNotes END ) releaseNotes,  \n" +
            "        sd.tentativeBuild,  \n" +
            "        sd.qty AS poQty,  \n" +
            "        sd.partID,  \n" +
            "        sd.price,  \n" +
            "        sd.lineID,  \n" +
            "        sd.internalComment,  \n" +
            "        sd.partDescription,  \n" +
            "        sd.remark,  \n" +
            "        c.iscustom,  \n" +
            "		c.mfgpn,  \n" +
            "		c.mfgpndescription,  \n" +
            "		c.pidcode,  \n" +
            "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
            "		c.nickName,  \n" +
            "		c.mfgcodeID,  \n" +
            "		sd.originalPOQty,  \n" +
            "		fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
            "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
            "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
            "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
            "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
            "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
            "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
            "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
            "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
            "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
            "		(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
            "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
            "			AND cpd.isdeleted=0) shippedQty ,  \n" +
            "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
            "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
            "		c.partType,  \n" +
            "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
            "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
            "        sd.refRFQGroupID,  \n" +
            "        sd.refRFQQtyTurnTimeID  ,  \n" +
            "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
            "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
            "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
            "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
            "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
            "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
            "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
            "		c.category partCategory  \n" +
            "	FROM salesshippingmst ss  \n" +
            "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
            "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
            "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
            "	WHERE sd.id=psalesorderDetID  \n" +
            "	AND  sd.isDeleted = 0 AND  \n" +
            "	(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
            "		ss.qty > (SELECT  IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
            "			AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
            "		ELSE  ss.qty=ss.qty  END)  \n" +
            "	AND ss.isdeleted=0  \n" +
            "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
            "  \n" +
            "-- all list of shipping line with other charges  \n" +
            "	SELECT NULL AS shippingID,  \n" +
            "			sDetId,  \n" +
            "			custPOLineNumber,  \n" +
            "			NULL releaseNumber,  \n" +
            "			qty,  \n" +
            "			NULL shippingDate,  \n" +
            "			releaseNotes,  \n" +
            "			tentativeBuild,  \n" +
            "			poQty,  \n" +
            "			partID,  \n" +
            "			price,  \n" +
            "			lineID,  \n" +
            "			partDescription,  \n" +
            "			mfgPN,  \n" +
            "			mfgPNDescription,  \n" +
            "			unitMeaser,  \n" +
            "			nickName,  \n" +
            "			pidcode,  \n" +
            "			NULL shippingMethodID,  \n" +
            "			NULL shippingAddressID,  \n" +
            "			mfgcodeID,  \n" +
            "			mfgName,  \n" +
            "			rohsIcon,  \n" +
            "			rohsName,  \n" +
            "			rohsStatusID,  \n" +
            "			standards,  \n" +
            "			shippedQty   ,  \n" +
            "			remark,  \n" +
            "			internalcomment,  \n" +
            "			mfgPnwihLineId,  \n" +
            "			refSODetID,  \n" +
            "			refSOReleaseLineID,  \n" +
            "			frequency,  \n" +
            "			originalPOQty,  \n" +
            "			frequencyType  \n" +
            "    FROM (SELECT  \n" +
            "			NULL AS shippingID,  \n" +
            "			sd.id AS sDetId,  \n" +
            "			sd.custPOLineNumber custPOLineNumber,  \n" +
            "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
            "			NULL releaseNumber,  \n" +
            "			sd.qty,  \n" +
            "			NULL shippingDate,  \n" +
            "			sd.remark releaseNotes,  \n" +
            "			sd.tentativeBuild,  \n" +
            "			sd.qty AS poQty,  \n" +
            "			sd.partID,  \n" +
            "			sd.price,  \n" +
            "			sd.lineID,  \n" +
            "			sd.partDescription,  \n" +
            "			c.mfgPN,  \n" +
            "			c.mfgPNDescription,  \n" +
            "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
            "			c.nickName,  \n" +
            "			c.pidcode,  \n" +
            "			sd.refSODetID,  \n" +
            "			sd.refSOReleaseLineID,  \n" +
            "			sd.frequency,  \n" +
            "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
            "			NULL shippingMethodID,  \n" +
            "			NULL shippingAddressID,  \n" +
            "			c.mfgcodeID,  \n" +
            "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
            "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
            "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
            "			c.rohsStatusID,  \n" +
            "			sd.originalPOQty,  \n" +
            "			fun_getCertificationByPartID(c.id)standards,  \n" +
            "			sd.frequencyType,  \n" +
            "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
            "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
            "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
            "			sd.remark,  \n" +
            "			sd.internalcomment  \n" +
            "		FROM salesorderdet sd  \n" +
            "		LEFT JOIN component c ON c.id=sd.partid  \n" +
            "		WHERE sd.refSODetID=psalesorderDetID  \n" +
            "		AND sd.isdeleted=0  \n" +
            "    ) a;  \n" +
            "  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 03-11-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5482,'2.00','V1','Sproc_GetPendingSalesShippingDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5482:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-11-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "    # Customer Invoice Master table details  \n" +
                "    SELECT  cp.id,  \n" +
                "		cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "		cp.packingSlipNumber,  \n" +
                "		cp.packingSlipDate,  \n" +
                "		cp.poDate,  \n" +
                "		cp.poNumber,  \n" +
                "        cp.poRevision,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,  \n" +
                "		cp.packingSlipComment,  \n" +
                "        cp.status,  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '  \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,  \n" +
                "        cp.billingAddress,  \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,  \n" +
                "        cp.systemID AS legalnumber,  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension,  \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '1.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "                LEFT JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "           LEFT JOIN  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "	SELECT  \n" +
                "		cpd.id,  \n" +
                "		cpd.partId,  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,  \n" +
                "		cpd.lineID,  \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,  \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,  \n" +
                "        c.iscustom,  \n" +
                "        c.partType,  \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		  WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE  \n" +
                "			  ''  \n" +
                "			END) AS mfgPN ,  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			'Other Charges'  \n" +
                "		ELSE  \n" +
                "			fun_getMfgNameByPartID(cpd.partId)  \n" +
                "			END) AS  mfgName,  \n" +
                "		IFNULL(c.rev, '') AS revision,  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,  \n" +
                "		cpd.shipQty AS qty,  \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,  \n" +
                "		CONCAT(  \n" +
                "		IFNULL(replace(cpd.assyDescription,'  \n" +
                "','<br/>'), ''),'<br/>',  \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "                IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),  \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,  \n" +
                "            IFNULL(replace(cpd.shippingNotes,'  \n" +
                "','<br/>'),'')) AS DESCRIPTION  \n" +
                "  \n" +
                "	FROM  \n" +
                "		customer_packingslip_det cpd  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "	WHERE  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;  \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report  \n" +
                "    SELECT get_totalCustomerInvoiceReceivedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.shipQty * cpd.unitPrice),0) AS totalLinePrice,  \n" +
                "		IFNULL(SUM(totalLineMiscPrice),0) AS totalLineMiscPrice,  \n" +
                "        IFNULL(@totalRecvAmt,0) As totalRecvAmt  \n" +
                "	FROM  customer_packingslip_det cpd  \n" +
                "	LEFT JOIN (SELECT refCustomerPackingSlipDetID, SUM(cpod.qty * cpod.price) AS totalLineMiscPrice  \n" +
                "				FROM customer_packingslip_otherexpense_details cpod WHERE cpod.isdeleted = 0  \n" +
                "		GROUP BY cpod.refCustomerPackingSlipDetID) cpod ON cpod.refCustomerPackingSlipDetID = cpd.id  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND  cpd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus,			 cst.isReservedStock  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate ASC  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN,  \n" +
                "                0 AS isReservedStock  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.packingSlipDetID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus,		isReservedStock  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus, 		isReservedStock  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d ORDER BY internalDateCodeInDate ASC;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy,  \n" +
                "                cst.isReservedStock  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate ASC;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5483,'2.00','V1','Bug 38362 && Bug 38353 - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5483:
            allDbChangesArray.push(
            /* **************************** New Script -> 11-10-2021 *********************************** */
                "DROP VIEW IF EXISTS  vu_inv_ps_so_line_detail;  \n" +
                "CREATE VIEW `vu_inv_ps_so_line_detail` AS  \n" +
                "    SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `invmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `invmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `invdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        `invmst`.`invoiceNumber` AS `invoiceNumber`,  \n" +
                "        `invmst`.`invoiceDate` AS `invoiceDate`,  \n" +
                "        `invdet`.`lineID` AS `invLineID`,  \n" +
                "        `invmst`.`id` AS `invoiceId`,  \n" +
                "        `invdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((((`customer_packingslip` `invmst`  \n" +
                "        JOIN `customer_packingslip_det` `invdet` ON (((`invdet`.`refCustPackingSlipID` = `invmst`.`id`)  \n" +
                "            AND (`invdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_packingslip` `packingmst` ON (((`packingmst`.`refCustInvoiceID` = `invmst`.`id`)  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`transType` = 'P'))))  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0)  \n" +
                "            AND (`packingdet`.`reflineID` = `invdet`.`reflineID`)  \n" +
                "            AND (IFNULL(`packingdet`.`shippingId`, 0) = IFNULL(`invdet`.`shippingId`, 0))  \n" +
                "            AND (IFNULL(`packingdet`.`refCustPackingSlipDetID`, 0) = IFNULL(`invdet`.`refCustPackingSlipDetID`, 0)))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`invmst`.`transType` = 'I')  \n" +
                "            AND (`invmst`.`isDeleted` = 0))  \n" +
                "    GROUP BY `sm`.`salesOrderNumber` , `sm`.`soDate` , IFNULL(`sm`.`poNumber`, `invmst`.`poNumber`) , IFNULL(`sm`.`poDate`, `invmst`.`poDate`) , `sd`.`lineID` , IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "            `invdet`.`custPOLineID`) , IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "            `invdet`.`custPOLineID`) , IFNULL(`packingdet`.`refCustPackingSlipDetID`,  \n" +
                "            `invdet`.`refCustPackingSlipDetID`) , `packingmst`.`packingSlipNumber` , `packingmst`.`packingSlipDate` , `packingdet`.`lineID` , `invmst`.`invoiceNumber` , `invmst`.`invoiceDate` , `invdet`.`lineID`  \n" +
                "    UNION SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `packingmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `packingmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `packingdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        NULL AS `invoiceNumber`,  \n" +
                "        NULL AS `invoiceDate`,  \n" +
                "        NULL AS `invLineID`,  \n" +
                "        NULL AS `invoiceId`,  \n" +
                "        `packingdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((`customer_packingslip` `packingmst`  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`packingmst`.`transType` = 'P')  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`refCustInvoiceID` IS NULL))  \n" +
                "    GROUP BY `sm`.`salesOrderNumber` , `sm`.`soDate` , IFNULL(`sm`.`poNumber`, `packingmst`.`poNumber`) , IFNULL(`sm`.`poDate`, `packingmst`.`poDate`) , `sd`.`lineID` , IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "            `packingdet`.`custPOLineID`) , `packingmst`.`packingSlipNumber` , `packingmst`.`packingSlipDate` , `packingdet`.`lineID`;  \n" +	
            /* **************************** Add Script Version -> 11-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5484,'2.00','V1','vu_inv_ps_so_line_detail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5484:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-11-2021  ********************************* */
                "ALTER TABLE component_packagingmst ADD sourceName varchar(100);  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT,  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
                "                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						p.name packagingType,  \n" +
                "                        p.sourceName,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        ps.packingSlipModeStatus,  \n" +
                "                        IF(ps.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	#select @temp_Sproc_RetrieveNonUMIDStockList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
                "	IN pPackagingID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pUIDId INT,  \n" +
                "    IN pType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipId INT;  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "  \n" +
                "    IF(pType = 'UC') THEN  \n" +
                "		SELECT			vucp.packingSlipID,			vucp.PartId,	vucp.packingSlipDetID,  \n" +
                "						vucp.packingSlipNumber,  	vucp.packingSlipSerialNumber,  \n" +
                "                        IFNULL(c.umidSPQ,0) AS partPackagingMinQty,  \n" +
                "						vucp.BinID,  \n" +
                "                        cp.name packagingType,  \n" +
                "                        cp.sourceName,  \n" +
                "                        fun_getBinNameByID(vucp.BinID) AS binName,  \n" +
                "						vucp.packagingID AS packaging,  \n" +
                "						vucp.InQty AS receivedQty,					vucp.UMIDCreatedQty,  \n" +
                "                        vucp.returnQty,  			vucp.BalanceQty,  \n" +
                "						vucp.receivedStatus,    	ps.packingSlipModeStatus,  \n" +
                "                        IF(vucp.receivedStatus = 'P' OR vucp.receivedStatus = 'R' OR ps.packingSlipModeStatus = 'D',TRUE,FALSE) AS isDisable,  \n" +
                "                        ps.isCustConsigned,			ps.CustomerID,  \n" +
                "                        psd.isLineCustConsigned, 	psd.LineCustomerID  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on c.id = vucp.partId AND c.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst cp on cp.id = vucp.packagingID AND cp.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				JOIN	packing_slip_material_receive_det psd on psd.id = vucp.packingSlipDetID AND psd.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 AND vucp.BinID = pBinID AND vucp.partId = pPartId GROUP BY vucp.packingSlipDetID;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "				 p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus  \n" +
                "			INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus  \n" +
                "			FROM  \n" +
                "				component_sid_stock c  \n" +
                "				JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "			packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
                "			fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
                "			fun_getBinNameByID(BinID) binName,  \n" +
                "			fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
                "			fun_getPackagingNameByID(packagingID) packaging,  \n" +
                "			fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
                "		FROM  \n" +
                "			vu_umid_creation_pending vu  \n" +
                "		WHERE  \n" +
                "			EXISTS(SELECT  \n" +
                "				1  \n" +
                "				FROM  \n" +
                "				component_sid_stock t WHERE  \n" +
                "					t.fromBin = vu.BinID  \n" +
                "					AND t.refcompid = vu.PartId  \n" +
                "					AND t.packaging = vu.packagingID  \n" +
                "					AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
                "  \n" +
                "		SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT,  \n" +
                "    IN pBinID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "    DECLARE v_pendingPartCount INT;  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
                "    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
                "    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");           \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                  \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* If component id is found */  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
                "					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
                "                    IF(v_pendingPartCount = 0) THEN  \n" +
                "						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
                "                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
                "						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
                "								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
                "						FROM vu_umid_creation_pending vu  \n" +
                "                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
                "                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
                "								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
                "						IF(@packingSlipModeStatus = 'D') THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
                "                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
                "							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
                "                        END IF;  \n" +
                "                    END IF;  \n" +
                "                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							mg.mfgcode AS mfgCode,  \n" +
                "							mg.mfgName AS mfgName,  \n" +
                "							cp.name AS packagingName,  \n" +
                "							cp.sourceName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "                            csp.name AS supplierPackagingName,  \n" +
                "							csp.sourceName AS supplierSourceName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
                "                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5485,'2.00','V1','Bug 38359: Dev Testing for User Story 37433: UMID Creation Client Improvement points - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5485:
            allDbChangesArray.push(
            /* **************************** New Script -> 11-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoDetCompletedStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    /*IF pIncludeCompletedPO IS NOT NULL OR pIncludeCompletedPO  = 1 THEN  \n" +
                "  \n" +
                "    END IF;*/  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "		/*SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR soDetail.woComment like '%\",pSearchText,\"%' )\");  */  \n" +
                "    /*ELSE  \n" +
                "        SET detailWhereClause = '1=1';  */  \n" +
                "    END IF;  \n" +
                "-- select headerWhereClause;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "            fun_GetSalesOrderHeaderWorkStatus(som.id) workingStatus  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where (salesOrder.workingStatus in (1,-1) OR salesOrder.workingStatus = \",ifnull(pSoDetCompletedStatus,1),\") and \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by mfgName\", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,partSpecialNote,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  , cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt, cpsIndex ,isReadyToShip  ,cpsDetailShippedQty  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "-- select @SQLStatement1 ;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 11-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5486,'2.00','V1','Sproc_getSalesOrderListAgainstShipment  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5486:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-11-2021  ********************************* */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT,  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN LIKE '%\", pScanMPNPID ,\"%' OR pidCode LIKE '%\", pScanMPNPID ,\"%' ) \");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN = '\", pScanMPNPID ,\"' OR pidCode = '\", pScanMPNPID ,\"' ) \");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
                "                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						p.name packagingType,  \n" +
                "                        p.sourceName,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        ps.packingSlipModeStatus,  \n" +
                "                        IF(ps.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5487,'2.00','V1','Bug 38359: Dev Testing for User Story 37433: UMID Creation Client Improvement points - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5487:
            allDbChangesArray.push(
            /* **************************** New Script -> 09-11-2021 *********************************** */
            "ALTER TABLE purchase_order_mst ADD COLUMN isNonUMIDStock Tinyint default 0;  \n" +
            "ALTER TABLE purchase_order_det ADD COLUMN isNonUMIDStock Tinyint default 0;  \n" +
            "ALTER TABLE packing_slip_material_receive ADD COLUMN isNonUMIDStock Tinyint default 0;  \n" +
            /* **************************** Add Script Version -> 09-11-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5488,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5488:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-11-2021  ********************************* */
                "DROP VIEW IF EXISTS vu_umid_creation_pending; \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`packingSlipID` AS `packingSlipID`,  \n" +
                "        `psr`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `psr`.`isNonUMIDStock` AS `isPackingSlipNonUMIDStock`,  \n" +
                "        `a`.`packingSlipDetID` AS `packingSlipDetID`,  \n" +
                "        `a`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "        `a`.`packagingID` AS `packagingID`,  \n" +
                "        `a`.`BinID` AS `BinID`,  \n" +
                "        `a`.`warehouseID` AS `warehouseID`,  \n" +
                "        `a`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `a`.`partId` AS `PartId`,  \n" +
                "        `a`.`nickname` AS `nickname`,  \n" +
                "        SUM(`a`.`InQty`) AS `InQty`,  \n" +
                "        IFNULL(`a`.`UMIDCreatedQty`, 0) AS `UMIDCreatedQty`,  \n" +
                "        SUM(`a`.`returnQty`) AS `returnQty`,  \n" +
                "        ((SUM(IFNULL(`a`.`InQty`, 0)) - IFNULL(`a`.`UMIDCreatedQty`, 0)) - SUM(IFNULL(`a`.`returnQty`, 0))) AS `BalanceQty`,  \n" +
                "        `a`.`receivedStatus` AS `receivedStatus`,  \n" +
                "        `a`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "    FROM  \n" +
                "        ((SELECT  \n" +
                "            `psd`.`refPackingSlipMaterialRecID` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psd`.`packagingID` AS `packagingID`,  \n" +
                "                `psd`.`binID` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psd`.`partID` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                `psd`.`receivedQty` AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                0 AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "                `psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "        FROM  \n" +
                "            `packing_slip_material_receive_det` `psd`  \n" +
                "        WHERE  \n" +
                "            (EXISTS( SELECT  \n" +
                "                    1  \n" +
                "                FROM  \n" +
                "                    `packing_slip_material_receive` `p`  \n" +
                "                WHERE  \n" +
                "                    ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)  \n" +
                "                        AND (`p`.`receiptType` = 'P')  \n" +
                "                        AND (`p`.`isDeleted` = 0)))  \n" +
                "                AND (`psd`.`binID` IS NOT NULL)  \n" +
                "                AND (`psd`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`deletedAt` IS NULL)) UNION ALL SELECT  \n" +
                "            `psds`.`refPackingSlipId` AS `packingSlipID`,  \n" +
                "                `psd`.`id` AS `packingSlipDetID`,  \n" +
                "                `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "                `psds`.`packagingId` AS `packagingID`,  \n" +
                "                `psds`.`binId` AS `BinID`,  \n" +
                "                `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "                `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "                `psds`.`partId` AS `partId`,  \n" +
                "                `psd`.`nickname` AS `nickname`,  \n" +
                "                0 AS `InQty`,  \n" +
                "                `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "                `psds`.`qty` AS `returnQty`,  \n" +
                "                `psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "                `psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "        FROM  \n" +
                "            ((`packing_slip_material_receive_det_stock` `psds`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`psd`.`id` = `psds`.`refPackingSlipDetId`)))  \n" +
                "        JOIN `warehousemst` `w` ON (((`w`.`ID` = `psd`.`warehouseID`)  \n" +
                "            AND (`psd`.`refPackingSlipMaterialRecID` = `psds`.`refPackingSlipId`)  \n" +
                "            AND (`psd`.`packagingID` = `psds`.`packagingId`)  \n" +
                "            AND (`psd`.`binID` = `psds`.`binId`)  \n" +
                "            AND (`psd`.`partID` = `psds`.`partId`))))  \n" +
                "        WHERE  \n" +
                "            ((`psds`.`type` = 'PU')  \n" +
                "                AND (`psds`.`isDeleted` = 0)  \n" +
                "                AND (`psd`.`isDeleted` = 0))) `a`  \n" +
                "        JOIN `packing_slip_material_receive` `psr` ON (((`psr`.`id` = `a`.`packingSlipID`)  \n" +
                "            AND (`psr`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`a`.`isNonUMIDStock` = 0)  \n" +
                "            AND (`psr`.`isNonUMIDStock` = 0))  \n" +
                "    GROUP BY `a`.`packingSlipID` , `a`.`packagingID` , `a`.`BinID` , `a`.`partId` , `a`.`receivedStatus` , `a`.`packingSlipDetID`;  \n" +
                /* **************************** Add Script Version -> 09-11-2021 ************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5489,'2.00','V1','Bug 38359: Dev Testing for User Story 37433: UMID Creation Client Improvement points - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5489:
            allDbChangesArray.push(
            /* **************************** New Script -> 11-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingCustomerSalesDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingCustomerSalesDetails`(  \n" +
                "	IN psalesorderID INT ,  \n" +
                "	IN packingSlipID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                " SELECT  \n" +
                "        sd.id,  \n" +
                "        IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "		CONCAT(c.pidcode,' | ',IFNULL(sd.custPOLineNumber,1)) soDets,  \n" +
                "		(SELECT CASE WHEN SUM(cpd.shipQty)>=sd.qty THEN TRUE ELSE FALSE END  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE cpd.refsalesorderDetid=sd.id AND cpd.isDeleted = 0  \n" +
                "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip  \n" +
                "						WHERE isDeleted = 0  \n" +
                "						AND transType = 'P')) isShipped  ,  \n" +
                "		sd.partCategory,  \n" +
                "		c.partType    ,  \n" +
                "		c.rfqOnly,  \n" +
                "		c.PIDCode  ,  \n" +
                "		c.partStatus ,  \n" +
                "		sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName	,  \n" +
                "        c.category partCategory  \n" +
                "	FROM salesorderdet sd  \n" +
                "		LEFT JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "	WHERE sd.refsalesOrderID=psalesorderID  \n" +
                "	AND sd.isdeleted=0 AND sd.isCancle=0  \n" +
                "	AND sd.partCategory IN (2,3)  \n" +
                "    AND c.partType != 4;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 11-10-2021 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5490,'2.00','V1','Sproc_GetPendingCustomerSalesDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5490:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_SaveDuplicatePurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicatePurchaseOrder`(  \n" +
                "		IN pPOID INT,  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewPOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vOldPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vNewPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vmfgPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM purchase_order_mst WHERE id=pPOID;  \n" +
                "			-- insert purchase order header detail  \n" +
                "		INSERT INTO purchase_order_mst(supplierID,poNumber,poDate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,`status`,  \n" +
                "		pocomment,shippingComment,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,serialNumber,poRevision,carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,  \n" +
                "		isBlanketPO,contactPersonEmpID,poWorkingStatus,shippingAddress,isCustConsigned,CustomerID,isNonUMIDStock)  \n" +
                "		SELECT supplierID,pPONumber,pPODate,termsID,shippingMethodID,supplierAddressID,shippingAddressID,intermediateshipmentID,freeonboardID,0,  \n" +
                "		pocomment,shippingComment,0,puserID,puserID,puserRoleID,puserRoleID,pSerialNumber,'00',carrierID,carrierAccountNumber,shippingInsurance,supplierAddress,intermediateAddress,  \n" +
                "		isBlanketPO,contactPersonEmpID,'P',shippingAddress,isCustConsigned,CustomerID,isNonUMIDStock FROM purchase_order_mst WHERE id=pPOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewPOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseOrder AS  \n" +
                "  \n" +
                "				SELECT pod.id,row_number() over (PARTITION BY pod.refPurchaseOrderID) rowNumber,pod.mfgPartID FROM purchase_order_det pod  \n" +
                "					JOIN component c on c.id = pod.mfgPartID and c.partStatus != -3  \n" +
                "					WHERE pod.refPurchaseOrderID=pPOID AND pod.isdeleted=0;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempPurchaseOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old purchase order detail id  \n" +
                "				SELECT id,mfgPartID INTO vOldPurchaseOrderDetID,vmfgPartID FROM tempPurchaseOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new purchase order detail  \n" +
                "  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,0,puserID,puserID,puserRoleID,puserRoleID,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock FROM purchase_order_det WHERE id=vOldPurchaseOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,pod.mfgPartID,pod.supplierPartID,pod.packagingID,c.mfgPNDescription,pod.pcbPerArray,pod.rohsstatusID,pod.internalRef,pod.salesCommissionTo,pod.totalrelease,pod.qty,pod.price,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=pod.mfgPartID AND im.requiementType='C' AND cid.category='P' AND im.isdeleted=0),pod.category,0,puserID,puserID,puserRoleID,puserRoleID,pod.lineID,pod.supplierQuoteNumber,isLineCustConsigned,lineCustomerID,pod.isNonUMIDStock FROM purchase_order_det pod JOIN component c ON c.id=pod.mfgPartID  \n" +
                "			 WHERE pod.id=vOldPurchaseOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewPurchaseOrderDetID;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO purchase_order_line_othercharges(refPurchaseOrderDetID,partID,qty,price,frequency,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			 SELECT  vNewPurchaseOrderDetID,partID,qty,price,frequency,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_othercharges  \n" +
                "			 WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- check for purchase requirement  \n" +
                "			 IF(pisKeepPO=1)THEN  -- keep same requirement of po  \n" +
                "  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID,instruction,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_requirement_det WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID  \n" +
                "			  AND isdeleted=0;  \n" +
                "  \n" +
                "			 ELSE  \n" +
                "			 -- get part requirement from part master  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID, im.requirement,0,puserID,puserID,puserRoleID,puserRoleID  \n" +
                "			  FROM componenet_inspection_requirement_det cid  JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=vmfgPartID AND im.requiementType='R' AND cid.category='P' AND im.isdeleted=0 ;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "				  -- to save shipping details  \n" +
                "				  INSERT INTO purchase_order_line_release_det (refPurchaseOrderDetID,qty,shippingdate,promisedShipDate,releaseNumber,shippingmethodid,shippingAddressID,releaseNotes,additionalNotes,isdeleted,  \n" +
                "		 createdby,updatedby,createByRoleId,updateByRoleId,poLineWorkingStatus)  \n" +
                "  \n" +
                "		SELECT vNewPurchaseOrderDetID,pord.qty,DATE_ADD( pPODate, INTERVAL DATEDIFF(pord.shippingDate, vOldPODate) DAY),DATE_ADD(pPODate, INTERVAL DATEDIFF(pord.promisedShipDate,vOldPODate) DAY),  \n" +
                "		pord.releaseNumber,pord.shippingmethodid,pord.shippingAddressID,pord.releaseNotes,pord.additionalNotes,0,puserID,puserID,puserRoleID,puserRoleID,'P'  \n" +
                "		FROM  \n" +
                "		purchase_order_line_release_det pord  \n" +
                "		WHERE pord.isdeleted=0 AND pord.refPurchaseOrderDetID= vOldPurchaseOrderDetID;  \n" +
                "  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "  \n" +
                "			  SELECT   vNewPOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                vups.poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.partType=4 and a.poWorkingStatus=\"C\" then \"C\" else ifnull(a.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.poWorkingStatus=\"C\" then \"C\" when a.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5491,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5491:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MPN',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SPN',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Description',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCB Per Array',CAST(OLD.pcbPerArray AS CHAR),  \n" +
                "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Internal Ref#',CAST(OLD.internalRef AS CHAR),  \n" +
                "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Total Release',CAST(OLD.totalRelease AS CHAR),  \n" +
                "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Qty',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Price',CAST(OLD.price AS CHAR),  \n" +
                "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Comment',CAST(OLD.lineComment AS CHAR),  \n" +
                "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Supplier Quote#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
                "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Packaging',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
                "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'RoHS Requirement',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
                "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalLineComment AS CHAR),  \n" +
                "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PO Line Do Not Create UMID Stock',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Cancellation Confirmed by Supplier',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5492,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5492:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderElasticSearchDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderElasticSearchDetail`(  \n" +
                "	IN poID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    IF(pRequiredCount) THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "		WHERE pom.isdeleted=0 AND pod.isDeleted = 0 AND pom.id=IFNULL(poID ,pom.id);  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			pod.id,  \n" +
                "			pom.id AS purchaseID,  \n" +
                "			DATE_FORMAT(pom.poDate , \"%m/%d/%y\") poDate,  \n" +
                "			pom.poNumber,  \n" +
                "			pom.poRevision,  \n" +
                "			DATE_FORMAT(pom.soDate , \"%m/%d/%y\") soDate,  \n" +
                "			pom.soNumber,  \n" +
                "			fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "			pom.supplierID,  \n" +
                "			pod.supplierQuoteNumber,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "			pom.termsID,  \n" +
                "			pom.shippingMethodID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "			pom.carrierID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "			pom.carrierAccountNumber,  \n" +
                "			pom.poComment,  \n" +
                "			pod.internalRef,  \n" +
                "			pom.serialNumber,  \n" +
                "			c.PIDCode,  \n" +
                "			c.mfgPN,  \n" +
                "			pod.mfgPartID,  \n" +
                "			CONCAT(emp.firstName,' ',emp.lastName) contactPerson,  \n" +
                "			pom.contactPersonEmpID,  \n" +
                "			fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "			c.mfgcodeID,  \n" +
                "			pod.partDescription,  \n" +
                "			pod.qty,  \n" +
                "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                "			pod.packagingID,  \n" +
                "			fun_getPackagingNameByID(pod.packagingID) packagingName,  \n" +
                "			pom.serialNumber,  \n" +
                "			case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatus        ,  \n" +
                "			pom.cancleReason,  \n" +
                "			case when pom.CancellationConfirmed=1 then 'Yes' else 'No' end CancellationConfirmed,  \n" +
                "			pod.isDeleted,  \n" +
                "			CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "			CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "			pom.customerID,  \n" +
                "			fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) customerName,  \n" +
                "			pod.lineCustomerID,  \n" +
                "			fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, vMfgCodeFormat) lineCustomerName,  \n" +
                "            CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "			CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isLineNonUMIDStockValue  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "        LEFT JOIN mfgcodemst cm ON cm.id=c.mfgcodeID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN mfgcodemst m ON m.id=pom.customerID  \n" +
                "        LEFT JOIN mfgcodemst mc ON mc.id=pod.lineCustomerID  \n" +
                "		WHERE pom.id=IFNULL(poID ,pom.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(pod.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(pom.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pom.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "    SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgCode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(SUM(psmrd.orderedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0) - IFNULL(SUM(psmrd.packingSlipQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance,  \n" +
                "                CASE WHEN psmr.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "				CASE WHEN psmrd.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN psmrd.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                psmr.CustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrmc.mfgCode, psmrmc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "				psmrd.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrdmc.mfgCode, psmrdmc.mfgName, vMfgCodeFormat) lineCustomerName,  \n" +
                "                CASE WHEN psmr.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END lineNonUMIDStockValue  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT JOIN mfgcodemst psmrmc ON psmrmc.id=psmr.CustomerID  \n" +
                "        LEFT JOIN mfgcodemst psmrdmc ON psmrdmc.id=psmrd.LineCustomerID  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5493,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5493:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=0, LineCustomerID=NULL WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF OLD.receiptType = \"P\" AND NEW.isNonUMIDStock != OLD.isNonUMIDStock THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isNonUMIDStock=0 WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5494,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5494:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
                "	IN ppurchaseOrderID INT,  \n" +
                "	IN ppurchaseOrderDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vPODetIDs VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT group_concat(id) INTO vPODetIDs FROM purchase_order_det WHERE  refPurchaseOrderID=ppurchaseOrderID AND isDeleted=0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
                "		   select ID,Tablename,RefTransID,Colname,Oldval,Newval,fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		from dataentrychange_auditlog where (RefTransID=\",ppurchaseOrderID,\" and Tablename='PURCHASEORDERMST')  \n" +
                "         \");  \n" +
                "  \n" +
                "  IF ppurchaseOrderDetId IS NOT NULL THEN  \n" +
                "         SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID = \",ppurchaseOrderDetId,\")\");  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID IN (\",vPODetIDs,\"))\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID,  \n" +
                "        pod.isNonUMIDStock,  \n" +
                "        CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5495,'2.00','V1',' User Story 38296: Improvement Points given by Client 01 11 2021 for PO and Packing Slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5495:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b           inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_release_return_status_det`;  \n" +
                "CREATE VIEW `vu_release_plan_release_return_status_det` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL)  \n" +
                "            AND (`s`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5496,'2.00','V1','User Story 38248: Main branch - Kit Flow related Changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 5363:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 08-10-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 08-10-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5364,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/